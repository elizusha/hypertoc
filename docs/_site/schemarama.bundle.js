var schemarama =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 102);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

const rdf = __webpack_require__(20)

const handler = {
  apply: (target, thisArg, args) => target(args[0]),
  get: (target, property) => target(property)
}

function namespace (baseIRI, { factory = rdf } = {}) {
  const builder = (term = '') => factory.namedNode(`${baseIRI}${term.raw || term}`)

  return typeof Proxy === 'undefined' ? builder : new Proxy(builder, handler)
}

module.exports = namespace


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    XSD  = 'http://www.w3.org/2001/XMLSchema#',
    SWAP = 'http://www.w3.org/2000/10/swap/';

/* harmony default export */ __webpack_exports__["a"] = ({
  xsd: {
    decimal: XSD + 'decimal',
    boolean: XSD + 'boolean',
    double:  XSD + 'double',
    integer: XSD + 'integer',
    string:  XSD + 'string',
  },
  rdf: {
    type:       RDF + 'type',
    nil:        RDF + 'nil',
    first:      RDF + 'first',
    rest:       RDF + 'rest',
    langString: RDF + 'langString',
  },
  owl: {
    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',
  },
  r: {
    forSome: SWAP + 'reify#forSome',
    forAll:  SWAP + 'reify#forAll',
  },
  log: {
    implies: SWAP + 'log#implies',
  },
});


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(51);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


const graphTypes = __webpack_require__(10);
const types = __webpack_require__(6);
// TODO: move `IdentifierIssuer` to its own package
const IdentifierIssuer = __webpack_require__(32).IdentifierIssuer;
const JsonLdError = __webpack_require__(7);

// constants
const REGEX_LINK_HEADERS = /(?:<[^>]*?>|"[^"]*?"|[^,])+/g;
const REGEX_LINK_HEADER = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
const REGEX_LINK_HEADER_PARAMS =
  /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;

const DEFAULTS = {
  headers: {
    accept: 'application/ld+json, application/json'
  }
};

const api = {};
module.exports = api;
api.IdentifierIssuer = IdentifierIssuer;

/**
 * Clones an object, array, Map, Set, or string/number. If a typed JavaScript
 * object is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */
api.clone = function(value) {
  if(value && typeof value === 'object') {
    let rval;
    if(types.isArray(value)) {
      rval = [];
      for(let i = 0; i < value.length; ++i) {
        rval[i] = api.clone(value[i]);
      }
    } else if(value instanceof Map) {
      rval = new Map();
      for(const [k, v] of value) {
        rval.set(k, api.clone(v));
      }
    } else if(value instanceof Set) {
      rval = new Set();
      for(const v of value) {
        rval.add(api.clone(v));
      }
    } else if(types.isObject(value)) {
      rval = {};
      for(const key in value) {
        rval[key] = api.clone(value[key]);
      }
    } else {
      rval = value.toString();
    }
    return rval;
  }
  return value;
};

/**
 * Ensure a value is an array. If the value is an array, it is returned.
 * Otherwise, it is wrapped in an array.
 *
 * @param value the value to return as an array.
 *
 * @return the value as an array.
 */
api.asArray = function(value) {
  return Array.isArray(value) ? value : [value];
};

/**
 * Builds an HTTP headers object for making a JSON-LD request from custom
 * headers and asserts the `accept` header isn't overridden.
 *
 * @param headers an object of headers with keys as header names and values
 *          as header values.
 *
 * @return an object of headers with a valid `accept` header.
 */
api.buildHeaders = (headers = {}) => {
  const hasAccept = Object.keys(headers).some(
    h => h.toLowerCase() === 'accept');

  if(hasAccept) {
    throw new RangeError(
      'Accept header may not be specified; only "' +
      DEFAULTS.headers.accept + '" is supported.');
  }

  return Object.assign({Accept: DEFAULTS.headers.accept}, headers);
};

/**
 * Parses a link header. The results will be key'd by the value of "rel".
 *
 * Link: <http://json-ld.org/contexts/person.jsonld>;
 * rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
 *
 * Parses as: {
 *   'http://www.w3.org/ns/json-ld#context': {
 *     target: http://json-ld.org/contexts/person.jsonld,
 *     type: 'application/ld+json'
 *   }
 * }
 *
 * If there is more than one "rel" with the same IRI, then entries in the
 * resulting map for that "rel" will be arrays.
 *
 * @param header the link header to parse.
 */
api.parseLinkHeader = header => {
  const rval = {};
  // split on unbracketed/unquoted commas
  const entries = header.match(REGEX_LINK_HEADERS);
  for(let i = 0; i < entries.length; ++i) {
    let match = entries[i].match(REGEX_LINK_HEADER);
    if(!match) {
      continue;
    }
    const result = {target: match[1]};
    const params = match[2];
    while((match = REGEX_LINK_HEADER_PARAMS.exec(params))) {
      result[match[1]] = (match[2] === undefined) ? match[3] : match[2];
    }
    const rel = result['rel'] || '';
    if(Array.isArray(rval[rel])) {
      rval[rel].push(result);
    } else if(rval.hasOwnProperty(rel)) {
      rval[rel] = [rval[rel], result];
    } else {
      rval[rel] = result;
    }
  }
  return rval;
};

/**
 * Throws an exception if the given value is not a valid @type value.
 *
 * @param v the value to check.
 */
api.validateTypeValue = (v, isFrame) => {
  if(types.isString(v)) {
    return;
  }

  if(types.isArray(v) && v.every(vv => types.isString(vv))) {
    return;
  }
  if(isFrame && types.isObject(v)) {
    switch(Object.keys(v).length) {
      case 0:
        // empty object is wildcard
        return;
      case 1:
        // default entry is all strings
        if('@default' in v &&
          api.asArray(v['@default']).every(vv => types.isString(vv))) {
          return;
        }
    }
  }

  throw new JsonLdError(
    'Invalid JSON-LD syntax; "@type" value must a string, an array of ' +
    'strings, an empty object, ' +
    'or a default object.', 'jsonld.SyntaxError',
    {code: 'invalid type value', value: v});
};

/**
 * Returns true if the given subject has the given property.
 *
 * @param subject the subject to check.
 * @param property the property to look for.
 *
 * @return true if the subject has the given property, false if not.
 */
api.hasProperty = (subject, property) => {
  if(subject.hasOwnProperty(property)) {
    const value = subject[property];
    return (!types.isArray(value) || value.length > 0);
  }
  return false;
};

/**
 * Determines if the given value is a property of the given subject.
 *
 * @param subject the subject to check.
 * @param property the property to check.
 * @param value the value to check.
 *
 * @return true if the value exists, false if not.
 */
api.hasValue = (subject, property, value) => {
  if(api.hasProperty(subject, property)) {
    let val = subject[property];
    const isList = graphTypes.isList(val);
    if(types.isArray(val) || isList) {
      if(isList) {
        val = val['@list'];
      }
      for(let i = 0; i < val.length; ++i) {
        if(api.compareValues(value, val[i])) {
          return true;
        }
      }
    } else if(!types.isArray(value)) {
      // avoid matching the set of values with an array value parameter
      return api.compareValues(value, val);
    }
  }
  return false;
};

/**
 * Adds a value to a subject. If the value is an array, all values in the
 * array will be added.
 *
 * @param subject the subject to add the value to.
 * @param property the property that relates the value to the subject.
 * @param value the value to add.
 * @param [options] the options to use:
 *        [propertyIsArray] true if the property is always an array, false
 *          if not (default: false).
 *        [valueIsArray] true if the value to be added should be preserved as
 *          an array (lists) (default: false).
 *        [allowDuplicate] true to allow duplicates, false not to (uses a
 *          simple shallow comparison of subject ID or value) (default: true).
 *        [prependValue] false to prepend value to any existing values.
 *          (default: false)
 */
api.addValue = (subject, property, value, options) => {
  options = options || {};
  if(!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }
  if(!('valueIsArray' in options)) {
    options.valueIsArray = false;
  }
  if(!('allowDuplicate' in options)) {
    options.allowDuplicate = true;
  }
  if(!('prependValue' in options)) {
    options.prependValue = false;
  }

  if(options.valueIsArray) {
    subject[property] = value;
  } else if(types.isArray(value)) {
    if(value.length === 0 && options.propertyIsArray &&
      !subject.hasOwnProperty(property)) {
      subject[property] = [];
    }
    if(options.prependValue) {
      value = value.concat(subject[property]);
      subject[property] = [];
    }
    for(let i = 0; i < value.length; ++i) {
      api.addValue(subject, property, value[i], options);
    }
  } else if(subject.hasOwnProperty(property)) {
    // check if subject already has value if duplicates not allowed
    const hasValue = (!options.allowDuplicate &&
      api.hasValue(subject, property, value));

    // make property an array if value not present or always an array
    if(!types.isArray(subject[property]) &&
      (!hasValue || options.propertyIsArray)) {
      subject[property] = [subject[property]];
    }

    // add new value
    if(!hasValue) {
      if(options.prependValue) {
        subject[property].unshift(value);
      } else {
        subject[property].push(value);
      }
    }
  } else {
    // add new value as set or single value
    subject[property] = options.propertyIsArray ? [value] : value;
  }
};

/**
 * Gets all of the values for a subject's property as an array.
 *
 * @param subject the subject.
 * @param property the property.
 *
 * @return all of the values for a subject's property as an array.
 */
api.getValues = (subject, property) => [].concat(subject[property] || []);

/**
 * Removes a property from a subject.
 *
 * @param subject the subject.
 * @param property the property.
 */
api.removeProperty = (subject, property) => {
  delete subject[property];
};

/**
 * Removes a value from a subject.
 *
 * @param subject the subject.
 * @param property the property that relates the value to the subject.
 * @param value the value to remove.
 * @param [options] the options to use:
 *          [propertyIsArray] true if the property is always an array, false
 *            if not (default: false).
 */
api.removeValue = (subject, property, value, options) => {
  options = options || {};
  if(!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }

  // filter out value
  const values = api.getValues(subject, property).filter(
    e => !api.compareValues(e, value));

  if(values.length === 0) {
    api.removeProperty(subject, property);
  } else if(values.length === 1 && !options.propertyIsArray) {
    subject[property] = values[0];
  } else {
    subject[property] = values;
  }
};

/**
 * Relabels all blank nodes in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [issuer] an IdentifierIssuer to use to label blank nodes.
 */
api.relabelBlankNodes = (input, options) => {
  options = options || {};
  const issuer = options.issuer || new IdentifierIssuer('_:b');
  return _labelBlankNodes(issuer, input);
};

/**
 * Compares two JSON-LD values for equality. Two JSON-LD values will be
 * considered equal if:
 *
 * 1. They are both primitives of the same type and value.
 * 2. They are both @values with the same @value, @type, @language,
 *   and @index, OR
 * 3. They both have @ids they are the same.
 *
 * @param v1 the first value.
 * @param v2 the second value.
 *
 * @return true if v1 and v2 are considered equal, false if not.
 */
api.compareValues = (v1, v2) => {
  // 1. equal primitives
  if(v1 === v2) {
    return true;
  }

  // 2. equal @values
  if(graphTypes.isValue(v1) && graphTypes.isValue(v2) &&
    v1['@value'] === v2['@value'] &&
    v1['@type'] === v2['@type'] &&
    v1['@language'] === v2['@language'] &&
    v1['@index'] === v2['@index']) {
    return true;
  }

  // 3. equal @ids
  if(types.isObject(v1) &&
    ('@id' in v1) &&
    types.isObject(v2) &&
    ('@id' in v2)) {
    return v1['@id'] === v2['@id'];
  }

  return false;
};

/**
 * Compares two strings first based on length and then lexicographically.
 *
 * @param a the first string.
 * @param b the second string.
 *
 * @return -1 if a < b, 1 if a > b, 0 if a === b.
 */
api.compareShortestLeast = (a, b) => {
  if(a.length < b.length) {
    return -1;
  }
  if(b.length < a.length) {
    return 1;
  }
  if(a === b) {
    return 0;
  }
  return (a < b) ? -1 : 1;
};

/**
 * Labels the blank nodes in the given value using the given IdentifierIssuer.
 *
 * @param issuer the IdentifierIssuer to use.
 * @param element the element with blank nodes to rename.
 *
 * @return the element.
 */
function _labelBlankNodes(issuer, element) {
  if(types.isArray(element)) {
    for(let i = 0; i < element.length; ++i) {
      element[i] = _labelBlankNodes(issuer, element[i]);
    }
  } else if(graphTypes.isList(element)) {
    element['@list'] = _labelBlankNodes(issuer, element['@list']);
  } else if(types.isObject(element)) {
    // relabel blank node
    if(graphTypes.isBlankNode(element)) {
      element['@id'] = issuer.getId(element['@id']);
    }

    // recursively apply to all keys
    const keys = Object.keys(element).sort();
    for(let ki = 0; ki < keys.length; ++ki) {
      const key = keys[ki];
      if(key !== '@id') {
        element[key] = _labelBlankNodes(issuer, element[key]);
      }
    }
  }

  return element;
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const api = {};
module.exports = api;

/**
 * Returns true if the given value is an Array.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Array, false if not.
 */
api.isArray = Array.isArray;

/**
 * Returns true if the given value is a Boolean.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Boolean, false if not.
 */
api.isBoolean = v => (typeof v === 'boolean' ||
  Object.prototype.toString.call(v) === '[object Boolean]');

/**
 * Returns true if the given value is a double.
 *
 * @param v the value to check.
 *
 * @return true if the value is a double, false if not.
 */
api.isDouble = v => api.isNumber(v) &&
  (String(v).indexOf('.') !== -1 || Math.abs(v) >= 1e21);

/**
 * Returns true if the given value is an empty Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an empty Object, false if not.
 */
api.isEmptyObject = v => api.isObject(v) && Object.keys(v).length === 0;

/**
 * Returns true if the given value is a Number.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Number, false if not.
 */
api.isNumber = v => (typeof v === 'number' ||
  Object.prototype.toString.call(v) === '[object Number]');

/**
 * Returns true if the given value is numeric.
 *
 * @param v the value to check.
 *
 * @return true if the value is numeric, false if not.
 */
api.isNumeric = v => !isNaN(parseFloat(v)) && isFinite(v);

/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */
api.isObject = v => Object.prototype.toString.call(v) === '[object Object]';

/**
 * Returns true if the given value is a String.
 *
 * @param v the value to check.
 *
 * @return true if the value is a String, false if not.
 */
api.isString = v => (typeof v === 'string' ||
  Object.prototype.toString.call(v) === '[object String]');

/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */
api.isUndefined = v => typeof v === 'undefined';


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


module.exports = class JsonLdError extends Error {
  /**
   * Creates a JSON-LD Error.
   *
   * @param msg the error message.
   * @param type the error type.
   * @param details the error details.
   */
  constructor(
    message = 'An unspecified JSON-LD error occurred.',
    name = 'jsonld.Error',
    details = {}) {
    super(message);
    this.name = name;
    this.message = message;
    this.details = details;
  }
};


/***/ }),
/* 8 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(129)
var ieee754 = __webpack_require__(130)
var isArray = __webpack_require__(62)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const types = __webpack_require__(6);

const api = {};
module.exports = api;

/**
 * Returns true if the given value is a subject with properties.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject with properties, false if not.
 */
api.isSubject = v => {
  // Note: A value is a subject if all of these hold true:
  // 1. It is an Object.
  // 2. It is not a @value, @set, or @list.
  // 3. It has more than 1 key OR any existing key is not @id.
  if(types.isObject(v) &&
    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {
    const keyCount = Object.keys(v).length;
    return (keyCount > 1 || !('@id' in v));
  }
  return false;
};

/**
 * Returns true if the given value is a subject reference.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject reference, false if not.
 */
api.isSubjectReference = v =>
  // Note: A value is a subject reference if all of these hold true:
  // 1. It is an Object.
  // 2. It has a single key: @id.
  (types.isObject(v) && Object.keys(v).length === 1 && ('@id' in v));

/**
 * Returns true if the given value is a @value.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @value, false if not.
 */
api.isValue = v =>
  // Note: A value is a @value if all of these hold true:
  // 1. It is an Object.
  // 2. It has the @value property.
  types.isObject(v) && ('@value' in v);

/**
 * Returns true if the given value is a @list.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @list, false if not.
 */
api.isList = v =>
  // Note: A value is a @list if all of these hold true:
  // 1. It is an Object.
  // 2. It has the @list property.
  types.isObject(v) && ('@list' in v);

/**
 * Returns true if the given value is a @graph.
 *
 * @return true if the value is a @graph, false if not.
 */
api.isGraph = v => {
  // Note: A value is a graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It may have '@id' or '@index'
  return types.isObject(v) &&
    '@graph' in v &&
    Object.keys(v)
      .filter(key => key !== '@id' && key !== '@index').length === 1;
};

/**
 * Returns true if the given value is a simple @graph.
 *
 * @return true if the value is a simple @graph, false if not.
 */
api.isSimpleGraph = v => {
  // Note: A value is a simple graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It has only 1 key or 2 keys where one of them is `@index`.
  return api.isGraph(v) && !('@id' in v);
};

/**
 * Returns true if the given value is a blank node.
 *
 * @param v the value to check.
 *
 * @return true if the value is a blank node, false if not.
 */
api.isBlankNode = v => {
  // Note: A value is a blank node if all of these hold true:
  // 1. It is an Object.
  // 2. If it has an @id key its value begins with '_:'.
  // 3. It has no keys OR is not a @value, @set, or @list.
  if(types.isObject(v)) {
    if('@id' in v) {
      return (v['@id'].indexOf('_:') === 0);
    }
    return (Object.keys(v).length === 0 ||
      !(('@value' in v) || ('@set' in v) || ('@list' in v)));
  }
  return false;
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const types = __webpack_require__(6);

const api = {};
module.exports = api;

// define URL parser
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
// with local jsonld.js modifications
api.parsers = {
  simple: {
    // RFC 3986 basic parts
    keys: [
      'href', 'scheme', 'authority', 'path', 'query', 'fragment'
    ],
    /* eslint-disable-next-line max-len */
    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
  },
  full: {
    keys: [
      'href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password',
      'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'
    ],
    /* eslint-disable-next-line max-len */
    regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
};
api.parse = (str, parser) => {
  const parsed = {};
  const o = api.parsers[parser || 'full'];
  const m = o.regex.exec(str);
  let i = o.keys.length;
  while(i--) {
    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];
  }

  // remove default ports in found in URLs
  if((parsed.scheme === 'https' && parsed.port === '443') ||
    (parsed.scheme === 'http' && parsed.port === '80')) {
    parsed.href = parsed.href.replace(':' + parsed.port, '');
    parsed.authority = parsed.authority.replace(':' + parsed.port, '');
    parsed.port = null;
  }

  parsed.normalizedPath = api.removeDotSegments(parsed.path);
  return parsed;
};

/**
 * Prepends a base IRI to the given relative IRI.
 *
 * @param base the base IRI.
 * @param iri the relative IRI.
 *
 * @return the absolute IRI.
 */
api.prependBase = (base, iri) => {
  // skip IRI processing
  if(base === null) {
    return iri;
  }
  // already an absolute IRI
  if(api.isAbsolute(iri)) {
    return iri;
  }

  // parse base if it is a string
  if(!base || types.isString(base)) {
    base = api.parse(base || '');
  }

  // parse given IRI
  const rel = api.parse(iri);

  // per RFC3986 5.2.2
  const transform = {
    protocol: base.protocol || ''
  };

  if(rel.authority !== null) {
    transform.authority = rel.authority;
    transform.path = rel.path;
    transform.query = rel.query;
  } else {
    transform.authority = base.authority;

    if(rel.path === '') {
      transform.path = base.path;
      if(rel.query !== null) {
        transform.query = rel.query;
      } else {
        transform.query = base.query;
      }
    } else {
      if(rel.path.indexOf('/') === 0) {
        // IRI represents an absolute path
        transform.path = rel.path;
      } else {
        // merge paths
        let path = base.path;

        // append relative path to the end of the last directory from base
        path = path.substr(0, path.lastIndexOf('/') + 1);
        if((path.length > 0 || base.authority) && path.substr(-1) !== '/') {
          path += '/';
        }
        path += rel.path;

        transform.path = path;
      }
      transform.query = rel.query;
    }
  }

  if(rel.path !== '') {
    // remove slashes and dots in path
    transform.path = api.removeDotSegments(transform.path);
  }

  // construct URL
  let rval = transform.protocol;
  if(transform.authority !== null) {
    rval += '//' + transform.authority;
  }
  rval += transform.path;
  if(transform.query !== null) {
    rval += '?' + transform.query;
  }
  if(rel.fragment !== null) {
    rval += '#' + rel.fragment;
  }

  // handle empty base
  if(rval === '') {
    rval = './';
  }

  return rval;
};

/**
 * Removes a base IRI from the given absolute IRI.
 *
 * @param base the base IRI.
 * @param iri the absolute IRI.
 *
 * @return the relative IRI if relative to base, otherwise the absolute IRI.
 */
api.removeBase = (base, iri) => {
  // skip IRI processing
  if(base === null) {
    return iri;
  }

  if(!base || types.isString(base)) {
    base = api.parse(base || '');
  }

  // establish base root
  let root = '';
  if(base.href !== '') {
    root += (base.protocol || '') + '//' + (base.authority || '');
  } else if(iri.indexOf('//')) {
    // support network-path reference with empty base
    root += '//';
  }

  // IRI not relative to base
  if(iri.indexOf(root) !== 0) {
    return iri;
  }

  // remove root from IRI and parse remainder
  const rel = api.parse(iri.substr(root.length));

  // remove path segments that match (do not remove last segment unless there
  // is a hash or query)
  const baseSegments = base.normalizedPath.split('/');
  const iriSegments = rel.normalizedPath.split('/');
  const last = (rel.fragment || rel.query) ? 0 : 1;
  while(baseSegments.length > 0 && iriSegments.length > last) {
    if(baseSegments[0] !== iriSegments[0]) {
      break;
    }
    baseSegments.shift();
    iriSegments.shift();
  }

  // use '../' for each non-matching base segment
  let rval = '';
  if(baseSegments.length > 0) {
    // don't count the last segment (if it ends with '/' last path doesn't
    // count and if it doesn't end with '/' it isn't a path)
    baseSegments.pop();
    for(let i = 0; i < baseSegments.length; ++i) {
      rval += '../';
    }
  }

  // prepend remaining segments
  rval += iriSegments.join('/');

  // add query and hash
  if(rel.query !== null) {
    rval += '?' + rel.query;
  }
  if(rel.fragment !== null) {
    rval += '#' + rel.fragment;
  }

  // handle empty base
  if(rval === '') {
    rval = './';
  }

  return rval;
};

/**
 * Removes dot segments from a URL path.
 *
 * @param path the path to remove dot segments from.
 */
api.removeDotSegments = path => {
  // RFC 3986 5.2.4 (reworked)

  // empty path shortcut
  if(path.length === 0) {
    return '';
  }

  const input = path.split('/');
  const output = [];

  while(input.length > 0) {
    const next = input.shift();
    const done = input.length === 0;

    if(next === '.') {
      if(done) {
        // ensure output has trailing /
        output.push('');
      }
      continue;
    }

    if(next === '..') {
      output.pop();
      if(done) {
        // ensure output has trailing /
        output.push('');
      }
      continue;
    }

    output.push(next);
  }

  // if path was absolute, ensure output has leading /
  if(path[0] === '/' && output.length > 0 && output[0] !== '') {
    output.unshift('');
  }
  if(output.length === 1 && output[0] === '') {
    return '/';
  }

  return output.join('/');
};

// TODO: time better isAbsolute/isRelative checks using full regexes:
// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html

// regex to check for absolute IRI (starting scheme and ':') or blank node IRI
const isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;

/**
 * Returns true if the given value is an absolute IRI or blank node IRI, false
 * if not.
 * Note: This weak check only checks for a correct starting scheme.
 *
 * @param v the value to check.
 *
 * @return true if the value is an absolute IRI, false if not.
 */
api.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);

/**
 * Returns true if the given value is a relative IRI, false if not.
 * Note: this is a weak check.
 *
 * @param v the value to check.
 *
 * @return true if the value is a relative IRI, false if not.
 */
api.isRelative = v => types.isString(v);


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2020 Anastasiia Byvsheva & Dan Brickley
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const fs = __webpack_require__(50);
const axios = __webpack_require__(108);

const jsonld = __webpack_require__(125);
const n3 = __webpack_require__(100);
const Store = n3.Store;
const streamify = __webpack_require__(163);
const RdfaParser = __webpack_require__(172).RdfaParser;
const microdata = __webpack_require__(197);

const errors = __webpack_require__(90);


/**
 * Loads related data (shapes, context, etc.) from remote or local source
 * @param {string} link url to the remote source or local path
 * @return {*}
 */
async function loadData(link) {
    if (link.match("^https?://")) {
        return (await axios.get(link)).data;
    }
    return fs.readFileSync(link).toString();
}

/**
 * Removes duplicates from objects array
 * @param {[object]} items
 * @param {[string]} keys
 * @returns {[object]}
 */
function uniqueBy(items, keys) {
    let seen = {};
    return items.filter(function (item) {
        let val = '';
        keys.forEach(key => val += item[key]);
        return seen.hasOwnProperty(val) ? false : (seen[val] = true);
    })
}

/**
 *  Generates random URL as base
 *  @param {number} length
 *  @return {string}
 */
function randomUrl(length = 16) {
    let result = 'https://example.org/';
    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}

/**
 * Parses json-ld to quads into the n3.Store
 * @param {string} text input data
 * @param {string} baseUrl
 * @return {Store}
 */
async function parseJsonLd(text, baseUrl) {
    let data = JSON.parse(text);
    data['@id'] = baseUrl;
    const nquads = await jsonld.toRDF(data, { format: 'application/n-quads' });
    return parseTurtle(nquads, baseUrl);
}


/**
 * Parse RDFa to quads into the n3.Store
 * @param {string} text input data
 * @param {string} baseUrl
 * @return {Promise<Store>}
 */
async function parseRdfa(text, baseUrl) {
    const textStream = streamify(text);
    return new Promise((res, rej) => {
        let store = new Store();
        const rdfaParser = new RdfaParser({baseIRI: baseUrl, contentType: 'text/html'});
        textStream.pipe(rdfaParser)
            .on('data', quad => {
                store.addQuad(quad);
            })
            .on('error', err => rej(err))
            .on('end', () => res(store));
    });
}


/**
 * Parses microdata to quads into the n3.Store
 * @param {string} text
 * @param {string} baseUrl
 * @return {Store}
 */
async function parseMicrodata(text, baseUrl) {
    const nquads = microdata.toRdf(text, {base: baseUrl}).split('_:0').join(`<${baseUrl}>`);
    if (nquads.length === 0) throw errors.InvalidDataError('Format is not Microdata');
    return parseTurtle(nquads, baseUrl);
}


/**
 *
 */
function parseTurtle(text, baseIRI) {
    const turtleParser = new n3.Parser({
        baseIRI: baseIRI,
        format: "text/turtle"
    });
    let store = new Store();
    turtleParser.parse(text).forEach(quad => {
        store.addQuad(quad);
    });
    return store;
}

/**
 * Helper for trying to parse input text into a certain format
 * @param parser parser function
 * @returns {Promise<undefined|Store>}
 */
async function tryParse(parser) {
    let quads;
    try {
        quads = await parser();
    } catch (e) {
    }
    return quads;
}

/**
 * Transforms input to quads
 * @param text - input data
 * @param baseUrl
 * @returns {Promise<Store>}
 */
async function inputToQuads(text, baseUrl) {
    const jsonParser = async () => await parseJsonLd(text, baseUrl);
    const rdfaParser = async () => await parseRdfa(text, baseUrl);
    const microdataParser = async () => await parseMicrodata(text, baseUrl);
    let res = await tryParse(jsonParser) || await tryParse(microdataParser) || await tryParse(rdfaParser);
    if (!res || res.getQuads().length === 0) throw new errors.InvalidDataError("Error while parsing the data." +
        "This could be caused by incorrect data or incorrect data format. Possible formats: json-ld, microdata, rdfa");
    return res;
}

module.exports = {
    randomUrl: randomUrl,
    loadData: loadData,
    uniqueBy: uniqueBy,
    inputToQuads: inputToQuads,
    parseTurtle: parseTurtle,
    parseMicrodata: parseMicrodata,
    parseRdfa: parseRdfa,
    parseJsonLd: parseJsonLd,
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate, process) {/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const api = {};
module.exports = api;

// define setImmediate and nextTick
//// nextTick implementation with browser-compatible fallback ////
// from https://github.com/caolan/async/blob/master/lib/async.js

// capture the global reference to guard against fakeTimer mocks
const _setImmediate = typeof setImmediate === 'function' && setImmediate;

const _delay = _setImmediate ?
  // not a direct alias (for IE10 compatibility)
  fn => _setImmediate(fn) :
  fn => setTimeout(fn, 0);

if(typeof process === 'object' && typeof process.nextTick === 'function') {
  api.nextTick = process.nextTick;
} else {
  api.nextTick = _delay;
}
api.setImmediate = _setImmediate ? _delay : api.nextTick;

/**
 * Clones an object, array, or string/number. If a typed JavaScript object
 * is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */
api.clone = function(value) {
  if(value && typeof value === 'object') {
    let rval;
    if(Array.isArray(value)) {
      rval = [];
      for(let i = 0; i < value.length; ++i) {
        rval[i] = api.clone(value[i]);
      }
    } else if(api.isObject(value)) {
      rval = {};
      for(const key in value) {
        rval[key] = api.clone(value[key]);
      }
    } else {
      rval = value.toString();
    }
    return rval;
  }
  return value;
};

/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */
api.isObject = v => Object.prototype.toString.call(v) === '[object Object]';

/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */
api.isUndefined = v => typeof v === 'undefined';

api.callbackify = fn => {
  return async function(...args) {
    const callback = args[args.length - 1];
    if(typeof callback === 'function') {
      args.pop();
    }

    let result;
    try {
      result = await fn.apply(null, args);
    } catch(e) {
      if(typeof callback === 'function') {
        return _invokeCallback(callback, e);
      }
      throw e;
    }

    if(typeof callback === 'function') {
      return _invokeCallback(callback, null, result);
    }

    return result;
  };
};

function _invokeCallback(callback, err, result) {
  try {
    return callback(err, result);
  } catch(unhandledError) {
    // throw unhandled errors to prevent "unhandled rejected promise"
    // and simulate what would have happened in a promiseless API
    process.nextTick(() => {
      throw unhandledError;
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(33).setImmediate, __webpack_require__(2)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


const util = __webpack_require__(5);
const JsonLdError = __webpack_require__(7);

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
  isUndefined: _isUndefined
} = __webpack_require__(6);

const {
  isAbsolute: _isAbsoluteIri,
  isRelative: _isRelativeIri,
  prependBase,
  parse: parseUrl
} = __webpack_require__(11);

const {
  asArray: _asArray,
  compareShortestLeast: _compareShortestLeast
} = __webpack_require__(5);

const INITIAL_CONTEXT_CACHE = new Map();
const INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;
const KEYWORD_PATTERN = /^@[a-zA-Z]+$/;

const api = {};
module.exports = api;

/**
 * Processes a local context and returns a new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param options the context processing options.
 * @param propagate `true` if `false`, retains any previously defined term,
 *   which can be rolled back when the descending into a new node object.
 * @param overrideProtected `false` allows protected terms to be modified.
 *
 * @return a Promise that resolves to the new active context.
 */
api.process = async ({
  activeCtx, localCtx, options,
  propagate = true,
  overrideProtected = false,
  cycles = new Set()
}) => {
  // normalize local context to an array of @context objects
  if(_isObject(localCtx) && '@context' in localCtx &&
    _isArray(localCtx['@context'])) {
    localCtx = localCtx['@context'];
  }
  const ctxs = _asArray(localCtx);

  // no contexts in array, return current active context w/o changes
  if(ctxs.length === 0) {
    return activeCtx;
  }

  // resolve contexts
  const resolved = await options.contextResolver.resolve({
    activeCtx,
    context: localCtx,
    documentLoader: options.documentLoader,
    base: options.base
  });

  // override propagate if first resolved context has `@propagate`
  if(_isObject(resolved[0].document) &&
    typeof resolved[0].document['@propagate'] === 'boolean') {
    // retrieve early, error checking done later
    propagate = resolved[0].document['@propagate'];
  }

  // process each context in order, update active context
  // on each iteration to ensure proper caching
  let rval = activeCtx;

  // track the previous context
  // if not propagating, make sure rval has a previous context
  if(!propagate && !rval.previousContext) {
    // clone `rval` context before updating
    rval = rval.clone();
    rval.previousContext = activeCtx;
  }

  for(const resolvedContext of resolved) {
    let {document: ctx} = resolvedContext;

    // update active context to one computed from last iteration
    activeCtx = rval;

    // reset to initial context
    if(ctx === null) {
      // We can't nullify if there are protected terms and we're
      // not allowing overrides (e.g. processing a property term scoped context)
      if(!overrideProtected &&
        Object.keys(activeCtx.protected).length !== 0) {
        const protectedMode = (options && options.protectedMode) || 'error';
        if(protectedMode === 'error') {
          throw new JsonLdError(
            'Tried to nullify a context with protected terms outside of ' +
            'a term definition.',
            'jsonld.SyntaxError',
            {code: 'invalid context nullification'});
        } else if(protectedMode === 'warn') {
          // FIXME: remove logging and use a handler
          console.warn('WARNING: invalid context nullification');

          // get processed context from cache if available
          const processed = resolvedContext.getProcessed(activeCtx);
          if(processed) {
            rval = activeCtx = processed;
            continue;
          }

          const oldActiveCtx = activeCtx;
          // copy all protected term definitions to fresh initial context
          rval = activeCtx = api.getInitialContext(options).clone();
          for(const [term, _protected] of
            Object.entries(oldActiveCtx.protected)) {
            if(_protected) {
              activeCtx.mappings[term] =
                util.clone(oldActiveCtx.mappings[term]);
            }
          }
          activeCtx.protected = util.clone(oldActiveCtx.protected);

          // cache processed result
          resolvedContext.setProcessed(oldActiveCtx, rval);
          continue;
        }
        throw new JsonLdError(
          'Invalid protectedMode.',
          'jsonld.SyntaxError',
          {code: 'invalid protected mode', context: localCtx, protectedMode});
      }
      rval = activeCtx = api.getInitialContext(options).clone();
      continue;
    }

    // get processed context from cache if available
    const processed = resolvedContext.getProcessed(activeCtx);
    if(processed) {
      rval = activeCtx = processed;
      continue;
    }

    // dereference @context key if present
    if(_isObject(ctx) && '@context' in ctx) {
      ctx = ctx['@context'];
    }

    // context must be an object by now, all URLs retrieved before this call
    if(!_isObject(ctx)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context must be an object.',
        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});
    }

    // TODO: there is likely a `previousContext` cloning optimization that
    // could be applied here (no need to copy it under certain conditions)

    // clone context before updating it
    rval = rval.clone();

    // define context mappings for keys in local context
    const defined = new Map();

    // handle @version
    if('@version' in ctx) {
      if(ctx['@version'] !== 1.1) {
        throw new JsonLdError(
          'Unsupported JSON-LD version: ' + ctx['@version'],
          'jsonld.UnsupportedVersion',
          {code: 'invalid @version value', context: ctx});
      }
      if(activeCtx.processingMode &&
        activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          '@version: ' + ctx['@version'] + ' not compatible with ' +
          activeCtx.processingMode,
          'jsonld.ProcessingModeConflict',
          {code: 'processing mode conflict', context: ctx});
      }
      rval.processingMode = 'json-ld-1.1';
      rval['@version'] = ctx['@version'];
      defined.set('@version', true);
    }

    // if not set explicitly, set processingMode to "json-ld-1.1"
    rval.processingMode =
      rval.processingMode || activeCtx.processingMode;

    // handle @base
    if('@base' in ctx) {
      let base = ctx['@base'];

      if(base === null || _isAbsoluteIri(base)) {
        // no action
      } else if(_isRelativeIri(base)) {
        base = prependBase(rval['@base'], base);
      } else {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@base" in a ' +
          '@context must be an absolute IRI, a relative IRI, or null.',
          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
      }

      rval['@base'] = base;
      defined.set('@base', true);
    }

    // handle @vocab
    if('@vocab' in ctx) {
      const value = ctx['@vocab'];
      if(value === null) {
        delete rval['@vocab'];
      } else if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
          '@context must be an absolute IRI.',
          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
      } else {
        rval['@vocab'] = _expandIri(rval, value, {vocab: true, base: true},
          undefined, undefined, options);
      }
      defined.set('@vocab', true);
    }

    // handle @language
    if('@language' in ctx) {
      const value = ctx['@language'];
      if(value === null) {
        delete rval['@language'];
      } else if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@language" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError',
          {code: 'invalid default language', context: ctx});
      } else {
        rval['@language'] = value.toLowerCase();
      }
      defined.set('@language', true);
    }

    // handle @direction
    if('@direction' in ctx) {
      const value = ctx['@direction'];
      if(activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @direction not compatible with ' +
          activeCtx.processingMode,
          'jsonld.SyntaxError',
          {code: 'invalid context member', context: ctx});
      }
      if(value === null) {
        delete rval['@direction'];
      } else if(value !== 'ltr' && value !== 'rtl') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@direction" in a ' +
          '@context must be null, "ltr", or "rtl".',
          'jsonld.SyntaxError',
          {code: 'invalid base direction', context: ctx});
      } else {
        rval['@direction'] = value;
      }
      defined.set('@direction', true);
    }

    // handle @propagate
    // note: we've already extracted it, here we just do error checking
    if('@propagate' in ctx) {
      const value = ctx['@propagate'];
      if(activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @propagate not compatible with ' +
          activeCtx.processingMode,
          'jsonld.SyntaxError',
          {code: 'invalid context entry', context: ctx});
      }
      if(typeof value !== 'boolean') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @propagate value must be a boolean.',
          'jsonld.SyntaxError',
          {code: 'invalid @propagate value', context: localCtx});
      }
      defined.set('@propagate', true);
    }

    // handle @import
    if('@import' in ctx) {
      const value = ctx['@import'];
      if(activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @import not compatible with ' +
          activeCtx.processingMode,
          'jsonld.SyntaxError',
          {code: 'invalid context entry', context: ctx});
      }
      if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @import must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid @import value', context: localCtx});
      }

      // resolve contexts
      const resolvedImport = await options.contextResolver.resolve({
        activeCtx,
        context: value,
        documentLoader: options.documentLoader,
        base: options.base
      });
      if(resolvedImport.length !== 1) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @import must reference a single context.',
          'jsonld.SyntaxError',
          {code: 'invalid remote context', context: localCtx});
      }
      const processedImport = resolvedImport[0].getProcessed(activeCtx);
      if(processedImport) {
        // Note: if the same context were used in this active context
        // as a reference context, then processed_input might not
        // be a dict.
        ctx = processedImport;
      } else {
        const importCtx = resolvedImport[0].document;
        if('@import' in importCtx) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax: ' +
            'imported context must not include @import.',
            'jsonld.SyntaxError',
            {code: 'invalid context entry', context: localCtx});
        }

        // merge ctx into importCtx and replace rval with the result
        for(const key in importCtx) {
          if(!ctx.hasOwnProperty(key)) {
            ctx[key] = importCtx[key];
          }
        }

        // Note: this could potenially conflict if the import
        // were used in the same active context as a referenced
        // context and an import. In this case, we
        // could override the cached result, but seems unlikely.
        resolvedImport[0].setProcessed(activeCtx, ctx);
      }

      defined.set('@import', true);
    }

    // handle @protected; determine whether this sub-context is declaring
    // all its terms to be "protected" (exceptions can be made on a
    // per-definition basis)
    defined.set('@protected', ctx['@protected'] || false);

    // process all other keys
    for(const key in ctx) {
      api.createTermDefinition({
        activeCtx: rval,
        localCtx: ctx,
        term: key,
        defined,
        options,
        overrideProtected
      });

      if(_isObject(ctx[key]) && '@context' in ctx[key]) {
        const keyCtx = ctx[key]['@context'];
        let process = true;
        if(_isString(keyCtx)) {
          const url = prependBase(options.base, keyCtx);
          // track processed contexts to avoid scoped context recursion
          if(cycles.has(url)) {
            process = false;
          } else {
            cycles.add(url);
          }
        }
        // parse context to validate
        if(process) {
          try {
            await api.process({
              activeCtx: rval,
              localCtx: ctx[key]['@context'],
              overrideProtected: true,
              options,
              cycles
            });
          } catch(e) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; invalid scoped context.',
              'jsonld.SyntaxError',
              {
                code: 'invalid scoped context',
                context: ctx[key]['@context'],
                term: key
              });
          }
        }
      }
    }

    // cache processed result
    resolvedContext.setProcessed(activeCtx, rval);
  }

  return rval;
};

/**
 * Creates a term definition during context processing.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context being processed.
 * @param term the term in the local context to define the mapping for.
 * @param defined a map of defining/defined keys to detect cycles and prevent
 *          double definitions.
 * @param {Object} [options] - creation options.
 * @param {string} [options.protectedMode="error"] - "error" to throw error
 *   on `@protected` constraint violation, "warn" to allow violations and
 *   signal a warning.
 * @param overrideProtected `false` allows protected terms to be modified.
 */
api.createTermDefinition = ({
  activeCtx,
  localCtx,
  term,
  defined,
  options,
  overrideProtected = false,
}) => {
  if(defined.has(term)) {
    // term already defined
    if(defined.get(term)) {
      return;
    }
    // cycle detected
    throw new JsonLdError(
      'Cyclical context definition detected.',
      'jsonld.CyclicalContext',
      {code: 'cyclic IRI mapping', context: localCtx, term});
  }

  // now defining term
  defined.set(term, false);

  // get context term value
  let value;
  if(localCtx.hasOwnProperty(term)) {
    value = localCtx[term];
  }

  if(term === '@type' &&
     _isObject(value) &&
     (value['@container'] || '@set') === '@set' &&
     api.processingMode(activeCtx, 1.1)) {

    const validKeys = ['@container', '@id', '@protected'];
    const keys = Object.keys(value);
    if(keys.length === 0 || keys.some(k => !validKeys.includes(k))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; keywords cannot be overridden.',
        'jsonld.SyntaxError',
        {code: 'keyword redefinition', context: localCtx, term});
    }
  } else if(api.isKeyword(term)) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; keywords cannot be overridden.',
      'jsonld.SyntaxError',
      {code: 'keyword redefinition', context: localCtx, term});
  } else if(term.match(KEYWORD_PATTERN)) {
    // FIXME: remove logging and use a handler
    console.warn('WARNING: terms beginning with "@" are reserved' +
      ' for future use and ignored', {term});
    return;
  } else if(term === '') {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; a term cannot be an empty string.',
      'jsonld.SyntaxError',
      {code: 'invalid term definition', context: localCtx});
  }

  // keep reference to previous mapping for potential `@protected` check
  const previousMapping = activeCtx.mappings.get(term);

  // remove old mapping
  if(activeCtx.mappings.has(term)) {
    activeCtx.mappings.delete(term);
  }

  // convert short-hand value to object w/@id
  let simpleTerm = false;
  if(_isString(value) || value === null) {
    simpleTerm = true;
    value = {'@id': value};
  }

  if(!_isObject(value)) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; @context term values must be ' +
      'strings or objects.',
      'jsonld.SyntaxError',
      {code: 'invalid term definition', context: localCtx});
  }

  // create new mapping
  const mapping = {};
  activeCtx.mappings.set(term, mapping);
  mapping.reverse = false;

  // make sure term definition only has expected keywords
  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];

  // JSON-LD 1.1 support
  if(api.processingMode(activeCtx, 1.1)) {
    validKeys.push(
      '@context', '@direction', '@index', '@nest', '@prefix', '@protected');
  }

  for(const kw in value) {
    if(!validKeys.includes(kw)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,
        'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
  }

  // always compute whether term has a colon as an optimization for
  // _compactIri
  const colon = term.indexOf(':');
  mapping._termHasColon = (colon > 0);

  if('@reverse' in value) {
    if('@id' in value) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
        'contain @id.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }
    if('@nest' in value) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
        'contain @nest.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }
    const reverse = value['@reverse'];
    if(!_isString(reverse)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }

    if(!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' +
        ' for future use and ignored', {reverse});
      if(previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings.delete(term);
      }
      return;
    }

    // expand and add @id mapping
    const id = _expandIri(
      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,
      options);
    if(!_isAbsoluteIri(id)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +
        'absolute IRI or a blank node identifier.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }

    mapping['@id'] = id;
    mapping.reverse = true;
  } else if('@id' in value) {
    let id = value['@id'];
    if(id && !_isString(id)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @id value must be an array ' +
        'of strings or a string.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }
    if(id === null) {
      // reserve a null term, which may be protected
      mapping['@id'] = null;
    } else if(!api.isKeyword(id) && id.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' +
        ' for future use and ignored', {id});
      if(previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings.delete(term);
      }
      return;
    } else if(id !== term) {
      // expand and add @id mapping
      id = _expandIri(
        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);
      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; a @context @id value must be an ' +
          'absolute IRI, a blank node identifier, or a keyword.',
          'jsonld.SyntaxError',
          {code: 'invalid IRI mapping', context: localCtx});
      }

      // if term has the form of an IRI it must map the same
      if(term.match(/(?::[^:])|\//)) {
        const termDefined = new Map(defined).set(term, true);
        const termIri = _expandIri(
          activeCtx, term, {vocab: true, base: false},
          localCtx, termDefined, options);
        if(termIri !== id) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; term in form of IRI must ' +
            'expand to definition.',
            'jsonld.SyntaxError',
            {code: 'invalid IRI mapping', context: localCtx});
        }
      }

      mapping['@id'] = id;
      // indicate if this term may be used as a compact IRI prefix
      mapping._prefix = (simpleTerm &&
        !mapping._termHasColon &&
        id.match(/[:\/\?#\[\]@]$/));
    }
  }

  if(!('@id' in mapping)) {
    // see if the term has a prefix
    if(mapping._termHasColon) {
      const prefix = term.substr(0, colon);
      if(localCtx.hasOwnProperty(prefix)) {
        // define parent prefix
        api.createTermDefinition({
          activeCtx, localCtx, term: prefix, defined, options
        });
      }

      if(activeCtx.mappings.has(prefix)) {
        // set @id based on prefix parent
        const suffix = term.substr(colon + 1);
        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;
      } else {
        // term is an absolute IRI
        mapping['@id'] = term;
      }
    } else if(term === '@type') {
      // Special case, were we've previously determined that container is @set
      mapping['@id'] = term;
    } else {
      // non-IRIs *must* define @ids if @vocab is not available
      if(!('@vocab' in activeCtx)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @context terms must define an @id.',
          'jsonld.SyntaxError',
          {code: 'invalid IRI mapping', context: localCtx, term});
      }
      // prepend vocab to term
      mapping['@id'] = activeCtx['@vocab'] + term;
    }
  }

  // Handle term protection
  if(value['@protected'] === true ||
    (defined.get('@protected') === true && value['@protected'] !== false)) {
    activeCtx.protected[term] = true;
    mapping.protected = true;
  }

  // IRI mapping now defined
  defined.set(term, true);

  if('@type' in value) {
    let type = value['@type'];
    if(!_isString(type)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an @context @type value must be a string.',
        'jsonld.SyntaxError',
        {code: 'invalid type mapping', context: localCtx});
    }

    if((type === '@json' || type === '@none')) {
      if(api.processingMode(activeCtx, 1.0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must not be ' +
          `"${type}" in JSON-LD 1.0 mode.`,
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
    } else if(type !== '@id' && type !== '@vocab') {
      // expand @type to full IRI
      type = _expandIri(
        activeCtx, type, {vocab: true, base: false}, localCtx, defined,
        options);
      if(!_isAbsoluteIri(type)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must be an ' +
          'absolute IRI.',
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
      if(type.indexOf('_:') === 0) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +
          'not a blank node identifier.',
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
    }

    // add @type to mapping
    mapping['@type'] = type;
  }

  if('@container' in value) {
    // normalize container to an array form
    const container = _isString(value['@container']) ?
      [value['@container']] : (value['@container'] || []);
    const validContainers = ['@list', '@set', '@index', '@language'];
    let isValid = true;
    const hasSet = container.includes('@set');

    // JSON-LD 1.1 support
    if(api.processingMode(activeCtx, 1.1)) {
      validContainers.push('@graph', '@id', '@type');

      // check container length
      if(container.includes('@list')) {
        if(container.length !== 1) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; @context @container with @list must ' +
            'have no other values',
            'jsonld.SyntaxError',
            {code: 'invalid container mapping', context: localCtx});
        }
      } else if(container.includes('@graph')) {
        if(container.some(key =>
          key !== '@graph' && key !== '@id' && key !== '@index' &&
          key !== '@set')) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; @context @container with @graph must ' +
            'have no other values other than @id, @index, and @set',
            'jsonld.SyntaxError',
            {code: 'invalid container mapping', context: localCtx});
        }
      } else {
        // otherwise, container may also include @set
        isValid &= container.length <= (hasSet ? 2 : 1);
      }

      if(container.includes('@type')) {
        // If mapping does not have an @type,
        // set it to @id
        mapping['@type'] = mapping['@type'] || '@id';

        // type mapping must be either @id or @vocab
        if(!['@id', '@vocab'].includes(mapping['@type'])) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; container: @type requires @type to be ' +
            '@id or @vocab.',
            'jsonld.SyntaxError',
            {code: 'invalid type mapping', context: localCtx});
        }
      }
    } else {
      // in JSON-LD 1.0, container must not be an array (it must be a string,
      // which is one of the validContainers)
      isValid &= !_isArray(value['@container']);

      // check container length
      isValid &= container.length <= 1;
    }

    // check against valid containers
    isValid &= container.every(c => validContainers.includes(c));

    // @set not allowed with @list
    isValid &= !(hasSet && container.includes('@list'));

    if(!isValid) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @container value must be ' +
        'one of the following: ' + validContainers.join(', '),
        'jsonld.SyntaxError',
        {code: 'invalid container mapping', context: localCtx});
    }

    if(mapping.reverse &&
      !container.every(c => ['@index', '@set'].includes(c))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +
        'type definition must be @index or @set.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }

    // add @container to mapping
    mapping['@container'] = container;
  }

  // property indexing
  if('@index' in value) {
    if(!('@container' in value) || !mapping['@container'].includes('@index')) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @index without @index in @container: ' +
        `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +
        `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    mapping['@index'] = value['@index'];
  }

  // scoped contexts
  if('@context' in value) {
    mapping['@context'] = value['@context'];
  }

  if('@language' in value && !('@type' in value)) {
    let language = value['@language'];
    if(language !== null && !_isString(language)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @language value must be ' +
        'a string or null.', 'jsonld.SyntaxError',
        {code: 'invalid language mapping', context: localCtx});
    }

    // add @language to mapping
    if(language !== null) {
      language = language.toLowerCase();
    }
    mapping['@language'] = language;
  }

  // term may be used as a prefix
  if('@prefix' in value) {
    if(term.match(/:|\//)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',
        'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    if(api.isKeyword(mapping['@id'])) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; keywords may not be used as prefixes',
        'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    if(typeof value['@prefix'] === 'boolean') {
      mapping._prefix = value['@prefix'] === true;
    } else {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',
        'jsonld.SyntaxError',
        {code: 'invalid @prefix value', context: localCtx});
    }
  }

  if('@direction' in value) {
    const direction = value['@direction'];
    if(direction !== null && direction !== 'ltr' && direction !== 'rtl') {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @direction value must be ' +
        'null, "ltr", or "rtl".',
        'jsonld.SyntaxError',
        {code: 'invalid base direction', context: localCtx});
    }
    mapping['@direction'] = direction;
  }

  if('@nest' in value) {
    const nest = value['@nest'];
    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @nest value must be ' +
        'a string which is not a keyword other than @nest.',
        'jsonld.SyntaxError',
        {code: 'invalid @nest value', context: localCtx});
    }
    mapping['@nest'] = nest;
  }

  // disallow aliasing @context and @preserve
  const id = mapping['@id'];
  if(id === '@context' || id === '@preserve') {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',
      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});
  }

  // Check for overriding protected terms
  if(previousMapping && previousMapping.protected && !overrideProtected) {
    // force new term to continue to be protected and see if the mappings would
    // be equal
    activeCtx.protected[term] = true;
    mapping.protected = true;
    if(!_deepCompare(previousMapping, mapping)) {
      const protectedMode = (options && options.protectedMode) || 'error';
      if(protectedMode === 'error') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; tried to redefine a protected term.',
          'jsonld.SyntaxError',
          {code: 'protected term redefinition', context: localCtx, term});
      } else if(protectedMode === 'warn') {
        // FIXME: remove logging and use a handler
        console.warn('WARNING: protected term redefinition', {term});
        return;
      }
      throw new JsonLdError(
        'Invalid protectedMode.',
        'jsonld.SyntaxError',
        {code: 'invalid protected mode', context: localCtx, term,
          protectedMode});
    }
  }
};

/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */
api.expandIri = (activeCtx, value, relativeTo, options) => {
  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,
    options);
};

/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param localCtx the local context being processed (only given if called
 *          during context processing).
 * @param defined a map for tracking cycles in context definitions (only given
 *          if called during context processing).
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */
function _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {
  // already expanded
  if(value === null || !_isString(value) || api.isKeyword(value)) {
    return value;
  }

  // ignore non-keyword things that look like a keyword
  if(value.match(KEYWORD_PATTERN)) {
    return null;
  }

  // define term dependency if not defined
  if(localCtx && localCtx.hasOwnProperty(value) &&
    defined.get(value) !== true) {
    api.createTermDefinition({
      activeCtx, localCtx, term: value, defined, options
    });
  }

  relativeTo = relativeTo || {};
  if(relativeTo.vocab) {
    const mapping = activeCtx.mappings.get(value);

    // value is explicitly ignored with a null mapping
    if(mapping === null) {
      return null;
    }

    if(_isObject(mapping) && '@id' in mapping) {
      // value is a term
      return mapping['@id'];
    }
  }

  // split value into prefix:suffix
  const colon = value.indexOf(':');
  if(colon > 0) {
    const prefix = value.substr(0, colon);
    const suffix = value.substr(colon + 1);

    // do not expand blank nodes (prefix of '_') or already-absolute
    // IRIs (suffix of '//')
    if(prefix === '_' || suffix.indexOf('//') === 0) {
      return value;
    }

    // prefix dependency not defined, define it
    if(localCtx && localCtx.hasOwnProperty(prefix)) {
      api.createTermDefinition({
        activeCtx, localCtx, term: prefix, defined, options
      });
    }

    // use mapping if prefix is defined
    const mapping = activeCtx.mappings.get(prefix);
    if(mapping && mapping._prefix) {
      return mapping['@id'] + suffix;
    }

    // already absolute IRI
    if(_isAbsoluteIri(value)) {
      return value;
    }
  }

  // prepend vocab
  if(relativeTo.vocab && '@vocab' in activeCtx) {
    return activeCtx['@vocab'] + value;
  }

  // prepend base
  if(relativeTo.base && '@base' in activeCtx) {
    if(activeCtx['@base']) {
      // The null case preserves value as potentially relative
      return prependBase(prependBase(options.base, activeCtx['@base']), value);
    }
  } else if(relativeTo.base) {
    return prependBase(options.base, value);
  }

  return value;
}

/**
 * Gets the initial context.
 *
 * @param options the options to use:
 *          [base] the document base IRI.
 *
 * @return the initial context.
 */
api.getInitialContext = options => {
  const key = JSON.stringify({processingMode: options.processingMode});
  const cached = INITIAL_CONTEXT_CACHE.get(key);
  if(cached) {
    return cached;
  }

  const initialContext = {
    processingMode: options.processingMode,
    mappings: new Map(),
    inverse: null,
    getInverse: _createInverseContext,
    clone: _cloneActiveContext,
    revertToPreviousContext: _revertToPreviousContext,
    protected: {}
  };
  // TODO: consider using LRU cache instead
  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {
    // clear whole cache -- assumes scenario where the cache fills means
    // the cache isn't being used very efficiently anyway
    INITIAL_CONTEXT_CACHE.clear();
  }
  INITIAL_CONTEXT_CACHE.set(key, initialContext);
  return initialContext;

  /**
   * Generates an inverse context for use in the compaction algorithm, if
   * not already generated for the given active context.
   *
   * @return the inverse context.
   */
  function _createInverseContext() {
    const activeCtx = this;

    // lazily create inverse
    if(activeCtx.inverse) {
      return activeCtx.inverse;
    }
    const inverse = activeCtx.inverse = {};

    // variables for building fast CURIE map
    const fastCurieMap = activeCtx.fastCurieMap = {};
    const irisToTerms = {};

    // handle default language
    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();

    // handle default direction
    const defaultDirection = activeCtx['@direction'];

    // create term selections for each mapping in the context, ordered by
    // shortest and then lexicographically least
    const mappings = activeCtx.mappings;
    const terms = [...mappings.keys()].sort(_compareShortestLeast);
    for(const term of terms) {
      const mapping = mappings.get(term);
      if(mapping === null) {
        continue;
      }

      let container = mapping['@container'] || '@none';
      container = [].concat(container).sort().join('');

      if(mapping['@id'] === null) {
        continue;
      }
      // iterate over every IRI in the mapping
      const ids = _asArray(mapping['@id']);
      for(const iri of ids) {
        let entry = inverse[iri];
        const isKeyword = api.isKeyword(iri);

        if(!entry) {
          // initialize entry
          inverse[iri] = entry = {};

          if(!isKeyword && !mapping._termHasColon) {
            // init IRI to term map and fast CURIE prefixes
            irisToTerms[iri] = [term];
            const fastCurieEntry = {iri, terms: irisToTerms[iri]};
            if(iri[0] in fastCurieMap) {
              fastCurieMap[iri[0]].push(fastCurieEntry);
            } else {
              fastCurieMap[iri[0]] = [fastCurieEntry];
            }
          }
        } else if(!isKeyword && !mapping._termHasColon) {
          // add IRI to term match
          irisToTerms[iri].push(term);
        }

        // add new entry
        if(!entry[container]) {
          entry[container] = {
            '@language': {},
            '@type': {},
            '@any': {}
          };
        }
        entry = entry[container];
        _addPreferredTerm(term, entry['@any'], '@none');

        if(mapping.reverse) {
          // term is preferred for values using @reverse
          _addPreferredTerm(term, entry['@type'], '@reverse');
        } else if(mapping['@type'] === '@none') {
          _addPreferredTerm(term, entry['@any'], '@none');
          _addPreferredTerm(term, entry['@language'], '@none');
          _addPreferredTerm(term, entry['@type'], '@none');
        } else if('@type' in mapping) {
          // term is preferred for values using specific type
          _addPreferredTerm(term, entry['@type'], mapping['@type']);
        } else if('@language' in mapping && '@direction' in mapping) {
          // term is preferred for values using specific language and direction
          const language = mapping['@language'];
          const direction = mapping['@direction'];
          if(language && direction) {
            _addPreferredTerm(term, entry['@language'],
              `${language}_${direction}`.toLowerCase());
          } else if(language) {
            _addPreferredTerm(term, entry['@language'], language.toLowerCase());
          } else if(direction) {
            _addPreferredTerm(term, entry['@language'], `_${direction}`);
          } else {
            _addPreferredTerm(term, entry['@language'], '@null');
          }
        } else if('@language' in mapping) {
          _addPreferredTerm(term, entry['@language'],
            (mapping['@language'] || '@null').toLowerCase());
        } else if('@direction' in mapping) {
          if(mapping['@direction']) {
            _addPreferredTerm(term, entry['@language'],
              `_${mapping['@direction']}`);
          } else {
            _addPreferredTerm(term, entry['@language'], '@none');
          }
        } else if(defaultDirection) {
          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);
          _addPreferredTerm(term, entry['@language'], '@none');
          _addPreferredTerm(term, entry['@type'], '@none');
        } else {
          // add entries for no type and no language
          _addPreferredTerm(term, entry['@language'], defaultLanguage);
          _addPreferredTerm(term, entry['@language'], '@none');
          _addPreferredTerm(term, entry['@type'], '@none');
        }
      }
    }

    // build fast CURIE map
    for(const key in fastCurieMap) {
      _buildIriMap(fastCurieMap, key, 1);
    }

    return inverse;
  }

  /**
   * Runs a recursive algorithm to build a lookup map for quickly finding
   * potential CURIEs.
   *
   * @param iriMap the map to build.
   * @param key the current key in the map to work on.
   * @param idx the index into the IRI to compare.
   */
  function _buildIriMap(iriMap, key, idx) {
    const entries = iriMap[key];
    const next = iriMap[key] = {};

    let iri;
    let letter;
    for(const entry of entries) {
      iri = entry.iri;
      if(idx >= iri.length) {
        letter = '';
      } else {
        letter = iri[idx];
      }
      if(letter in next) {
        next[letter].push(entry);
      } else {
        next[letter] = [entry];
      }
    }

    for(const key in next) {
      if(key === '') {
        continue;
      }
      _buildIriMap(next, key, idx + 1);
    }
  }

  /**
   * Adds the term for the given entry if not already added.
   *
   * @param term the term to add.
   * @param entry the inverse context typeOrLanguage entry to add to.
   * @param typeOrLanguageValue the key in the entry to add to.
   */
  function _addPreferredTerm(term, entry, typeOrLanguageValue) {
    if(!entry.hasOwnProperty(typeOrLanguageValue)) {
      entry[typeOrLanguageValue] = term;
    }
  }

  /**
   * Clones an active context, creating a child active context.
   *
   * @return a clone (child) of the active context.
   */
  function _cloneActiveContext() {
    const child = {};
    child.mappings = util.clone(this.mappings);
    child.clone = this.clone;
    child.inverse = null;
    child.getInverse = this.getInverse;
    child.protected = util.clone(this.protected);
    if(this.previousContext) {
      child.previousContext = this.previousContext.clone();
    }
    child.revertToPreviousContext = this.revertToPreviousContext;
    if('@base' in this) {
      child['@base'] = this['@base'];
    }
    if('@language' in this) {
      child['@language'] = this['@language'];
    }
    if('@vocab' in this) {
      child['@vocab'] = this['@vocab'];
    }
    return child;
  }

  /**
   * Reverts any type-scoped context in this active context to the previous
   * context.
   */
  function _revertToPreviousContext() {
    if(!this.previousContext) {
      return this;
    }
    return this.previousContext.clone();
  }
};

/**
 * Gets the value for the given active context key and type, null if none is
 * set or undefined if none is set and type is '@context'.
 *
 * @param ctx the active context.
 * @param key the context key.
 * @param [type] the type of value to get (eg: '@id', '@type'), if not
 *          specified gets the entire entry for a key, null if not found.
 *
 * @return the value, null, or undefined.
 */
api.getContextValue = (ctx, key, type) => {
  // invalid key
  if(key === null) {
    if(type === '@context') {
      return undefined;
    }
    return null;
  }

  // get specific entry information
  if(ctx.mappings.has(key)) {
    const entry = ctx.mappings.get(key);

    if(_isUndefined(type)) {
      // return whole entry
      return entry;
    }
    if(entry.hasOwnProperty(type)) {
      // return entry value for type
      return entry[type];
    }
  }

  // get default language
  if(type === '@language' && type in ctx) {
    return ctx[type];
  }

  // get default direction
  if(type === '@direction' && type in ctx) {
    return ctx[type];
  }

  if(type === '@context') {
    return undefined;
  }
  return null;
};

/**
 * Processing Mode check.
 *
 * @param activeCtx the current active context.
 * @param version the string or numeric version to check.
 *
 * @return boolean.
 */
api.processingMode = (activeCtx, version) => {
  if(version.toString() >= '1.1') {
    return !activeCtx.processingMode ||
      activeCtx.processingMode >= 'json-ld-' + version.toString();
  } else {
    return activeCtx.processingMode === 'json-ld-1.0';
  }
};

/**
 * Returns whether or not the given value is a keyword.
 *
 * @param v the value to check.
 *
 * @return true if the value is a keyword, false if not.
 */
api.isKeyword = v => {
  if(!_isString(v) || v[0] !== '@') {
    return false;
  }
  switch(v) {
    case '@base':
    case '@container':
    case '@context':
    case '@default':
    case '@direction':
    case '@embed':
    case '@explicit':
    case '@graph':
    case '@id':
    case '@included':
    case '@index':
    case '@json':
    case '@language':
    case '@list':
    case '@nest':
    case '@none':
    case '@omitDefault':
    case '@prefix':
    case '@preserve':
    case '@protected':
    case '@requireAll':
    case '@reverse':
    case '@set':
    case '@type':
    case '@value':
    case '@version':
    case '@vocab':
      return true;
  }
  return false;
};

function _deepCompare(x1, x2) {
  // compare `null` or primitive types directly
  if((!(x1 && typeof x1 === 'object')) ||
     (!(x2 && typeof x2 === 'object'))) {
    return x1 === x2;
  }
  // x1 and x2 are objects (also potentially arrays)
  const x1Array = Array.isArray(x1);
  if(x1Array !== Array.isArray(x2)) {
    return false;
  }
  if(x1Array) {
    if(x1.length !== x2.length) {
      return false;
    }
    for(let i = 0; i < x1.length; ++i) {
      if(!_deepCompare(x1[i], x2[i])) {
        return false;
      }
    }
    return true;
  }
  // x1 and x2 are non-array objects
  const k1s = Object.keys(x1);
  const k2s = Object.keys(x2);
  if(k1s.length !== k2s.length) {
    return false;
  }
  for(const k1 in x1) {
    let v1 = x1[k1];
    let v2 = x2[k1];
    // special case: `@container` can be in any order
    if(k1 === '@container') {
      if(Array.isArray(v1) && Array.isArray(v2)) {
        v1 = v1.slice().sort();
        v2 = v2.slice().sort();
      }
    }
    if(!_deepCompare(v1, v2)) {
      return false;
    }
  }
  return true;
}


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(28);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__(25));
util.inherits = __webpack_require__(8);
/*</replacement>*/

var Readable = __webpack_require__(73);
var Writable = __webpack_require__(42);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

const namespace = __webpack_require__(0)

const prepareNamespaces = (factory) => {
  return {
    sh: namespace('http://www.w3.org/ns/shacl#', { factory }),
    xsd: namespace('http://www.w3.org/2001/XMLSchema#', { factory }),
    rdf: namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#', { factory }),
    rdfs: namespace('http://www.w3.org/2000/01/rdf-schema#', { factory })
  }
}

const namespaces = prepareNamespaces()

module.exports = { ...namespaces, prepareNamespaces }


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(66);

var Writable = __webpack_require__(70);

__webpack_require__(8)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var DataFactory = __webpack_require__(192)

module.exports = DataFactory


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(66);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(70);
exports.Duplex = __webpack_require__(19);
exports.Transform = __webpack_require__(72);
exports.PassThrough = __webpack_require__(161);
exports.finished = __webpack_require__(38);
exports.pipeline = __webpack_require__(162);


/***/ }),
/* 22 */
/***/ (function(module, exports) {

/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = {
  // default options
  options: {
    usePureJavaScript: false
  }
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const XSD = 'http://www.w3.org/2001/XMLSchema#';

module.exports = {
  // TODO: Deprecated and will be removed later. Use LINK_HEADER_CONTEXT.
  LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',

  LINK_HEADER_CONTEXT: 'http://www.w3.org/ns/json-ld#context',

  RDF,
  RDF_LIST: RDF + 'List',
  RDF_FIRST: RDF + 'first',
  RDF_REST: RDF + 'rest',
  RDF_NIL: RDF + 'nil',
  RDF_TYPE: RDF + 'type',
  RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',
  RDF_XML_LITERAL: RDF + 'XMLLiteral',
  RDF_JSON_LITERAL: RDF + 'JSON',
  RDF_OBJECT: RDF + 'object',
  RDF_LANGSTRING: RDF + 'langString',

  XSD,
  XSD_BOOLEAN: XSD + 'boolean',
  XSD_DOUBLE: XSD + 'double',
  XSD_INTEGER: XSD + 'integer',
  XSD_STRING: XSD + 'string',
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(158).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9).Buffer))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
var domelementtype_1 = __webpack_require__(45);
function isTag(node) {
    return domelementtype_1.isTag(node);
}
exports.isTag = isTag;
function isCDATA(node) {
    return node.type === "cdata" /* CDATA */;
}
exports.isCDATA = isCDATA;
function isText(node) {
    return node.type === "text" /* Text */;
}
exports.isText = isText;
function isComment(node) {
    return node.type === "comment" /* Comment */;
}
exports.isComment = isComment;
function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
exports.hasChildren = hasChildren;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {isKeyword} = __webpack_require__(14);
const graphTypes = __webpack_require__(10);
const types = __webpack_require__(6);
const util = __webpack_require__(5);
const JsonLdError = __webpack_require__(7);

const api = {};
module.exports = api;

/**
 * Creates a merged JSON-LD node map (node ID => node).
 *
 * @param input the expanded JSON-LD to create a node map of.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *
 * @return the node map.
 */
api.createMergedNodeMap = (input, options) => {
  options = options || {};

  // produce a map of all subjects and name each bnode
  const issuer = options.issuer || new util.IdentifierIssuer('_:b');
  const graphs = {'@default': {}};
  api.createNodeMap(input, graphs, '@default', issuer);

  // add all non-default graphs to default graph
  return api.mergeNodeMaps(graphs);
};

/**
 * Recursively flattens the subjects in the given JSON-LD expanded input
 * into a node map.
 *
 * @param input the JSON-LD expanded input.
 * @param graphs a map of graph name to subject map.
 * @param graph the name of the current graph.
 * @param issuer the blank node identifier issuer.
 * @param name the name assigned to the current input if it is a bnode.
 * @param list the list to append to, null for none.
 */
api.createNodeMap = (input, graphs, graph, issuer, name, list) => {
  // recurse through array
  if(types.isArray(input)) {
    for(const node of input) {
      api.createNodeMap(node, graphs, graph, issuer, undefined, list);
    }
    return;
  }

  // add non-object to list
  if(!types.isObject(input)) {
    if(list) {
      list.push(input);
    }
    return;
  }

  // add values to list
  if(graphTypes.isValue(input)) {
    if('@type' in input) {
      let type = input['@type'];
      // rename @type blank node
      if(type.indexOf('_:') === 0) {
        input['@type'] = type = issuer.getId(type);
      }
    }
    if(list) {
      list.push(input);
    }
    return;
  } else if(list && graphTypes.isList(input)) {
    const _list = [];
    api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);
    list.push({'@list': _list});
    return;
  }

  // Note: At this point, input must be a subject.

  // spec requires @type to be named first, so assign names early
  if('@type' in input) {
    const types = input['@type'];
    for(const type of types) {
      if(type.indexOf('_:') === 0) {
        issuer.getId(type);
      }
    }
  }

  // get name for subject
  if(types.isUndefined(name)) {
    name = graphTypes.isBlankNode(input) ?
      issuer.getId(input['@id']) : input['@id'];
  }

  // add subject reference to list
  if(list) {
    list.push({'@id': name});
  }

  // create new subject or merge into existing one
  const subjects = graphs[graph];
  const subject = subjects[name] = subjects[name] || {};
  subject['@id'] = name;
  const properties = Object.keys(input).sort();
  for(let property of properties) {
    // skip @id
    if(property === '@id') {
      continue;
    }

    // handle reverse properties
    if(property === '@reverse') {
      const referencedNode = {'@id': name};
      const reverseMap = input['@reverse'];
      for(const reverseProperty in reverseMap) {
        const items = reverseMap[reverseProperty];
        for(const item of items) {
          let itemName = item['@id'];
          if(graphTypes.isBlankNode(item)) {
            itemName = issuer.getId(itemName);
          }
          api.createNodeMap(item, graphs, graph, issuer, itemName);
          util.addValue(
            subjects[itemName], reverseProperty, referencedNode,
            {propertyIsArray: true, allowDuplicate: false});
        }
      }
      continue;
    }

    // recurse into graph
    if(property === '@graph') {
      // add graph subjects map entry
      if(!(name in graphs)) {
        graphs[name] = {};
      }
      api.createNodeMap(input[property], graphs, name, issuer);
      continue;
    }

    // recurse into included
    if(property === '@included') {
      api.createNodeMap(input[property], graphs, graph, issuer);
      continue;
    }

    // copy non-@type keywords
    if(property !== '@type' && isKeyword(property)) {
      if(property === '@index' && property in subject &&
        (input[property] !== subject[property] ||
        input[property]['@id'] !== subject[property]['@id'])) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; conflicting @index property detected.',
          'jsonld.SyntaxError',
          {code: 'conflicting indexes', subject});
      }
      subject[property] = input[property];
      continue;
    }

    // iterate over objects
    const objects = input[property];

    // if property is a bnode, assign it a new id
    if(property.indexOf('_:') === 0) {
      property = issuer.getId(property);
    }

    // ensure property is added for empty arrays
    if(objects.length === 0) {
      util.addValue(subject, property, [], {propertyIsArray: true});
      continue;
    }
    for(let o of objects) {
      if(property === '@type') {
        // rename @type blank nodes
        o = (o.indexOf('_:') === 0) ? issuer.getId(o) : o;
      }

      // handle embedded subject or subject reference
      if(graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {
        // skip null @id
        if('@id' in o && !o['@id']) {
          continue;
        }

        // relabel blank node @id
        const id = graphTypes.isBlankNode(o) ?
          issuer.getId(o['@id']) : o['@id'];

        // add reference and recurse
        util.addValue(
          subject, property, {'@id': id},
          {propertyIsArray: true, allowDuplicate: false});
        api.createNodeMap(o, graphs, graph, issuer, id);
      } else if(graphTypes.isValue(o)) {
        util.addValue(
          subject, property, o,
          {propertyIsArray: true, allowDuplicate: false});
      } else if(graphTypes.isList(o)) {
        // handle @list
        const _list = [];
        api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
        o = {'@list': _list};
        util.addValue(
          subject, property, o,
          {propertyIsArray: true, allowDuplicate: false});
      } else {
        // handle @value
        api.createNodeMap(o, graphs, graph, issuer, name);
        util.addValue(
          subject, property, o, {propertyIsArray: true, allowDuplicate: false});
      }
    }
  }
};

/**
 * Merge separate named graphs into a single merged graph including
 * all nodes from the default graph and named graphs.
 *
 * @param graphs a map of graph name to subject map.
 *
 * @return the merged graph map.
 */
api.mergeNodeMapGraphs = graphs => {
  const merged = {};
  for(const name of Object.keys(graphs).sort()) {
    for(const id of Object.keys(graphs[name]).sort()) {
      const node = graphs[name][id];
      if(!(id in merged)) {
        merged[id] = {'@id': id};
      }
      const mergedNode = merged[id];

      for(const property of Object.keys(node).sort()) {
        if(isKeyword(property) && property !== '@type') {
          // copy keywords
          mergedNode[property] = util.clone(node[property]);
        } else {
          // merge objects
          for(const value of node[property]) {
            util.addValue(
              mergedNode, property, util.clone(value),
              {propertyIsArray: true, allowDuplicate: false});
          }
        }
      }
    }
  }

  return merged;
};

api.mergeNodeMaps = graphs => {
  // add all non-default graphs to default graph
  const defaultGraph = graphs['@default'];
  const graphNames = Object.keys(graphs).sort();
  for(const graphName of graphNames) {
    if(graphName === '@default') {
      continue;
    }
    const nodeMap = graphs[graphName];
    let subject = defaultGraph[graphName];
    if(!subject) {
      defaultGraph[graphName] = subject = {
        '@id': graphName,
        '@graph': []
      };
    } else if(!('@graph' in subject)) {
      subject['@graph'] = [];
    }
    const graph = subject['@graph'];
    for(const id of Object.keys(nodeMap).sort()) {
      const node = nodeMap[id];
      // only add full subjects
      if(!graphTypes.isSubjectReference(node)) {
        graph.push(node);
      }
    }
  }
  return defaultGraph;
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

const TermSet = __webpack_require__(210)

class NodeSet extends TermSet {
  addAll (nodes) {
    for (const node of nodes) {
      this.add(node)
    }
  }
}

module.exports = NodeSet


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return N3Lexer; });
/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var queue_microtask__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(101);
/* harmony import */ var queue_microtask__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(queue_microtask__WEBPACK_IMPORTED_MODULE_1__);
// **N3Lexer** tokenizes N3 documents.



const { xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"];

// Regular expression and replacement string to escape N3 strings
var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;
var escapeReplacements = {
  '\\': '\\', "'": "'", '"': '"',
  'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
};
var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;

var lineModeRegExps = {
  _iri: true,
  _unescapedIri: true,
  _simpleQuotedString: true,
  _langcode: true,
  _blank: true,
  _newline: true,
  _comment: true,
  _whitespace: true,
  _endOfFile: true,
};
var invalidRegExp = /$0^/;

// ## Constructor
class N3Lexer {
  constructor(options) {
    // ## Regular expressions
    // It's slightly faster to have these as properties than as in-scope variables
    this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/; // IRI with escape sequences; needs sanity check after unescaping
    this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/; // IRI without escape sequences; no unescaping
    this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/; // string without escape sequences
    this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
    this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
    this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;
    this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;
    this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;
    this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;
    this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;
    this._keyword = /^@[a-z]+(?=[\s#<:])/i;
    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
    this._shortPredicates = /^a(?=[\s()\[\]\{\}"'<>])/;
    this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
    this._comment = /#([^\n\r]*)/;
    this._whitespace = /^[ \t]+/;
    this._endOfFile = /^(?:#[^\n\r]*)?$/;
    options = options || {};

    // In line mode (N-Triples or N-Quads), only simple features may be parsed
    if (this._lineMode = !!options.lineMode) {
      this._n3Mode = false;
      // Don't tokenize special literals
      for (var key in this) {
        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)
          this[key] = invalidRegExp;
      }
    }
    // When not in line mode, enable N3 functionality by default
    else {
      this._n3Mode = options.n3 !== false;
    }
    // Don't output comment tokens by default
    this._comments = !!options.comments;
    // Cache the last tested closing position of long literals
    this._literalClosingPos = 0;
  }

  // ## Private methods

  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback
  _tokenizeToEnd(callback, inputFinished) {
    // Continue parsing as far as possible; the loop will return eventually
    var input = this._input, outputComments = this._comments;
    while (true) {
      // Count and skip whitespace lines
      var whiteSpaceMatch, comment;
      while (whiteSpaceMatch = this._newline.exec(input)) {
        // Try to find a comment
        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))
          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });
        // Advance the input
        input = input.substr(whiteSpaceMatch[0].length, input.length);
        this._line++;
      }
      // Skip whitespace on current line
      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))
        input = input.substr(whiteSpaceMatch[0].length, input.length);

      // Stop for now if we're at the end
      if (this._endOfFile.test(input)) {
        // If the input is finished, emit EOF
        if (inputFinished) {
          // Try to find a final comment
          if (outputComments && (comment = this._comment.exec(input)))
            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });
          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });
        }
        return this._input = input;
      }

      // Look for specific token types based on the first character
      var line = this._line, type = '', value = '', prefix = '',
          firstChar = input[0], match = null, matchLength = 0, inconclusive = false;
      switch (firstChar) {
      case '^':
        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed
        if (input.length < 3)
          break;
        // Try to match a type
        else if (input[1] === '^') {
          this._previousMarker = '^^';
          // Move to type IRI or prefixed name
          input = input.substr(2);
          if (input[0] !== '<') {
            inconclusive = true;
            break;
          }
        }
        // If no type, it must be a path expression
        else {
          if (this._n3Mode) {
            matchLength = 1;
            type = '^';
          }
          break;
        }
        // Fall through in case the type is an IRI
      case '<':
        // Try to find a full IRI without escape sequences
        if (match = this._unescapedIri.exec(input))
          type = 'IRI', value = match[1];
        // Try to find a full IRI with escape sequences
        else if (match = this._iri.exec(input)) {
          value = this._unescape(match[1]);
          if (value === null || illegalIriChars.test(value))
            return reportSyntaxError(this);
          type = 'IRI';
        }
        // Try to find a nested triple
        else if (input.length > 1 && input[1] === '<')
          type = '<<', matchLength = 2;
        // Try to find a backwards implication arrow
        else if (this._n3Mode && input.length > 1 && input[1] === '=')
          type = 'inverse', matchLength = 2, value = '>';
        break;

      case '>':
        if (input.length > 1 && input[1] === '>')
          type = '>>', matchLength = 2;
        break;

      case '_':
        // Try to find a blank node. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a blank node.
        // Therefore, try inserting a space if we're at the end of the input.
        if ((match = this._blank.exec(input)) ||
            inputFinished && (match = this._blank.exec(input + ' ')))
          type = 'blank', prefix = '_', value = match[1];
        break;

      case '"':
        // Try to find a literal without escape sequences
        if (match = this._simpleQuotedString.exec(input))
          value = match[1];
        // Try to find a literal wrapped in three pairs of quotes
        else {
          ({ value, matchLength } = this._parseLiteral(input));
          if (value === null)
            return reportSyntaxError(this);
        }
        if (match !== null || matchLength !== 0) {
          type = 'literal';
          this._literalClosingPos = 0;
        }
        break;

      case "'":
        if (!this._lineMode) {
          // Try to find a literal without escape sequences
          if (match = this._simpleApostropheString.exec(input))
            value = match[1];
          // Try to find a literal wrapped in three pairs of quotes
          else {
            ({ value, matchLength } = this._parseLiteral(input));
            if (value === null)
              return reportSyntaxError(this);
          }
          if (match !== null || matchLength !== 0) {
            type = 'literal';
            this._literalClosingPos = 0;
          }
        }
        break;

      case '?':
        // Try to find a variable
        if (this._n3Mode && (match = this._variable.exec(input)))
          type = 'var', value = match[0];
        break;

      case '@':
        // Try to find a language code
        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))
          type = 'langcode', value = match[1];
        // Try to find a keyword
        else if (match = this._keyword.exec(input))
          type = match[0];
        break;

      case '.':
        // Try to find a dot as punctuation
        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {
          type = '.';
          matchLength = 1;
          break;
        }
        // Fall through to numerical case (could be a decimal dot)

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '+':
      case '-':
        // Try to find a number. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a number.
        // Therefore, try inserting a space if we're at the end of the input.
        if (match = this._number.exec(input) ||
            inputFinished && (match = this._number.exec(input + ' '))) {
          type = 'literal', value = match[0];
          prefix = (typeof match[1] === 'string' ? xsd.double :
                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));
        }
        break;

      case 'B':
      case 'b':
      case 'p':
      case 'P':
      case 'G':
      case 'g':
        // Try to find a SPARQL-style keyword
        if (match = this._sparqlKeyword.exec(input))
          type = match[0].toUpperCase();
        else
          inconclusive = true;
        break;

      case 'f':
      case 't':
        // Try to match a boolean
        if (match = this._boolean.exec(input))
          type = 'literal', value = match[0], prefix = xsd.boolean;
        else
          inconclusive = true;
        break;

      case 'a':
        // Try to find an abbreviated predicate
        if (match = this._shortPredicates.exec(input))
          type = 'abbreviation', value = 'a';
        else
          inconclusive = true;
        break;

      case '=':
        // Try to find an implication arrow or equals sign
        if (this._n3Mode && input.length > 1) {
          type = 'abbreviation';
          if (input[1] !== '>')
            matchLength = 1, value = '=';
          else
            matchLength = 2, value = '>';
        }
        break;

      case '!':
        if (!this._n3Mode)
          break;
      case ',':
      case ';':
      case '[':
      case ']':
      case '(':
      case ')':
      case '{':
      case '}':
        if (!this._lineMode) {
          matchLength = 1;
          type = firstChar;
        }
        break;

      default:
        inconclusive = true;
      }

      // Some first characters do not allow an immediate decision, so inspect more
      if (inconclusive) {
        // Try to find a prefix
        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&
            (match = this._prefix.exec(input)))
          type = 'prefix', value = match[1] || '';
        // Try to find a prefixed name. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        else if ((match = this._prefixed.exec(input)) ||
                 inputFinished && (match = this._prefixed.exec(input + ' ')))
          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
      }

      // A type token is special: it can only be emitted after an IRI or prefixed name is read
      if (this._previousMarker === '^^') {
        switch (type) {
        case 'prefixed': type = 'type';    break;
        case 'IRI':      type = 'typeIRI'; break;
        default:         type = '';
        }
      }

      // What if nothing of the above was found?
      if (!type) {
        // We could be in streaming mode, and then we just wait for more input to arrive.
        // Otherwise, a syntax error has occurred in the input.
        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
        if (inputFinished || (!/^'''|^"""/.test(input) && /\n|\r/.test(input)))
          return reportSyntaxError(this);
        else
          return this._input = input;
      }

      // Emit the parsed token
      var token = { line: line, type: type, value: value, prefix: prefix };
      callback(null, token);
      this.previousToken = token;
      this._previousMarker = type;
      // Advance to next part to tokenize
      input = input.substr(matchLength || match[0].length, input.length);
    }

    // Signals the syntax error through the callback
    function reportSyntaxError(self) { callback(self._syntaxError(/^\S*/.exec(input)[0])); }
  }

  // ### `_unescape` replaces N3 escape codes by their corresponding characters
  _unescape(item) {
    let invalid = false;
    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {
      // 4-digit unicode character
      if (typeof unicode4 === 'string')
        return String.fromCharCode(Number.parseInt(unicode4, 16));
      // 8-digit unicode character
      if (typeof unicode8 === 'string') {
        let charCode = Number.parseInt(unicode8, 16);
        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :
          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
      }
      // fixed escape sequence
      if (escapedChar in escapeReplacements)
        return escapeReplacements[escapedChar];
      // invalid escape sequence
      invalid = true;
      return '';
    });
    return invalid ? null : replaced;
  }

  // ### `_parseLiteral` parses a literal into an unescaped value
  _parseLiteral(input) {
    // Ensure we have enough lookahead to identify triple-quoted strings
    if (input.length >= 3) {
      // Identify the opening quote(s)
      const opening = input.match(/^(?:"""|"|'''|'|)/)[0];
      const openingLength = opening.length;

      // Find the next candidate closing quotes
      let closingPos = Math.max(this._literalClosingPos, openingLength);
      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {
        // Count backslashes right before the closing quotes
        let backslashCount = 0;
        while (input[closingPos - backslashCount - 1] === '\\')
          backslashCount++;

        // An even number of backslashes (in particular 0)
        // means these are actual, non-escaped closing quotes
        if (backslashCount % 2 === 0) {
          // Extract and unescape the value
          const raw = input.substring(openingLength, closingPos);
          const lines = raw.split(/\r\n|\r|\n/).length - 1;
          const matchLength = closingPos + openingLength;
          // Only triple-quoted strings can be multi-line
          if (openingLength === 1 && lines !== 0 ||
              openingLength === 3 && this._lineMode)
            break;
          this._line += lines;
          return { value: this._unescape(raw), matchLength };
        }
        closingPos++;
      }
      this._literalClosingPos = input.length - openingLength + 1;
    }
    return { value: '', matchLength: 0 };
  }

  // ### `_syntaxError` creates a syntax error for the given issue
  _syntaxError(issue) {
    this._input = null;
    var err = new Error('Unexpected "' + issue + '" on line ' + this._line + '.');
    err.context = {
      token: undefined,
      line: this._line,
      previousToken: this.previousToken,
    };
    return err;
  }

  // ## Public methods

  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
  // The input can be a string or a stream.
  tokenize(input, callback) {
    var self = this;
    this._line = 1;

    // If the input is a string, continuously emit tokens through the callback until the end
    if (typeof input === 'string') {
      this._input = input;
      // If a callback was passed, asynchronously call it
      if (typeof callback === 'function')
        queue_microtask__WEBPACK_IMPORTED_MODULE_1___default()(() => self._tokenizeToEnd(callback, true));
      // If no callback was passed, tokenize synchronously and return
      else {
        var tokens = [], error;
        this._tokenizeToEnd(function (e, t) { e ? (error = e) : tokens.push(t); }, true);
        if (error) throw error;
        return tokens;
      }
    }
    // Otherwise, the input must be a stream
    else {
      this._input = '';
      this._pendingBuffer = null;
      if (typeof input.setEncoding === 'function')
        input.setEncoding('utf8');
      // Adds the data chunk to the buffer and parses as far as possible
      input.on('data', function (data) {
        if (self._input !== null && data.length !== 0) {
          // Prepend any previous pending writes
          if (self._pendingBuffer) {
            data = Buffer.concat([self._pendingBuffer, data]);
            self._pendingBuffer = null;
          }
          // Hold if the buffer ends in an incomplete unicode sequence
          if (data[data.length - 1] & 0x80) {
            self._pendingBuffer = data;
          }
          // Otherwise, tokenize as far as possible
          else {
            self._input += data;
            self._tokenizeToEnd(callback, false);
          }
        }
      });
      // Parses until the end
      input.on('end', function () {
        if (self._input !== null)
          self._tokenizeToEnd(callback, true);
      });
      input.on('error', callback);
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9).Buffer))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(105);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(106);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2017 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


const util = __webpack_require__(13);
const URDNA2015 = __webpack_require__(59);
const URGNA2012 = __webpack_require__(133);
const URDNA2015Sync = __webpack_require__(64);
const URGNA2012Sync = __webpack_require__(134);

// optional native support
let rdfCanonizeNative;
try {
  rdfCanonizeNative = __webpack_require__(135);
} catch(e) {}

const api = {};
module.exports = api;

// expose helpers
api.NQuads = __webpack_require__(36);
api.IdentifierIssuer = __webpack_require__(34);

/**
 * Get or set native API.
 *
 * @param api the native API.
 *
 * @return the currently set native API.
 */
api._rdfCanonizeNative = function(api) {
  if(api) {
    rdfCanonizeNative = api;
  }
  return rdfCanonizeNative;
};

/**
 * Asynchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 * @param [callback(err, canonical)] called once the operation completes.
 *
 * @return a Promise that resolves to the canonicalized RDF Dataset.
 */
api.canonize = util.callbackify(async function(dataset, options) {
  let callback;
  const promise = new Promise((resolve, reject) => {
    callback = (err, canonical) => {
      if(err) {
        return reject(err);
      }

      /*if(options.format === 'application/n-quads') {
        canonical = canonical.join('');
      }
      canonical = _parseNQuads(canonical.join(''));*/

      resolve(canonical);
    };
  });

  // back-compat with legacy dataset
  if(!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  // TODO: convert algorithms to Promise-based async
  if(options.useNative) {
    if(rdfCanonizeNative) {
      rdfCanonizeNative.canonize(dataset, options, callback);
    } else {
      throw new Error('rdf-canonize-native not available');
    }
  } else {
    if(options.algorithm === 'URDNA2015') {
      new URDNA2015(options).main(dataset, callback);
    } else if(options.algorithm === 'URGNA2012') {
      new URGNA2012(options).main(dataset, callback);
    } else if(!('algorithm' in options)) {
      throw new Error('No RDF Dataset Canonicalization algorithm specified.');
    } else {
      throw new Error(
        'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
    }
  }

  return promise;
});

/**
 * Synchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return the RDF dataset in canonical form.
 */
api.canonizeSync = function(dataset, options) {
  // back-compat with legacy dataset
  if(!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  if(options.useNative) {
    if(rdfCanonizeNative) {
      return rdfCanonizeNative.canonizeSync(dataset, options);
    }
    throw new Error('rdf-canonize-native not available');
  }
  if(options.algorithm === 'URDNA2015') {
    return new URDNA2015Sync(options).main(dataset);
  } else if(options.algorithm === 'URGNA2012') {
    return new URGNA2012Sync(options).main(dataset);
  }
  if(!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }
  throw new Error(
    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(126);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const util = __webpack_require__(13);

module.exports = class IdentifierIssuer {
  /**
   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
   * identifiers, keeping track of any previously issued identifiers.
   *
   * @param prefix the prefix to use ('<prefix><counter>').
   */
  constructor(prefix) {
    this.prefix = prefix;
    this.counter = 0;
    this.existing = {};
  }

  /**
   * Copies this IdentifierIssuer.
   *
   * @return a copy of this IdentifierIssuer.
   */
  clone() {
    const copy = new IdentifierIssuer(this.prefix);
    copy.counter = this.counter;
    copy.existing = util.clone(this.existing);
    return copy;
  }

  /**
   * Gets the new identifier for the given old identifier, where if no old
   * identifier is given a new identifier will be generated.
   *
   * @param [old] the old identifier to get the new identifier for.
   *
   * @return the new identifier.
   */
  getId(old) {
    // return existing old identifier
    if(old && old in this.existing) {
      return this.existing[old];
    }

    // get next identifier
    const identifier = this.prefix + this.counter;
    this.counter += 1;

    // save mapping
    if(old) {
      this.existing[old] = identifier;
    }

    return identifier;
  }

  /**
   * Returns true if the given old identifer has already been assigned a new
   * identifier.
   *
   * @param old the old identifier to check.
   *
   * @return true if the old identifier has been assigned a new identifier,
   *   false if not.
   */
  hasId(old) {
    return (old in this.existing);
  }
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(22);

module.exports = forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const TERMS = ['subject', 'predicate', 'object', 'graph'];
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const RDF_LANGSTRING = RDF + 'langString';
const XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';

// build regexes
const REGEX = {};
(() => {
  const iri = '(?:<([^:]+:[^>]*)>)';
  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL
  const PN_CHARS_BASE =
    'A-Z' + 'a-z' +
    '\u00C0-\u00D6' +
    '\u00D8-\u00F6' +
    '\u00F8-\u02FF' +
    '\u0370-\u037D' +
    '\u037F-\u1FFF' +
    '\u200C-\u200D' +
    '\u2070-\u218F' +
    '\u2C00-\u2FEF' +
    '\u3001-\uD7FF' +
    '\uF900-\uFDCF' +
    '\uFDF0-\uFFFD';
    // TODO:
    //'\u10000-\uEFFFF';
  const PN_CHARS_U =
    PN_CHARS_BASE +
    '_';
  const PN_CHARS =
    PN_CHARS_U +
    '0-9' +
    '-' +
    '\u00B7' +
    '\u0300-\u036F' +
    '\u203F-\u2040';
  const BLANK_NODE_LABEL =
    '(_:' +
      '(?:[' + PN_CHARS_U + '0-9])' +
      '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' +
    ')';
  const bnode = BLANK_NODE_LABEL;
  const plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
  const datatype = '(?:\\^\\^' + iri + ')';
  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';
  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
  const ws = '[ \\t]+';
  const wso = '[ \\t]*';

  // define quad part regexes
  const subject = '(?:' + iri + '|' + bnode + ')' + ws;
  const property = iri + ws;
  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
  const graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))';

  // end of line and empty regexes
  REGEX.eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
  REGEX.empty = new RegExp('^' + wso + '$');

  // full quad regex
  REGEX.quad = new RegExp(
    '^' + wso + subject + property + object + graphName + wso + '$');
})();

module.exports = class NQuads {
  /**
   * Parses RDF in the form of N-Quads.
   *
   * @param input the N-Quads input to parse.
   *
   * @return an RDF dataset (an array of quads per http://rdf.js.org/).
   */
  static parse(input) {
    // build RDF dataset
    const dataset = [];

    const graphs = {};

    // split N-Quad input into lines
    const lines = input.split(REGEX.eoln);
    let lineNumber = 0;
    for(const line of lines) {
      lineNumber++;

      // skip empty lines
      if(REGEX.empty.test(line)) {
        continue;
      }

      // parse quad
      const match = line.match(REGEX.quad);
      if(match === null) {
        throw new Error('N-Quads parse error on line ' + lineNumber + '.');
      }

      // create RDF quad
      const quad = {};

      // get subject
      if(match[1] !== undefined) {
        quad.subject = {termType: 'NamedNode', value: match[1]};
      } else {
        quad.subject = {termType: 'BlankNode', value: match[2]};
      }

      // get predicate
      quad.predicate = {termType: 'NamedNode', value: match[3]};

      // get object
      if(match[4] !== undefined) {
        quad.object = {termType: 'NamedNode', value: match[4]};
      } else if(match[5] !== undefined) {
        quad.object = {termType: 'BlankNode', value: match[5]};
      } else {
        quad.object = {
          termType: 'Literal',
          value: undefined,
          datatype: {
            termType: 'NamedNode'
          }
        };
        if(match[7] !== undefined) {
          quad.object.datatype.value = match[7];
        } else if(match[8] !== undefined) {
          quad.object.datatype.value = RDF_LANGSTRING;
          quad.object.language = match[8];
        } else {
          quad.object.datatype.value = XSD_STRING;
        }
        quad.object.value = _unescape(match[6]);
      }

      // get graph
      if(match[9] !== undefined) {
        quad.graph = {
          termType: 'NamedNode',
          value: match[9]
        };
      } else if(match[10] !== undefined) {
        quad.graph = {
          termType: 'BlankNode',
          value: match[10]
        };
      } else {
        quad.graph = {
          termType: 'DefaultGraph',
          value: ''
        };
      }

      // only add quad if it is unique in its graph
      if(!(quad.graph.value in graphs)) {
        graphs[quad.graph.value] = [quad];
        dataset.push(quad);
      } else {
        let unique = true;
        const quads = graphs[quad.graph.value];
        for(const q of quads) {
          if(_compareTriples(q, quad)) {
            unique = false;
            break;
          }
        }
        if(unique) {
          quads.push(quad);
          dataset.push(quad);
        }
      }
    }

    return dataset;
  }

  /**
   * Converts an RDF dataset to N-Quads.
   *
   * @param dataset (array of quads) the RDF dataset to convert.
   *
   * @return the N-Quads string.
   */
  static serialize(dataset) {
    if(!Array.isArray(dataset)) {
      dataset = NQuads.legacyDatasetToQuads(dataset);
    }
    const quads = [];
    for(const quad of dataset) {
      quads.push(NQuads.serializeQuad(quad));
    }
    return quads.sort().join('');
  }

  /**
   * Converts an RDF quad to an N-Quad string (a single quad).
   *
   * @param quad the RDF quad convert.
   *
   * @return the N-Quad string.
   */
  static serializeQuad(quad) {
    const s = quad.subject;
    const p = quad.predicate;
    const o = quad.object;
    const g = quad.graph;

    let nquad = '';

    // subject and predicate can only be NamedNode or BlankNode
    [s, p].forEach(term => {
      if(term.termType === 'NamedNode') {
        nquad += '<' + term.value + '>';
      } else {
        nquad += term.value;
      }
      nquad += ' ';
    });

    // object is NamedNode, BlankNode, or Literal
    if(o.termType === 'NamedNode') {
      nquad += '<' + o.value + '>';
    } else if(o.termType === 'BlankNode') {
      nquad += o.value;
    } else {
      nquad += '"' + _escape(o.value) + '"';
      if(o.datatype.value === RDF_LANGSTRING) {
        if(o.language) {
          nquad += '@' + o.language;
        }
      } else if(o.datatype.value !== XSD_STRING) {
        nquad += '^^<' + o.datatype.value + '>';
      }
    }

    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that
    // does not add to `nquad`)
    if(g.termType === 'NamedNode') {
      nquad += ' <' + g.value + '>';
    } else if(g.termType === 'BlankNode') {
      nquad += ' ' + g.value;
    }

    nquad += ' .\n';
    return nquad;
  }

  /**
   * Converts a legacy-formatted dataset to an array of quads dataset per
   * http://rdf.js.org/.
   *
   * @param dataset the legacy dataset to convert.
   *
   * @return the array of quads dataset.
   */
  static legacyDatasetToQuads(dataset) {
    const quads = [];

    const termTypeMap = {
      'blank node': 'BlankNode',
      'IRI': 'NamedNode',
      'literal': 'Literal'
    };

    for(const graphName in dataset) {
      const triples = dataset[graphName];
      triples.forEach(triple => {
        const quad = {};
        for(const componentName in triple) {
          const oldComponent = triple[componentName];
          const newComponent = {
            termType: termTypeMap[oldComponent.type],
            value: oldComponent.value
          };
          if(newComponent.termType === 'Literal') {
            newComponent.datatype = {
              termType: 'NamedNode'
            };
            if('datatype' in oldComponent) {
              newComponent.datatype.value = oldComponent.datatype;
            }
            if('language' in oldComponent) {
              if(!('datatype' in oldComponent)) {
                newComponent.datatype.value = RDF_LANGSTRING;
              }
              newComponent.language = oldComponent.language;
            } else if(!('datatype' in oldComponent)) {
              newComponent.datatype.value = XSD_STRING;
            }
          }
          quad[componentName] = newComponent;
        }
        if(graphName === '@default') {
          quad.graph = {
            termType: 'DefaultGraph',
            value: ''
          };
        } else {
          quad.graph = {
            termType: graphName.startsWith('_:') ? 'BlankNode' : 'NamedNode',
            value: graphName
          };
        }
        quads.push(quad);
      });
    }

    return quads;
  }
};

/**
 * Compares two RDF triples for equality.
 *
 * @param t1 the first triple.
 * @param t2 the second triple.
 *
 * @return true if the triples are the same, false if not.
 */
function _compareTriples(t1, t2) {
  for(const k in t1) {
    if(t1[k].termType !== t2[k].termType || t1[k].value !== t2[k].value) {
      return false;
    }
  }
  if(t1.object.termType !== 'Literal') {
    return true;
  }
  return (
    (t1.object.datatype.termType === t2.object.datatype.termType) &&
    (t1.object.datatype.value === t2.object.datatype.value) &&
    (t1.object.language === t2.object.language)
  );
}

const _escapeRegex = /["\\\n\r]/g;
/**
 * Escape string to N-Quads literal
 */
function _escape(s) {
  return s.replace(_escapeRegex, function(match) {
    switch(match) {
      case '"': return '\\"';
      case '\\': return '\\\\';
      case '\n': return '\\n';
      case '\r': return '\\r';
    }
  });
}

const _unescapeRegex =
  /(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;
/**
 * Unescape N-Quads literal to string
 */
function _unescape(s) {
  return s.replace(_unescapeRegex, function(match, code, u, U) {
    if(code) {
      switch(code) {
        case 't': return '\t';
        case 'b': return '\b';
        case 'n': return '\n';
        case 'r': return '\r';
        case 'f': return '\f';
        case '"': return '"';
        case '\'': return '\'';
        case '\\': return '\\';
      }
    }
    if(u) {
      return String.fromCharCode(parseInt(u, 16));
    }
    if(U) {
      // FIXME: support larger values
      throw new Error('Unsupported U escape');
    }
  });
}


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


module.exports = class RequestQueue {
  /**
   * Creates a simple queue for requesting documents.
   */
  constructor() {
    this._requests = {};
  }

  wrapLoader(loader) {
    const self = this;
    self._loader = loader;
    return function(/* url */) {
      return self.add.apply(self, arguments);
    };
  }

  async add(url) {
    let promise = this._requests[url];
    if(promise) {
      // URL already queued, wait for it to load
      return Promise.resolve(promise);
    }

    // queue URL and load it
    promise = this._requests[url] = this._loader(url);

    try {
      return await promise;
    } finally {
      delete this._requests[url];
    }
  }
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(18).codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(15).EventEmitter;
var inherits = __webpack_require__(8);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(40);
Stream.Writable = __webpack_require__(168);
Stream.Duplex = __webpack_require__(169);
Stream.Transform = __webpack_require__(170);
Stream.PassThrough = __webpack_require__(171);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(73);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(42);
exports.Duplex = __webpack_require__(16);
exports.Transform = __webpack_require__(76);
exports.PassThrough = __webpack_require__(167);


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(9)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(28);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__(25));
util.inherits = __webpack_require__(8);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(71)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(74);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(41).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(75);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(16);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(16);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(33).setImmediate, __webpack_require__(3)))

/***/ }),
/* 43 */
/***/ (function(module) {

module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Abreve\":\"Ă\",\"abreve\":\"ă\",\"ac\":\"∾\",\"acd\":\"∿\",\"acE\":\"∾̳\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"Acy\":\"А\",\"acy\":\"а\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"af\":\"⁡\",\"Afr\":\"𝔄\",\"afr\":\"𝔞\",\"Agrave\":\"À\",\"agrave\":\"à\",\"alefsym\":\"ℵ\",\"aleph\":\"ℵ\",\"Alpha\":\"Α\",\"alpha\":\"α\",\"Amacr\":\"Ā\",\"amacr\":\"ā\",\"amalg\":\"⨿\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"⩕\",\"And\":\"⩓\",\"and\":\"∧\",\"andd\":\"⩜\",\"andslope\":\"⩘\",\"andv\":\"⩚\",\"ang\":\"∠\",\"ange\":\"⦤\",\"angle\":\"∠\",\"angmsdaa\":\"⦨\",\"angmsdab\":\"⦩\",\"angmsdac\":\"⦪\",\"angmsdad\":\"⦫\",\"angmsdae\":\"⦬\",\"angmsdaf\":\"⦭\",\"angmsdag\":\"⦮\",\"angmsdah\":\"⦯\",\"angmsd\":\"∡\",\"angrt\":\"∟\",\"angrtvb\":\"⊾\",\"angrtvbd\":\"⦝\",\"angsph\":\"∢\",\"angst\":\"Å\",\"angzarr\":\"⍼\",\"Aogon\":\"Ą\",\"aogon\":\"ą\",\"Aopf\":\"𝔸\",\"aopf\":\"𝕒\",\"apacir\":\"⩯\",\"ap\":\"≈\",\"apE\":\"⩰\",\"ape\":\"≊\",\"apid\":\"≋\",\"apos\":\"'\",\"ApplyFunction\":\"⁡\",\"approx\":\"≈\",\"approxeq\":\"≊\",\"Aring\":\"Å\",\"aring\":\"å\",\"Ascr\":\"𝒜\",\"ascr\":\"𝒶\",\"Assign\":\"≔\",\"ast\":\"*\",\"asymp\":\"≈\",\"asympeq\":\"≍\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"awconint\":\"∳\",\"awint\":\"⨑\",\"backcong\":\"≌\",\"backepsilon\":\"϶\",\"backprime\":\"‵\",\"backsim\":\"∽\",\"backsimeq\":\"⋍\",\"Backslash\":\"∖\",\"Barv\":\"⫧\",\"barvee\":\"⊽\",\"barwed\":\"⌅\",\"Barwed\":\"⌆\",\"barwedge\":\"⌅\",\"bbrk\":\"⎵\",\"bbrktbrk\":\"⎶\",\"bcong\":\"≌\",\"Bcy\":\"Б\",\"bcy\":\"б\",\"bdquo\":\"„\",\"becaus\":\"∵\",\"because\":\"∵\",\"Because\":\"∵\",\"bemptyv\":\"⦰\",\"bepsi\":\"϶\",\"bernou\":\"ℬ\",\"Bernoullis\":\"ℬ\",\"Beta\":\"Β\",\"beta\":\"β\",\"beth\":\"ℶ\",\"between\":\"≬\",\"Bfr\":\"𝔅\",\"bfr\":\"𝔟\",\"bigcap\":\"⋂\",\"bigcirc\":\"◯\",\"bigcup\":\"⋃\",\"bigodot\":\"⨀\",\"bigoplus\":\"⨁\",\"bigotimes\":\"⨂\",\"bigsqcup\":\"⨆\",\"bigstar\":\"★\",\"bigtriangledown\":\"▽\",\"bigtriangleup\":\"△\",\"biguplus\":\"⨄\",\"bigvee\":\"⋁\",\"bigwedge\":\"⋀\",\"bkarow\":\"⤍\",\"blacklozenge\":\"⧫\",\"blacksquare\":\"▪\",\"blacktriangle\":\"▴\",\"blacktriangledown\":\"▾\",\"blacktriangleleft\":\"◂\",\"blacktriangleright\":\"▸\",\"blank\":\"␣\",\"blk12\":\"▒\",\"blk14\":\"░\",\"blk34\":\"▓\",\"block\":\"█\",\"bne\":\"=⃥\",\"bnequiv\":\"≡⃥\",\"bNot\":\"⫭\",\"bnot\":\"⌐\",\"Bopf\":\"𝔹\",\"bopf\":\"𝕓\",\"bot\":\"⊥\",\"bottom\":\"⊥\",\"bowtie\":\"⋈\",\"boxbox\":\"⧉\",\"boxdl\":\"┐\",\"boxdL\":\"╕\",\"boxDl\":\"╖\",\"boxDL\":\"╗\",\"boxdr\":\"┌\",\"boxdR\":\"╒\",\"boxDr\":\"╓\",\"boxDR\":\"╔\",\"boxh\":\"─\",\"boxH\":\"═\",\"boxhd\":\"┬\",\"boxHd\":\"╤\",\"boxhD\":\"╥\",\"boxHD\":\"╦\",\"boxhu\":\"┴\",\"boxHu\":\"╧\",\"boxhU\":\"╨\",\"boxHU\":\"╩\",\"boxminus\":\"⊟\",\"boxplus\":\"⊞\",\"boxtimes\":\"⊠\",\"boxul\":\"┘\",\"boxuL\":\"╛\",\"boxUl\":\"╜\",\"boxUL\":\"╝\",\"boxur\":\"└\",\"boxuR\":\"╘\",\"boxUr\":\"╙\",\"boxUR\":\"╚\",\"boxv\":\"│\",\"boxV\":\"║\",\"boxvh\":\"┼\",\"boxvH\":\"╪\",\"boxVh\":\"╫\",\"boxVH\":\"╬\",\"boxvl\":\"┤\",\"boxvL\":\"╡\",\"boxVl\":\"╢\",\"boxVL\":\"╣\",\"boxvr\":\"├\",\"boxvR\":\"╞\",\"boxVr\":\"╟\",\"boxVR\":\"╠\",\"bprime\":\"‵\",\"breve\":\"˘\",\"Breve\":\"˘\",\"brvbar\":\"¦\",\"bscr\":\"𝒷\",\"Bscr\":\"ℬ\",\"bsemi\":\"⁏\",\"bsim\":\"∽\",\"bsime\":\"⋍\",\"bsolb\":\"⧅\",\"bsol\":\"\\\\\",\"bsolhsub\":\"⟈\",\"bull\":\"•\",\"bullet\":\"•\",\"bump\":\"≎\",\"bumpE\":\"⪮\",\"bumpe\":\"≏\",\"Bumpeq\":\"≎\",\"bumpeq\":\"≏\",\"Cacute\":\"Ć\",\"cacute\":\"ć\",\"capand\":\"⩄\",\"capbrcup\":\"⩉\",\"capcap\":\"⩋\",\"cap\":\"∩\",\"Cap\":\"⋒\",\"capcup\":\"⩇\",\"capdot\":\"⩀\",\"CapitalDifferentialD\":\"ⅅ\",\"caps\":\"∩︀\",\"caret\":\"⁁\",\"caron\":\"ˇ\",\"Cayleys\":\"ℭ\",\"ccaps\":\"⩍\",\"Ccaron\":\"Č\",\"ccaron\":\"č\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"Ccirc\":\"Ĉ\",\"ccirc\":\"ĉ\",\"Cconint\":\"∰\",\"ccups\":\"⩌\",\"ccupssm\":\"⩐\",\"Cdot\":\"Ċ\",\"cdot\":\"ċ\",\"cedil\":\"¸\",\"Cedilla\":\"¸\",\"cemptyv\":\"⦲\",\"cent\":\"¢\",\"centerdot\":\"·\",\"CenterDot\":\"·\",\"cfr\":\"𝔠\",\"Cfr\":\"ℭ\",\"CHcy\":\"Ч\",\"chcy\":\"ч\",\"check\":\"✓\",\"checkmark\":\"✓\",\"Chi\":\"Χ\",\"chi\":\"χ\",\"circ\":\"ˆ\",\"circeq\":\"≗\",\"circlearrowleft\":\"↺\",\"circlearrowright\":\"↻\",\"circledast\":\"⊛\",\"circledcirc\":\"⊚\",\"circleddash\":\"⊝\",\"CircleDot\":\"⊙\",\"circledR\":\"®\",\"circledS\":\"Ⓢ\",\"CircleMinus\":\"⊖\",\"CirclePlus\":\"⊕\",\"CircleTimes\":\"⊗\",\"cir\":\"○\",\"cirE\":\"⧃\",\"cire\":\"≗\",\"cirfnint\":\"⨐\",\"cirmid\":\"⫯\",\"cirscir\":\"⧂\",\"ClockwiseContourIntegral\":\"∲\",\"CloseCurlyDoubleQuote\":\"”\",\"CloseCurlyQuote\":\"’\",\"clubs\":\"♣\",\"clubsuit\":\"♣\",\"colon\":\":\",\"Colon\":\"∷\",\"Colone\":\"⩴\",\"colone\":\"≔\",\"coloneq\":\"≔\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"∁\",\"compfn\":\"∘\",\"complement\":\"∁\",\"complexes\":\"ℂ\",\"cong\":\"≅\",\"congdot\":\"⩭\",\"Congruent\":\"≡\",\"conint\":\"∮\",\"Conint\":\"∯\",\"ContourIntegral\":\"∮\",\"copf\":\"𝕔\",\"Copf\":\"ℂ\",\"coprod\":\"∐\",\"Coproduct\":\"∐\",\"copy\":\"©\",\"COPY\":\"©\",\"copysr\":\"℗\",\"CounterClockwiseContourIntegral\":\"∳\",\"crarr\":\"↵\",\"cross\":\"✗\",\"Cross\":\"⨯\",\"Cscr\":\"𝒞\",\"cscr\":\"𝒸\",\"csub\":\"⫏\",\"csube\":\"⫑\",\"csup\":\"⫐\",\"csupe\":\"⫒\",\"ctdot\":\"⋯\",\"cudarrl\":\"⤸\",\"cudarrr\":\"⤵\",\"cuepr\":\"⋞\",\"cuesc\":\"⋟\",\"cularr\":\"↶\",\"cularrp\":\"⤽\",\"cupbrcap\":\"⩈\",\"cupcap\":\"⩆\",\"CupCap\":\"≍\",\"cup\":\"∪\",\"Cup\":\"⋓\",\"cupcup\":\"⩊\",\"cupdot\":\"⊍\",\"cupor\":\"⩅\",\"cups\":\"∪︀\",\"curarr\":\"↷\",\"curarrm\":\"⤼\",\"curlyeqprec\":\"⋞\",\"curlyeqsucc\":\"⋟\",\"curlyvee\":\"⋎\",\"curlywedge\":\"⋏\",\"curren\":\"¤\",\"curvearrowleft\":\"↶\",\"curvearrowright\":\"↷\",\"cuvee\":\"⋎\",\"cuwed\":\"⋏\",\"cwconint\":\"∲\",\"cwint\":\"∱\",\"cylcty\":\"⌭\",\"dagger\":\"†\",\"Dagger\":\"‡\",\"daleth\":\"ℸ\",\"darr\":\"↓\",\"Darr\":\"↡\",\"dArr\":\"⇓\",\"dash\":\"‐\",\"Dashv\":\"⫤\",\"dashv\":\"⊣\",\"dbkarow\":\"⤏\",\"dblac\":\"˝\",\"Dcaron\":\"Ď\",\"dcaron\":\"ď\",\"Dcy\":\"Д\",\"dcy\":\"д\",\"ddagger\":\"‡\",\"ddarr\":\"⇊\",\"DD\":\"ⅅ\",\"dd\":\"ⅆ\",\"DDotrahd\":\"⤑\",\"ddotseq\":\"⩷\",\"deg\":\"°\",\"Del\":\"∇\",\"Delta\":\"Δ\",\"delta\":\"δ\",\"demptyv\":\"⦱\",\"dfisht\":\"⥿\",\"Dfr\":\"𝔇\",\"dfr\":\"𝔡\",\"dHar\":\"⥥\",\"dharl\":\"⇃\",\"dharr\":\"⇂\",\"DiacriticalAcute\":\"´\",\"DiacriticalDot\":\"˙\",\"DiacriticalDoubleAcute\":\"˝\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"˜\",\"diam\":\"⋄\",\"diamond\":\"⋄\",\"Diamond\":\"⋄\",\"diamondsuit\":\"♦\",\"diams\":\"♦\",\"die\":\"¨\",\"DifferentialD\":\"ⅆ\",\"digamma\":\"ϝ\",\"disin\":\"⋲\",\"div\":\"÷\",\"divide\":\"÷\",\"divideontimes\":\"⋇\",\"divonx\":\"⋇\",\"DJcy\":\"Ђ\",\"djcy\":\"ђ\",\"dlcorn\":\"⌞\",\"dlcrop\":\"⌍\",\"dollar\":\"$\",\"Dopf\":\"𝔻\",\"dopf\":\"𝕕\",\"Dot\":\"¨\",\"dot\":\"˙\",\"DotDot\":\"⃜\",\"doteq\":\"≐\",\"doteqdot\":\"≑\",\"DotEqual\":\"≐\",\"dotminus\":\"∸\",\"dotplus\":\"∔\",\"dotsquare\":\"⊡\",\"doublebarwedge\":\"⌆\",\"DoubleContourIntegral\":\"∯\",\"DoubleDot\":\"¨\",\"DoubleDownArrow\":\"⇓\",\"DoubleLeftArrow\":\"⇐\",\"DoubleLeftRightArrow\":\"⇔\",\"DoubleLeftTee\":\"⫤\",\"DoubleLongLeftArrow\":\"⟸\",\"DoubleLongLeftRightArrow\":\"⟺\",\"DoubleLongRightArrow\":\"⟹\",\"DoubleRightArrow\":\"⇒\",\"DoubleRightTee\":\"⊨\",\"DoubleUpArrow\":\"⇑\",\"DoubleUpDownArrow\":\"⇕\",\"DoubleVerticalBar\":\"∥\",\"DownArrowBar\":\"⤓\",\"downarrow\":\"↓\",\"DownArrow\":\"↓\",\"Downarrow\":\"⇓\",\"DownArrowUpArrow\":\"⇵\",\"DownBreve\":\"̑\",\"downdownarrows\":\"⇊\",\"downharpoonleft\":\"⇃\",\"downharpoonright\":\"⇂\",\"DownLeftRightVector\":\"⥐\",\"DownLeftTeeVector\":\"⥞\",\"DownLeftVectorBar\":\"⥖\",\"DownLeftVector\":\"↽\",\"DownRightTeeVector\":\"⥟\",\"DownRightVectorBar\":\"⥗\",\"DownRightVector\":\"⇁\",\"DownTeeArrow\":\"↧\",\"DownTee\":\"⊤\",\"drbkarow\":\"⤐\",\"drcorn\":\"⌟\",\"drcrop\":\"⌌\",\"Dscr\":\"𝒟\",\"dscr\":\"𝒹\",\"DScy\":\"Ѕ\",\"dscy\":\"ѕ\",\"dsol\":\"⧶\",\"Dstrok\":\"Đ\",\"dstrok\":\"đ\",\"dtdot\":\"⋱\",\"dtri\":\"▿\",\"dtrif\":\"▾\",\"duarr\":\"⇵\",\"duhar\":\"⥯\",\"dwangle\":\"⦦\",\"DZcy\":\"Џ\",\"dzcy\":\"џ\",\"dzigrarr\":\"⟿\",\"Eacute\":\"É\",\"eacute\":\"é\",\"easter\":\"⩮\",\"Ecaron\":\"Ě\",\"ecaron\":\"ě\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"ecir\":\"≖\",\"ecolon\":\"≕\",\"Ecy\":\"Э\",\"ecy\":\"э\",\"eDDot\":\"⩷\",\"Edot\":\"Ė\",\"edot\":\"ė\",\"eDot\":\"≑\",\"ee\":\"ⅇ\",\"efDot\":\"≒\",\"Efr\":\"𝔈\",\"efr\":\"𝔢\",\"eg\":\"⪚\",\"Egrave\":\"È\",\"egrave\":\"è\",\"egs\":\"⪖\",\"egsdot\":\"⪘\",\"el\":\"⪙\",\"Element\":\"∈\",\"elinters\":\"⏧\",\"ell\":\"ℓ\",\"els\":\"⪕\",\"elsdot\":\"⪗\",\"Emacr\":\"Ē\",\"emacr\":\"ē\",\"empty\":\"∅\",\"emptyset\":\"∅\",\"EmptySmallSquare\":\"◻\",\"emptyv\":\"∅\",\"EmptyVerySmallSquare\":\"▫\",\"emsp13\":\" \",\"emsp14\":\" \",\"emsp\":\" \",\"ENG\":\"Ŋ\",\"eng\":\"ŋ\",\"ensp\":\" \",\"Eogon\":\"Ę\",\"eogon\":\"ę\",\"Eopf\":\"𝔼\",\"eopf\":\"𝕖\",\"epar\":\"⋕\",\"eparsl\":\"⧣\",\"eplus\":\"⩱\",\"epsi\":\"ε\",\"Epsilon\":\"Ε\",\"epsilon\":\"ε\",\"epsiv\":\"ϵ\",\"eqcirc\":\"≖\",\"eqcolon\":\"≕\",\"eqsim\":\"≂\",\"eqslantgtr\":\"⪖\",\"eqslantless\":\"⪕\",\"Equal\":\"⩵\",\"equals\":\"=\",\"EqualTilde\":\"≂\",\"equest\":\"≟\",\"Equilibrium\":\"⇌\",\"equiv\":\"≡\",\"equivDD\":\"⩸\",\"eqvparsl\":\"⧥\",\"erarr\":\"⥱\",\"erDot\":\"≓\",\"escr\":\"ℯ\",\"Escr\":\"ℰ\",\"esdot\":\"≐\",\"Esim\":\"⩳\",\"esim\":\"≂\",\"Eta\":\"Η\",\"eta\":\"η\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"euro\":\"€\",\"excl\":\"!\",\"exist\":\"∃\",\"Exists\":\"∃\",\"expectation\":\"ℰ\",\"exponentiale\":\"ⅇ\",\"ExponentialE\":\"ⅇ\",\"fallingdotseq\":\"≒\",\"Fcy\":\"Ф\",\"fcy\":\"ф\",\"female\":\"♀\",\"ffilig\":\"ﬃ\",\"fflig\":\"ﬀ\",\"ffllig\":\"ﬄ\",\"Ffr\":\"𝔉\",\"ffr\":\"𝔣\",\"filig\":\"ﬁ\",\"FilledSmallSquare\":\"◼\",\"FilledVerySmallSquare\":\"▪\",\"fjlig\":\"fj\",\"flat\":\"♭\",\"fllig\":\"ﬂ\",\"fltns\":\"▱\",\"fnof\":\"ƒ\",\"Fopf\":\"𝔽\",\"fopf\":\"𝕗\",\"forall\":\"∀\",\"ForAll\":\"∀\",\"fork\":\"⋔\",\"forkv\":\"⫙\",\"Fouriertrf\":\"ℱ\",\"fpartint\":\"⨍\",\"frac12\":\"½\",\"frac13\":\"⅓\",\"frac14\":\"¼\",\"frac15\":\"⅕\",\"frac16\":\"⅙\",\"frac18\":\"⅛\",\"frac23\":\"⅔\",\"frac25\":\"⅖\",\"frac34\":\"¾\",\"frac35\":\"⅗\",\"frac38\":\"⅜\",\"frac45\":\"⅘\",\"frac56\":\"⅚\",\"frac58\":\"⅝\",\"frac78\":\"⅞\",\"frasl\":\"⁄\",\"frown\":\"⌢\",\"fscr\":\"𝒻\",\"Fscr\":\"ℱ\",\"gacute\":\"ǵ\",\"Gamma\":\"Γ\",\"gamma\":\"γ\",\"Gammad\":\"Ϝ\",\"gammad\":\"ϝ\",\"gap\":\"⪆\",\"Gbreve\":\"Ğ\",\"gbreve\":\"ğ\",\"Gcedil\":\"Ģ\",\"Gcirc\":\"Ĝ\",\"gcirc\":\"ĝ\",\"Gcy\":\"Г\",\"gcy\":\"г\",\"Gdot\":\"Ġ\",\"gdot\":\"ġ\",\"ge\":\"≥\",\"gE\":\"≧\",\"gEl\":\"⪌\",\"gel\":\"⋛\",\"geq\":\"≥\",\"geqq\":\"≧\",\"geqslant\":\"⩾\",\"gescc\":\"⪩\",\"ges\":\"⩾\",\"gesdot\":\"⪀\",\"gesdoto\":\"⪂\",\"gesdotol\":\"⪄\",\"gesl\":\"⋛︀\",\"gesles\":\"⪔\",\"Gfr\":\"𝔊\",\"gfr\":\"𝔤\",\"gg\":\"≫\",\"Gg\":\"⋙\",\"ggg\":\"⋙\",\"gimel\":\"ℷ\",\"GJcy\":\"Ѓ\",\"gjcy\":\"ѓ\",\"gla\":\"⪥\",\"gl\":\"≷\",\"glE\":\"⪒\",\"glj\":\"⪤\",\"gnap\":\"⪊\",\"gnapprox\":\"⪊\",\"gne\":\"⪈\",\"gnE\":\"≩\",\"gneq\":\"⪈\",\"gneqq\":\"≩\",\"gnsim\":\"⋧\",\"Gopf\":\"𝔾\",\"gopf\":\"𝕘\",\"grave\":\"`\",\"GreaterEqual\":\"≥\",\"GreaterEqualLess\":\"⋛\",\"GreaterFullEqual\":\"≧\",\"GreaterGreater\":\"⪢\",\"GreaterLess\":\"≷\",\"GreaterSlantEqual\":\"⩾\",\"GreaterTilde\":\"≳\",\"Gscr\":\"𝒢\",\"gscr\":\"ℊ\",\"gsim\":\"≳\",\"gsime\":\"⪎\",\"gsiml\":\"⪐\",\"gtcc\":\"⪧\",\"gtcir\":\"⩺\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"≫\",\"gtdot\":\"⋗\",\"gtlPar\":\"⦕\",\"gtquest\":\"⩼\",\"gtrapprox\":\"⪆\",\"gtrarr\":\"⥸\",\"gtrdot\":\"⋗\",\"gtreqless\":\"⋛\",\"gtreqqless\":\"⪌\",\"gtrless\":\"≷\",\"gtrsim\":\"≳\",\"gvertneqq\":\"≩︀\",\"gvnE\":\"≩︀\",\"Hacek\":\"ˇ\",\"hairsp\":\" \",\"half\":\"½\",\"hamilt\":\"ℋ\",\"HARDcy\":\"Ъ\",\"hardcy\":\"ъ\",\"harrcir\":\"⥈\",\"harr\":\"↔\",\"hArr\":\"⇔\",\"harrw\":\"↭\",\"Hat\":\"^\",\"hbar\":\"ℏ\",\"Hcirc\":\"Ĥ\",\"hcirc\":\"ĥ\",\"hearts\":\"♥\",\"heartsuit\":\"♥\",\"hellip\":\"…\",\"hercon\":\"⊹\",\"hfr\":\"𝔥\",\"Hfr\":\"ℌ\",\"HilbertSpace\":\"ℋ\",\"hksearow\":\"⤥\",\"hkswarow\":\"⤦\",\"hoarr\":\"⇿\",\"homtht\":\"∻\",\"hookleftarrow\":\"↩\",\"hookrightarrow\":\"↪\",\"hopf\":\"𝕙\",\"Hopf\":\"ℍ\",\"horbar\":\"―\",\"HorizontalLine\":\"─\",\"hscr\":\"𝒽\",\"Hscr\":\"ℋ\",\"hslash\":\"ℏ\",\"Hstrok\":\"Ħ\",\"hstrok\":\"ħ\",\"HumpDownHump\":\"≎\",\"HumpEqual\":\"≏\",\"hybull\":\"⁃\",\"hyphen\":\"‐\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"ic\":\"⁣\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"Icy\":\"И\",\"icy\":\"и\",\"Idot\":\"İ\",\"IEcy\":\"Е\",\"iecy\":\"е\",\"iexcl\":\"¡\",\"iff\":\"⇔\",\"ifr\":\"𝔦\",\"Ifr\":\"ℑ\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"ii\":\"ⅈ\",\"iiiint\":\"⨌\",\"iiint\":\"∭\",\"iinfin\":\"⧜\",\"iiota\":\"℩\",\"IJlig\":\"Ĳ\",\"ijlig\":\"ĳ\",\"Imacr\":\"Ī\",\"imacr\":\"ī\",\"image\":\"ℑ\",\"ImaginaryI\":\"ⅈ\",\"imagline\":\"ℐ\",\"imagpart\":\"ℑ\",\"imath\":\"ı\",\"Im\":\"ℑ\",\"imof\":\"⊷\",\"imped\":\"Ƶ\",\"Implies\":\"⇒\",\"incare\":\"℅\",\"in\":\"∈\",\"infin\":\"∞\",\"infintie\":\"⧝\",\"inodot\":\"ı\",\"intcal\":\"⊺\",\"int\":\"∫\",\"Int\":\"∬\",\"integers\":\"ℤ\",\"Integral\":\"∫\",\"intercal\":\"⊺\",\"Intersection\":\"⋂\",\"intlarhk\":\"⨗\",\"intprod\":\"⨼\",\"InvisibleComma\":\"⁣\",\"InvisibleTimes\":\"⁢\",\"IOcy\":\"Ё\",\"iocy\":\"ё\",\"Iogon\":\"Į\",\"iogon\":\"į\",\"Iopf\":\"𝕀\",\"iopf\":\"𝕚\",\"Iota\":\"Ι\",\"iota\":\"ι\",\"iprod\":\"⨼\",\"iquest\":\"¿\",\"iscr\":\"𝒾\",\"Iscr\":\"ℐ\",\"isin\":\"∈\",\"isindot\":\"⋵\",\"isinE\":\"⋹\",\"isins\":\"⋴\",\"isinsv\":\"⋳\",\"isinv\":\"∈\",\"it\":\"⁢\",\"Itilde\":\"Ĩ\",\"itilde\":\"ĩ\",\"Iukcy\":\"І\",\"iukcy\":\"і\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"Jcirc\":\"Ĵ\",\"jcirc\":\"ĵ\",\"Jcy\":\"Й\",\"jcy\":\"й\",\"Jfr\":\"𝔍\",\"jfr\":\"𝔧\",\"jmath\":\"ȷ\",\"Jopf\":\"𝕁\",\"jopf\":\"𝕛\",\"Jscr\":\"𝒥\",\"jscr\":\"𝒿\",\"Jsercy\":\"Ј\",\"jsercy\":\"ј\",\"Jukcy\":\"Є\",\"jukcy\":\"є\",\"Kappa\":\"Κ\",\"kappa\":\"κ\",\"kappav\":\"ϰ\",\"Kcedil\":\"Ķ\",\"kcedil\":\"ķ\",\"Kcy\":\"К\",\"kcy\":\"к\",\"Kfr\":\"𝔎\",\"kfr\":\"𝔨\",\"kgreen\":\"ĸ\",\"KHcy\":\"Х\",\"khcy\":\"х\",\"KJcy\":\"Ќ\",\"kjcy\":\"ќ\",\"Kopf\":\"𝕂\",\"kopf\":\"𝕜\",\"Kscr\":\"𝒦\",\"kscr\":\"𝓀\",\"lAarr\":\"⇚\",\"Lacute\":\"Ĺ\",\"lacute\":\"ĺ\",\"laemptyv\":\"⦴\",\"lagran\":\"ℒ\",\"Lambda\":\"Λ\",\"lambda\":\"λ\",\"lang\":\"⟨\",\"Lang\":\"⟪\",\"langd\":\"⦑\",\"langle\":\"⟨\",\"lap\":\"⪅\",\"Laplacetrf\":\"ℒ\",\"laquo\":\"«\",\"larrb\":\"⇤\",\"larrbfs\":\"⤟\",\"larr\":\"←\",\"Larr\":\"↞\",\"lArr\":\"⇐\",\"larrfs\":\"⤝\",\"larrhk\":\"↩\",\"larrlp\":\"↫\",\"larrpl\":\"⤹\",\"larrsim\":\"⥳\",\"larrtl\":\"↢\",\"latail\":\"⤙\",\"lAtail\":\"⤛\",\"lat\":\"⪫\",\"late\":\"⪭\",\"lates\":\"⪭︀\",\"lbarr\":\"⤌\",\"lBarr\":\"⤎\",\"lbbrk\":\"❲\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"⦋\",\"lbrksld\":\"⦏\",\"lbrkslu\":\"⦍\",\"Lcaron\":\"Ľ\",\"lcaron\":\"ľ\",\"Lcedil\":\"Ļ\",\"lcedil\":\"ļ\",\"lceil\":\"⌈\",\"lcub\":\"{\",\"Lcy\":\"Л\",\"lcy\":\"л\",\"ldca\":\"⤶\",\"ldquo\":\"“\",\"ldquor\":\"„\",\"ldrdhar\":\"⥧\",\"ldrushar\":\"⥋\",\"ldsh\":\"↲\",\"le\":\"≤\",\"lE\":\"≦\",\"LeftAngleBracket\":\"⟨\",\"LeftArrowBar\":\"⇤\",\"leftarrow\":\"←\",\"LeftArrow\":\"←\",\"Leftarrow\":\"⇐\",\"LeftArrowRightArrow\":\"⇆\",\"leftarrowtail\":\"↢\",\"LeftCeiling\":\"⌈\",\"LeftDoubleBracket\":\"⟦\",\"LeftDownTeeVector\":\"⥡\",\"LeftDownVectorBar\":\"⥙\",\"LeftDownVector\":\"⇃\",\"LeftFloor\":\"⌊\",\"leftharpoondown\":\"↽\",\"leftharpoonup\":\"↼\",\"leftleftarrows\":\"⇇\",\"leftrightarrow\":\"↔\",\"LeftRightArrow\":\"↔\",\"Leftrightarrow\":\"⇔\",\"leftrightarrows\":\"⇆\",\"leftrightharpoons\":\"⇋\",\"leftrightsquigarrow\":\"↭\",\"LeftRightVector\":\"⥎\",\"LeftTeeArrow\":\"↤\",\"LeftTee\":\"⊣\",\"LeftTeeVector\":\"⥚\",\"leftthreetimes\":\"⋋\",\"LeftTriangleBar\":\"⧏\",\"LeftTriangle\":\"⊲\",\"LeftTriangleEqual\":\"⊴\",\"LeftUpDownVector\":\"⥑\",\"LeftUpTeeVector\":\"⥠\",\"LeftUpVectorBar\":\"⥘\",\"LeftUpVector\":\"↿\",\"LeftVectorBar\":\"⥒\",\"LeftVector\":\"↼\",\"lEg\":\"⪋\",\"leg\":\"⋚\",\"leq\":\"≤\",\"leqq\":\"≦\",\"leqslant\":\"⩽\",\"lescc\":\"⪨\",\"les\":\"⩽\",\"lesdot\":\"⩿\",\"lesdoto\":\"⪁\",\"lesdotor\":\"⪃\",\"lesg\":\"⋚︀\",\"lesges\":\"⪓\",\"lessapprox\":\"⪅\",\"lessdot\":\"⋖\",\"lesseqgtr\":\"⋚\",\"lesseqqgtr\":\"⪋\",\"LessEqualGreater\":\"⋚\",\"LessFullEqual\":\"≦\",\"LessGreater\":\"≶\",\"lessgtr\":\"≶\",\"LessLess\":\"⪡\",\"lesssim\":\"≲\",\"LessSlantEqual\":\"⩽\",\"LessTilde\":\"≲\",\"lfisht\":\"⥼\",\"lfloor\":\"⌊\",\"Lfr\":\"𝔏\",\"lfr\":\"𝔩\",\"lg\":\"≶\",\"lgE\":\"⪑\",\"lHar\":\"⥢\",\"lhard\":\"↽\",\"lharu\":\"↼\",\"lharul\":\"⥪\",\"lhblk\":\"▄\",\"LJcy\":\"Љ\",\"ljcy\":\"љ\",\"llarr\":\"⇇\",\"ll\":\"≪\",\"Ll\":\"⋘\",\"llcorner\":\"⌞\",\"Lleftarrow\":\"⇚\",\"llhard\":\"⥫\",\"lltri\":\"◺\",\"Lmidot\":\"Ŀ\",\"lmidot\":\"ŀ\",\"lmoustache\":\"⎰\",\"lmoust\":\"⎰\",\"lnap\":\"⪉\",\"lnapprox\":\"⪉\",\"lne\":\"⪇\",\"lnE\":\"≨\",\"lneq\":\"⪇\",\"lneqq\":\"≨\",\"lnsim\":\"⋦\",\"loang\":\"⟬\",\"loarr\":\"⇽\",\"lobrk\":\"⟦\",\"longleftarrow\":\"⟵\",\"LongLeftArrow\":\"⟵\",\"Longleftarrow\":\"⟸\",\"longleftrightarrow\":\"⟷\",\"LongLeftRightArrow\":\"⟷\",\"Longleftrightarrow\":\"⟺\",\"longmapsto\":\"⟼\",\"longrightarrow\":\"⟶\",\"LongRightArrow\":\"⟶\",\"Longrightarrow\":\"⟹\",\"looparrowleft\":\"↫\",\"looparrowright\":\"↬\",\"lopar\":\"⦅\",\"Lopf\":\"𝕃\",\"lopf\":\"𝕝\",\"loplus\":\"⨭\",\"lotimes\":\"⨴\",\"lowast\":\"∗\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"↙\",\"LowerRightArrow\":\"↘\",\"loz\":\"◊\",\"lozenge\":\"◊\",\"lozf\":\"⧫\",\"lpar\":\"(\",\"lparlt\":\"⦓\",\"lrarr\":\"⇆\",\"lrcorner\":\"⌟\",\"lrhar\":\"⇋\",\"lrhard\":\"⥭\",\"lrm\":\"‎\",\"lrtri\":\"⊿\",\"lsaquo\":\"‹\",\"lscr\":\"𝓁\",\"Lscr\":\"ℒ\",\"lsh\":\"↰\",\"Lsh\":\"↰\",\"lsim\":\"≲\",\"lsime\":\"⪍\",\"lsimg\":\"⪏\",\"lsqb\":\"[\",\"lsquo\":\"‘\",\"lsquor\":\"‚\",\"Lstrok\":\"Ł\",\"lstrok\":\"ł\",\"ltcc\":\"⪦\",\"ltcir\":\"⩹\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"≪\",\"ltdot\":\"⋖\",\"lthree\":\"⋋\",\"ltimes\":\"⋉\",\"ltlarr\":\"⥶\",\"ltquest\":\"⩻\",\"ltri\":\"◃\",\"ltrie\":\"⊴\",\"ltrif\":\"◂\",\"ltrPar\":\"⦖\",\"lurdshar\":\"⥊\",\"luruhar\":\"⥦\",\"lvertneqq\":\"≨︀\",\"lvnE\":\"≨︀\",\"macr\":\"¯\",\"male\":\"♂\",\"malt\":\"✠\",\"maltese\":\"✠\",\"Map\":\"⤅\",\"map\":\"↦\",\"mapsto\":\"↦\",\"mapstodown\":\"↧\",\"mapstoleft\":\"↤\",\"mapstoup\":\"↥\",\"marker\":\"▮\",\"mcomma\":\"⨩\",\"Mcy\":\"М\",\"mcy\":\"м\",\"mdash\":\"—\",\"mDDot\":\"∺\",\"measuredangle\":\"∡\",\"MediumSpace\":\" \",\"Mellintrf\":\"ℳ\",\"Mfr\":\"𝔐\",\"mfr\":\"𝔪\",\"mho\":\"℧\",\"micro\":\"µ\",\"midast\":\"*\",\"midcir\":\"⫰\",\"mid\":\"∣\",\"middot\":\"·\",\"minusb\":\"⊟\",\"minus\":\"−\",\"minusd\":\"∸\",\"minusdu\":\"⨪\",\"MinusPlus\":\"∓\",\"mlcp\":\"⫛\",\"mldr\":\"…\",\"mnplus\":\"∓\",\"models\":\"⊧\",\"Mopf\":\"𝕄\",\"mopf\":\"𝕞\",\"mp\":\"∓\",\"mscr\":\"𝓂\",\"Mscr\":\"ℳ\",\"mstpos\":\"∾\",\"Mu\":\"Μ\",\"mu\":\"μ\",\"multimap\":\"⊸\",\"mumap\":\"⊸\",\"nabla\":\"∇\",\"Nacute\":\"Ń\",\"nacute\":\"ń\",\"nang\":\"∠⃒\",\"nap\":\"≉\",\"napE\":\"⩰̸\",\"napid\":\"≋̸\",\"napos\":\"ŉ\",\"napprox\":\"≉\",\"natural\":\"♮\",\"naturals\":\"ℕ\",\"natur\":\"♮\",\"nbsp\":\" \",\"nbump\":\"≎̸\",\"nbumpe\":\"≏̸\",\"ncap\":\"⩃\",\"Ncaron\":\"Ň\",\"ncaron\":\"ň\",\"Ncedil\":\"Ņ\",\"ncedil\":\"ņ\",\"ncong\":\"≇\",\"ncongdot\":\"⩭̸\",\"ncup\":\"⩂\",\"Ncy\":\"Н\",\"ncy\":\"н\",\"ndash\":\"–\",\"nearhk\":\"⤤\",\"nearr\":\"↗\",\"neArr\":\"⇗\",\"nearrow\":\"↗\",\"ne\":\"≠\",\"nedot\":\"≐̸\",\"NegativeMediumSpace\":\"​\",\"NegativeThickSpace\":\"​\",\"NegativeThinSpace\":\"​\",\"NegativeVeryThinSpace\":\"​\",\"nequiv\":\"≢\",\"nesear\":\"⤨\",\"nesim\":\"≂̸\",\"NestedGreaterGreater\":\"≫\",\"NestedLessLess\":\"≪\",\"NewLine\":\"\\n\",\"nexist\":\"∄\",\"nexists\":\"∄\",\"Nfr\":\"𝔑\",\"nfr\":\"𝔫\",\"ngE\":\"≧̸\",\"nge\":\"≱\",\"ngeq\":\"≱\",\"ngeqq\":\"≧̸\",\"ngeqslant\":\"⩾̸\",\"nges\":\"⩾̸\",\"nGg\":\"⋙̸\",\"ngsim\":\"≵\",\"nGt\":\"≫⃒\",\"ngt\":\"≯\",\"ngtr\":\"≯\",\"nGtv\":\"≫̸\",\"nharr\":\"↮\",\"nhArr\":\"⇎\",\"nhpar\":\"⫲\",\"ni\":\"∋\",\"nis\":\"⋼\",\"nisd\":\"⋺\",\"niv\":\"∋\",\"NJcy\":\"Њ\",\"njcy\":\"њ\",\"nlarr\":\"↚\",\"nlArr\":\"⇍\",\"nldr\":\"‥\",\"nlE\":\"≦̸\",\"nle\":\"≰\",\"nleftarrow\":\"↚\",\"nLeftarrow\":\"⇍\",\"nleftrightarrow\":\"↮\",\"nLeftrightarrow\":\"⇎\",\"nleq\":\"≰\",\"nleqq\":\"≦̸\",\"nleqslant\":\"⩽̸\",\"nles\":\"⩽̸\",\"nless\":\"≮\",\"nLl\":\"⋘̸\",\"nlsim\":\"≴\",\"nLt\":\"≪⃒\",\"nlt\":\"≮\",\"nltri\":\"⋪\",\"nltrie\":\"⋬\",\"nLtv\":\"≪̸\",\"nmid\":\"∤\",\"NoBreak\":\"⁠\",\"NonBreakingSpace\":\" \",\"nopf\":\"𝕟\",\"Nopf\":\"ℕ\",\"Not\":\"⫬\",\"not\":\"¬\",\"NotCongruent\":\"≢\",\"NotCupCap\":\"≭\",\"NotDoubleVerticalBar\":\"∦\",\"NotElement\":\"∉\",\"NotEqual\":\"≠\",\"NotEqualTilde\":\"≂̸\",\"NotExists\":\"∄\",\"NotGreater\":\"≯\",\"NotGreaterEqual\":\"≱\",\"NotGreaterFullEqual\":\"≧̸\",\"NotGreaterGreater\":\"≫̸\",\"NotGreaterLess\":\"≹\",\"NotGreaterSlantEqual\":\"⩾̸\",\"NotGreaterTilde\":\"≵\",\"NotHumpDownHump\":\"≎̸\",\"NotHumpEqual\":\"≏̸\",\"notin\":\"∉\",\"notindot\":\"⋵̸\",\"notinE\":\"⋹̸\",\"notinva\":\"∉\",\"notinvb\":\"⋷\",\"notinvc\":\"⋶\",\"NotLeftTriangleBar\":\"⧏̸\",\"NotLeftTriangle\":\"⋪\",\"NotLeftTriangleEqual\":\"⋬\",\"NotLess\":\"≮\",\"NotLessEqual\":\"≰\",\"NotLessGreater\":\"≸\",\"NotLessLess\":\"≪̸\",\"NotLessSlantEqual\":\"⩽̸\",\"NotLessTilde\":\"≴\",\"NotNestedGreaterGreater\":\"⪢̸\",\"NotNestedLessLess\":\"⪡̸\",\"notni\":\"∌\",\"notniva\":\"∌\",\"notnivb\":\"⋾\",\"notnivc\":\"⋽\",\"NotPrecedes\":\"⊀\",\"NotPrecedesEqual\":\"⪯̸\",\"NotPrecedesSlantEqual\":\"⋠\",\"NotReverseElement\":\"∌\",\"NotRightTriangleBar\":\"⧐̸\",\"NotRightTriangle\":\"⋫\",\"NotRightTriangleEqual\":\"⋭\",\"NotSquareSubset\":\"⊏̸\",\"NotSquareSubsetEqual\":\"⋢\",\"NotSquareSuperset\":\"⊐̸\",\"NotSquareSupersetEqual\":\"⋣\",\"NotSubset\":\"⊂⃒\",\"NotSubsetEqual\":\"⊈\",\"NotSucceeds\":\"⊁\",\"NotSucceedsEqual\":\"⪰̸\",\"NotSucceedsSlantEqual\":\"⋡\",\"NotSucceedsTilde\":\"≿̸\",\"NotSuperset\":\"⊃⃒\",\"NotSupersetEqual\":\"⊉\",\"NotTilde\":\"≁\",\"NotTildeEqual\":\"≄\",\"NotTildeFullEqual\":\"≇\",\"NotTildeTilde\":\"≉\",\"NotVerticalBar\":\"∤\",\"nparallel\":\"∦\",\"npar\":\"∦\",\"nparsl\":\"⫽⃥\",\"npart\":\"∂̸\",\"npolint\":\"⨔\",\"npr\":\"⊀\",\"nprcue\":\"⋠\",\"nprec\":\"⊀\",\"npreceq\":\"⪯̸\",\"npre\":\"⪯̸\",\"nrarrc\":\"⤳̸\",\"nrarr\":\"↛\",\"nrArr\":\"⇏\",\"nrarrw\":\"↝̸\",\"nrightarrow\":\"↛\",\"nRightarrow\":\"⇏\",\"nrtri\":\"⋫\",\"nrtrie\":\"⋭\",\"nsc\":\"⊁\",\"nsccue\":\"⋡\",\"nsce\":\"⪰̸\",\"Nscr\":\"𝒩\",\"nscr\":\"𝓃\",\"nshortmid\":\"∤\",\"nshortparallel\":\"∦\",\"nsim\":\"≁\",\"nsime\":\"≄\",\"nsimeq\":\"≄\",\"nsmid\":\"∤\",\"nspar\":\"∦\",\"nsqsube\":\"⋢\",\"nsqsupe\":\"⋣\",\"nsub\":\"⊄\",\"nsubE\":\"⫅̸\",\"nsube\":\"⊈\",\"nsubset\":\"⊂⃒\",\"nsubseteq\":\"⊈\",\"nsubseteqq\":\"⫅̸\",\"nsucc\":\"⊁\",\"nsucceq\":\"⪰̸\",\"nsup\":\"⊅\",\"nsupE\":\"⫆̸\",\"nsupe\":\"⊉\",\"nsupset\":\"⊃⃒\",\"nsupseteq\":\"⊉\",\"nsupseteqq\":\"⫆̸\",\"ntgl\":\"≹\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"ntlg\":\"≸\",\"ntriangleleft\":\"⋪\",\"ntrianglelefteq\":\"⋬\",\"ntriangleright\":\"⋫\",\"ntrianglerighteq\":\"⋭\",\"Nu\":\"Ν\",\"nu\":\"ν\",\"num\":\"#\",\"numero\":\"№\",\"numsp\":\" \",\"nvap\":\"≍⃒\",\"nvdash\":\"⊬\",\"nvDash\":\"⊭\",\"nVdash\":\"⊮\",\"nVDash\":\"⊯\",\"nvge\":\"≥⃒\",\"nvgt\":\">⃒\",\"nvHarr\":\"⤄\",\"nvinfin\":\"⧞\",\"nvlArr\":\"⤂\",\"nvle\":\"≤⃒\",\"nvlt\":\"<⃒\",\"nvltrie\":\"⊴⃒\",\"nvrArr\":\"⤃\",\"nvrtrie\":\"⊵⃒\",\"nvsim\":\"∼⃒\",\"nwarhk\":\"⤣\",\"nwarr\":\"↖\",\"nwArr\":\"⇖\",\"nwarrow\":\"↖\",\"nwnear\":\"⤧\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"oast\":\"⊛\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"ocir\":\"⊚\",\"Ocy\":\"О\",\"ocy\":\"о\",\"odash\":\"⊝\",\"Odblac\":\"Ő\",\"odblac\":\"ő\",\"odiv\":\"⨸\",\"odot\":\"⊙\",\"odsold\":\"⦼\",\"OElig\":\"Œ\",\"oelig\":\"œ\",\"ofcir\":\"⦿\",\"Ofr\":\"𝔒\",\"ofr\":\"𝔬\",\"ogon\":\"˛\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ogt\":\"⧁\",\"ohbar\":\"⦵\",\"ohm\":\"Ω\",\"oint\":\"∮\",\"olarr\":\"↺\",\"olcir\":\"⦾\",\"olcross\":\"⦻\",\"oline\":\"‾\",\"olt\":\"⧀\",\"Omacr\":\"Ō\",\"omacr\":\"ō\",\"Omega\":\"Ω\",\"omega\":\"ω\",\"Omicron\":\"Ο\",\"omicron\":\"ο\",\"omid\":\"⦶\",\"ominus\":\"⊖\",\"Oopf\":\"𝕆\",\"oopf\":\"𝕠\",\"opar\":\"⦷\",\"OpenCurlyDoubleQuote\":\"“\",\"OpenCurlyQuote\":\"‘\",\"operp\":\"⦹\",\"oplus\":\"⊕\",\"orarr\":\"↻\",\"Or\":\"⩔\",\"or\":\"∨\",\"ord\":\"⩝\",\"order\":\"ℴ\",\"orderof\":\"ℴ\",\"ordf\":\"ª\",\"ordm\":\"º\",\"origof\":\"⊶\",\"oror\":\"⩖\",\"orslope\":\"⩗\",\"orv\":\"⩛\",\"oS\":\"Ⓢ\",\"Oscr\":\"𝒪\",\"oscr\":\"ℴ\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"osol\":\"⊘\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"otimesas\":\"⨶\",\"Otimes\":\"⨷\",\"otimes\":\"⊗\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"ovbar\":\"⌽\",\"OverBar\":\"‾\",\"OverBrace\":\"⏞\",\"OverBracket\":\"⎴\",\"OverParenthesis\":\"⏜\",\"para\":\"¶\",\"parallel\":\"∥\",\"par\":\"∥\",\"parsim\":\"⫳\",\"parsl\":\"⫽\",\"part\":\"∂\",\"PartialD\":\"∂\",\"Pcy\":\"П\",\"pcy\":\"п\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"‰\",\"perp\":\"⊥\",\"pertenk\":\"‱\",\"Pfr\":\"𝔓\",\"pfr\":\"𝔭\",\"Phi\":\"Φ\",\"phi\":\"φ\",\"phiv\":\"ϕ\",\"phmmat\":\"ℳ\",\"phone\":\"☎\",\"Pi\":\"Π\",\"pi\":\"π\",\"pitchfork\":\"⋔\",\"piv\":\"ϖ\",\"planck\":\"ℏ\",\"planckh\":\"ℎ\",\"plankv\":\"ℏ\",\"plusacir\":\"⨣\",\"plusb\":\"⊞\",\"pluscir\":\"⨢\",\"plus\":\"+\",\"plusdo\":\"∔\",\"plusdu\":\"⨥\",\"pluse\":\"⩲\",\"PlusMinus\":\"±\",\"plusmn\":\"±\",\"plussim\":\"⨦\",\"plustwo\":\"⨧\",\"pm\":\"±\",\"Poincareplane\":\"ℌ\",\"pointint\":\"⨕\",\"popf\":\"𝕡\",\"Popf\":\"ℙ\",\"pound\":\"£\",\"prap\":\"⪷\",\"Pr\":\"⪻\",\"pr\":\"≺\",\"prcue\":\"≼\",\"precapprox\":\"⪷\",\"prec\":\"≺\",\"preccurlyeq\":\"≼\",\"Precedes\":\"≺\",\"PrecedesEqual\":\"⪯\",\"PrecedesSlantEqual\":\"≼\",\"PrecedesTilde\":\"≾\",\"preceq\":\"⪯\",\"precnapprox\":\"⪹\",\"precneqq\":\"⪵\",\"precnsim\":\"⋨\",\"pre\":\"⪯\",\"prE\":\"⪳\",\"precsim\":\"≾\",\"prime\":\"′\",\"Prime\":\"″\",\"primes\":\"ℙ\",\"prnap\":\"⪹\",\"prnE\":\"⪵\",\"prnsim\":\"⋨\",\"prod\":\"∏\",\"Product\":\"∏\",\"profalar\":\"⌮\",\"profline\":\"⌒\",\"profsurf\":\"⌓\",\"prop\":\"∝\",\"Proportional\":\"∝\",\"Proportion\":\"∷\",\"propto\":\"∝\",\"prsim\":\"≾\",\"prurel\":\"⊰\",\"Pscr\":\"𝒫\",\"pscr\":\"𝓅\",\"Psi\":\"Ψ\",\"psi\":\"ψ\",\"puncsp\":\" \",\"Qfr\":\"𝔔\",\"qfr\":\"𝔮\",\"qint\":\"⨌\",\"qopf\":\"𝕢\",\"Qopf\":\"ℚ\",\"qprime\":\"⁗\",\"Qscr\":\"𝒬\",\"qscr\":\"𝓆\",\"quaternions\":\"ℍ\",\"quatint\":\"⨖\",\"quest\":\"?\",\"questeq\":\"≟\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"⇛\",\"race\":\"∽̱\",\"Racute\":\"Ŕ\",\"racute\":\"ŕ\",\"radic\":\"√\",\"raemptyv\":\"⦳\",\"rang\":\"⟩\",\"Rang\":\"⟫\",\"rangd\":\"⦒\",\"range\":\"⦥\",\"rangle\":\"⟩\",\"raquo\":\"»\",\"rarrap\":\"⥵\",\"rarrb\":\"⇥\",\"rarrbfs\":\"⤠\",\"rarrc\":\"⤳\",\"rarr\":\"→\",\"Rarr\":\"↠\",\"rArr\":\"⇒\",\"rarrfs\":\"⤞\",\"rarrhk\":\"↪\",\"rarrlp\":\"↬\",\"rarrpl\":\"⥅\",\"rarrsim\":\"⥴\",\"Rarrtl\":\"⤖\",\"rarrtl\":\"↣\",\"rarrw\":\"↝\",\"ratail\":\"⤚\",\"rAtail\":\"⤜\",\"ratio\":\"∶\",\"rationals\":\"ℚ\",\"rbarr\":\"⤍\",\"rBarr\":\"⤏\",\"RBarr\":\"⤐\",\"rbbrk\":\"❳\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"⦌\",\"rbrksld\":\"⦎\",\"rbrkslu\":\"⦐\",\"Rcaron\":\"Ř\",\"rcaron\":\"ř\",\"Rcedil\":\"Ŗ\",\"rcedil\":\"ŗ\",\"rceil\":\"⌉\",\"rcub\":\"}\",\"Rcy\":\"Р\",\"rcy\":\"р\",\"rdca\":\"⤷\",\"rdldhar\":\"⥩\",\"rdquo\":\"”\",\"rdquor\":\"”\",\"rdsh\":\"↳\",\"real\":\"ℜ\",\"realine\":\"ℛ\",\"realpart\":\"ℜ\",\"reals\":\"ℝ\",\"Re\":\"ℜ\",\"rect\":\"▭\",\"reg\":\"®\",\"REG\":\"®\",\"ReverseElement\":\"∋\",\"ReverseEquilibrium\":\"⇋\",\"ReverseUpEquilibrium\":\"⥯\",\"rfisht\":\"⥽\",\"rfloor\":\"⌋\",\"rfr\":\"𝔯\",\"Rfr\":\"ℜ\",\"rHar\":\"⥤\",\"rhard\":\"⇁\",\"rharu\":\"⇀\",\"rharul\":\"⥬\",\"Rho\":\"Ρ\",\"rho\":\"ρ\",\"rhov\":\"ϱ\",\"RightAngleBracket\":\"⟩\",\"RightArrowBar\":\"⇥\",\"rightarrow\":\"→\",\"RightArrow\":\"→\",\"Rightarrow\":\"⇒\",\"RightArrowLeftArrow\":\"⇄\",\"rightarrowtail\":\"↣\",\"RightCeiling\":\"⌉\",\"RightDoubleBracket\":\"⟧\",\"RightDownTeeVector\":\"⥝\",\"RightDownVectorBar\":\"⥕\",\"RightDownVector\":\"⇂\",\"RightFloor\":\"⌋\",\"rightharpoondown\":\"⇁\",\"rightharpoonup\":\"⇀\",\"rightleftarrows\":\"⇄\",\"rightleftharpoons\":\"⇌\",\"rightrightarrows\":\"⇉\",\"rightsquigarrow\":\"↝\",\"RightTeeArrow\":\"↦\",\"RightTee\":\"⊢\",\"RightTeeVector\":\"⥛\",\"rightthreetimes\":\"⋌\",\"RightTriangleBar\":\"⧐\",\"RightTriangle\":\"⊳\",\"RightTriangleEqual\":\"⊵\",\"RightUpDownVector\":\"⥏\",\"RightUpTeeVector\":\"⥜\",\"RightUpVectorBar\":\"⥔\",\"RightUpVector\":\"↾\",\"RightVectorBar\":\"⥓\",\"RightVector\":\"⇀\",\"ring\":\"˚\",\"risingdotseq\":\"≓\",\"rlarr\":\"⇄\",\"rlhar\":\"⇌\",\"rlm\":\"‏\",\"rmoustache\":\"⎱\",\"rmoust\":\"⎱\",\"rnmid\":\"⫮\",\"roang\":\"⟭\",\"roarr\":\"⇾\",\"robrk\":\"⟧\",\"ropar\":\"⦆\",\"ropf\":\"𝕣\",\"Ropf\":\"ℝ\",\"roplus\":\"⨮\",\"rotimes\":\"⨵\",\"RoundImplies\":\"⥰\",\"rpar\":\")\",\"rpargt\":\"⦔\",\"rppolint\":\"⨒\",\"rrarr\":\"⇉\",\"Rrightarrow\":\"⇛\",\"rsaquo\":\"›\",\"rscr\":\"𝓇\",\"Rscr\":\"ℛ\",\"rsh\":\"↱\",\"Rsh\":\"↱\",\"rsqb\":\"]\",\"rsquo\":\"’\",\"rsquor\":\"’\",\"rthree\":\"⋌\",\"rtimes\":\"⋊\",\"rtri\":\"▹\",\"rtrie\":\"⊵\",\"rtrif\":\"▸\",\"rtriltri\":\"⧎\",\"RuleDelayed\":\"⧴\",\"ruluhar\":\"⥨\",\"rx\":\"℞\",\"Sacute\":\"Ś\",\"sacute\":\"ś\",\"sbquo\":\"‚\",\"scap\":\"⪸\",\"Scaron\":\"Š\",\"scaron\":\"š\",\"Sc\":\"⪼\",\"sc\":\"≻\",\"sccue\":\"≽\",\"sce\":\"⪰\",\"scE\":\"⪴\",\"Scedil\":\"Ş\",\"scedil\":\"ş\",\"Scirc\":\"Ŝ\",\"scirc\":\"ŝ\",\"scnap\":\"⪺\",\"scnE\":\"⪶\",\"scnsim\":\"⋩\",\"scpolint\":\"⨓\",\"scsim\":\"≿\",\"Scy\":\"С\",\"scy\":\"с\",\"sdotb\":\"⊡\",\"sdot\":\"⋅\",\"sdote\":\"⩦\",\"searhk\":\"⤥\",\"searr\":\"↘\",\"seArr\":\"⇘\",\"searrow\":\"↘\",\"sect\":\"§\",\"semi\":\";\",\"seswar\":\"⤩\",\"setminus\":\"∖\",\"setmn\":\"∖\",\"sext\":\"✶\",\"Sfr\":\"𝔖\",\"sfr\":\"𝔰\",\"sfrown\":\"⌢\",\"sharp\":\"♯\",\"SHCHcy\":\"Щ\",\"shchcy\":\"щ\",\"SHcy\":\"Ш\",\"shcy\":\"ш\",\"ShortDownArrow\":\"↓\",\"ShortLeftArrow\":\"←\",\"shortmid\":\"∣\",\"shortparallel\":\"∥\",\"ShortRightArrow\":\"→\",\"ShortUpArrow\":\"↑\",\"shy\":\"­\",\"Sigma\":\"Σ\",\"sigma\":\"σ\",\"sigmaf\":\"ς\",\"sigmav\":\"ς\",\"sim\":\"∼\",\"simdot\":\"⩪\",\"sime\":\"≃\",\"simeq\":\"≃\",\"simg\":\"⪞\",\"simgE\":\"⪠\",\"siml\":\"⪝\",\"simlE\":\"⪟\",\"simne\":\"≆\",\"simplus\":\"⨤\",\"simrarr\":\"⥲\",\"slarr\":\"←\",\"SmallCircle\":\"∘\",\"smallsetminus\":\"∖\",\"smashp\":\"⨳\",\"smeparsl\":\"⧤\",\"smid\":\"∣\",\"smile\":\"⌣\",\"smt\":\"⪪\",\"smte\":\"⪬\",\"smtes\":\"⪬︀\",\"SOFTcy\":\"Ь\",\"softcy\":\"ь\",\"solbar\":\"⌿\",\"solb\":\"⧄\",\"sol\":\"/\",\"Sopf\":\"𝕊\",\"sopf\":\"𝕤\",\"spades\":\"♠\",\"spadesuit\":\"♠\",\"spar\":\"∥\",\"sqcap\":\"⊓\",\"sqcaps\":\"⊓︀\",\"sqcup\":\"⊔\",\"sqcups\":\"⊔︀\",\"Sqrt\":\"√\",\"sqsub\":\"⊏\",\"sqsube\":\"⊑\",\"sqsubset\":\"⊏\",\"sqsubseteq\":\"⊑\",\"sqsup\":\"⊐\",\"sqsupe\":\"⊒\",\"sqsupset\":\"⊐\",\"sqsupseteq\":\"⊒\",\"square\":\"□\",\"Square\":\"□\",\"SquareIntersection\":\"⊓\",\"SquareSubset\":\"⊏\",\"SquareSubsetEqual\":\"⊑\",\"SquareSuperset\":\"⊐\",\"SquareSupersetEqual\":\"⊒\",\"SquareUnion\":\"⊔\",\"squarf\":\"▪\",\"squ\":\"□\",\"squf\":\"▪\",\"srarr\":\"→\",\"Sscr\":\"𝒮\",\"sscr\":\"𝓈\",\"ssetmn\":\"∖\",\"ssmile\":\"⌣\",\"sstarf\":\"⋆\",\"Star\":\"⋆\",\"star\":\"☆\",\"starf\":\"★\",\"straightepsilon\":\"ϵ\",\"straightphi\":\"ϕ\",\"strns\":\"¯\",\"sub\":\"⊂\",\"Sub\":\"⋐\",\"subdot\":\"⪽\",\"subE\":\"⫅\",\"sube\":\"⊆\",\"subedot\":\"⫃\",\"submult\":\"⫁\",\"subnE\":\"⫋\",\"subne\":\"⊊\",\"subplus\":\"⪿\",\"subrarr\":\"⥹\",\"subset\":\"⊂\",\"Subset\":\"⋐\",\"subseteq\":\"⊆\",\"subseteqq\":\"⫅\",\"SubsetEqual\":\"⊆\",\"subsetneq\":\"⊊\",\"subsetneqq\":\"⫋\",\"subsim\":\"⫇\",\"subsub\":\"⫕\",\"subsup\":\"⫓\",\"succapprox\":\"⪸\",\"succ\":\"≻\",\"succcurlyeq\":\"≽\",\"Succeeds\":\"≻\",\"SucceedsEqual\":\"⪰\",\"SucceedsSlantEqual\":\"≽\",\"SucceedsTilde\":\"≿\",\"succeq\":\"⪰\",\"succnapprox\":\"⪺\",\"succneqq\":\"⪶\",\"succnsim\":\"⋩\",\"succsim\":\"≿\",\"SuchThat\":\"∋\",\"sum\":\"∑\",\"Sum\":\"∑\",\"sung\":\"♪\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"sup\":\"⊃\",\"Sup\":\"⋑\",\"supdot\":\"⪾\",\"supdsub\":\"⫘\",\"supE\":\"⫆\",\"supe\":\"⊇\",\"supedot\":\"⫄\",\"Superset\":\"⊃\",\"SupersetEqual\":\"⊇\",\"suphsol\":\"⟉\",\"suphsub\":\"⫗\",\"suplarr\":\"⥻\",\"supmult\":\"⫂\",\"supnE\":\"⫌\",\"supne\":\"⊋\",\"supplus\":\"⫀\",\"supset\":\"⊃\",\"Supset\":\"⋑\",\"supseteq\":\"⊇\",\"supseteqq\":\"⫆\",\"supsetneq\":\"⊋\",\"supsetneqq\":\"⫌\",\"supsim\":\"⫈\",\"supsub\":\"⫔\",\"supsup\":\"⫖\",\"swarhk\":\"⤦\",\"swarr\":\"↙\",\"swArr\":\"⇙\",\"swarrow\":\"↙\",\"swnwar\":\"⤪\",\"szlig\":\"ß\",\"Tab\":\"\\t\",\"target\":\"⌖\",\"Tau\":\"Τ\",\"tau\":\"τ\",\"tbrk\":\"⎴\",\"Tcaron\":\"Ť\",\"tcaron\":\"ť\",\"Tcedil\":\"Ţ\",\"tcedil\":\"ţ\",\"Tcy\":\"Т\",\"tcy\":\"т\",\"tdot\":\"⃛\",\"telrec\":\"⌕\",\"Tfr\":\"𝔗\",\"tfr\":\"𝔱\",\"there4\":\"∴\",\"therefore\":\"∴\",\"Therefore\":\"∴\",\"Theta\":\"Θ\",\"theta\":\"θ\",\"thetasym\":\"ϑ\",\"thetav\":\"ϑ\",\"thickapprox\":\"≈\",\"thicksim\":\"∼\",\"ThickSpace\":\"  \",\"ThinSpace\":\" \",\"thinsp\":\" \",\"thkap\":\"≈\",\"thksim\":\"∼\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"tilde\":\"˜\",\"Tilde\":\"∼\",\"TildeEqual\":\"≃\",\"TildeFullEqual\":\"≅\",\"TildeTilde\":\"≈\",\"timesbar\":\"⨱\",\"timesb\":\"⊠\",\"times\":\"×\",\"timesd\":\"⨰\",\"tint\":\"∭\",\"toea\":\"⤨\",\"topbot\":\"⌶\",\"topcir\":\"⫱\",\"top\":\"⊤\",\"Topf\":\"𝕋\",\"topf\":\"𝕥\",\"topfork\":\"⫚\",\"tosa\":\"⤩\",\"tprime\":\"‴\",\"trade\":\"™\",\"TRADE\":\"™\",\"triangle\":\"▵\",\"triangledown\":\"▿\",\"triangleleft\":\"◃\",\"trianglelefteq\":\"⊴\",\"triangleq\":\"≜\",\"triangleright\":\"▹\",\"trianglerighteq\":\"⊵\",\"tridot\":\"◬\",\"trie\":\"≜\",\"triminus\":\"⨺\",\"TripleDot\":\"⃛\",\"triplus\":\"⨹\",\"trisb\":\"⧍\",\"tritime\":\"⨻\",\"trpezium\":\"⏢\",\"Tscr\":\"𝒯\",\"tscr\":\"𝓉\",\"TScy\":\"Ц\",\"tscy\":\"ц\",\"TSHcy\":\"Ћ\",\"tshcy\":\"ћ\",\"Tstrok\":\"Ŧ\",\"tstrok\":\"ŧ\",\"twixt\":\"≬\",\"twoheadleftarrow\":\"↞\",\"twoheadrightarrow\":\"↠\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"uarr\":\"↑\",\"Uarr\":\"↟\",\"uArr\":\"⇑\",\"Uarrocir\":\"⥉\",\"Ubrcy\":\"Ў\",\"ubrcy\":\"ў\",\"Ubreve\":\"Ŭ\",\"ubreve\":\"ŭ\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ucy\":\"У\",\"ucy\":\"у\",\"udarr\":\"⇅\",\"Udblac\":\"Ű\",\"udblac\":\"ű\",\"udhar\":\"⥮\",\"ufisht\":\"⥾\",\"Ufr\":\"𝔘\",\"ufr\":\"𝔲\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uHar\":\"⥣\",\"uharl\":\"↿\",\"uharr\":\"↾\",\"uhblk\":\"▀\",\"ulcorn\":\"⌜\",\"ulcorner\":\"⌜\",\"ulcrop\":\"⌏\",\"ultri\":\"◸\",\"Umacr\":\"Ū\",\"umacr\":\"ū\",\"uml\":\"¨\",\"UnderBar\":\"_\",\"UnderBrace\":\"⏟\",\"UnderBracket\":\"⎵\",\"UnderParenthesis\":\"⏝\",\"Union\":\"⋃\",\"UnionPlus\":\"⊎\",\"Uogon\":\"Ų\",\"uogon\":\"ų\",\"Uopf\":\"𝕌\",\"uopf\":\"𝕦\",\"UpArrowBar\":\"⤒\",\"uparrow\":\"↑\",\"UpArrow\":\"↑\",\"Uparrow\":\"⇑\",\"UpArrowDownArrow\":\"⇅\",\"updownarrow\":\"↕\",\"UpDownArrow\":\"↕\",\"Updownarrow\":\"⇕\",\"UpEquilibrium\":\"⥮\",\"upharpoonleft\":\"↿\",\"upharpoonright\":\"↾\",\"uplus\":\"⊎\",\"UpperLeftArrow\":\"↖\",\"UpperRightArrow\":\"↗\",\"upsi\":\"υ\",\"Upsi\":\"ϒ\",\"upsih\":\"ϒ\",\"Upsilon\":\"Υ\",\"upsilon\":\"υ\",\"UpTeeArrow\":\"↥\",\"UpTee\":\"⊥\",\"upuparrows\":\"⇈\",\"urcorn\":\"⌝\",\"urcorner\":\"⌝\",\"urcrop\":\"⌎\",\"Uring\":\"Ů\",\"uring\":\"ů\",\"urtri\":\"◹\",\"Uscr\":\"𝒰\",\"uscr\":\"𝓊\",\"utdot\":\"⋰\",\"Utilde\":\"Ũ\",\"utilde\":\"ũ\",\"utri\":\"▵\",\"utrif\":\"▴\",\"uuarr\":\"⇈\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"uwangle\":\"⦧\",\"vangrt\":\"⦜\",\"varepsilon\":\"ϵ\",\"varkappa\":\"ϰ\",\"varnothing\":\"∅\",\"varphi\":\"ϕ\",\"varpi\":\"ϖ\",\"varpropto\":\"∝\",\"varr\":\"↕\",\"vArr\":\"⇕\",\"varrho\":\"ϱ\",\"varsigma\":\"ς\",\"varsubsetneq\":\"⊊︀\",\"varsubsetneqq\":\"⫋︀\",\"varsupsetneq\":\"⊋︀\",\"varsupsetneqq\":\"⫌︀\",\"vartheta\":\"ϑ\",\"vartriangleleft\":\"⊲\",\"vartriangleright\":\"⊳\",\"vBar\":\"⫨\",\"Vbar\":\"⫫\",\"vBarv\":\"⫩\",\"Vcy\":\"В\",\"vcy\":\"в\",\"vdash\":\"⊢\",\"vDash\":\"⊨\",\"Vdash\":\"⊩\",\"VDash\":\"⊫\",\"Vdashl\":\"⫦\",\"veebar\":\"⊻\",\"vee\":\"∨\",\"Vee\":\"⋁\",\"veeeq\":\"≚\",\"vellip\":\"⋮\",\"verbar\":\"|\",\"Verbar\":\"‖\",\"vert\":\"|\",\"Vert\":\"‖\",\"VerticalBar\":\"∣\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"❘\",\"VerticalTilde\":\"≀\",\"VeryThinSpace\":\" \",\"Vfr\":\"𝔙\",\"vfr\":\"𝔳\",\"vltri\":\"⊲\",\"vnsub\":\"⊂⃒\",\"vnsup\":\"⊃⃒\",\"Vopf\":\"𝕍\",\"vopf\":\"𝕧\",\"vprop\":\"∝\",\"vrtri\":\"⊳\",\"Vscr\":\"𝒱\",\"vscr\":\"𝓋\",\"vsubnE\":\"⫋︀\",\"vsubne\":\"⊊︀\",\"vsupnE\":\"⫌︀\",\"vsupne\":\"⊋︀\",\"Vvdash\":\"⊪\",\"vzigzag\":\"⦚\",\"Wcirc\":\"Ŵ\",\"wcirc\":\"ŵ\",\"wedbar\":\"⩟\",\"wedge\":\"∧\",\"Wedge\":\"⋀\",\"wedgeq\":\"≙\",\"weierp\":\"℘\",\"Wfr\":\"𝔚\",\"wfr\":\"𝔴\",\"Wopf\":\"𝕎\",\"wopf\":\"𝕨\",\"wp\":\"℘\",\"wr\":\"≀\",\"wreath\":\"≀\",\"Wscr\":\"𝒲\",\"wscr\":\"𝓌\",\"xcap\":\"⋂\",\"xcirc\":\"◯\",\"xcup\":\"⋃\",\"xdtri\":\"▽\",\"Xfr\":\"𝔛\",\"xfr\":\"𝔵\",\"xharr\":\"⟷\",\"xhArr\":\"⟺\",\"Xi\":\"Ξ\",\"xi\":\"ξ\",\"xlarr\":\"⟵\",\"xlArr\":\"⟸\",\"xmap\":\"⟼\",\"xnis\":\"⋻\",\"xodot\":\"⨀\",\"Xopf\":\"𝕏\",\"xopf\":\"𝕩\",\"xoplus\":\"⨁\",\"xotime\":\"⨂\",\"xrarr\":\"⟶\",\"xrArr\":\"⟹\",\"Xscr\":\"𝒳\",\"xscr\":\"𝓍\",\"xsqcup\":\"⨆\",\"xuplus\":\"⨄\",\"xutri\":\"△\",\"xvee\":\"⋁\",\"xwedge\":\"⋀\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"YAcy\":\"Я\",\"yacy\":\"я\",\"Ycirc\":\"Ŷ\",\"ycirc\":\"ŷ\",\"Ycy\":\"Ы\",\"ycy\":\"ы\",\"yen\":\"¥\",\"Yfr\":\"𝔜\",\"yfr\":\"𝔶\",\"YIcy\":\"Ї\",\"yicy\":\"ї\",\"Yopf\":\"𝕐\",\"yopf\":\"𝕪\",\"Yscr\":\"𝒴\",\"yscr\":\"𝓎\",\"YUcy\":\"Ю\",\"yucy\":\"ю\",\"yuml\":\"ÿ\",\"Yuml\":\"Ÿ\",\"Zacute\":\"Ź\",\"zacute\":\"ź\",\"Zcaron\":\"Ž\",\"zcaron\":\"ž\",\"Zcy\":\"З\",\"zcy\":\"з\",\"Zdot\":\"Ż\",\"zdot\":\"ż\",\"zeetrf\":\"ℨ\",\"ZeroWidthSpace\":\"​\",\"Zeta\":\"Ζ\",\"zeta\":\"ζ\",\"zfr\":\"𝔷\",\"Zfr\":\"ℨ\",\"ZHcy\":\"Ж\",\"zhcy\":\"ж\",\"zigrarr\":\"⇝\",\"zopf\":\"𝕫\",\"Zopf\":\"ℤ\",\"Zscr\":\"𝒵\",\"zscr\":\"𝓏\",\"zwj\":\"‍\",\"zwnj\":\"‌\"}");

/***/ }),
/* 44 */
/***/ (function(module) {

module.exports = JSON.parse("{\"amp\":\"&\",\"apos\":\"'\",\"gt\":\">\",\"lt\":\"<\",\"quot\":\"\\\"\"}");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */
function isTag(elem) {
    return (elem.type === "tag" /* Tag */ ||
        elem.type === "script" /* Script */ ||
        elem.type === "style" /* Style */);
}
exports.isTag = isTag;
// Exports for backwards compatibility
exports.Text = "text" /* Text */; //Text
exports.Directive = "directive" /* Directive */; //<? ... ?>
exports.Comment = "comment" /* Comment */; //<!-- ... -->
exports.Script = "script" /* Script */; //<script> tags
exports.Style = "style" /* Style */; //<style> tags
exports.Tag = "tag" /* Tag */; //Any tag
exports.CDATA = "cdata" /* CDATA */; //<![CDATA[ ... ]]>
exports.Doctype = "doctype" /* Doctype */;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A mapping of RDFa profile to a features object.
 */
// tslint:disable:object-literal-sort-keys
exports.RDFA_FEATURES = {
    '': {
        baseTag: true,
        xmlBase: true,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: true,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: true,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: true,
        roleAttribute: true,
    },
    'core': {
        baseTag: false,
        xmlBase: false,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: false,
        datetimeAttribute: false,
        timeTag: false,
        htmlDatatype: false,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: false,
        roleAttribute: false,
    },
    'html': {
        baseTag: true,
        xmlBase: false,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: true,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: true,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: false,
        roleAttribute: true,
    },
    'xhtml': {
        baseTag: true,
        xmlBase: false,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: true,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: true,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: true,
        roleAttribute: true,
    },
    'xml': {
        baseTag: false,
        xmlBase: true,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: false,
        inheritSubjectInHeadBody: false,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: false,
        copyRdfaPatterns: false,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: false,
        roleAttribute: true,
    },
};
// tslint:enable:object-literal-sort-keys
// tslint:disable:object-literal-sort-keys
exports.RDFA_CONTENTTYPES = {
    // HTML
    'text/html': 'html',
    // XHTML
    'application/xhtml+xml': 'xhtml',
    // XML
    'application/xml': 'xml',
    'text/xml': 'xml',
    'image/svg+xml': 'xml',
};
// tslint:enable:object-literal-sort-keys
//# sourceMappingURL=RdfaProfile.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

const rdf = __webpack_require__(20)
const DatasetCore = __webpack_require__(207)

function dataset (quads) {
  return new DatasetCore(quads)
}

module.exports = Object.assign({ dataset }, rdf)


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

const namespace = __webpack_require__(0)

const ns = (factory) => {
  const xsd = namespace('http://www.w3.org/2001/XMLSchema#', { factory })
  const rdf = namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#', { factory })

  return {
    first: rdf.first,
    nil: rdf.nil,
    rest: rdf.rest,
    langString: rdf.langString,
    xsd
  }
}

module.exports = ns


/***/ }),
/* 49 */
/***/ (function(module, exports) {

function toArray (value, defaultValue) {
  if (typeof value === 'undefined' || value === null) {
    return defaultValue
  }

  if (!Array.isArray(value)) {
    return [value]
  }

  return value
}

module.exports = toArray


/***/ }),
/* 50 */
/***/ (function(module, exports) {



/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(4);
var normalizeHeaderName = __webpack_require__(114);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(55);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(55);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);
var settle = __webpack_require__(115);
var cookies = __webpack_require__(117);
var buildURL = __webpack_require__(52);
var buildFullPath = __webpack_require__(118);
var parseHeaders = __webpack_require__(121);
var isURLSameOrigin = __webpack_require__(122);
var createError = __webpack_require__(56);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    if (
      (utils.isBlob(requestData) || utils.isFile(requestData)) &&
      requestData.type
    ) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = unescape(encodeURIComponent(config.auth.password)) || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(116);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const AsyncAlgorithm = __webpack_require__(127);
const IdentifierIssuer = __webpack_require__(34);
const MessageDigest = __webpack_require__(60);
const Permutator = __webpack_require__(63);
const NQuads = __webpack_require__(36);
const util = __webpack_require__(13);

const POSITIONS = {subject: 's', object: 'o', graph: 'g'};

module.exports = class URDNA2015 extends AsyncAlgorithm {
  constructor(options) {
    options = options || {};
    super(options);
    this.name = 'URDNA2015';
    this.options = Object.assign({}, options);
    this.blankNodeInfo = {};
    this.hashToBlankNodes = {};
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads;
  }

  // 4.4) Normalization Algorithm
  main(dataset, callback) {
    const self = this;
    self.schedule.start = Date.now();
    let result;
    self.quads = dataset;

    // 1) Create the normalization state.

    // Note: Optimize by generating non-normalized blank node map concurrently.
    const nonNormalized = {};

    self.waterfall([
      callback => {
        // 2) For every quad in input dataset:
        self.forEach(dataset, (quad, idx, callback) => {
          // 2.1) For each blank node that occurs in the quad, add a reference
          // to the quad using the blank node identifier in the blank node to
          // quads map, creating a new entry if necessary.
          self.forEachComponent(quad, component => {
            if(component.termType !== 'BlankNode') {
              return;
            }
            const id = component.value;
            if(id in self.blankNodeInfo) {
              self.blankNodeInfo[id].quads.push(quad);
            } else {
              nonNormalized[id] = true;
              self.blankNodeInfo[id] = {quads: [quad]};
            }
          });

          callback();
        }, callback);
      },
      callback => {
        // 3) Create a list of non-normalized blank node identifiers
        // non-normalized identifiers and populate it using the keys from the
        // blank node to quads map.
        // Note: We use a map here and it was generated during step 2.

        // 4) Initialize simple, a boolean flag, to true.
        let simple = true;

        // 5) While simple is true, issue canonical identifiers for blank nodes:
        self.whilst(() => simple, callback => {
          // 5.1) Set simple to false.
          simple = false;

          // 5.2) Clear hash to blank nodes map.
          self.hashToBlankNodes = {};

          self.waterfall([
            callback => {
              // 5.3) For each blank node identifier identifier in
              // non-normalized identifiers:
              self.forEach(nonNormalized, (value, id, callback) => {
                // 5.3.1) Create a hash, hash, according to the Hash First
                // Degree Quads algorithm.
                self.hashFirstDegreeQuads(id, (err, hash) => {
                  if(err) {
                    return callback(err);
                  }
                  // 5.3.2) Add hash and identifier to hash to blank nodes map,
                  // creating a new entry if necessary.
                  if(hash in self.hashToBlankNodes) {
                    self.hashToBlankNodes[hash].push(id);
                  } else {
                    self.hashToBlankNodes[hash] = [id];
                  }
                  callback();
                });
              }, callback);
            },
            callback => {
              // 5.4) For each hash to identifier list mapping in hash to blank
              // nodes map, lexicographically-sorted by hash:
              const hashes = Object.keys(self.hashToBlankNodes).sort();
              self.forEach(hashes, (hash, i, callback) => {
                // 5.4.1) If the length of identifier list is greater than 1,
                // continue to the next mapping.
                const idList = self.hashToBlankNodes[hash];
                if(idList.length > 1) {
                  return callback();
                }

                // 5.4.2) Use the Issue Identifier algorithm, passing canonical
                // issuer and the single blank node identifier in identifier
                // list, identifier, to issue a canonical replacement identifier
                // for identifier.
                // TODO: consider changing `getId` to `issue`
                const id = idList[0];
                self.canonicalIssuer.getId(id);

                // 5.4.3) Remove identifier from non-normalized identifiers.
                delete nonNormalized[id];

                // 5.4.4) Remove hash from the hash to blank nodes map.
                delete self.hashToBlankNodes[hash];

                // 5.4.5) Set simple to true.
                simple = true;
                callback();
              }, callback);
            }
          ], callback);
        }, callback);
      },
      callback => {
        // 6) For each hash to identifier list mapping in hash to blank nodes
        // map, lexicographically-sorted by hash:
        const hashes = Object.keys(self.hashToBlankNodes).sort();
        self.forEach(hashes, (hash, idx, callback) => {
          // 6.1) Create hash path list where each item will be a result of
          // running the Hash N-Degree Quads algorithm.
          const hashPathList = [];

          // 6.2) For each blank node identifier identifier in identifier list:
          const idList = self.hashToBlankNodes[hash];
          self.waterfall([
            callback => {
              self.forEach(idList, (id, idx, callback) => {
                // 6.2.1) If a canonical identifier has already been issued for
                // identifier, continue to the next identifier.
                if(self.canonicalIssuer.hasId(id)) {
                  return callback();
                }

                // 6.2.2) Create temporary issuer, an identifier issuer
                // initialized with the prefix _:b.
                const issuer = new IdentifierIssuer('_:b');

                // 6.2.3) Use the Issue Identifier algorithm, passing temporary
                // issuer and identifier, to issue a new temporary blank node
                // identifier for identifier.
                issuer.getId(id);

                // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
                // temporary issuer, and append the result to the hash path
                // list.
                self.hashNDegreeQuads(id, issuer, (err, result) => {
                  if(err) {
                    return callback(err);
                  }
                  hashPathList.push(result);
                  callback();
                });
              }, callback);
            },
            callback => {
              // 6.3) For each result in the hash path list,
              // lexicographically-sorted by the hash in result:
              // TODO: use `String.localeCompare`?
              hashPathList.sort((a, b) =>
                (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0));
              self.forEach(hashPathList, (result, idx, callback) => {
                // 6.3.1) For each blank node identifier, existing identifier,
                // that was issued a temporary identifier by identifier issuer
                // in result, issue a canonical identifier, in the same order,
                // using the Issue Identifier algorithm, passing canonical
                // issuer and existing identifier.
                for(const existing in result.issuer.existing) {
                  self.canonicalIssuer.getId(existing);
                }
                callback();
              }, callback);
            }
          ], callback);
        }, callback);
      }, callback => {
        /* Note: At this point all blank nodes in the set of RDF quads have been
        assigned canonical identifiers, which have been stored in the canonical
        issuer. Here each quad is updated by assigning each of its blank nodes
        its new identifier. */

        // 7) For each quad, quad, in input dataset:
        const normalized = [];
        self.waterfall([
          callback => {
            self.forEach(self.quads, (quad, idx, callback) => {
              // 7.1) Create a copy, quad copy, of quad and replace any existing
              // blank node identifiers using the canonical identifiers
              // previously issued by canonical issuer.
              // Note: We optimize away the copy here.
              self.forEachComponent(quad, component => {
                if(component.termType === 'BlankNode' &&
                  !component.value.startsWith(self.canonicalIssuer.prefix)) {
                  component.value = self.canonicalIssuer.getId(component.value);
                }
              });
              // 7.2) Add quad copy to the normalized dataset.
              normalized.push(NQuads.serializeQuad(quad));
              callback();
            }, callback);
          },
          callback => {
            // sort normalized output
            normalized.sort();

            // 8) Return the normalized dataset.
            result = normalized.join('');
            return callback();
          }
        ], callback);
      }
    ], err => callback(err, result));
  }

  // 4.6) Hash First Degree Quads
  hashFirstDegreeQuads(id, callback) {
    const self = this;

    // return cached hash
    const info = self.blankNodeInfo[id];
    if('hash' in info) {
      return callback(null, info.hash);
    }

    // 1) Initialize nquads to an empty list. It will be used to store quads in
    // N-Quads format.
    const nquads = [];

    // 2) Get the list of quads quads associated with the reference blank node
    // identifier in the blank node to quads map.
    const quads = info.quads;

    // 3) For each quad quad in quads:
    self.forEach(quads, (quad, idx, callback) => {
      // 3.1) Serialize the quad in N-Quads format with the following special
      // rule:

      // 3.1.1) If any component in quad is an blank node, then serialize it
      // using a special identifier as follows:
      const copy = {predicate: quad.predicate};
      self.forEachComponent(quad, (component, key) => {
        // 3.1.2) If the blank node's existing blank node identifier matches the
        // reference blank node identifier then use the blank node identifier
        // _:a, otherwise, use the blank node identifier _:z.
        copy[key] = self.modifyFirstDegreeComponent(id, component, key);
      });
      nquads.push(NQuads.serializeQuad(copy));
      callback();
    }, err => {
      if(err) {
        return callback(err);
      }
      // 4) Sort nquads in lexicographical order.
      nquads.sort();

      // 5) Return the hash that results from passing the sorted, joined nquads
      // through the hash algorithm.
      const md = new MessageDigest(self.hashAlgorithm);
      for(let i = 0; i < nquads.length; ++i) {
        md.update(nquads[i]);
      }
      // TODO: represent as byte buffer instead to cut memory usage in half
      info.hash = md.digest();
      callback(null, info.hash);
    });
  }

  // 4.7) Hash Related Blank Node
  hashRelatedBlankNode(related, quad, issuer, position, callback) {
    const self = this;

    // 1) Set the identifier to use for related, preferring first the canonical
    // identifier for related if issued, second the identifier issued by issuer
    // if issued, and last, if necessary, the result of the Hash First Degree
    // Quads algorithm, passing related.
    let id;
    self.waterfall([
      callback => {
        if(self.canonicalIssuer.hasId(related)) {
          id = self.canonicalIssuer.getId(related);
          return callback();
        }
        if(issuer.hasId(related)) {
          id = issuer.getId(related);
          return callback();
        }
        self.hashFirstDegreeQuads(related, (err, hash) => {
          if(err) {
            return callback(err);
          }
          id = hash;
          callback();
        });
      }
    ], err => {
      if(err) {
        return callback(err);
      }

      // 2) Initialize a string input to the value of position.
      // Note: We use a hash object instead.
      const md = new MessageDigest(self.hashAlgorithm);
      md.update(position);

      // 3) If position is not g, append <, the value of the predicate in quad,
      // and > to input.
      if(position !== 'g') {
        md.update(self.getRelatedPredicate(quad));
      }

      // 4) Append identifier to input.
      md.update(id);

      // 5) Return the hash that results from passing input through the hash
      // algorithm.
      // TODO: represent as byte buffer instead to cut memory usage in half
      return callback(null, md.digest());
    });
  }

  // 4.8) Hash N-Degree Quads
  hashNDegreeQuads(id, issuer, callback) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    // Note: 2) and 3) handled within `createHashToRelated`
    let hashToRelated;
    const md = new MessageDigest(self.hashAlgorithm);
    self.waterfall([
      callback => self.createHashToRelated(id, issuer, (err, result) => {
        if(err) {
          return callback(err);
        }
        hashToRelated = result;
        callback();
      }),
      callback => {
        // 4) Create an empty string, data to hash.
        // Note: We created a hash object `md` above instead.

        // 5) For each related hash to blank node list mapping in hash to
        // related blank nodes map, sorted lexicographically by related hash:
        const hashes = Object.keys(hashToRelated).sort();
        self.forEach(hashes, (hash, idx, callback) => {
          // 5.1) Append the related hash to the data to hash.
          md.update(hash);

          // 5.2) Create a string chosen path.
          let chosenPath = '';

          // 5.3) Create an unset chosen issuer variable.
          let chosenIssuer;

          // 5.4) For each permutation of blank node list:
          const permutator = new Permutator(hashToRelated[hash]);
          self.whilst(() => permutator.hasNext(), nextPermutation => {
            const permutation = permutator.next();

            // 5.4.1) Create a copy of issuer, issuer copy.
            let issuerCopy = issuer.clone();

            // 5.4.2) Create a string path.
            let path = '';

            // 5.4.3) Create a recursion list, to store blank node identifiers
            // that must be recursively processed by this algorithm.
            const recursionList = [];

            self.waterfall([
              callback => {
                // 5.4.4) For each related in permutation:
                self.forEach(permutation, (related, idx, callback) => {
                  // 5.4.4.1) If a canonical identifier has been issued for
                  // related, append it to path.
                  if(self.canonicalIssuer.hasId(related)) {
                    path += self.canonicalIssuer.getId(related);
                  } else {
                    // 5.4.4.2) Otherwise:
                    // 5.4.4.2.1) If issuer copy has not issued an identifier
                    // for related, append related to recursion list.
                    if(!issuerCopy.hasId(related)) {
                      recursionList.push(related);
                    }
                    // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                    // issuer copy and related and append the result to path.
                    path += issuerCopy.getId(related);
                  }

                  // 5.4.4.3) If chosen path is not empty and the length of path
                  // is greater than or equal to the length of chosen path and
                  // path is lexicographically greater than chosen path, then
                  // skip to the next permutation.
                  // Note: Comparing path length to chosen path length can be
                  // optimized away; only compare lexicographically.
                  if(chosenPath.length !== 0 && path > chosenPath) {
                    // FIXME: may cause inaccurate total depth calculation
                    return nextPermutation();
                  }
                  callback();
                }, callback);
              },
              callback => {
                // 5.4.5) For each related in recursion list:
                self.forEach(recursionList, (related, idx, callback) => {
                  // 5.4.5.1) Set result to the result of recursively executing
                  // the Hash N-Degree Quads algorithm, passing related for
                  // identifier and issuer copy for path identifier issuer.
                  self.hashNDegreeQuads(related, issuerCopy, (err, result) => {
                    if(err) {
                      return callback(err);
                    }

                    // 5.4.5.2) Use the Issue Identifier algorithm, passing
                    // issuer copy and related and append the result to path.
                    path += issuerCopy.getId(related);

                    // 5.4.5.3) Append <, the hash in result, and > to path.
                    path += '<' + result.hash + '>';

                    // 5.4.5.4) Set issuer copy to the identifier issuer in
                    // result.
                    issuerCopy = result.issuer;

                    // 5.4.5.5) If chosen path is not empty and the length of
                    // path is greater than or equal to the length of chosen
                    // path and path is lexicographically greater than chosen
                    // path, then skip to the next permutation.
                    // Note: Comparing path length to chosen path length can be
                    // optimized away; only compare lexicographically.
                    if(chosenPath.length !== 0 && path > chosenPath) {
                      // FIXME: may cause inaccurate total depth calculation
                      return nextPermutation();
                    }
                    callback();
                  });
                }, callback);
              },
              callback => {
                // 5.4.6) If chosen path is empty or path is lexicographically
                // less than chosen path, set chosen path to path and chosen
                // issuer to issuer copy.
                if(chosenPath.length === 0 || path < chosenPath) {
                  chosenPath = path;
                  chosenIssuer = issuerCopy;
                }
                callback();
              }
            ], nextPermutation);
          }, err => {
            if(err) {
              return callback(err);
            }

            // 5.5) Append chosen path to data to hash.
            md.update(chosenPath);

            // 5.6) Replace issuer, by reference, with chosen issuer.
            issuer = chosenIssuer;
            callback();
          });
        }, callback);
      }
    ], err => {
      // 6) Return issuer and the hash that results from passing data to hash
      // through the hash algorithm.
      callback(err, {hash: md.digest(), issuer});
    });
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    component.value = (component.value === id ? '_:a' : '_:z');
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return '<' + quad.predicate.value + '>';
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer, callback) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    self.forEach(quads, (quad, idx, callback) => {
      // 3.1) For each component in quad, if component is the subject, object,
      // and graph name and it is a blank node that is not identified by
      // identifier:
      self.forEach(quad, (component, key, callback) => {
        if(key === 'predicate' ||
          !(component.termType === 'BlankNode' && component.value !== id)) {
          return callback();
        }
        // 3.1.1) Set hash to the result of the Hash Related Blank Node
        // algorithm, passing the blank node identifier for component as
        // related, quad, path identifier issuer as issuer, and position as
        // either s, o, or g based on whether component is a subject, object,
        // graph name, respectively.
        const related = component.value;
        const position = POSITIONS[key];
        self.hashRelatedBlankNode(
          related, quad, issuer, position, (err, hash) => {
          if(err) {
            return callback(err);
          }
          // 3.1.2) Add a mapping of hash to the blank node identifier for
          // component to hash to related blank nodes map, adding an entry as
          // necessary.
          if(hash in hashToRelated) {
            hashToRelated[hash].push(related);
          } else {
            hashToRelated[hash] = [related];
          }
          callback();
        });
      }, callback);
    }, err => callback(err, hashToRelated));
  }

  // helper that iterates over quad components (skips predicate)
  forEachComponent(quad, op) {
    for(const key in quad) {
      // skip `predicate`
      if(key === 'predicate') {
        continue;
      }
      op(quad[key], key, quad);
    }
  }
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const forge = __webpack_require__(22);
__webpack_require__(35);
__webpack_require__(128);
__webpack_require__(132);

module.exports = class MessageDigest {
  /**
   * Creates a new MessageDigest.
   *
   * @param algorithm the algorithm to use.
   */
  constructor(algorithm) {
    this.md = forge.md[algorithm].create();
  }

  update(msg) {
    this.md.update(msg, 'utf8');
  }

  digest() {
    return this.md.digest().toHex();
  }
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, Buffer) {/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(22);
var baseN = __webpack_require__(131);

/* Utilities API */
var util = module.exports = forge.util = forge.util || {};

// define setImmediate and nextTick
(function() {
  // use native nextTick (unless we're in webpack)
  // webpack (or better node-libs-browser polyfill) sets process.browser.
  // this way we can detect webpack properly
  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {
    util.nextTick = process.nextTick;
    if(typeof setImmediate === 'function') {
      util.setImmediate = setImmediate;
    } else {
      // polyfill setImmediate with nextTick, older versions of node
      // (those w/o setImmediate) won't totally starve IO
      util.setImmediate = util.nextTick;
    }
    return;
  }

  // polyfill nextTick with native setImmediate
  if(typeof setImmediate === 'function') {
    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };
    util.nextTick = function(callback) {
      return setImmediate(callback);
    };
    return;
  }

  /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */

  // polyfill with setTimeout
  util.setImmediate = function(callback) {
    setTimeout(callback, 0);
  };

  // upgrade polyfill to use postMessage
  if(typeof window !== 'undefined' &&
    typeof window.postMessage === 'function') {
    var msg = 'forge.setImmediate';
    var callbacks = [];
    util.setImmediate = function(callback) {
      callbacks.push(callback);
      // only send message when one hasn't been sent in
      // the current turn of the event loop
      if(callbacks.length === 1) {
        window.postMessage(msg, '*');
      }
    };
    function handler(event) {
      if(event.source === window && event.data === msg) {
        event.stopPropagation();
        var copy = callbacks.slice();
        callbacks.length = 0;
        copy.forEach(function(callback) {
          callback();
        });
      }
    }
    window.addEventListener('message', handler, true);
  }

  // upgrade polyfill to use MutationObserver
  if(typeof MutationObserver !== 'undefined') {
    // polyfill with MutationObserver
    var now = Date.now();
    var attr = true;
    var div = document.createElement('div');
    var callbacks = [];
    new MutationObserver(function() {
      var copy = callbacks.slice();
      callbacks.length = 0;
      copy.forEach(function(callback) {
        callback();
      });
    }).observe(div, {attributes: true});
    var oldSetImmediate = util.setImmediate;
    util.setImmediate = function(callback) {
      if(Date.now() - now > 15) {
        now = Date.now();
        oldSetImmediate(callback);
      } else {
        callbacks.push(callback);
        // only trigger observer when it hasn't been triggered in
        // the current turn of the event loop
        if(callbacks.length === 1) {
          div.setAttribute('a', attr = !attr);
        }
      }
    };
  }

  util.nextTick = util.setImmediate;
})();

// check if running under Node.js
util.isNodejs =
  typeof process !== 'undefined' && process.versions && process.versions.node;


// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.
util.globalScope = (function() {
  if(util.isNodejs) {
    return global;
  }

  return typeof self === 'undefined' ? window : self;
})();

// define isArray
util.isArray = Array.isArray || function(x) {
  return Object.prototype.toString.call(x) === '[object Array]';
};

// define isArrayBuffer
util.isArrayBuffer = function(x) {
  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
};

// define isArrayBufferView
util.isArrayBufferView = function(x) {
  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};

/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */
function _checkBitsParam(n) {
  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {
    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
  }
}

// TODO: set ByteBuffer to best available backing
util.ByteBuffer = ByteStringBuffer;

/** Buffer w/BinaryString backing */

/**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */
function ByteStringBuffer(b) {
  // TODO: update to match DataBuffer API

  // the data in this buffer
  this.data = '';
  // the pointer for reading from this buffer
  this.read = 0;

  if(typeof b === 'string') {
    this.data = b;
  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
    if(typeof Buffer !== 'undefined' && b instanceof Buffer) {
      this.data = b.toString('binary');
    } else {
      // convert native buffer to forge buffer
      // FIXME: support native buffers internally instead
      var arr = new Uint8Array(b);
      try {
        this.data = String.fromCharCode.apply(null, arr);
      } catch(e) {
        for(var i = 0; i < arr.length; ++i) {
          this.putByte(arr[i]);
        }
      }
    }
  } else if(b instanceof ByteStringBuffer ||
    (typeof b === 'object' && typeof b.data === 'string' &&
    typeof b.read === 'number')) {
    // copy existing buffer
    this.data = b.data;
    this.read = b.read;
  }

  // used for v8 optimization
  this._constructedStringLength = 0;
}
util.ByteStringBuffer = ByteStringBuffer;

/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */
var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
  this._constructedStringLength += x;
  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
    // this substr() should cause the constructed string to join
    this.data.substr(0, 1);
    this._constructedStringLength = 0;
  }
};

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.ByteStringBuffer.prototype.length = function() {
  return this.data.length - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.ByteStringBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putByte = function(b) {
  return this.putBytes(String.fromCharCode(b));
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
  b = String.fromCharCode(b);
  var d = this.data;
  while(n > 0) {
    if(n & 1) {
      d += b;
    }
    n >>>= 1;
    if(n > 0) {
      b += b;
    }
  }
  this.data = d;
  this._optimizeConstructedString(n);
  return this;
};

/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a binary encoded string) to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBytes = function(bytes) {
  this.data += bytes;
  this._optimizeConstructedString(bytes.length);
  return this;
};

/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putString = function(str) {
  return this.putBytes(util.encodeUtf8(str));
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF));
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF));
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 24 & 0xFF));
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt = function(i, n) {
  _checkBitsParam(n);
  var bytes = '';
  do {
    n -= 8;
    bytes += String.fromCharCode((i >> n) & 0xFF);
  } while(n > 0);
  return this.putBytes(bytes);
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
  // putInt checks n
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
  return this.putBytes(buffer.getBytes());
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.getByte = function() {
  return this.data.charCodeAt(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 8 ^
    this.data.charCodeAt(this.read + 1));
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 16 ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 24 ^
    this.data.charCodeAt(this.read + 1) << 16 ^
    this.data.charCodeAt(this.read + 2) << 8 ^
    this.data.charCodeAt(this.read + 3));
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16 ^
    this.data.charCodeAt(this.read + 3) << 24);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getInt = function(n) {
  _checkBitsParam(n);
  var rval = 0;
  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.charCodeAt(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getSignedInt = function(n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer. Note that the resulting string is binary encoded (in node.js this
 * encoding is referred to as `binary`, it is *not* `utf8`).
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */
util.ByteStringBuffer.prototype.getBytes = function(count) {
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */
util.ByteStringBuffer.prototype.bytes = function(count) {
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.at = function(i) {
  return this.data.charCodeAt(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.setAt = function(i, b) {
  this.data = this.data.substr(0, this.read + i) +
    String.fromCharCode(b) +
    this.data.substr(this.read + i + 1);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.ByteStringBuffer.prototype.last = function() {
  return this.data.charCodeAt(this.data.length - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.ByteStringBuffer.prototype.copy = function() {
  var c = util.createBuffer(this.data);
  c.read = this.read;
  return c;
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.compact = function() {
  if(this.read > 0) {
    this.data = this.data.slice(this.read);
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.clear = function() {
  this.data = '';
  this.read = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.truncate = function(count) {
  var len = Math.max(0, this.length() - count);
  this.data = this.data.substr(this.read, len);
  this.read = 0;
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.ByteStringBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */
util.ByteStringBuffer.prototype.toString = function() {
  return util.decodeUtf8(this.bytes());
};

/** End Buffer w/BinaryString backing */

/** Buffer w/UInt8Array backing */

/**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */
function DataBuffer(b, options) {
  // default options
  options = options || {};

  // pointers for read from/write to buffer
  this.read = options.readOffset || 0;
  this.growSize = options.growSize || 1024;

  var isArrayBuffer = util.isArrayBuffer(b);
  var isArrayBufferView = util.isArrayBufferView(b);
  if(isArrayBuffer || isArrayBufferView) {
    // use ArrayBuffer directly
    if(isArrayBuffer) {
      this.data = new DataView(b);
    } else {
      // TODO: adjust read/write offset based on the type of view
      // or specify that this must be done in the options ... that the
      // offsets are byte-based
      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
    }
    this.write = ('writeOffset' in options ?
      options.writeOffset : this.data.byteLength);
    return;
  }

  // initialize to empty array buffer and add any given bytes using putBytes
  this.data = new DataView(new ArrayBuffer(0));
  this.write = 0;

  if(b !== null && b !== undefined) {
    this.putBytes(b);
  }

  if('writeOffset' in options) {
    this.write = options.writeOffset;
  }
}
util.DataBuffer = DataBuffer;

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.DataBuffer.prototype.length = function() {
  return this.write - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.DataBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */
util.DataBuffer.prototype.accommodate = function(amount, growSize) {
  if(this.length() >= amount) {
    return this;
  }
  growSize = Math.max(growSize || this.growSize, amount);

  // grow buffer
  var src = new Uint8Array(
    this.data.buffer, this.data.byteOffset, this.data.byteLength);
  var dst = new Uint8Array(this.length() + growSize);
  dst.set(src);
  this.data = new DataView(dst.buffer);

  return this;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putByte = function(b) {
  this.accommodate(1);
  this.data.setUint8(this.write++, b);
  return this;
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.fillWithByte = function(b, n) {
  this.accommodate(n);
  for(var i = 0; i < n; ++i) {
    this.data.setUint8(b);
  }
  return this;
};

/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
  if(util.isArrayBufferView(bytes)) {
    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    var len = src.byteLength - src.byteOffset;
    this.accommodate(len);
    var dst = new Uint8Array(this.data.buffer, this.write);
    dst.set(src);
    this.write += len;
    return this;
  }

  if(util.isArrayBuffer(bytes)) {
    var src = new Uint8Array(bytes);
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(this.data.buffer);
    dst.set(src, this.write);
    this.write += src.byteLength;
    return this;
  }

  // bytes is a util.DataBuffer or equivalent
  if(bytes instanceof util.DataBuffer ||
    (typeof bytes === 'object' &&
    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
    util.isArrayBufferView(bytes.data))) {
    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(bytes.data.byteLength, this.write);
    dst.set(src);
    this.write += src.byteLength;
    return this;
  }

  if(bytes instanceof util.ByteStringBuffer) {
    // copy binary string and process as the same as a string parameter below
    bytes = bytes.data;
    encoding = 'binary';
  }

  // string conversion
  encoding = encoding || 'binary';
  if(typeof bytes === 'string') {
    var view;

    // decode from string
    if(encoding === 'hex') {
      this.accommodate(Math.ceil(bytes.length / 2));
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.hex.decode(bytes, view, this.write);
      return this;
    }
    if(encoding === 'base64') {
      this.accommodate(Math.ceil(bytes.length / 4) * 3);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.base64.decode(bytes, view, this.write);
      return this;
    }

    // encode text as UTF-8 bytes
    if(encoding === 'utf8') {
      // encode as UTF-8 then decode string as raw binary
      bytes = util.encodeUtf8(bytes);
      encoding = 'binary';
    }

    // decode string as raw binary
    if(encoding === 'binary' || encoding === 'raw') {
      // one byte per character
      this.accommodate(bytes.length);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.raw.decode(view);
      return this;
    }

    // encode text as UTF-16 bytes
    if(encoding === 'utf16') {
      // two bytes per character
      this.accommodate(bytes.length * 2);
      view = new Uint16Array(this.data.buffer, this.write);
      this.write += util.text.utf16.encode(view);
      return this;
    }

    throw new Error('Invalid encoding: ' + encoding);
  }

  throw Error('Invalid parameter: ' + bytes);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putBuffer = function(buffer) {
  this.putBytes(buffer);
  buffer.clear();
  return this;
};

/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putString = function(str) {
  return this.putBytes(str, 'utf16');
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt16 = function(i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i);
  this.write += 2;
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt24 = function(i) {
  this.accommodate(3);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.write += 3;
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt32 = function(i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i);
  this.write += 4;
  return this;
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt16Le = function(i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i, true);
  this.write += 2;
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt24Le = function(i) {
  this.accommodate(3);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
  this.write += 3;
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt32Le = function(i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i, true);
  this.write += 4;
  return this;
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt = function(i, n) {
  _checkBitsParam(n);
  this.accommodate(n / 8);
  do {
    n -= 8;
    this.data.setInt8(this.write++, (i >> n) & 0xFF);
  } while(n > 0);
  return this;
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putSignedInt = function(i, n) {
  _checkBitsParam(n);
  this.accommodate(n / 8);
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.DataBuffer.prototype.getByte = function() {
  return this.data.getInt8(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.DataBuffer.prototype.getInt16 = function() {
  var rval = this.data.getInt16(this.read);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.DataBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.getInt16(this.read) << 8 ^
    this.data.getInt8(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.DataBuffer.prototype.getInt32 = function() {
  var rval = this.data.getInt32(this.read);
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.DataBuffer.prototype.getInt16Le = function() {
  var rval = this.data.getInt16(this.read, true);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.DataBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.getInt8(this.read) ^
    this.data.getInt16(this.read + 1, true) << 8);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.DataBuffer.prototype.getInt32Le = function() {
  var rval = this.data.getInt32(this.read, true);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.DataBuffer.prototype.getInt = function(n) {
  _checkBitsParam(n);
  var rval = 0;
  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.getInt8(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.DataBuffer.prototype.getSignedInt = function(n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */
util.DataBuffer.prototype.getBytes = function(count) {
  // TODO: deprecate this method, it is poorly named and
  // this.toString('binary') replaces it
  // add a toTypedArray()/toArrayBuffer() function
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */
util.DataBuffer.prototype.bytes = function(count) {
  // TODO: deprecate this method, it is poorly named, add "getString()"
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.DataBuffer.prototype.at = function(i) {
  return this.data.getUint8(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.setAt = function(i, b) {
  this.data.setUint8(i, b);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.DataBuffer.prototype.last = function() {
  return this.data.getUint8(this.write - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.DataBuffer.prototype.copy = function() {
  return new util.DataBuffer(this);
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.compact = function() {
  if(this.read > 0) {
    var src = new Uint8Array(this.data.buffer, this.read);
    var dst = new Uint8Array(src.byteLength);
    dst.set(src);
    this.data = new DataView(dst);
    this.write -= this.read;
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.clear = function() {
  this.data = new DataView(new ArrayBuffer(0));
  this.read = this.write = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.truncate = function(count) {
  this.write = Math.max(0, this.length() - count);
  this.read = Math.min(this.read, this.write);
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.DataBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.byteLength; ++i) {
    var b = this.data.getUint8(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */
util.DataBuffer.prototype.toString = function(encoding) {
  var view = new Uint8Array(this.data, this.read, this.length());
  encoding = encoding || 'utf8';

  // encode to string
  if(encoding === 'binary' || encoding === 'raw') {
    return util.binary.raw.encode(view);
  }
  if(encoding === 'hex') {
    return util.binary.hex.encode(view);
  }
  if(encoding === 'base64') {
    return util.binary.base64.encode(view);
  }

  // decode to text
  if(encoding === 'utf8') {
    return util.text.utf8.decode(view);
  }
  if(encoding === 'utf16') {
    return util.text.utf16.decode(view);
  }

  throw new Error('Invalid encoding: ' + encoding);
};

/** End Buffer w/UInt8Array backing */

/**
 * Creates a buffer that stores bytes. A value may be given to populate the
 * buffer with data. This value can either be string of encoded bytes or a
 * regular string of characters. When passing a string of binary encoded
 * bytes, the encoding `raw` should be given. This is also the default. When
 * passing a string of characters, the encoding `utf8` should be given.
 *
 * @param [input] a string with encoded bytes to store in the buffer.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */
util.createBuffer = function(input, encoding) {
  // TODO: deprecate, use new ByteBuffer() instead
  encoding = encoding || 'raw';
  if(input !== undefined && encoding === 'utf8') {
    input = util.encodeUtf8(input);
  }
  return new util.ByteBuffer(input);
};

/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */
util.fillString = function(c, n) {
  var s = '';
  while(n > 0) {
    if(n & 1) {
      s += c;
    }
    n >>>= 1;
    if(n > 0) {
      c += c;
    }
  }
  return s;
};

/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */
util.xorBytes = function(s1, s2, n) {
  var s3 = '';
  var b = '';
  var t = '';
  var i = 0;
  var c = 0;
  for(; n > 0; --n, ++i) {
    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
    if(c >= 10) {
      s3 += t;
      t = '';
      c = 0;
    }
    t += String.fromCharCode(b);
    ++c;
  }
  s3 += t;
  return s3;
};

/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */
util.hexToBytes = function(hex) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
  var rval = '';
  var i = 0;
  if(hex.length & 1 == 1) {
    // odd number of characters, convert first character alone
    i = 1;
    rval += String.fromCharCode(parseInt(hex[0], 16));
  }
  // convert 2 characters (1 byte) at a time
  for(; i < hex.length; i += 2) {
    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  }
  return rval;
};

/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */
util.bytesToHex = function(bytes) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
  return util.createBuffer(bytes).toHex();
};

/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */
util.int32ToBytes = function(i) {
  return (
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

// base64 characters, reverse mapping
var _base64 =
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var _base64Idx = [
/*43 -43 = 0*/
/*'+',  1,  2,  3,'/' */
   62, -1, -1, -1, 63,

/*'0','1','2','3','4','5','6','7','8','9' */
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

/*15, 16, 17,'=', 19, 20, 21 */
  -1, -1, -1, 64, -1, -1, -1,

/*65 - 43 = 22*/
/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

/*91 - 43 = 48 */
/*48, 49, 50, 51, 52, 53 */
  -1, -1, -1, -1, -1, -1,

/*97 - 43 = 54*/
/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
];

// base58 characters (Bitcoin alphabet)
var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */
util.encode64 = function(input, maxline) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;
  while(i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    // encode 4 character group
    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
    if(isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if(maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }
  output += line;
  return output;
};

/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */
util.decode64 = function(input) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  var output = '';
  var enc1, enc2, enc3, enc4;
  var i = 0;

  while(i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
    if(enc3 !== 64) {
      // decoded at least 2 bytes
      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
      if(enc4 !== 64) {
        // decoded 3 bytes
        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
      }
    }
  }

  return output;
};

/**
 * Encodes the given string of characters (a standard JavaScript
 * string) as a binary encoded string where the bytes represent
 * a UTF-8 encoded string of characters. Non-ASCII characters will be
 * encoded as multiple bytes according to UTF-8.
 *
 * @param str a standard string of characters to encode.
 *
 * @return the binary encoded string.
 */
util.encodeUtf8 = function(str) {
  return unescape(encodeURIComponent(str));
};

/**
 * Decodes a binary encoded string that contains bytes that
 * represent a UTF-8 encoded string of characters -- into a
 * string of characters (a standard JavaScript string).
 *
 * @param str the binary encoded string to decode.
 *
 * @return the resulting standard string of characters.
 */
util.decodeUtf8 = function(str) {
  return decodeURIComponent(escape(str));
};

// binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.binary = {
  raw: {},
  hex: {},
  base64: {},
  base58: {},
  baseN : {
    encode: baseN.encode,
    decode: baseN.decode
  }
};

/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */
util.binary.raw.encode = function(bytes) {
  return String.fromCharCode.apply(null, bytes);
};

/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.raw.decode = function(str, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length);
  }
  offset = offset || 0;
  var j = offset;
  for(var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }
  return output ? (j - offset) : out;
};

/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */
util.binary.hex.encode = util.bytesToHex;

/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.hex.decode = function(hex, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(Math.ceil(hex.length / 2));
  }
  offset = offset || 0;
  var i = 0, j = offset;
  if(hex.length & 1) {
    // odd number of characters, convert first character alone
    i = 1;
    out[j++] = parseInt(hex[0], 16);
  }
  // convert 2 characters (1 byte) at a time
  for(; i < hex.length; i += 2) {
    out[j++] = parseInt(hex.substr(i, 2), 16);
  }
  return output ? (j - offset) : out;
};

/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */
util.binary.base64.encode = function(input, maxline) {
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;
  while(i < input.byteLength) {
    chr1 = input[i++];
    chr2 = input[i++];
    chr3 = input[i++];

    // encode 4 character group
    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
    if(isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if(maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }
  output += line;
  return output;
};

/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.base64.decode = function(input, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
  }

  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  offset = offset || 0;
  var enc1, enc2, enc3, enc4;
  var i = 0, j = offset;

  while(i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    out[j++] = (enc1 << 2) | (enc2 >> 4);
    if(enc3 !== 64) {
      // decoded at least 2 bytes
      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
      if(enc4 !== 64) {
        // decoded 3 bytes
        out[j++] = ((enc3 & 3) << 6) | enc4;
      }
    }
  }

  // make sure result is the exact decoded length
  return output ? (j - offset) : out.subarray(0, j);
};

// add support for base58 encoding/decoding with Bitcoin alphabet
util.binary.base58.encode = function(input, maxline) {
  return util.binary.baseN.encode(input, _base58, maxline);
};
util.binary.base58.decode = function(input, maxline) {
  return util.binary.baseN.decode(input, _base58, maxline);
};

// text encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.text = {
  utf8: {},
  utf16: {}
};

/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.text.utf8.encode = function(str, output, offset) {
  str = util.encodeUtf8(str);
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length);
  }
  offset = offset || 0;
  var j = offset;
  for(var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }
  return output ? (j - offset) : out;
};

/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
util.text.utf8.decode = function(bytes) {
  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};

/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.text.utf16.encode = function(str, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length * 2);
  }
  var view = new Uint16Array(out.buffer);
  offset = offset || 0;
  var j = offset;
  var k = offset;
  for(var i = 0; i < str.length; ++i) {
    view[k++] = str.charCodeAt(i);
    j += 2;
  }
  return output ? (j - offset) : out;
};

/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
util.text.utf16.decode = function(bytes) {
  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};

/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */
util.deflate = function(api, bytes, raw) {
  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);

  // strip zlib header and trailer if necessary
  if(raw) {
    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
    // there is a 4-byte DICT (alder-32) block before the data if
    // its 5th bit is set
    var start = 2;
    var flg = bytes.charCodeAt(1);
    if(flg & 0x20) {
      start = 6;
    }
    // zlib trailer is 4 bytes of adler-32
    bytes = bytes.substring(start, bytes.length - 4);
  }

  return bytes;
};

/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */
util.inflate = function(api, bytes, raw) {
  // TODO: add zlib header and trailer if necessary/possible
  var rval = api.inflate(util.encode64(bytes)).rval;
  return (rval === null) ? null : util.decode64(rval);
};

/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */
var _setStorageObject = function(api, id, obj) {
  if(!api) {
    throw new Error('WebStorage not available.');
  }

  var rval;
  if(obj === null) {
    rval = api.removeItem(id);
  } else {
    // json-encode and base64-encode object
    obj = util.encode64(JSON.stringify(obj));
    rval = api.setItem(id, obj);
  }

  // handle potential flash error
  if(typeof(rval) !== 'undefined' && rval.rval !== true) {
    var error = new Error(rval.error.message);
    error.id = rval.error.id;
    error.name = rval.error.name;
    throw error;
  }
};

/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */
var _getStorageObject = function(api, id) {
  if(!api) {
    throw new Error('WebStorage not available.');
  }

  // get the existing entry
  var rval = api.getItem(id);

  /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */

  // flash returns item wrapped in an object, handle special case
  if(api.init) {
    if(rval.rval === null) {
      if(rval.error) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
      }
      // no error, but also no item
      rval = null;
    } else {
      rval = rval.rval;
    }
  }

  // handle decoding
  if(rval !== null) {
    // base64-decode and json-decode data
    rval = JSON.parse(util.decode64(rval));
  }

  return rval;
};

/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */
var _setItem = function(api, id, key, data) {
  // get storage object
  var obj = _getStorageObject(api, id);
  if(obj === null) {
    // create a new storage object
    obj = {};
  }
  // update key
  obj[key] = data;

  // set storage object
  _setStorageObject(api, id, obj);
};

/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */
var _getItem = function(api, id, key) {
  // get storage object
  var rval = _getStorageObject(api, id);
  if(rval !== null) {
    // return data at key
    rval = (key in rval) ? rval[key] : null;
  }

  return rval;
};

/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */
var _removeItem = function(api, id, key) {
  // get storage object
  var obj = _getStorageObject(api, id);
  if(obj !== null && key in obj) {
    // remove key
    delete obj[key];

    // see if entry has no keys remaining
    var empty = true;
    for(var prop in obj) {
      empty = false;
      break;
    }
    if(empty) {
      // remove entry entirely if no keys are left
      obj = null;
    }

    // set storage object
    _setStorageObject(api, id, obj);
  }
};

/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */
var _clearItems = function(api, id) {
  _setStorageObject(api, id, null);
};

/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */
var _callStorageFunction = function(func, args, location) {
  var rval = null;

  // default storage types
  if(typeof(location) === 'undefined') {
    location = ['web', 'flash'];
  }

  // apply storage types in order of preference
  var type;
  var done = false;
  var exception = null;
  for(var idx in location) {
    type = location[idx];
    try {
      if(type === 'flash' || type === 'both') {
        if(args[0] === null) {
          throw new Error('Flash local storage not available.');
        }
        rval = func.apply(this, args);
        done = (type === 'flash');
      }
      if(type === 'web' || type === 'both') {
        args[0] = localStorage;
        rval = func.apply(this, args);
        done = true;
      }
    } catch(ex) {
      exception = ex;
    }
    if(done) {
      break;
    }
  }

  if(!done) {
    throw exception;
  }

  return rval;
};

/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */
util.setItem = function(api, id, key, data, location) {
  _callStorageFunction(_setItem, arguments, location);
};

/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */
util.getItem = function(api, id, key, location) {
  return _callStorageFunction(_getItem, arguments, location);
};

/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */
util.removeItem = function(api, id, key, location) {
  _callStorageFunction(_removeItem, arguments, location);
};

/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */
util.clearItems = function(api, id, location) {
  _callStorageFunction(_clearItems, arguments, location);
};

/**
 * Parses the scheme, host, and port from an http(s) url.
 *
 * @param str the url string.
 *
 * @return the parsed url object or null if the url is invalid.
 */
util.parseUrl = function(str) {
  // FIXME: this regex looks a bit broken
  var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
  regex.lastIndex = 0;
  var m = regex.exec(str);
  var url = (m === null) ? null : {
    full: str,
    scheme: m[1],
    host: m[2],
    port: m[3],
    path: m[4]
  };
  if(url) {
    url.fullHost = url.host;
    if(url.port) {
      if(url.port !== 80 && url.scheme === 'http') {
        url.fullHost += ':' + url.port;
      } else if(url.port !== 443 && url.scheme === 'https') {
        url.fullHost += ':' + url.port;
      }
    } else if(url.scheme === 'http') {
      url.port = 80;
    } else if(url.scheme === 'https') {
      url.port = 443;
    }
    url.full = url.scheme + '://' + url.fullHost;
  }
  return url;
};

/* Storage for query variables */
var _queryVariables = null;

/**
 * Returns the window location query variables. Query is parsed on the first
 * call and the same object is returned on subsequent calls. The mapping
 * is from keys to an array of values. Parameters without values will have
 * an object key set but no value added to the value array. Values are
 * unescaped.
 *
 * ...?k1=v1&k2=v2:
 * {
 *   "k1": ["v1"],
 *   "k2": ["v2"]
 * }
 *
 * ...?k1=v1&k1=v2:
 * {
 *   "k1": ["v1", "v2"]
 * }
 *
 * ...?k1=v1&k2:
 * {
 *   "k1": ["v1"],
 *   "k2": []
 * }
 *
 * ...?k1=v1&k1:
 * {
 *   "k1": ["v1"]
 * }
 *
 * ...?k1&k1:
 * {
 *   "k1": []
 * }
 *
 * @param query the query string to parse (optional, default to cached
 *          results from parsing window location search query).
 *
 * @return object mapping keys to variables.
 */
util.getQueryVariables = function(query) {
  var parse = function(q) {
    var rval = {};
    var kvpairs = q.split('&');
    for(var i = 0; i < kvpairs.length; i++) {
      var pos = kvpairs[i].indexOf('=');
      var key;
      var val;
      if(pos > 0) {
        key = kvpairs[i].substring(0, pos);
        val = kvpairs[i].substring(pos + 1);
      } else {
        key = kvpairs[i];
        val = null;
      }
      if(!(key in rval)) {
        rval[key] = [];
      }
      // disallow overriding object prototype keys
      if(!(key in Object.prototype) && val !== null) {
        rval[key].push(unescape(val));
      }
    }
    return rval;
  };

   var rval;
   if(typeof(query) === 'undefined') {
     // set cached variables if needed
     if(_queryVariables === null) {
       if(typeof(window) !== 'undefined' && window.location && window.location.search) {
          // parse window search query
          _queryVariables = parse(window.location.search.substring(1));
       } else {
          // no query variables available
          _queryVariables = {};
       }
     }
     rval = _queryVariables;
   } else {
     // parse given query
     rval = parse(query);
   }
   return rval;
};

/**
 * Parses a fragment into a path and query. This method will take a URI
 * fragment and break it up as if it were the main URI. For example:
 *    /bar/baz?a=1&b=2
 * results in:
 *    {
 *       path: ["bar", "baz"],
 *       query: {"k1": ["v1"], "k2": ["v2"]}
 *    }
 *
 * @return object with a path array and query object.
 */
util.parseFragment = function(fragment) {
  // default to whole fragment
  var fp = fragment;
  var fq = '';
  // split into path and query if possible at the first '?'
  var pos = fragment.indexOf('?');
  if(pos > 0) {
    fp = fragment.substring(0, pos);
    fq = fragment.substring(pos + 1);
  }
  // split path based on '/' and ignore first element if empty
  var path = fp.split('/');
  if(path.length > 0 && path[0] === '') {
    path.shift();
  }
  // convert query into object
  var query = (fq === '') ? {} : util.getQueryVariables(fq);

  return {
    pathString: fp,
    queryString: fq,
    path: path,
    query: query
  };
};

/**
 * Makes a request out of a URI-like request string. This is intended to
 * be used where a fragment id (after a URI '#') is parsed as a URI with
 * path and query parts. The string should have a path beginning and
 * delimited by '/' and optional query parameters following a '?'. The
 * query should be a standard URL set of key value pairs delimited by
 * '&'. For backwards compatibility the initial '/' on the path is not
 * required. The request object has the following API, (fully described
 * in the method code):
 *    {
 *       path: <the path string part>.
 *       query: <the query string part>,
 *       getPath(i): get part or all of the split path array,
 *       getQuery(k, i): get part or all of a query key array,
 *       getQueryLast(k, _default): get last element of a query key array.
 *    }
 *
 * @return object with request parameters.
 */
util.makeRequest = function(reqString) {
  var frag = util.parseFragment(reqString);
  var req = {
    // full path string
    path: frag.pathString,
    // full query string
    query: frag.queryString,
    /**
     * Get path or element in path.
     *
     * @param i optional path index.
     *
     * @return path or part of path if i provided.
     */
    getPath: function(i) {
      return (typeof(i) === 'undefined') ? frag.path : frag.path[i];
    },
    /**
     * Get query, values for a key, or value for a key index.
     *
     * @param k optional query key.
     * @param i optional query key index.
     *
     * @return query, values for a key, or value for a key index.
     */
    getQuery: function(k, i) {
      var rval;
      if(typeof(k) === 'undefined') {
        rval = frag.query;
      } else {
        rval = frag.query[k];
        if(rval && typeof(i) !== 'undefined') {
           rval = rval[i];
        }
      }
      return rval;
    },
    getQueryLast: function(k, _default) {
      var rval;
      var vals = req.getQuery(k);
      if(vals) {
        rval = vals[vals.length - 1];
      } else {
        rval = _default;
      }
      return rval;
    }
  };
  return req;
};

/**
 * Makes a URI out of a path, an object with query parameters, and a
 * fragment. Uses jQuery.param() internally for query string creation.
 * If the path is an array, it will be joined with '/'.
 *
 * @param path string path or array of strings.
 * @param query object with query parameters. (optional)
 * @param fragment fragment string. (optional)
 *
 * @return string object with request parameters.
 */
util.makeLink = function(path, query, fragment) {
  // join path parts if needed
  path = jQuery.isArray(path) ? path.join('/') : path;

  var qstr = jQuery.param(query || {});
  fragment = fragment || '';
  return path +
    ((qstr.length > 0) ? ('?' + qstr) : '') +
    ((fragment.length > 0) ? ('#' + fragment) : '');
};

/**
 * Follows a path of keys deep into an object hierarchy and set a value.
 * If a key does not exist or it's value is not an object, create an
 * object in it's place. This can be destructive to a object tree if
 * leaf nodes are given as non-final path keys.
 * Used to avoid exceptions from missing parts of the path.
 *
 * SECURITY NOTE: Do not use unsafe inputs. Doing so could expose a prototype
 * pollution security issue.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param value the value to set.
 */
util.setPath = function(object, keys, value) {
  // need to start at an object
  if(typeof(object) === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;
    while(i < len) {
      var next = keys[i++];
      if(i == len) {
        // last
        object[next] = value;
      } else {
        // more
        var hasNext = (next in object);
        if(!hasNext ||
          (hasNext && typeof(object[next]) !== 'object') ||
          (hasNext && object[next] === null)) {
          object[next] = {};
        }
        object = object[next];
      }
    }
  }
};

/**
 * Follows a path of keys deep into an object hierarchy and return a value.
 * If a key does not exist, create an object in it's place.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param _default value to return if path not found.
 *
 * @return the value at the path if found, else default if given, else
 *         undefined.
 */
util.getPath = function(object, keys, _default) {
  var i = 0;
  var len = keys.length;
  var hasNext = true;
  while(hasNext && i < len &&
    typeof(object) === 'object' && object !== null) {
    var next = keys[i++];
    hasNext = next in object;
    if(hasNext) {
      object = object[next];
    }
  }
  return (hasNext ? object : _default);
};

/**
 * Follow a path of keys deep into an object hierarchy and delete the
 * last one. If a key does not exist, do nothing.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 */
util.deletePath = function(object, keys) {
  // need to start at an object
  if(typeof(object) === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;
    while(i < len) {
      var next = keys[i++];
      if(i == len) {
        // last
        delete object[next];
      } else {
        // more
        if(!(next in object) ||
          (typeof(object[next]) !== 'object') ||
          (object[next] === null)) {
           break;
        }
        object = object[next];
      }
    }
  }
};

/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */
util.isEmpty = function(obj) {
  for(var prop in obj) {
    if(obj.hasOwnProperty(prop)) {
      return false;
    }
  }
  return true;
};

/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */
util.format = function(format) {
  var re = /%./g;
  // current match
  var match;
  // current part
  var part;
  // current arg index
  var argi = 0;
  // collected parts to recombine later
  var parts = [];
  // last index found
  var last = 0;
  // loop while matches remain
  while((match = re.exec(format))) {
    part = format.substring(last, re.lastIndex - 2);
    // don't add empty strings (ie, parts between %s%s)
    if(part.length > 0) {
      parts.push(part);
    }
    last = re.lastIndex;
    // switch on % code
    var code = match[0][1];
    switch(code) {
    case 's':
    case 'o':
      // check if enough arguments were given
      if(argi < arguments.length) {
        parts.push(arguments[argi++ + 1]);
      } else {
        parts.push('<?>');
      }
      break;
    // FIXME: do proper formating for numbers, etc
    //case 'f':
    //case 'd':
    case '%':
      parts.push('%');
      break;
    default:
      parts.push('<%' + code + '?>');
    }
  }
  // add trailing part of format string
  parts.push(format.substring(last));
  return parts.join('');
};

/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */
util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
  // http://kevin.vanzonneveld.net
  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +     bugfix by: Michael White (http://crestidg.com)
  // +     bugfix by: Benjamin Lupton
  // +     bugfix by: Allan Jensen (http://www.winternet.no)
  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // *     example 1: number_format(1234.5678, 2, '.', '');
  // *     returns 1: 1234.57

  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
  var d = dec_point === undefined ? ',' : dec_point;
  var t = thousands_sep === undefined ?
   '.' : thousands_sep, s = n < 0 ? '-' : '';
  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
  var j = (i.length > 3) ? i.length % 3 : 0;
  return s + (j ? i.substr(0, j) + t : '') +
    i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
};

/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */
util.formatSize = function(size) {
  if(size >= 1073741824) {
    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
  } else if(size >= 1048576) {
    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
  } else if(size >= 1024) {
    size = util.formatNumber(size / 1024, 0) + ' KiB';
  } else {
    size = util.formatNumber(size, 0) + ' bytes';
  }
  return size;
};

/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */
util.bytesFromIP = function(ip) {
  if(ip.indexOf('.') !== -1) {
    return util.bytesFromIPv4(ip);
  }
  if(ip.indexOf(':') !== -1) {
    return util.bytesFromIPv6(ip);
  }
  return null;
};

/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */
util.bytesFromIPv4 = function(ip) {
  ip = ip.split('.');
  if(ip.length !== 4) {
    return null;
  }
  var b = util.createBuffer();
  for(var i = 0; i < ip.length; ++i) {
    var num = parseInt(ip[i], 10);
    if(isNaN(num)) {
      return null;
    }
    b.putByte(num);
  }
  return b.getBytes();
};

/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */
util.bytesFromIPv6 = function(ip) {
  var blanks = 0;
  ip = ip.split(':').filter(function(e) {
    if(e.length === 0) ++blanks;
    return true;
  });
  var zeros = (8 - ip.length + blanks) * 2;
  var b = util.createBuffer();
  for(var i = 0; i < 8; ++i) {
    if(!ip[i] || ip[i].length === 0) {
      b.fillWithByte(0, zeros);
      zeros = 0;
      continue;
    }
    var bytes = util.hexToBytes(ip[i]);
    if(bytes.length < 2) {
      b.putByte(0);
    }
    b.putBytes(bytes);
  }
  return b.getBytes();
};

/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */
util.bytesToIP = function(bytes) {
  if(bytes.length === 4) {
    return util.bytesToIPv4(bytes);
  }
  if(bytes.length === 16) {
    return util.bytesToIPv6(bytes);
  }
  return null;
};

/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */
util.bytesToIPv4 = function(bytes) {
  if(bytes.length !== 4) {
    return null;
  }
  var ip = [];
  for(var i = 0; i < bytes.length; ++i) {
    ip.push(bytes.charCodeAt(i));
  }
  return ip.join('.');
};

/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */
util.bytesToIPv6 = function(bytes) {
  if(bytes.length !== 16) {
    return null;
  }
  var ip = [];
  var zeroGroups = [];
  var zeroMaxGroup = 0;
  for(var i = 0; i < bytes.length; i += 2) {
    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
    // canonicalize zero representation
    while(hex[0] === '0' && hex !== '0') {
      hex = hex.substr(1);
    }
    if(hex === '0') {
      var last = zeroGroups[zeroGroups.length - 1];
      var idx = ip.length;
      if(!last || idx !== last.end + 1) {
        zeroGroups.push({start: idx, end: idx});
      } else {
        last.end = idx;
        if((last.end - last.start) >
          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
          zeroMaxGroup = zeroGroups.length - 1;
        }
      }
    }
    ip.push(hex);
  }
  if(zeroGroups.length > 0) {
    var group = zeroGroups[zeroMaxGroup];
    // only shorten group of length > 0
    if(group.end - group.start > 0) {
      ip.splice(group.start, group.end - group.start + 1, '');
      if(group.start === 0) {
        ip.unshift('');
      }
      if(group.end === 7) {
        ip.push('');
      }
    }
  }
  return ip.join(':');
};

/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */
util.estimateCores = function(options, callback) {
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  if('cores' in util && !options.update) {
    return callback(null, util.cores);
  }
  if(typeof navigator !== 'undefined' &&
    'hardwareConcurrency' in navigator &&
    navigator.hardwareConcurrency > 0) {
    util.cores = navigator.hardwareConcurrency;
    return callback(null, util.cores);
  }
  if(typeof Worker === 'undefined') {
    // workers not available
    util.cores = 1;
    return callback(null, util.cores);
  }
  if(typeof Blob === 'undefined') {
    // can't estimate, default to 2
    util.cores = 2;
    return callback(null, util.cores);
  }

  // create worker concurrency estimation code as blob
  var blobUrl = URL.createObjectURL(new Blob(['(',
    function() {
      self.addEventListener('message', function(e) {
        // run worker for 4 ms
        var st = Date.now();
        var et = st + 4;
        while(Date.now() < et);
        self.postMessage({st: st, et: et});
      });
    }.toString(),
  ')()'], {type: 'application/javascript'}));

  // take 5 samples using 16 workers
  sample([], 5, 16);

  function sample(max, samples, numWorkers) {
    if(samples === 0) {
      // get overlap average
      var avg = Math.floor(max.reduce(function(avg, x) {
        return avg + x;
      }, 0) / max.length);
      util.cores = Math.max(1, avg);
      URL.revokeObjectURL(blobUrl);
      return callback(null, util.cores);
    }
    map(numWorkers, function(err, results) {
      max.push(reduce(numWorkers, results));
      sample(max, samples - 1, numWorkers);
    });
  }

  function map(numWorkers, callback) {
    var workers = [];
    var results = [];
    for(var i = 0; i < numWorkers; ++i) {
      var worker = new Worker(blobUrl);
      worker.addEventListener('message', function(e) {
        results.push(e.data);
        if(results.length === numWorkers) {
          for(var i = 0; i < numWorkers; ++i) {
            workers[i].terminate();
          }
          callback(null, results);
        }
      });
      workers.push(worker);
    }
    for(var i = 0; i < numWorkers; ++i) {
      workers[i].postMessage(i);
    }
  }

  function reduce(numWorkers, results) {
    // find overlapping time windows
    var overlaps = [];
    for(var n = 0; n < numWorkers; ++n) {
      var r1 = results[n];
      var overlap = overlaps[n] = [];
      for(var i = 0; i < numWorkers; ++i) {
        if(n === i) {
          continue;
        }
        var r2 = results[i];
        if((r1.st > r2.st && r1.st < r2.et) ||
          (r2.st > r1.st && r2.st < r1.et)) {
          overlap.push(i);
        }
      }
    }
    // get maximum overlaps ... don't include overlapping worker itself
    // as the main JS process was also being scheduled during the work and
    // would have to be subtracted from the estimate anyway
    return overlaps.reduce(function(max, overlap) {
      return Math.max(max, overlap.length);
    }, 0);
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(33).setImmediate, __webpack_require__(3), __webpack_require__(9).Buffer))

/***/ }),
/* 62 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


// TODO: convert to ES6 iterable

module.exports = class Permutator {
  /**
   * A Permutator iterates over all possible permutations of the given array
   * of elements.
   *
   * @param list the array of elements to iterate over.
   */
  constructor(list) {
    // original array
    this.list = list.sort();
    // indicates whether there are more permutations
    this.done = false;
    // directional info for permutation algorithm
    this.left = {};
    for(let i = 0; i < list.length; ++i) {
      this.left[list[i]] = true;
    }
  }

  /**
   * Returns true if there is another permutation.
   *
   * @return true if there is another permutation, false if not.
   */
  hasNext() {
    return !this.done;
  }

  /**
   * Gets the next permutation. Call hasNext() to ensure there is another one
   * first.
   *
   * @return the next permutation.
   */
  next() {
    // copy current permutation
    const rval = this.list.slice();

    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
     permutation algorithm. */

    // get largest mobile element k
    // (mobile: element is greater than the one it is looking at)
    let k = null;
    let pos = 0;
    const length = this.list.length;
    for(let i = 0; i < length; ++i) {
      const element = this.list[i];
      const left = this.left[element];
      if((k === null || element > k) &&
        ((left && i > 0 && element > this.list[i - 1]) ||
        (!left && i < (length - 1) && element > this.list[i + 1]))) {
        k = element;
        pos = i;
      }
    }

    // no more permutations
    if(k === null) {
      this.done = true;
    } else {
      // swap k and the element it is looking at
      const swap = this.left[k] ? pos - 1 : pos + 1;
      this.list[pos] = this.list[swap];
      this.list[swap] = k;

      // reverse the direction of all elements larger than k
      for(let i = 0; i < length; ++i) {
        if(this.list[i] > k) {
          this.left[this.list[i]] = !this.left[this.list[i]];
        }
      }
    }

    return rval;
  }
};



/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.
 */


const IdentifierIssuer = __webpack_require__(34);
const MessageDigest = __webpack_require__(60);
const Permutator = __webpack_require__(63);
const NQuads = __webpack_require__(36);
const util = __webpack_require__(13);

const POSITIONS = {subject: 's', object: 'o', graph: 'g'};

module.exports = class URDNA2015Sync {
  constructor() {
    this.name = 'URDNA2015';
    this.blankNodeInfo = {};
    this.hashToBlankNodes = {};
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads;
  }

  // 4.4) Normalization Algorithm
  main(dataset) {
    const self = this;
    self.quads = dataset;

    // 1) Create the normalization state.

    // Note: Optimize by generating non-normalized blank node map concurrently.
    const nonNormalized = {};

    // 2) For every quad in input dataset:
    for(const quad of dataset) {
      // 2.1) For each blank node that occurs in the quad, add a reference
      // to the quad using the blank node identifier in the blank node to
      // quads map, creating a new entry if necessary.
      self.forEachComponent(quad, component => {
        if(component.termType !== 'BlankNode') {
          return;
        }
        const id = component.value;
        if(id in self.blankNodeInfo) {
          self.blankNodeInfo[id].quads.push(quad);
        } else {
          nonNormalized[id] = true;
          self.blankNodeInfo[id] = {quads: [quad]};
        }
      });
    }

    // 3) Create a list of non-normalized blank node identifiers
    // non-normalized identifiers and populate it using the keys from the
    // blank node to quads map.
    // Note: We use a map here and it was generated during step 2.

    // 4) Initialize simple, a boolean flag, to true.
    let simple = true;

    // 5) While simple is true, issue canonical identifiers for blank nodes:
    while(simple) {
      // 5.1) Set simple to false.
      simple = false;

      // 5.2) Clear hash to blank nodes map.
      self.hashToBlankNodes = {};

      // 5.3) For each blank node identifier identifier in non-normalized
      // identifiers:
      for(const id in nonNormalized) {
        // 5.3.1) Create a hash, hash, according to the Hash First Degree
        // Quads algorithm.
        const hash = self.hashFirstDegreeQuads(id);

        // 5.3.2) Add hash and identifier to hash to blank nodes map,
        // creating a new entry if necessary.
        if(hash in self.hashToBlankNodes) {
          self.hashToBlankNodes[hash].push(id);
        } else {
          self.hashToBlankNodes[hash] = [id];
        }
      }

      // 5.4) For each hash to identifier list mapping in hash to blank
      // nodes map, lexicographically-sorted by hash:
      const hashes = Object.keys(self.hashToBlankNodes).sort();
      for(let i = 0; i < hashes.length; ++i) {
        // 5.4.1) If the length of identifier list is greater than 1,
        // continue to the next mapping.
        const hash = hashes[i];
        const idList = self.hashToBlankNodes[hash];
        if(idList.length > 1) {
          continue;
        }

        // 5.4.2) Use the Issue Identifier algorithm, passing canonical
        // issuer and the single blank node identifier in identifier
        // list, identifier, to issue a canonical replacement identifier
        // for identifier.
        // TODO: consider changing `getId` to `issue`
        const id = idList[0];
        self.canonicalIssuer.getId(id);

        // 5.4.3) Remove identifier from non-normalized identifiers.
        delete nonNormalized[id];

        // 5.4.4) Remove hash from the hash to blank nodes map.
        delete self.hashToBlankNodes[hash];

        // 5.4.5) Set simple to true.
        simple = true;
      }
    }

    // 6) For each hash to identifier list mapping in hash to blank nodes map,
    // lexicographically-sorted by hash:
    const hashes = Object.keys(self.hashToBlankNodes).sort();
    for(let i = 0; i < hashes.length; ++i) {
      // 6.1) Create hash path list where each item will be a result of
      // running the Hash N-Degree Quads algorithm.
      const hashPathList = [];

      // 6.2) For each blank node identifier identifier in identifier list:
      const hash = hashes[i];
      const idList = self.hashToBlankNodes[hash];
      for(let j = 0; j < idList.length; ++j) {
        // 6.2.1) If a canonical identifier has already been issued for
        // identifier, continue to the next identifier.
        const id = idList[j];
        if(self.canonicalIssuer.hasId(id)) {
          continue;
        }

        // 6.2.2) Create temporary issuer, an identifier issuer
        // initialized with the prefix _:b.
        const issuer = new IdentifierIssuer('_:b');

        // 6.2.3) Use the Issue Identifier algorithm, passing temporary
        // issuer and identifier, to issue a new temporary blank node
        // identifier for identifier.
        issuer.getId(id);

        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
        // temporary issuer, and append the result to the hash path list.
        const result = self.hashNDegreeQuads(id, issuer);
        hashPathList.push(result);
      }

      // 6.3) For each result in the hash path list,
      // lexicographically-sorted by the hash in result:
      // TODO: use `String.localeCompare`?
      hashPathList.sort((a, b) =>
        (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0));
      for(let j = 0; j < hashPathList.length; ++j) {
        // 6.3.1) For each blank node identifier, existing identifier,
        // that was issued a temporary identifier by identifier issuer
        // in result, issue a canonical identifier, in the same order,
        // using the Issue Identifier algorithm, passing canonical
        // issuer and existing identifier.
        const result = hashPathList[j];
        for(const existing in result.issuer.existing) {
          self.canonicalIssuer.getId(existing);
        }
      }
    }

    /* Note: At this point all blank nodes in the set of RDF quads have been
    assigned canonical identifiers, which have been stored in the canonical
    issuer. Here each quad is updated by assigning each of its blank nodes
    its new identifier. */

    // 7) For each quad, quad, in input dataset:
    const normalized = [];
    for(let i = 0; i < self.quads.length; ++i) {
      // 7.1) Create a copy, quad copy, of quad and replace any existing
      // blank node identifiers using the canonical identifiers
      // previously issued by canonical issuer.
      // Note: We optimize away the copy here.
      const quad = self.quads[i];
      self.forEachComponent(quad, component => {
        if(component.termType === 'BlankNode' &&
          !component.value.startsWith(self.canonicalIssuer.prefix)) {
          component.value = self.canonicalIssuer.getId(component.value);
        }
      });
      // 7.2) Add quad copy to the normalized dataset.
      normalized.push(NQuads.serializeQuad(quad));
    }

    // sort normalized output
    normalized.sort();

    // 8) Return the normalized dataset.
    return normalized.join('');
  }

  // 4.6) Hash First Degree Quads
  hashFirstDegreeQuads(id) {
    const self = this;

    // return cached hash
    const info = self.blankNodeInfo[id];
    if('hash' in info) {
      return info.hash;
    }

    // 1) Initialize nquads to an empty list. It will be used to store quads in
    // N-Quads format.
    const nquads = [];

    // 2) Get the list of quads `quads` associated with the reference blank node
    // identifier in the blank node to quads map.
    const quads = info.quads;

    // 3) For each quad `quad` in `quads`:
    for(let i = 0; i < quads.length; ++i) {
      const quad = quads[i];

      // 3.1) Serialize the quad in N-Quads format with the following special
      // rule:

      // 3.1.1) If any component in quad is an blank node, then serialize it
      // using a special identifier as follows:
      const copy = {predicate: quad.predicate};
      self.forEachComponent(quad, (component, key) => {
        // 3.1.2) If the blank node's existing blank node identifier matches
        // the reference blank node identifier then use the blank node
        // identifier _:a, otherwise, use the blank node identifier _:z.
        copy[key] = self.modifyFirstDegreeComponent(id, component, key);
      });
      nquads.push(NQuads.serializeQuad(copy));
    }

    // 4) Sort nquads in lexicographical order.
    nquads.sort();

    // 5) Return the hash that results from passing the sorted, joined nquads
    // through the hash algorithm.
    const md = new MessageDigest(self.hashAlgorithm);
    for(let i = 0; i < nquads.length; ++i) {
      md.update(nquads[i]);
    }
    // TODO: represent as byte buffer instead to cut memory usage in half
    info.hash = md.digest();
    return info.hash;
  }

  // 4.7) Hash Related Blank Node
  hashRelatedBlankNode(related, quad, issuer, position) {
    const self = this;

    // 1) Set the identifier to use for related, preferring first the canonical
    // identifier for related if issued, second the identifier issued by issuer
    // if issued, and last, if necessary, the result of the Hash First Degree
    // Quads algorithm, passing related.
    let id;
    if(self.canonicalIssuer.hasId(related)) {
      id = self.canonicalIssuer.getId(related);
    } else if(issuer.hasId(related)) {
      id = issuer.getId(related);
    } else {
      id = self.hashFirstDegreeQuads(related);
    }

    // 2) Initialize a string input to the value of position.
    // Note: We use a hash object instead.
    const md = new MessageDigest(self.hashAlgorithm);
    md.update(position);

    // 3) If position is not g, append <, the value of the predicate in quad,
    // and > to input.
    if(position !== 'g') {
      md.update(self.getRelatedPredicate(quad));
    }

    // 4) Append identifier to input.
    md.update(id);

    // 5) Return the hash that results from passing input through the hash
    // algorithm.
    // TODO: represent as byte buffer instead to cut memory usage in half
    return md.digest();
  }

  // 4.8) Hash N-Degree Quads
  hashNDegreeQuads(id, issuer) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    // Note: 2) and 3) handled within `createHashToRelated`
    const md = new MessageDigest(self.hashAlgorithm);
    const hashToRelated = self.createHashToRelated(id, issuer);

    // 4) Create an empty string, data to hash.
    // Note: We created a hash object `md` above instead.

    // 5) For each related hash to blank node list mapping in hash to related
    // blank nodes map, sorted lexicographically by related hash:
    const hashes = Object.keys(hashToRelated).sort();
    for(let i = 0; i < hashes.length; ++i) {
      // 5.1) Append the related hash to the data to hash.
      const hash = hashes[i];
      md.update(hash);

      // 5.2) Create a string chosen path.
      let chosenPath = '';

      // 5.3) Create an unset chosen issuer variable.
      let chosenIssuer;

      // 5.4) For each permutation of blank node list:
      const permutator = new Permutator(hashToRelated[hash]);
      while(permutator.hasNext()) {
        const permutation = permutator.next();

        // 5.4.1) Create a copy of issuer, issuer copy.
        let issuerCopy = issuer.clone();

        // 5.4.2) Create a string path.
        let path = '';

        // 5.4.3) Create a recursion list, to store blank node identifiers
        // that must be recursively processed by this algorithm.
        const recursionList = [];

        // 5.4.4) For each related in permutation:
        let nextPermutation = false;
        for(let j = 0; j < permutation.length; ++j) {
          // 5.4.4.1) If a canonical identifier has been issued for
          // related, append it to path.
          const related = permutation[j];
          if(self.canonicalIssuer.hasId(related)) {
            path += self.canonicalIssuer.getId(related);
          } else {
            // 5.4.4.2) Otherwise:
            // 5.4.4.2.1) If issuer copy has not issued an identifier for
            // related, append related to recursion list.
            if(!issuerCopy.hasId(related)) {
              recursionList.push(related);
            }
            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
            // issuer copy and related and append the result to path.
            path += issuerCopy.getId(related);
          }

          // 5.4.4.3) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.
          if(chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if(nextPermutation) {
          continue;
        }

        // 5.4.5) For each related in recursion list:
        for(let j = 0; j < recursionList.length; ++j) {
          // 5.4.5.1) Set result to the result of recursively executing
          // the Hash N-Degree Quads algorithm, passing related for
          // identifier and issuer copy for path identifier issuer.
          const related = recursionList[j];
          const result = self.hashNDegreeQuads(related, issuerCopy);

          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
          // copy and related and append the result to path.
          path += issuerCopy.getId(related);

          // 5.4.5.3) Append <, the hash in result, and > to path.
          path += '<' + result.hash + '>';

          // 5.4.5.4) Set issuer copy to the identifier issuer in
          // result.
          issuerCopy = result.issuer;

          // 5.4.5.5) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.
          if(chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if(nextPermutation) {
          continue;
        }

        // 5.4.6) If chosen path is empty or path is lexicographically
        // less than chosen path, set chosen path to path and chosen
        // issuer to issuer copy.
        if(chosenPath.length === 0 || path < chosenPath) {
          chosenPath = path;
          chosenIssuer = issuerCopy;
        }
      }

      // 5.5) Append chosen path to data to hash.
      md.update(chosenPath);

      // 5.6) Replace issuer, by reference, with chosen issuer.
      issuer = chosenIssuer;
    }

    // 6) Return issuer and the hash that results from passing data to hash
    // through the hash algorithm.
    return {hash: md.digest(), issuer};
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    component.value = (component.value === id ? '_:a' : '_:z');
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return '<' + quad.predicate.value + '>';
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    for(let i = 0; i < quads.length; ++i) {
      // 3.1) For each component in quad, if component is the subject, object,
      // and graph name and it is a blank node that is not identified by
      // identifier:
      const quad = quads[i];
      for(const key in quad) {
        const component = quad[key];
        if(key === 'predicate' ||
          !(component.termType === 'BlankNode' && component.value !== id)) {
          continue;
        }
        // 3.1.1) Set hash to the result of the Hash Related Blank Node
        // algorithm, passing the blank node identifier for component as
        // related, quad, path identifier issuer as issuer, and position as
        // either s, o, or g based on whether component is a subject, object,
        // graph name, respectively.
        const related = component.value;
        const position = POSITIONS[key];
        const hash = self.hashRelatedBlankNode(related, quad, issuer, position);

        // 3.1.2) Add a mapping of hash to the blank node identifier for
        // component to hash to related blank nodes map, adding an entry as
        // necessary.
        if(hash in hashToRelated) {
          hashToRelated[hash].push(related);
        } else {
          hashToRelated[hash] = [related];
        }
      }
    }

    return hashToRelated;
  }

  // helper that iterates over quad components (skips predicate)
  forEachComponent(quad, op) {
    for(const key in quad) {
      // skip `predicate`
      if(key === 'predicate') {
        continue;
      }
      op(quad[key], key, quad);
    }
  }
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// A linked list to keep track of recently-used-ness
const Yallist = __webpack_require__(138)

const MAX = Symbol('max')
const LENGTH = Symbol('length')
const LENGTH_CALCULATOR = Symbol('lengthCalculator')
const ALLOW_STALE = Symbol('allowStale')
const MAX_AGE = Symbol('maxAge')
const DISPOSE = Symbol('dispose')
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')
const LRU_LIST = Symbol('lruList')
const CACHE = Symbol('cache')
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')

const naiveLength = () => 1

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
  constructor (options) {
    if (typeof options === 'number')
      options = { max: options }

    if (!options)
      options = {}

    if (options.max && (typeof options.max !== 'number' || options.max < 0))
      throw new TypeError('max must be a non-negative number')
    // Kind of weird to have a default max of Infinity, but oh well.
    const max = this[MAX] = options.max || Infinity

    const lc = options.length || naiveLength
    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc
    this[ALLOW_STALE] = options.stale || false
    if (options.maxAge && typeof options.maxAge !== 'number')
      throw new TypeError('maxAge must be a number')
    this[MAX_AGE] = options.maxAge || 0
    this[DISPOSE] = options.dispose
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false
    this.reset()
  }

  // resize the cache when the max changes.
  set max (mL) {
    if (typeof mL !== 'number' || mL < 0)
      throw new TypeError('max must be a non-negative number')

    this[MAX] = mL || Infinity
    trim(this)
  }
  get max () {
    return this[MAX]
  }

  set allowStale (allowStale) {
    this[ALLOW_STALE] = !!allowStale
  }
  get allowStale () {
    return this[ALLOW_STALE]
  }

  set maxAge (mA) {
    if (typeof mA !== 'number')
      throw new TypeError('maxAge must be a non-negative number')

    this[MAX_AGE] = mA
    trim(this)
  }
  get maxAge () {
    return this[MAX_AGE]
  }

  // resize the cache when the lengthCalculator changes.
  set lengthCalculator (lC) {
    if (typeof lC !== 'function')
      lC = naiveLength

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC
      this[LENGTH] = 0
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)
        this[LENGTH] += hit.length
      })
    }
    trim(this)
  }
  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

  get length () { return this[LENGTH] }
  get itemCount () { return this[LRU_LIST].length }

  rforEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev
      forEachStep(this, fn, walker, thisp)
      walker = prev
    }
  }

  forEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next
      forEachStep(this, fn, walker, thisp)
      walker = next
    }
  }

  keys () {
    return this[LRU_LIST].toArray().map(k => k.key)
  }

  values () {
    return this[LRU_LIST].toArray().map(k => k.value)
  }

  reset () {
    if (this[DISPOSE] &&
        this[LRU_LIST] &&
        this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))
    }

    this[CACHE] = new Map() // hash of items by key
    this[LRU_LIST] = new Yallist() // list of items in order of use recency
    this[LENGTH] = 0 // length of items in the list
  }

  dump () {
    return this[LRU_LIST].map(hit =>
      isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h)
  }

  dumpLru () {
    return this[LRU_LIST]
  }

  set (key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE]

    if (maxAge && typeof maxAge !== 'number')
      throw new TypeError('maxAge must be a number')

    const now = maxAge ? Date.now() : 0
    const len = this[LENGTH_CALCULATOR](value, key)

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key))
        return false
      }

      const node = this[CACHE].get(key)
      const item = node.value

      // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key, item.value)
      }

      item.now = now
      item.maxAge = maxAge
      item.value = value
      this[LENGTH] += len - item.length
      item.length = len
      this.get(key)
      trim(this)
      return true
    }

    const hit = new Entry(key, value, len, now, maxAge)

    // oversized objects fall out of cache automatically.
    if (hit.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key, value)

      return false
    }

    this[LENGTH] += hit.length
    this[LRU_LIST].unshift(hit)
    this[CACHE].set(key, this[LRU_LIST].head)
    trim(this)
    return true
  }

  has (key) {
    if (!this[CACHE].has(key)) return false
    const hit = this[CACHE].get(key).value
    return !isStale(this, hit)
  }

  get (key) {
    return get(this, key, true)
  }

  peek (key) {
    return get(this, key, false)
  }

  pop () {
    const node = this[LRU_LIST].tail
    if (!node)
      return null

    del(this, node)
    return node.value
  }

  del (key) {
    del(this, this[CACHE].get(key))
  }

  load (arr) {
    // reset the cache
    this.reset()

    const now = Date.now()
    // A previous serialized cache has the most recent items first
    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l]
      const expiresAt = hit.e || 0
      if (expiresAt === 0)
        // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v)
      else {
        const maxAge = expiresAt - now
        // dont add already expired items
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge)
        }
      }
    }
  }

  prune () {
    this[CACHE].forEach((value, key) => get(this, key, false))
  }
}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key)
  if (node) {
    const hit = node.value
    if (isStale(self, hit)) {
      del(self, node)
      if (!self[ALLOW_STALE])
        return undefined
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now()
        self[LRU_LIST].unshiftNode(node)
      }
    }
    return hit.value
  }
}

const isStale = (self, hit) => {
  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    return false

  const diff = Date.now() - hit.now
  return hit.maxAge ? diff > hit.maxAge
    : self[MAX_AGE] && (diff > self[MAX_AGE])
}

const trim = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail;
      self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev
      del(self, walker)
      walker = prev
    }
  }
}

const del = (self, node) => {
  if (node) {
    const hit = node.value
    if (self[DISPOSE])
      self[DISPOSE](hit.key, hit.value)

    self[LENGTH] -= hit.length
    self[CACHE].delete(hit.key)
    self[LRU_LIST].removeNode(node)
  }
}

class Entry {
  constructor (key, value, length, now, maxAge) {
    this.key = key
    this.value = value
    this.length = length
    this.now = now
    this.maxAge = maxAge || 0
  }
}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value
  if (isStale(self, hit)) {
    del(self, node)
    if (!self[ALLOW_STALE])
      hit = undefined
  }
  if (hit)
    fn.call(thisp, hit.value, hit.key, self)
}

module.exports = LRUCache


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(15).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(67);
/*</replacement>*/


var Buffer = __webpack_require__(9).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(155);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(156);

var destroyImpl = __webpack_require__(68);

var _require = __webpack_require__(69),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(18).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(8)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(19);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(19);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(159);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(160);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(2)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(15).EventEmitter;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(18).codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(71)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(67);
/*</replacement>*/


var Buffer = __webpack_require__(9).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(68);

var _require = __webpack_require__(69),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(18).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(8)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(19);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(19); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(2)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(18).codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(19);

__webpack_require__(8)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(28);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(62);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(15).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(74);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(41).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__(25));
util.inherits = __webpack_require__(8);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(164);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(165);
var destroyImpl = __webpack_require__(75);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(16);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(16);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(2)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(15).EventEmitter;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(28);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(16);

/*<replacement>*/
var util = Object.create(__webpack_require__(25));
util.inherits = __webpack_require__(8);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Tokenizer_1 = __importDefault(__webpack_require__(78));
var events_1 = __webpack_require__(15);
var formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea"
]);
var pTag = new Set(["p"]);
var openImpliesClose = {
    tr: new Set(["tr", "th", "td"]),
    th: new Set(["th"]),
    td: new Set(["thead", "th", "td"]),
    body: new Set(["head", "link", "script"]),
    li: new Set(["li"]),
    p: pTag,
    h1: pTag,
    h2: pTag,
    h3: pTag,
    h4: pTag,
    h5: pTag,
    h6: pTag,
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: new Set(["option"]),
    optgroup: new Set(["optgroup", "option"]),
    dd: new Set(["dt", "dd"]),
    dt: new Set(["dt", "dd"]),
    address: pTag,
    article: pTag,
    aside: pTag,
    blockquote: pTag,
    details: pTag,
    div: pTag,
    dl: pTag,
    fieldset: pTag,
    figcaption: pTag,
    figure: pTag,
    footer: pTag,
    form: pTag,
    header: pTag,
    hr: pTag,
    main: pTag,
    nav: pTag,
    ol: pTag,
    pre: pTag,
    section: pTag,
    table: pTag,
    ul: pTag,
    rt: new Set(["rt", "rp"]),
    rp: new Set(["rt", "rp"]),
    tbody: new Set(["thead", "tbody"]),
    tfoot: new Set(["thead", "tbody"])
};
var voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
var foreignContextElements = new Set(["math", "svg"]);
var htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
]);
var reNameEnd = /\s|\//;
var Parser = /** @class */ (function (_super) {
    __extends(Parser, _super);
    function Parser(cbs, options) {
        var _this = _super.call(this) || this;
        _this._tagname = "";
        _this._attribname = "";
        _this._attribvalue = "";
        _this._attribs = null;
        _this._stack = [];
        _this._foreignContext = [];
        _this.startIndex = 0;
        _this.endIndex = null;
        // Aliases for backwards compatibility
        _this.parseChunk = Parser.prototype.write;
        _this.done = Parser.prototype.end;
        _this._options = options || {};
        _this._cbs = cbs || {};
        _this._tagname = "";
        _this._attribname = "";
        _this._attribvalue = "";
        _this._attribs = null;
        _this._stack = [];
        _this._foreignContext = [];
        _this.startIndex = 0;
        _this.endIndex = null;
        _this._lowerCaseTagNames =
            "lowerCaseTags" in _this._options
                ? !!_this._options.lowerCaseTags
                : !_this._options.xmlMode;
        _this._lowerCaseAttributeNames =
            "lowerCaseAttributeNames" in _this._options
                ? !!_this._options.lowerCaseAttributeNames
                : !_this._options.xmlMode;
        _this._tokenizer = new (_this._options.Tokenizer || Tokenizer_1.default)(_this._options, _this);
        if (_this._cbs.onparserinit)
            _this._cbs.onparserinit(_this);
        return _this;
    }
    Parser.prototype._updatePosition = function (initialOffset) {
        if (this.endIndex === null) {
            if (this._tokenizer._sectionStart <= initialOffset) {
                this.startIndex = 0;
            }
            else {
                this.startIndex = this._tokenizer._sectionStart - initialOffset;
            }
        }
        else
            this.startIndex = this.endIndex + 1;
        this.endIndex = this._tokenizer.getAbsoluteIndex();
    };
    //Tokenizer event handlers
    Parser.prototype.ontext = function (data) {
        this._updatePosition(1);
        // @ts-ignore
        this.endIndex--;
        if (this._cbs.ontext)
            this._cbs.ontext(data);
    };
    Parser.prototype.onopentagname = function (name) {
        if (this._lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        this._tagname = name;
        if (!this._options.xmlMode &&
            Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
            for (var el = void 0;
            // @ts-ignore
            openImpliesClose[name].has((el = this._stack[this._stack.length - 1])); this.onclosetag(el))
                ;
        }
        if (this._options.xmlMode || !voidElements.has(name)) {
            this._stack.push(name);
            if (foreignContextElements.has(name)) {
                this._foreignContext.push(true);
            }
            else if (htmlIntegrationElements.has(name)) {
                this._foreignContext.push(false);
            }
        }
        if (this._cbs.onopentagname)
            this._cbs.onopentagname(name);
        if (this._cbs.onopentag)
            this._attribs = {};
    };
    Parser.prototype.onopentagend = function () {
        this._updatePosition(1);
        if (this._attribs) {
            if (this._cbs.onopentag) {
                this._cbs.onopentag(this._tagname, this._attribs);
            }
            this._attribs = null;
        }
        if (!this._options.xmlMode &&
            this._cbs.onclosetag &&
            voidElements.has(this._tagname)) {
            this._cbs.onclosetag(this._tagname);
        }
        this._tagname = "";
    };
    Parser.prototype.onclosetag = function (name) {
        this._updatePosition(1);
        if (this._lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        if (foreignContextElements.has(name) ||
            htmlIntegrationElements.has(name)) {
            this._foreignContext.pop();
        }
        if (this._stack.length &&
            (this._options.xmlMode || !voidElements.has(name))) {
            var pos = this._stack.lastIndexOf(name);
            if (pos !== -1) {
                if (this._cbs.onclosetag) {
                    pos = this._stack.length - pos;
                    // @ts-ignore
                    while (pos--)
                        this._cbs.onclosetag(this._stack.pop());
                }
                else
                    this._stack.length = pos;
            }
            else if (name === "p" && !this._options.xmlMode) {
                this.onopentagname(name);
                this._closeCurrentTag();
            }
        }
        else if (!this._options.xmlMode && (name === "br" || name === "p")) {
            this.onopentagname(name);
            this._closeCurrentTag();
        }
    };
    Parser.prototype.onselfclosingtag = function () {
        if (this._options.xmlMode ||
            this._options.recognizeSelfClosing ||
            this._foreignContext[this._foreignContext.length - 1]) {
            this._closeCurrentTag();
        }
        else {
            this.onopentagend();
        }
    };
    Parser.prototype._closeCurrentTag = function () {
        var name = this._tagname;
        this.onopentagend();
        //self-closing tags will be on the top of the stack
        //(cheaper check than in onclosetag)
        if (this._stack[this._stack.length - 1] === name) {
            if (this._cbs.onclosetag) {
                this._cbs.onclosetag(name);
            }
            this._stack.pop();
        }
    };
    Parser.prototype.onattribname = function (name) {
        if (this._lowerCaseAttributeNames) {
            name = name.toLowerCase();
        }
        this._attribname = name;
    };
    Parser.prototype.onattribdata = function (value) {
        this._attribvalue += value;
    };
    Parser.prototype.onattribend = function () {
        if (this._cbs.onattribute)
            this._cbs.onattribute(this._attribname, this._attribvalue);
        if (this._attribs &&
            !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {
            this._attribs[this._attribname] = this._attribvalue;
        }
        this._attribname = "";
        this._attribvalue = "";
    };
    Parser.prototype._getInstructionName = function (value) {
        var idx = value.search(reNameEnd);
        var name = idx < 0 ? value : value.substr(0, idx);
        if (this._lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        return name;
    };
    Parser.prototype.ondeclaration = function (value) {
        if (this._cbs.onprocessinginstruction) {
            var name_1 = this._getInstructionName(value);
            this._cbs.onprocessinginstruction("!" + name_1, "!" + value);
        }
    };
    Parser.prototype.onprocessinginstruction = function (value) {
        if (this._cbs.onprocessinginstruction) {
            var name_2 = this._getInstructionName(value);
            this._cbs.onprocessinginstruction("?" + name_2, "?" + value);
        }
    };
    Parser.prototype.oncomment = function (value) {
        this._updatePosition(4);
        if (this._cbs.oncomment)
            this._cbs.oncomment(value);
        if (this._cbs.oncommentend)
            this._cbs.oncommentend();
    };
    Parser.prototype.oncdata = function (value) {
        this._updatePosition(1);
        if (this._options.xmlMode || this._options.recognizeCDATA) {
            if (this._cbs.oncdatastart)
                this._cbs.oncdatastart();
            if (this._cbs.ontext)
                this._cbs.ontext(value);
            if (this._cbs.oncdataend)
                this._cbs.oncdataend();
        }
        else {
            this.oncomment("[CDATA[" + value + "]]");
        }
    };
    Parser.prototype.onerror = function (err) {
        if (this._cbs.onerror)
            this._cbs.onerror(err);
    };
    Parser.prototype.onend = function () {
        if (this._cbs.onclosetag) {
            for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i]))
                ;
        }
        if (this._cbs.onend)
            this._cbs.onend();
    };
    //Resets the parser to a blank state, ready to parse a new HTML document
    Parser.prototype.reset = function () {
        if (this._cbs.onreset)
            this._cbs.onreset();
        this._tokenizer.reset();
        this._tagname = "";
        this._attribname = "";
        this._attribs = null;
        this._stack = [];
        if (this._cbs.onparserinit)
            this._cbs.onparserinit(this);
    };
    //Parses a complete HTML document and pushes it to the handler
    Parser.prototype.parseComplete = function (data) {
        this.reset();
        this.end(data);
    };
    Parser.prototype.write = function (chunk) {
        this._tokenizer.write(chunk);
    };
    Parser.prototype.end = function (chunk) {
        this._tokenizer.end(chunk);
    };
    Parser.prototype.pause = function () {
        this._tokenizer.pause();
    };
    Parser.prototype.resume = function () {
        this._tokenizer.resume();
    };
    return Parser;
}(events_1.EventEmitter));
exports.Parser = Parser;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var decode_codepoint_1 = __importDefault(__webpack_require__(79));
var entities_json_1 = __importDefault(__webpack_require__(43));
var legacy_json_1 = __importDefault(__webpack_require__(80));
var xml_json_1 = __importDefault(__webpack_require__(44));
function whitespace(c) {
    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}
function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();
    if (upper === lower) {
        return function (t, c) {
            if (c === lower) {
                t._state = SUCCESS;
            }
            else {
                t._state = FAILURE;
                t._index--;
            }
        };
    }
    else {
        return function (t, c) {
            if (c === lower || c === upper) {
                t._state = SUCCESS;
            }
            else {
                t._state = FAILURE;
                t._index--;
            }
        };
    }
}
function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();
    return function (t, c) {
        if (c === lower || c === upper) {
            t._state = NEXT_STATE;
        }
        else {
            t._state = 3 /* InTagName */;
            t._index--; //consume the token again
        }
    };
}
var stateBeforeCdata1 = ifElseState("C", 23 /* BeforeCdata2 */, 16 /* InDeclaration */);
var stateBeforeCdata2 = ifElseState("D", 24 /* BeforeCdata3 */, 16 /* InDeclaration */);
var stateBeforeCdata3 = ifElseState("A", 25 /* BeforeCdata4 */, 16 /* InDeclaration */);
var stateBeforeCdata4 = ifElseState("T", 26 /* BeforeCdata5 */, 16 /* InDeclaration */);
var stateBeforeCdata5 = ifElseState("A", 27 /* BeforeCdata6 */, 16 /* InDeclaration */);
var stateBeforeScript1 = consumeSpecialNameChar("R", 34 /* BeforeScript2 */);
var stateBeforeScript2 = consumeSpecialNameChar("I", 35 /* BeforeScript3 */);
var stateBeforeScript3 = consumeSpecialNameChar("P", 36 /* BeforeScript4 */);
var stateBeforeScript4 = consumeSpecialNameChar("T", 37 /* BeforeScript5 */);
var stateAfterScript1 = ifElseState("R", 39 /* AfterScript2 */, 1 /* Text */);
var stateAfterScript2 = ifElseState("I", 40 /* AfterScript3 */, 1 /* Text */);
var stateAfterScript3 = ifElseState("P", 41 /* AfterScript4 */, 1 /* Text */);
var stateAfterScript4 = ifElseState("T", 42 /* AfterScript5 */, 1 /* Text */);
var stateBeforeStyle1 = consumeSpecialNameChar("Y", 44 /* BeforeStyle2 */);
var stateBeforeStyle2 = consumeSpecialNameChar("L", 45 /* BeforeStyle3 */);
var stateBeforeStyle3 = consumeSpecialNameChar("E", 46 /* BeforeStyle4 */);
var stateAfterStyle1 = ifElseState("Y", 48 /* AfterStyle2 */, 1 /* Text */);
var stateAfterStyle2 = ifElseState("L", 49 /* AfterStyle3 */, 1 /* Text */);
var stateAfterStyle3 = ifElseState("E", 50 /* AfterStyle4 */, 1 /* Text */);
var stateBeforeEntity = ifElseState("#", 52 /* BeforeNumericEntity */, 53 /* InNamedEntity */);
var stateBeforeNumericEntity = ifElseState("X", 55 /* InHexEntity */, 54 /* InNumericEntity */);
var Tokenizer = /** @class */ (function () {
    function Tokenizer(options, cbs) {
        /** The current state the tokenizer is in. */
        this._state = 1 /* Text */;
        /** The read buffer. */
        this._buffer = "";
        /** The beginning of the section that is currently being read. */
        this._sectionStart = 0;
        /** The index within the buffer that we are currently looking at. */
        this._index = 0;
        /**
         * Data that has already been processed will be removed from the buffer occasionally.
         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
         */
        this._bufferOffset = 0;
        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
        this._baseState = 1 /* Text */;
        /** For special parsing behavior inside of script and style tags. */
        this._special = 1 /* None */;
        /** Indicates whether the tokenizer has been paused. */
        this._running = true;
        /** Indicates whether the tokenizer has finished running / `.end` has been called. */
        this._ended = false;
        this._cbs = cbs;
        this._xmlMode = !!(options && options.xmlMode);
        this._decodeEntities = !!(options && options.decodeEntities);
    }
    Tokenizer.prototype.reset = function () {
        this._state = 1 /* Text */;
        this._buffer = "";
        this._sectionStart = 0;
        this._index = 0;
        this._bufferOffset = 0;
        this._baseState = 1 /* Text */;
        this._special = 1 /* None */;
        this._running = true;
        this._ended = false;
    };
    Tokenizer.prototype._stateText = function (c) {
        if (c === "<") {
            if (this._index > this._sectionStart) {
                this._cbs.ontext(this._getSection());
            }
            this._state = 2 /* BeforeTagName */;
            this._sectionStart = this._index;
        }
        else if (this._decodeEntities &&
            this._special === 1 /* None */ &&
            c === "&") {
            if (this._index > this._sectionStart) {
                this._cbs.ontext(this._getSection());
            }
            this._baseState = 1 /* Text */;
            this._state = 51 /* BeforeEntity */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateBeforeTagName = function (c) {
        if (c === "/") {
            this._state = 5 /* BeforeClosingTagName */;
        }
        else if (c === "<") {
            this._cbs.ontext(this._getSection());
            this._sectionStart = this._index;
        }
        else if (c === ">" ||
            this._special !== 1 /* None */ ||
            whitespace(c)) {
            this._state = 1 /* Text */;
        }
        else if (c === "!") {
            this._state = 15 /* BeforeDeclaration */;
            this._sectionStart = this._index + 1;
        }
        else if (c === "?") {
            this._state = 17 /* InProcessingInstruction */;
            this._sectionStart = this._index + 1;
        }
        else {
            this._state =
                !this._xmlMode && (c === "s" || c === "S")
                    ? 31 /* BeforeSpecial */
                    : 3 /* InTagName */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateInTagName = function (c) {
        if (c === "/" || c === ">" || whitespace(c)) {
            this._emitToken("onopentagname");
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
    };
    Tokenizer.prototype._stateBeforeClosingTagName = function (c) {
        if (whitespace(c)) {
            // ignore
        }
        else if (c === ">") {
            this._state = 1 /* Text */;
        }
        else if (this._special !== 1 /* None */) {
            if (c === "s" || c === "S") {
                this._state = 32 /* BeforeSpecialEnd */;
            }
            else {
                this._state = 1 /* Text */;
                this._index--;
            }
        }
        else {
            this._state = 6 /* InClosingTagName */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateInClosingTagName = function (c) {
        if (c === ">" || whitespace(c)) {
            this._emitToken("onclosetag");
            this._state = 7 /* AfterClosingTagName */;
            this._index--;
        }
    };
    Tokenizer.prototype._stateAfterClosingTagName = function (c) {
        //skip everything until ">"
        if (c === ">") {
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype._stateBeforeAttributeName = function (c) {
        if (c === ">") {
            this._cbs.onopentagend();
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
        else if (c === "/") {
            this._state = 4 /* InSelfClosingTag */;
        }
        else if (!whitespace(c)) {
            this._state = 9 /* InAttributeName */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateInSelfClosingTag = function (c) {
        if (c === ">") {
            this._cbs.onselfclosingtag();
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
        else if (!whitespace(c)) {
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
    };
    Tokenizer.prototype._stateInAttributeName = function (c) {
        if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
            this._cbs.onattribname(this._getSection());
            this._sectionStart = -1;
            this._state = 10 /* AfterAttributeName */;
            this._index--;
        }
    };
    Tokenizer.prototype._stateAfterAttributeName = function (c) {
        if (c === "=") {
            this._state = 11 /* BeforeAttributeValue */;
        }
        else if (c === "/" || c === ">") {
            this._cbs.onattribend();
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
        else if (!whitespace(c)) {
            this._cbs.onattribend();
            this._state = 9 /* InAttributeName */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateBeforeAttributeValue = function (c) {
        if (c === '"') {
            this._state = 12 /* InAttributeValueDq */;
            this._sectionStart = this._index + 1;
        }
        else if (c === "'") {
            this._state = 13 /* InAttributeValueSq */;
            this._sectionStart = this._index + 1;
        }
        else if (!whitespace(c)) {
            this._state = 14 /* InAttributeValueNq */;
            this._sectionStart = this._index;
            this._index--; //reconsume token
        }
    };
    Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function (c) {
        if (c === '"') {
            this._emitToken("onattribdata");
            this._cbs.onattribend();
            this._state = 8 /* BeforeAttributeName */;
        }
        else if (this._decodeEntities && c === "&") {
            this._emitToken("onattribdata");
            this._baseState = this._state;
            this._state = 51 /* BeforeEntity */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateInAttributeValueSingleQuotes = function (c) {
        if (c === "'") {
            this._emitToken("onattribdata");
            this._cbs.onattribend();
            this._state = 8 /* BeforeAttributeName */;
        }
        else if (this._decodeEntities && c === "&") {
            this._emitToken("onattribdata");
            this._baseState = this._state;
            this._state = 51 /* BeforeEntity */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateInAttributeValueNoQuotes = function (c) {
        if (whitespace(c) || c === ">") {
            this._emitToken("onattribdata");
            this._cbs.onattribend();
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
        else if (this._decodeEntities && c === "&") {
            this._emitToken("onattribdata");
            this._baseState = this._state;
            this._state = 51 /* BeforeEntity */;
            this._sectionStart = this._index;
        }
    };
    Tokenizer.prototype._stateBeforeDeclaration = function (c) {
        this._state =
            c === "["
                ? 22 /* BeforeCdata1 */
                : c === "-"
                    ? 18 /* BeforeComment */
                    : 16 /* InDeclaration */;
    };
    Tokenizer.prototype._stateInDeclaration = function (c) {
        if (c === ">") {
            this._cbs.ondeclaration(this._getSection());
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype._stateInProcessingInstruction = function (c) {
        if (c === ">") {
            this._cbs.onprocessinginstruction(this._getSection());
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype._stateBeforeComment = function (c) {
        if (c === "-") {
            this._state = 19 /* InComment */;
            this._sectionStart = this._index + 1;
        }
        else {
            this._state = 16 /* InDeclaration */;
        }
    };
    Tokenizer.prototype._stateInComment = function (c) {
        if (c === "-")
            this._state = 20 /* AfterComment1 */;
    };
    Tokenizer.prototype._stateAfterComment1 = function (c) {
        if (c === "-") {
            this._state = 21 /* AfterComment2 */;
        }
        else {
            this._state = 19 /* InComment */;
        }
    };
    Tokenizer.prototype._stateAfterComment2 = function (c) {
        if (c === ">") {
            //remove 2 trailing chars
            this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
        else if (c !== "-") {
            this._state = 19 /* InComment */;
        }
        // else: stay in AFTER_COMMENT_2 (`--->`)
    };
    Tokenizer.prototype._stateBeforeCdata6 = function (c) {
        if (c === "[") {
            this._state = 28 /* InCdata */;
            this._sectionStart = this._index + 1;
        }
        else {
            this._state = 16 /* InDeclaration */;
            this._index--;
        }
    };
    Tokenizer.prototype._stateInCdata = function (c) {
        if (c === "]")
            this._state = 29 /* AfterCdata1 */;
    };
    Tokenizer.prototype._stateAfterCdata1 = function (c) {
        if (c === "]")
            this._state = 30 /* AfterCdata2 */;
        else
            this._state = 28 /* InCdata */;
    };
    Tokenizer.prototype._stateAfterCdata2 = function (c) {
        if (c === ">") {
            //remove 2 trailing chars
            this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
            this._state = 1 /* Text */;
            this._sectionStart = this._index + 1;
        }
        else if (c !== "]") {
            this._state = 28 /* InCdata */;
        }
        //else: stay in AFTER_CDATA_2 (`]]]>`)
    };
    Tokenizer.prototype._stateBeforeSpecial = function (c) {
        if (c === "c" || c === "C") {
            this._state = 33 /* BeforeScript1 */;
        }
        else if (c === "t" || c === "T") {
            this._state = 43 /* BeforeStyle1 */;
        }
        else {
            this._state = 3 /* InTagName */;
            this._index--; //consume the token again
        }
    };
    Tokenizer.prototype._stateBeforeSpecialEnd = function (c) {
        if (this._special === 2 /* Script */ && (c === "c" || c === "C")) {
            this._state = 38 /* AfterScript1 */;
        }
        else if (this._special === 3 /* Style */ &&
            (c === "t" || c === "T")) {
            this._state = 47 /* AfterStyle1 */;
        }
        else
            this._state = 1 /* Text */;
    };
    Tokenizer.prototype._stateBeforeScript5 = function (c) {
        if (c === "/" || c === ">" || whitespace(c)) {
            this._special = 2 /* Script */;
        }
        this._state = 3 /* InTagName */;
        this._index--; //consume the token again
    };
    Tokenizer.prototype._stateAfterScript5 = function (c) {
        if (c === ">" || whitespace(c)) {
            this._special = 1 /* None */;
            this._state = 6 /* InClosingTagName */;
            this._sectionStart = this._index - 6;
            this._index--; //reconsume the token
        }
        else
            this._state = 1 /* Text */;
    };
    Tokenizer.prototype._stateBeforeStyle4 = function (c) {
        if (c === "/" || c === ">" || whitespace(c)) {
            this._special = 3 /* Style */;
        }
        this._state = 3 /* InTagName */;
        this._index--; //consume the token again
    };
    Tokenizer.prototype._stateAfterStyle4 = function (c) {
        if (c === ">" || whitespace(c)) {
            this._special = 1 /* None */;
            this._state = 6 /* InClosingTagName */;
            this._sectionStart = this._index - 5;
            this._index--; //reconsume the token
        }
        else
            this._state = 1 /* Text */;
    };
    //for entities terminated with a semicolon
    Tokenizer.prototype._parseNamedEntityStrict = function () {
        //offset = 1
        if (this._sectionStart + 1 < this._index) {
            var entity = this._buffer.substring(this._sectionStart + 1, this._index), map = this._xmlMode ? xml_json_1.default : entities_json_1.default;
            if (Object.prototype.hasOwnProperty.call(map, entity)) {
                // @ts-ignore
                this._emitPartial(map[entity]);
                this._sectionStart = this._index + 1;
            }
        }
    };
    //parses legacy entities (without trailing semicolon)
    Tokenizer.prototype._parseLegacyEntity = function () {
        var start = this._sectionStart + 1;
        var limit = this._index - start;
        if (limit > 6)
            limit = 6; // The max length of legacy entities is 6
        while (limit >= 2) {
            // The min length of legacy entities is 2
            var entity = this._buffer.substr(start, limit);
            if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
                // @ts-ignore
                this._emitPartial(legacy_json_1.default[entity]);
                this._sectionStart += limit + 1;
                return;
            }
            else {
                limit--;
            }
        }
    };
    Tokenizer.prototype._stateInNamedEntity = function (c) {
        if (c === ";") {
            this._parseNamedEntityStrict();
            if (this._sectionStart + 1 < this._index && !this._xmlMode) {
                this._parseLegacyEntity();
            }
            this._state = this._baseState;
        }
        else if ((c < "a" || c > "z") &&
            (c < "A" || c > "Z") &&
            (c < "0" || c > "9")) {
            if (this._xmlMode || this._sectionStart + 1 === this._index) {
                // ignore
            }
            else if (this._baseState !== 1 /* Text */) {
                if (c !== "=") {
                    this._parseNamedEntityStrict();
                }
            }
            else {
                this._parseLegacyEntity();
            }
            this._state = this._baseState;
            this._index--;
        }
    };
    Tokenizer.prototype._decodeNumericEntity = function (offset, base) {
        var sectionStart = this._sectionStart + offset;
        if (sectionStart !== this._index) {
            //parse entity
            var entity = this._buffer.substring(sectionStart, this._index);
            var parsed = parseInt(entity, base);
            this._emitPartial(decode_codepoint_1.default(parsed));
            this._sectionStart = this._index;
        }
        else {
            this._sectionStart--;
        }
        this._state = this._baseState;
    };
    Tokenizer.prototype._stateInNumericEntity = function (c) {
        if (c === ";") {
            this._decodeNumericEntity(2, 10);
            this._sectionStart++;
        }
        else if (c < "0" || c > "9") {
            if (!this._xmlMode) {
                this._decodeNumericEntity(2, 10);
            }
            else {
                this._state = this._baseState;
            }
            this._index--;
        }
    };
    Tokenizer.prototype._stateInHexEntity = function (c) {
        if (c === ";") {
            this._decodeNumericEntity(3, 16);
            this._sectionStart++;
        }
        else if ((c < "a" || c > "f") &&
            (c < "A" || c > "F") &&
            (c < "0" || c > "9")) {
            if (!this._xmlMode) {
                this._decodeNumericEntity(3, 16);
            }
            else {
                this._state = this._baseState;
            }
            this._index--;
        }
    };
    Tokenizer.prototype._cleanup = function () {
        if (this._sectionStart < 0) {
            this._buffer = "";
            this._bufferOffset += this._index;
            this._index = 0;
        }
        else if (this._running) {
            if (this._state === 1 /* Text */) {
                if (this._sectionStart !== this._index) {
                    this._cbs.ontext(this._buffer.substr(this._sectionStart));
                }
                this._buffer = "";
                this._bufferOffset += this._index;
                this._index = 0;
            }
            else if (this._sectionStart === this._index) {
                //the section just started
                this._buffer = "";
                this._bufferOffset += this._index;
                this._index = 0;
            }
            else {
                //remove everything unnecessary
                this._buffer = this._buffer.substr(this._sectionStart);
                this._index -= this._sectionStart;
                this._bufferOffset += this._sectionStart;
            }
            this._sectionStart = 0;
        }
    };
    //TODO make events conditional
    Tokenizer.prototype.write = function (chunk) {
        if (this._ended)
            this._cbs.onerror(Error(".write() after done!"));
        this._buffer += chunk;
        this._parse();
    };
    // Iterates through the buffer, calling the function corresponding to the current state.
    // States that are more likely to be hit are higher up, as a performance improvement.
    Tokenizer.prototype._parse = function () {
        while (this._index < this._buffer.length && this._running) {
            var c = this._buffer.charAt(this._index);
            if (this._state === 1 /* Text */) {
                this._stateText(c);
            }
            else if (this._state === 12 /* InAttributeValueDq */) {
                this._stateInAttributeValueDoubleQuotes(c);
            }
            else if (this._state === 9 /* InAttributeName */) {
                this._stateInAttributeName(c);
            }
            else if (this._state === 19 /* InComment */) {
                this._stateInComment(c);
            }
            else if (this._state === 8 /* BeforeAttributeName */) {
                this._stateBeforeAttributeName(c);
            }
            else if (this._state === 3 /* InTagName */) {
                this._stateInTagName(c);
            }
            else if (this._state === 6 /* InClosingTagName */) {
                this._stateInClosingTagName(c);
            }
            else if (this._state === 2 /* BeforeTagName */) {
                this._stateBeforeTagName(c);
            }
            else if (this._state === 10 /* AfterAttributeName */) {
                this._stateAfterAttributeName(c);
            }
            else if (this._state === 13 /* InAttributeValueSq */) {
                this._stateInAttributeValueSingleQuotes(c);
            }
            else if (this._state === 11 /* BeforeAttributeValue */) {
                this._stateBeforeAttributeValue(c);
            }
            else if (this._state === 5 /* BeforeClosingTagName */) {
                this._stateBeforeClosingTagName(c);
            }
            else if (this._state === 7 /* AfterClosingTagName */) {
                this._stateAfterClosingTagName(c);
            }
            else if (this._state === 31 /* BeforeSpecial */) {
                this._stateBeforeSpecial(c);
            }
            else if (this._state === 20 /* AfterComment1 */) {
                this._stateAfterComment1(c);
            }
            else if (this._state === 14 /* InAttributeValueNq */) {
                this._stateInAttributeValueNoQuotes(c);
            }
            else if (this._state === 4 /* InSelfClosingTag */) {
                this._stateInSelfClosingTag(c);
            }
            else if (this._state === 16 /* InDeclaration */) {
                this._stateInDeclaration(c);
            }
            else if (this._state === 15 /* BeforeDeclaration */) {
                this._stateBeforeDeclaration(c);
            }
            else if (this._state === 21 /* AfterComment2 */) {
                this._stateAfterComment2(c);
            }
            else if (this._state === 18 /* BeforeComment */) {
                this._stateBeforeComment(c);
            }
            else if (this._state === 32 /* BeforeSpecialEnd */) {
                this._stateBeforeSpecialEnd(c);
            }
            else if (this._state === 38 /* AfterScript1 */) {
                stateAfterScript1(this, c);
            }
            else if (this._state === 39 /* AfterScript2 */) {
                stateAfterScript2(this, c);
            }
            else if (this._state === 40 /* AfterScript3 */) {
                stateAfterScript3(this, c);
            }
            else if (this._state === 33 /* BeforeScript1 */) {
                stateBeforeScript1(this, c);
            }
            else if (this._state === 34 /* BeforeScript2 */) {
                stateBeforeScript2(this, c);
            }
            else if (this._state === 35 /* BeforeScript3 */) {
                stateBeforeScript3(this, c);
            }
            else if (this._state === 36 /* BeforeScript4 */) {
                stateBeforeScript4(this, c);
            }
            else if (this._state === 37 /* BeforeScript5 */) {
                this._stateBeforeScript5(c);
            }
            else if (this._state === 41 /* AfterScript4 */) {
                stateAfterScript4(this, c);
            }
            else if (this._state === 42 /* AfterScript5 */) {
                this._stateAfterScript5(c);
            }
            else if (this._state === 43 /* BeforeStyle1 */) {
                stateBeforeStyle1(this, c);
            }
            else if (this._state === 28 /* InCdata */) {
                this._stateInCdata(c);
            }
            else if (this._state === 44 /* BeforeStyle2 */) {
                stateBeforeStyle2(this, c);
            }
            else if (this._state === 45 /* BeforeStyle3 */) {
                stateBeforeStyle3(this, c);
            }
            else if (this._state === 46 /* BeforeStyle4 */) {
                this._stateBeforeStyle4(c);
            }
            else if (this._state === 47 /* AfterStyle1 */) {
                stateAfterStyle1(this, c);
            }
            else if (this._state === 48 /* AfterStyle2 */) {
                stateAfterStyle2(this, c);
            }
            else if (this._state === 49 /* AfterStyle3 */) {
                stateAfterStyle3(this, c);
            }
            else if (this._state === 50 /* AfterStyle4 */) {
                this._stateAfterStyle4(c);
            }
            else if (this._state === 17 /* InProcessingInstruction */) {
                this._stateInProcessingInstruction(c);
            }
            else if (this._state === 53 /* InNamedEntity */) {
                this._stateInNamedEntity(c);
            }
            else if (this._state === 22 /* BeforeCdata1 */) {
                stateBeforeCdata1(this, c);
            }
            else if (this._state === 51 /* BeforeEntity */) {
                stateBeforeEntity(this, c);
            }
            else if (this._state === 23 /* BeforeCdata2 */) {
                stateBeforeCdata2(this, c);
            }
            else if (this._state === 24 /* BeforeCdata3 */) {
                stateBeforeCdata3(this, c);
            }
            else if (this._state === 29 /* AfterCdata1 */) {
                this._stateAfterCdata1(c);
            }
            else if (this._state === 30 /* AfterCdata2 */) {
                this._stateAfterCdata2(c);
            }
            else if (this._state === 25 /* BeforeCdata4 */) {
                stateBeforeCdata4(this, c);
            }
            else if (this._state === 26 /* BeforeCdata5 */) {
                stateBeforeCdata5(this, c);
            }
            else if (this._state === 27 /* BeforeCdata6 */) {
                this._stateBeforeCdata6(c);
            }
            else if (this._state === 55 /* InHexEntity */) {
                this._stateInHexEntity(c);
            }
            else if (this._state === 54 /* InNumericEntity */) {
                this._stateInNumericEntity(c);
            }
            else if (this._state === 52 /* BeforeNumericEntity */) {
                stateBeforeNumericEntity(this, c);
            }
            else {
                this._cbs.onerror(Error("unknown _state"), this._state);
            }
            this._index++;
        }
        this._cleanup();
    };
    Tokenizer.prototype.pause = function () {
        this._running = false;
    };
    Tokenizer.prototype.resume = function () {
        this._running = true;
        if (this._index < this._buffer.length) {
            this._parse();
        }
        if (this._ended) {
            this._finish();
        }
    };
    Tokenizer.prototype.end = function (chunk) {
        if (this._ended)
            this._cbs.onerror(Error(".end() after done!"));
        if (chunk)
            this.write(chunk);
        this._ended = true;
        if (this._running)
            this._finish();
    };
    Tokenizer.prototype._finish = function () {
        //if there is remaining data, emit it in a reasonable way
        if (this._sectionStart < this._index) {
            this._handleTrailingData();
        }
        this._cbs.onend();
    };
    Tokenizer.prototype._handleTrailingData = function () {
        var data = this._buffer.substr(this._sectionStart);
        if (this._state === 28 /* InCdata */ ||
            this._state === 29 /* AfterCdata1 */ ||
            this._state === 30 /* AfterCdata2 */) {
            this._cbs.oncdata(data);
        }
        else if (this._state === 19 /* InComment */ ||
            this._state === 20 /* AfterComment1 */ ||
            this._state === 21 /* AfterComment2 */) {
            this._cbs.oncomment(data);
        }
        else if (this._state === 53 /* InNamedEntity */ && !this._xmlMode) {
            this._parseLegacyEntity();
            if (this._sectionStart < this._index) {
                this._state = this._baseState;
                this._handleTrailingData();
            }
        }
        else if (this._state === 54 /* InNumericEntity */ && !this._xmlMode) {
            this._decodeNumericEntity(2, 10);
            if (this._sectionStart < this._index) {
                this._state = this._baseState;
                this._handleTrailingData();
            }
        }
        else if (this._state === 55 /* InHexEntity */ && !this._xmlMode) {
            this._decodeNumericEntity(3, 16);
            if (this._sectionStart < this._index) {
                this._state = this._baseState;
                this._handleTrailingData();
            }
        }
        else if (this._state !== 3 /* InTagName */ &&
            this._state !== 8 /* BeforeAttributeName */ &&
            this._state !== 11 /* BeforeAttributeValue */ &&
            this._state !== 10 /* AfterAttributeName */ &&
            this._state !== 9 /* InAttributeName */ &&
            this._state !== 13 /* InAttributeValueSq */ &&
            this._state !== 12 /* InAttributeValueDq */ &&
            this._state !== 14 /* InAttributeValueNq */ &&
            this._state !== 6 /* InClosingTagName */) {
            this._cbs.ontext(data);
        }
        //else, ignore remaining data
        //TODO add a way to remove current tag
    };
    Tokenizer.prototype.getAbsoluteIndex = function () {
        return this._bufferOffset + this._index;
    };
    Tokenizer.prototype._getSection = function () {
        return this._buffer.substring(this._sectionStart, this._index);
    };
    Tokenizer.prototype._emitToken = function (name) {
        this._cbs[name](this._getSection());
        this._sectionStart = -1;
    };
    Tokenizer.prototype._emitPartial = function (value) {
        if (this._baseState !== 1 /* Text */) {
            this._cbs.onattribdata(value); //TODO implement the new event
        }
        else {
            this._cbs.ontext(value);
        }
    };
    return Tokenizer;
}());
exports.default = Tokenizer;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var decode_json_1 = __importDefault(__webpack_require__(175));
// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint) {
    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
        return "\uFFFD";
    }
    if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
    }
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
        codePoint = 0xdc00 | (codePoint & 0x3ff);
    }
    output += String.fromCharCode(codePoint);
    return output;
}
exports.default = decodeCodePoint;


/***/ }),
/* 80 */
/***/ (function(module) {

module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"Agrave\":\"À\",\"agrave\":\"à\",\"amp\":\"&\",\"AMP\":\"&\",\"Aring\":\"Å\",\"aring\":\"å\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"brvbar\":\"¦\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"cedil\":\"¸\",\"cent\":\"¢\",\"copy\":\"©\",\"COPY\":\"©\",\"curren\":\"¤\",\"deg\":\"°\",\"divide\":\"÷\",\"Eacute\":\"É\",\"eacute\":\"é\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"Egrave\":\"È\",\"egrave\":\"è\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"frac12\":\"½\",\"frac14\":\"¼\",\"frac34\":\"¾\",\"gt\":\">\",\"GT\":\">\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"iexcl\":\"¡\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"iquest\":\"¿\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"laquo\":\"«\",\"lt\":\"<\",\"LT\":\"<\",\"macr\":\"¯\",\"micro\":\"µ\",\"middot\":\"·\",\"nbsp\":\" \",\"not\":\"¬\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ordf\":\"ª\",\"ordm\":\"º\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"para\":\"¶\",\"plusmn\":\"±\",\"pound\":\"£\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"raquo\":\"»\",\"reg\":\"®\",\"REG\":\"®\",\"sect\":\"§\",\"shy\":\"­\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"szlig\":\"ß\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"times\":\"×\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uml\":\"¨\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"yen\":\"¥\",\"yuml\":\"ÿ\"}");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var node_1 = __webpack_require__(176);
exports.Node = node_1.Node;
exports.Element = node_1.Element;
exports.DataNode = node_1.DataNode;
exports.NodeWithChildren = node_1.NodeWithChildren;
var reWhitespace = /\s+/g;
// Default options
var defaultOpts = {
    normalizeWhitespace: false,
    withStartIndices: false,
    withEndIndices: false
};
var DomHandler = /** @class */ (function () {
    /**
     * Initiate a new DomHandler.
     *
     * @param callback Called once parsing has completed.
     * @param options Settings for the handler.
     * @param elementCB Callback whenever a tag is closed.
     */
    function DomHandler(callback, options, elementCB) {
        /** The constructed DOM */
        this.dom = [];
        /** Indicated whether parsing has been completed. */
        this._done = false;
        /** Stack of open tags. */
        this._tagStack = [];
        /** A data node that is still being written to. */
        this._lastNode = null;
        /** Reference to the parser instance. Used for location information. */
        this._parser = null;
        // Make it possible to skip arguments, for backwards-compatibility
        if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
        }
        if (typeof callback === "object") {
            options = callback;
            callback = undefined;
        }
        this._callback = callback || null;
        this._options = options || defaultOpts;
        this._elementCB = elementCB || null;
    }
    DomHandler.prototype.onparserinit = function (parser) {
        this._parser = parser;
    };
    // Resets the handler back to starting state
    DomHandler.prototype.onreset = function () {
        this.dom = [];
        this._done = false;
        this._tagStack = [];
        this._lastNode = null;
        this._parser = this._parser || null;
    };
    // Signals the handler that parsing is done
    DomHandler.prototype.onend = function () {
        if (this._done)
            return;
        this._done = true;
        this._parser = null;
        this.handleCallback(null);
    };
    DomHandler.prototype.onerror = function (error) {
        this.handleCallback(error);
    };
    DomHandler.prototype.onclosetag = function () {
        this._lastNode = null;
        // If(this._tagStack.pop().name !== name) this.handleCallback(Error("Tagname didn't match!"));
        var elem = this._tagStack.pop();
        if (!elem || !this._parser) {
            return;
        }
        if (this._options.withEndIndices) {
            elem.endIndex = this._parser.endIndex;
        }
        if (this._elementCB)
            this._elementCB(elem);
    };
    DomHandler.prototype.onopentag = function (name, attribs) {
        var element = new node_1.Element(name, attribs);
        this.addNode(element);
        this._tagStack.push(element);
    };
    DomHandler.prototype.ontext = function (data) {
        var normalize = this._options.normalizeWhitespace;
        var _lastNode = this._lastNode;
        if (_lastNode && _lastNode.type === "text" /* Text */) {
            if (normalize) {
                _lastNode.data = (_lastNode.data + data).replace(reWhitespace, " ");
            }
            else {
                _lastNode.data += data;
            }
        }
        else {
            if (normalize) {
                data = data.replace(reWhitespace, " ");
            }
            var node = new node_1.DataNode("text" /* Text */, data);
            this.addNode(node);
            this._lastNode = node;
        }
    };
    DomHandler.prototype.oncomment = function (data) {
        if (this._lastNode && this._lastNode.type === "comment" /* Comment */) {
            this._lastNode.data += data;
            return;
        }
        var node = new node_1.DataNode("comment" /* Comment */, data);
        this.addNode(node);
        this._lastNode = node;
    };
    DomHandler.prototype.oncommentend = function () {
        this._lastNode = null;
    };
    DomHandler.prototype.oncdatastart = function () {
        var text = new node_1.DataNode("text" /* Text */, "");
        var node = new node_1.NodeWithChildren("cdata" /* CDATA */, [text]);
        this.addNode(node);
        text.parent = node;
        this._lastNode = text;
    };
    DomHandler.prototype.oncdataend = function () {
        this._lastNode = null;
    };
    DomHandler.prototype.onprocessinginstruction = function (name, data) {
        var node = new node_1.ProcessingInstruction(name, data);
        this.addNode(node);
    };
    DomHandler.prototype.handleCallback = function (error) {
        if (typeof this._callback === "function") {
            this._callback(error, this.dom);
        }
        else if (error) {
            throw error;
        }
    };
    DomHandler.prototype.addNode = function (node) {
        var parent = this._tagStack[this._tagStack.length - 1];
        var siblings = parent ? parent.children : this.dom;
        var previousSibling = siblings[siblings.length - 1];
        if (this._parser) {
            if (this._options.withStartIndices) {
                node.startIndex = this._parser.startIndex;
            }
            if (this._options.withEndIndices) {
                node.endIndex = this._parser.endIndex;
            }
        }
        siblings.push(node);
        if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
        }
        if (parent) {
            node.parent = parent;
        }
        this._lastNode = null;
    };
    DomHandler.prototype.addDataNode = function (node) {
        this.addNode(node);
        this._lastNode = node;
    };
    return DomHandler;
}());
exports.DomHandler = DomHandler;
exports.default = DomHandler;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var domhandler_1 = __importDefault(__webpack_require__(81));
var DomUtils = __importStar(__webpack_require__(83));
var Parser_1 = __webpack_require__(77);
//TODO: Consume data as it is coming in
var FeedHandler = /** @class */ (function (_super) {
    __extends(FeedHandler, _super);
    /**
     *
     * @param callback
     * @param options
     */
    function FeedHandler(callback, options) {
        var _this = this;
        if (typeof callback === "object" && callback !== null) {
            callback = undefined;
            options = callback;
        }
        _this = _super.call(this, callback, options) || this;
        return _this;
    }
    FeedHandler.prototype.onend = function () {
        var feed = {};
        var feedRoot = getOneElement(isValidFeed, this.dom);
        if (feedRoot) {
            if (feedRoot.name === "feed") {
                var childs = feedRoot.children;
                feed.type = "atom";
                addConditionally(feed, "id", "id", childs);
                addConditionally(feed, "title", "title", childs);
                var href = getAttribute("href", getOneElement("link", childs));
                if (href) {
                    feed.link = href;
                }
                addConditionally(feed, "description", "subtitle", childs);
                var updated = fetch("updated", childs);
                if (updated) {
                    feed.updated = new Date(updated);
                }
                addConditionally(feed, "author", "email", childs, true);
                feed.items = getElements("entry", childs).map(function (item) {
                    var entry = {};
                    var children = item.children;
                    addConditionally(entry, "id", "id", children);
                    addConditionally(entry, "title", "title", children);
                    var href = getAttribute("href", getOneElement("link", children));
                    if (href) {
                        entry.link = href;
                    }
                    var description = fetch("summary", children) ||
                        fetch("content", children);
                    if (description) {
                        entry.description = description;
                    }
                    var pubDate = fetch("updated", children);
                    if (pubDate) {
                        entry.pubDate = new Date(pubDate);
                    }
                    return entry;
                });
            }
            else {
                var childs = getOneElement("channel", feedRoot.children)
                    .children;
                feed.type = feedRoot.name.substr(0, 3);
                feed.id = "";
                addConditionally(feed, "title", "title", childs);
                addConditionally(feed, "link", "link", childs);
                addConditionally(feed, "description", "description", childs);
                var updated = fetch("lastBuildDate", childs);
                if (updated) {
                    feed.updated = new Date(updated);
                }
                addConditionally(feed, "author", "managingEditor", childs, true);
                feed.items = getElements("item", feedRoot.children).map(function (item) {
                    var entry = {};
                    var children = item.children;
                    addConditionally(entry, "id", "guid", children);
                    addConditionally(entry, "title", "title", children);
                    addConditionally(entry, "link", "link", children);
                    addConditionally(entry, "description", "description", children);
                    var pubDate = fetch("pubDate", children);
                    if (pubDate)
                        entry.pubDate = new Date(pubDate);
                    return entry;
                });
            }
        }
        this.feed = feed;
        this.handleCallback(feedRoot ? null : Error("couldn't find root of feed"));
    };
    return FeedHandler;
}(domhandler_1.default));
exports.FeedHandler = FeedHandler;
function getElements(what, where) {
    return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where) {
    return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse) {
    if (recurse === void 0) { recurse = false; }
    return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();
}
function getAttribute(name, elem) {
    if (!elem) {
        return null;
    }
    var attribs = elem.attribs;
    return attribs[name];
}
function addConditionally(obj, prop, what, where, recurse) {
    if (recurse === void 0) { recurse = false; }
    var tmp = fetch(what, where, recurse);
    // @ts-ignore
    if (tmp)
        obj[prop] = tmp;
}
function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
}
var defaultOptions = { xmlMode: true };
/**
 * Parse a feed.
 *
 * @param feed The feed that should be parsed, as a string.
 * @param options Optionally, options for parsing. When using this option, you probably want to set `xmlMode` to `true`.
 */
function parseFeed(feed, options) {
    if (options === void 0) { options = defaultOptions; }
    var handler = new FeedHandler(options);
    new Parser_1.Parser(handler, options).end(feed);
    return handler.feed;
}
exports.parseFeed = parseFeed;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(177), exports);
__exportStar(__webpack_require__(181), exports);
__exportStar(__webpack_require__(182), exports);
__exportStar(__webpack_require__(86), exports);
__exportStar(__webpack_require__(183), exports);
__exportStar(__webpack_require__(184), exports);
__exportStar(__webpack_require__(26), exports);


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
var entities_json_1 = __importDefault(__webpack_require__(43));
var legacy_json_1 = __importDefault(__webpack_require__(80));
var xml_json_1 = __importDefault(__webpack_require__(44));
var decode_codepoint_1 = __importDefault(__webpack_require__(79));
exports.decodeXML = getStrictDecoder(xml_json_1.default);
exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
function getStrictDecoder(map) {
    var keys = Object.keys(map).join("|");
    var replace = getReplacer(map);
    keys += "|#[xX][\\da-fA-F]+|#\\d+";
    var re = new RegExp("&(?:" + keys + ");", "g");
    return function (str) { return String(str).replace(re, replace); };
}
var sorter = function (a, b) { return (a < b ? 1 : -1); };
exports.decodeHTML = (function () {
    var legacy = Object.keys(legacy_json_1.default).sort(sorter);
    var keys = Object.keys(entities_json_1.default).sort(sorter);
    for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
            keys[i] += ";?";
            j++;
        }
        else {
            keys[i] += ";";
        }
    }
    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
    var replace = getReplacer(entities_json_1.default);
    function replacer(str) {
        if (str.substr(-1) !== ";")
            str += ";";
        return replace(str);
    }
    //TODO consider creating a merged map
    return function (str) { return String(str).replace(re, replacer); };
})();
function getReplacer(map) {
    return function replace(str) {
        if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            if (secondChar === "X" || secondChar === "x") {
                return decode_codepoint_1.default(parseInt(str.substr(3), 16));
            }
            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)];
    };
}


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.escape = exports.encodeHTML = exports.encodeXML = void 0;
var xml_json_1 = __importDefault(__webpack_require__(44));
var inverseXML = getInverseObj(xml_json_1.default);
var xmlReplacer = getInverseReplacer(inverseXML);
exports.encodeXML = getInverse(inverseXML, xmlReplacer);
var entities_json_1 = __importDefault(__webpack_require__(43));
var inverseHTML = getInverseObj(entities_json_1.default);
var htmlReplacer = getInverseReplacer(inverseHTML);
exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
function getInverseObj(obj) {
    return Object.keys(obj)
        .sort()
        .reduce(function (inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
    }, {});
}
function getInverseReplacer(inverse) {
    var single = [];
    var multiple = [];
    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
            // Add value to single array
            single.push("\\" + k);
        }
        else {
            // Add value to multiple array
            multiple.push(k);
        }
    }
    // Add ranges to single characters.
    single.sort();
    for (var start = 0; start < single.length - 1; start++) {
        // Find the end of a run of characters
        var end = start;
        while (end < single.length - 1 &&
            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
            end += 1;
        }
        var count = 1 + end - start;
        // We want to replace at least three characters
        if (count < 3)
            continue;
        single.splice(start, count, single[start] + "-" + single[end]);
    }
    multiple.unshift("[" + single.join("") + "]");
    return new RegExp(multiple.join("|"), "g");
}
var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
function singleCharReplacer(c) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return "&#x" + c.codePointAt(0).toString(16).toUpperCase() + ";";
}
function getInverse(inverse, re) {
    return function (data) {
        return data
            .replace(re, function (name) { return inverse[name]; })
            .replace(reNonASCII, singleCharReplacer);
    };
}
var reXmlChars = getInverseReplacer(inverseXML);
function escape(data) {
    return data
        .replace(reXmlChars, singleCharReplacer)
        .replace(reNonASCII, singleCharReplacer);
}
exports.escape = escape;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
var tagtypes_1 = __webpack_require__(26);
/**
 * Search a node and its children for nodes passing a test function.
 *
 * @param test Function to test nodes on.
 * @param element Element to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 */
function filter(test, node, recurse, limit) {
    if (recurse === void 0) { recurse = true; }
    if (limit === void 0) { limit = Infinity; }
    if (!Array.isArray(node))
        node = [node];
    return find(test, node, recurse, limit);
}
exports.filter = filter;
/**
 * Like `filter`, but only works on an array of nodes.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 */
function find(test, nodes, recurse, limit) {
    var result = [];
    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
        var elem = nodes_1[_i];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0)
                break;
        }
        if (recurse && tagtypes_1.hasChildren(elem) && elem.children.length > 0) {
            var children = find(test, elem.children, recurse, limit);
            result.push.apply(result, children);
            limit -= children.length;
            if (limit <= 0)
                break;
        }
    }
    return result;
}
exports.find = find;
/**
 * Finds the first element inside of an array that matches a test function.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 */
function findOneChild(test, nodes) {
    return nodes.find(test);
}
exports.findOneChild = findOneChild;
/**
 * Finds one element in a tree that passes a test.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 */
function findOne(test, nodes, recurse) {
    if (recurse === void 0) { recurse = true; }
    var elem = null;
    for (var i = 0; i < nodes.length && !elem; i++) {
        var checked = nodes[i];
        if (!tagtypes_1.isTag(checked)) {
            continue;
        }
        else if (test(checked)) {
            elem = checked;
        }
        else if (recurse && checked.children.length > 0) {
            elem = findOne(test, checked.children);
        }
    }
    return elem;
}
exports.findOne = findOne;
/**
 * Returns whether a tree of nodes contains at least one node passing a test.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 */
function existsOne(test, nodes) {
    return nodes.some(function (checked) {
        return tagtypes_1.isTag(checked) &&
            (test(checked) ||
                (checked.children.length > 0 &&
                    existsOne(test, checked.children)));
    });
}
exports.existsOne = existsOne;
/**
 * Search and array of nodes and its children for nodes passing a test function.
 *
 * Same as `find`, only with less options, leading to reduced complexity.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 */
function findAll(test, nodes) {
    var _a;
    var result = [];
    var stack = nodes.filter(tagtypes_1.isTag);
    var elem;
    while ((elem = stack.shift())) {
        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(tagtypes_1.isTag);
        if (children && children.length > 0) {
            stack.unshift.apply(stack, children);
        }
        if (test(elem))
            result.push(elem);
    }
    return result;
}
exports.findAll = findAll;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const relative_to_absolute_iri_1 = __webpack_require__(190);
const RdfaProfile_1 = __webpack_require__(46);
/**
 * A collection of utility functions.
 */
class Util {
    constructor(dataFactory, baseIRI) {
        this.dataFactory = dataFactory || __webpack_require__(20);
        this.baseIRI = this.dataFactory.namedNode(baseIRI || '');
        this.baseIRIDocument = this.baseIRI;
    }
    /**
     * Retrieve the prefixes of the current tag's attributes.
     * @param {{[p: string]: string}} attributes A tag's attributes.
     * @param {{[p: string]: string}} parentPrefixes The prefixes from the parent tag.
     * @param {boolean} xmlnsPrefixMappings If prefixes should be extracted from xmlnsPrefixMappings.
     * @return {{[p: string]: string}} The new prefixes.
     */
    static parsePrefixes(attributes, parentPrefixes, xmlnsPrefixMappings) {
        const additionalPrefixes = {};
        if (xmlnsPrefixMappings) {
            for (const attribute in attributes) {
                if (attribute.startsWith('xmlns')) {
                    additionalPrefixes[attribute.substr(6)] = attributes[attribute];
                }
            }
        }
        if (attributes.prefix || Object.keys(additionalPrefixes).length > 0) {
            const prefixes = Object.assign(Object.assign({}, parentPrefixes), additionalPrefixes);
            if (attributes.prefix) {
                let prefixMatch;
                // tslint:disable-next-line:no-conditional-assignment
                while (prefixMatch = Util.PREFIX_REGEX.exec(attributes.prefix)) {
                    prefixes[prefixMatch[1]] = prefixMatch[2];
                }
            }
            return prefixes;
        }
        else {
            return parentPrefixes;
        }
    }
    /**
     * Expand the given term value based on the given prefixes.
     * @param {string} term A term value.
     * @param {{[p: string]: string}[]} prefixes The available prefixes.
     * @return {string} An expanded URL, or the term as-is.
     */
    static expandPrefixedTerm(term, activeTag) {
        // Check if the term is prefixed
        const colonIndex = term.indexOf(':');
        let prefix;
        let local;
        if (colonIndex >= 0) {
            prefix = term.substr(0, colonIndex);
            local = term.substr(colonIndex + 1);
        }
        // Expand default namespace
        if (prefix === '') {
            return 'http://www.w3.org/1999/xhtml/vocab#' + local;
        }
        // Try to expand the prefix
        if (prefix) {
            const prefixElement = activeTag.prefixesAll[prefix];
            if (prefixElement) {
                return prefixElement + local;
            }
        }
        // Try to expand the term
        if (term) {
            const expandedTerm = activeTag.prefixesAll[term.toLocaleLowerCase()];
            if (expandedTerm) {
                return expandedTerm;
            }
        }
        return term;
    }
    /**
     * Check if the given IRI is valid.
     * @param {string} iri A potential IRI.
     * @return {boolean} If the given IRI is valid.
     */
    static isValidIri(iri) {
        return Util.IRI_REGEX.test(iri);
    }
    /**
     * Determine the RDFa profile from the given content type.
     * Defaults to the default RDFa profile (all features enabled) for unknown content types.
     * @param {string} contentType A content type.
     * @returns {RdfaProfile} An RDFa profile.
     */
    static contentTypeToProfile(contentType) {
        return RdfaProfile_1.RDFA_CONTENTTYPES[contentType] || '';
    }
    /**
     * Get the base IRI.
     * @param {string} baseIriValue A base IRI value.
     * @return A base IRI named node.
     */
    getBaseIRI(baseIriValue) {
        let href = baseIriValue;
        const fragmentIndex = href.indexOf('#');
        if (fragmentIndex >= 0) {
            href = href.substr(0, fragmentIndex);
        }
        return this.dataFactory.namedNode(relative_to_absolute_iri_1.resolve(href, this.baseIRI.value));
    }
    /**
     * If the term is a boolean, return the baseIRI, otherwise return the term as-is.
     * @param {Term | boolean} term A term or boolean, where the boolean indicates the baseIRI.
     * @param {IActiveTag} activeTag An active tag.
     * @returns {Term} A term.
     */
    getResourceOrBaseIri(term, activeTag) {
        return term === true ? this.getBaseIriTerm(activeTag) : term;
    }
    /**
     * Get the active base IRI as an RDF term.
     * @param {IActiveTag} activeTag The active tag.
     * @return {NamedNode} The base IRI term.
     */
    getBaseIriTerm(activeTag) {
        return activeTag.localBaseIRI || this.baseIRI;
    }
    createVocabIris(terms, activeTag, allowTerms, allowBlankNode) {
        return terms.split(/\s+/)
            .filter((term) => term && (allowTerms || term.indexOf(':') >= 0))
            .map((property) => this.createIri(property, activeTag, true, true, allowBlankNode))
            .filter((term) => term != null);
    }
    /**
     * Create a new literal node.
     * @param {string} literal The literal value.
     * @param {IActiveTag} activeTag The current active tag.
     * @return {Literal} A new literal node.
     */
    createLiteral(literal, activeTag) {
        if (activeTag.interpretObjectAsTime && !activeTag.datatype) {
            for (const entry of Util.TIME_REGEXES) {
                if (literal.match(entry.regex)) {
                    activeTag.datatype = this.dataFactory.namedNode(Util.XSD + entry.type);
                    break;
                }
            }
        }
        return this.dataFactory.literal(literal, activeTag.datatype || activeTag.language);
    }
    /**
     * Create a blank node.
     * @returns {BlankNode} A new blank node.
     */
    createBlankNode() {
        if (this.blankNodeFactory) {
            return this.blankNodeFactory();
        }
        return this.dataFactory.blankNode();
    }
    createIri(term, activeTag, vocab, allowSafeCurie, allowBlankNode) {
        term = term || '';
        if (!allowSafeCurie) {
            if (!vocab) {
                term = relative_to_absolute_iri_1.resolve(term, this.getBaseIriTerm(activeTag).value);
            }
            if (!Util.isValidIri(term)) {
                return null;
            }
            return this.dataFactory.namedNode(term);
        }
        // Handle strict CURIEs
        if (term.length > 0 && term[0] === '[' && term[term.length - 1] === ']') {
            term = term.substr(1, term.length - 2);
            // Strict CURIEs MUST have a prefix separator
            if (term.indexOf(':') < 0) {
                return null;
            }
        }
        // Handle blank nodes
        if (term.startsWith('_:')) {
            return allowBlankNode ? this.dataFactory.blankNode(term.substr(2) || 'b_identity') : null;
        }
        // Handle vocab IRIs
        if (vocab) {
            if (activeTag.vocab && term.indexOf(':') < 0) {
                return this.dataFactory.namedNode(activeTag.vocab + term);
            }
        }
        // Handle prefixed IRIs
        let iri = Util.expandPrefixedTerm(term, activeTag);
        // Resolve against baseIRI if in base-mode, or if the term was a prefixed relative IRI
        if (!vocab) {
            iri = relative_to_absolute_iri_1.resolve(iri, this.getBaseIriTerm(activeTag).value);
        }
        else if (term !== iri) {
            iri = relative_to_absolute_iri_1.resolve(iri, this.baseIRIDocument.value);
        }
        if (!Util.isValidIri(iri)) {
            return null;
        }
        return this.dataFactory.namedNode(iri);
    }
}
exports.Util = Util;
Util.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
Util.XSD = 'http://www.w3.org/2001/XMLSchema#';
Util.RDFA = 'http://www.w3.org/ns/rdfa#';
Util.PREFIX_REGEX = /\s*([^:\s]*)*:\s*([^\s]*)*\s*/g;
Util.TIME_REGEXES = [
    {
        regex: /^-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9])?S)?)?$/,
        type: 'duration',
    },
    {
        regex: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,
        type: 'dateTime',
    },
    { regex: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/, type: 'date' },
    { regex: /^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/, type: 'time' },
    { regex: /^[0-9]+-[0-9][0-9]$/, type: 'gYearMonth' },
    { regex: /^[0-9]+$/, type: 'gYear' },
];
Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`]*$/;
//# sourceMappingURL=Util.js.map

/***/ }),
/* 88 */
/***/ (function(module, exports) {

function DefaultGraph () {
  this.value = ''
}

DefaultGraph.prototype.equals = function (other) {
  return !!other && other.termType === this.termType
}

DefaultGraph.prototype.termType = 'DefaultGraph'

module.exports = DefaultGraph


/***/ }),
/* 89 */
/***/ (function(module, exports) {

function NamedNode (iri) {
  this.value = iri
}

NamedNode.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value
}

NamedNode.prototype.termType = 'NamedNode'

module.exports = NamedNode


/***/ }),
/* 90 */
/***/ (function(module, exports) {

/**
 * Copyright 2020 Anastasiia Byvsheva & Dan Brickley
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class InvalidDataError extends Error {
    constructor(message) {
        super(message);
        this.name = "InvalidDataError";
    }
}

class ShexValidationError extends Error {
    constructor(message) {
        super(message);
        this.name = "ShexValidationError";
    }
}

module.exports = {
    InvalidDataError: InvalidDataError,
    ShexValidationError: ShexValidationError,

}

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

const { prepareNamespaces } = __webpack_require__(17)

class DataFactory {
  constructor (impl) {
    this.impl = impl || __webpack_require__(47)
    this.ns = prepareNamespaces(this)
  }

  get true () {
    return this.literal('true', this.ns.xsd.boolean)
  }

  blankNode (id) {
    return this.impl.blankNode(id)
  }

  literal (lex, langOrDatatype) {
    return this.impl.literal(lex, langOrDatatype)
  }

  namedNode (uri) {
    return this.impl.namedNode(uri)
  }

  quad (s, p, o, g) {
    return this.impl.quad(s, p, o, g)
  }

  dataset (quads) {
    return this.impl.dataset(quads)
  }
}

module.exports = DataFactory


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

const quad = __webpack_require__(211)
const term = __webpack_require__(93)

module.exports = {
  quadToNTriples: quad,
  termToNTriples: term
}


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

const blankNode = __webpack_require__(212)
const defaultGraph = __webpack_require__(213)
const literal = __webpack_require__(214)
const namedNode = __webpack_require__(94)
const variable = __webpack_require__(215)

function term (term) {
  switch (term.termType) {
    case 'BlankNode':
      return blankNode(term)
    case 'DefaultGraph':
      return defaultGraph(term)
    case 'Literal':
      return literal(term)
    case 'NamedNode':
      return namedNode(term)
    case 'Variable':
      return variable(term)
    default:
      return undefined
  }
}

module.exports = term


/***/ }),
/* 94 */
/***/ (function(module, exports) {

function namedNode (namedNode) {
  return '<' + namedNode.value + '>' // TODO: escape special chars
}

module.exports = namedNode


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

/* global BigInt */
const { csvw, rdf, xsd } = __webpack_require__(235)
const { termToNTriples: toCanonical } = __webpack_require__(92)

/**
 * Validators registry
 */
class Registry {
  constructor () {
    this.validators = new Map()
  }

  /**
   * Register a new validator for a specific datatype.
   *
   * @param {NamedNode} datatype - Validator datatype
   * @param {Function} validatorFunc - Function to validate the term value.
   *    Takes a term value (string) and returns a boolean describing if the
   *    value is valid in regards to the validator's datatype.
   * @returns {void}
   */
  register (datatype, validatorFunc) {
    this.validators.set(toCanonical(datatype), validatorFunc)
  }

  /**
   * Find validator for a given datatype.
   *
   * @param {NamedNode | null} datatype - The datatype
   * @returns {Function | null} - The validation function, if found. `null`
   *    otherwise.
   */
  find (datatype) {
    if (!datatype) {
      return null
    }

    return this.validators.get(toCanonical(datatype))
  }
}

const validators = new Registry()

validators.register(xsd.anySimpleType, value => true)
validators.register(xsd.anyAtomicType, value => true)
validators.register(xsd.string, value => true)

validators.register(xsd.normalizedString, value => isNormalized(value))

validators.register(xsd.token, value => (
  isNormalized(value) &&
  !value.startsWith(' ') &&
  !value.endsWith(' ') &&
  !value.includes('  ')
))

function isNormalized (value) {
  const forbiddenChars = ['\n', '\r', '\t']
  return !forbiddenChars.some(forbiddenChar => value.includes(forbiddenChar))
}

const languagePattern = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/
validators.register(xsd.language, value => languagePattern.test(value))

const anyURIPattern = /^[^\ufffe\uffff]*$/
validators.register(xsd.anyURI, value => anyURIPattern.test(value))

const signSeg = '(\\+|-)?'
const integerPattern = new RegExp(`^${signSeg}\\d+$`)

validators.register(xsd.integer, value => integerPattern.test(value))

validators.register(xsd.nonNegativeInteger, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('0')
))

validators.register(xsd.positiveInteger, value => (
  integerPattern.test(value) &&
  BigInt(value) > BigInt('0')
))

validators.register(xsd.nonPositiveInteger, value => (
  integerPattern.test(value) &&
  BigInt(value) <= BigInt('0')
))

validators.register(xsd.negativeInteger, value => (
  integerPattern.test(value) &&
  BigInt(value) < BigInt('0')
))

validators.register(xsd.int, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('-2147483647') &&
  BigInt(value) <= BigInt('2147483648')
))

validators.register(xsd.unsignedInt, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('0') &&
  BigInt(value) <= BigInt('4294967295')
))

validators.register(xsd.long, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('-9223372036854775808') &&
  BigInt(value) <= BigInt('9223372036854775807')
))

validators.register(xsd.unsignedLong, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('0') &&
  BigInt(value) <= BigInt('18446744073709551615')
))

validators.register(xsd.short, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('-32768') &&
  BigInt(value) <= BigInt('32767')
))

validators.register(xsd.unsignedShort, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('0') &&
  BigInt(value) <= BigInt('65535')
))

validators.register(xsd.byte, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('-128') &&
  BigInt(value) <= BigInt('127')
))

validators.register(xsd.unsignedByte, value => (
  integerPattern.test(value) &&
  BigInt(value) >= BigInt('0') &&
  BigInt(value) <= BigInt('255')
))

validators.register(xsd.boolean, value => (
  value === '1' ||
  value === 'true' ||
  value === '0' ||
  value === 'false'
))

const decimalSeg = `${signSeg}\\d+(\\.\\d+)?`

const decimalPattern = new RegExp(`^${signSeg}${decimalSeg}$`)
validators.register(xsd.decimal, value => decimalPattern.test(value))

validators.register(xsd.float, validateFloat)
validators.register(xsd.double, validateFloat)

const floatPattern = new RegExp(`^${signSeg}${decimalSeg}((E|e)(\\+|-)?\\d+)?$`)
function validateFloat (value) {
  return (
    value === 'INF' ||
    value === '-INF' ||
    value === 'NaN' ||
    floatPattern.test(value)
  )
}

const dateSignSeg = '-?'
const durationYearSeg = '\\d+Y'
const durationMonthSeg = '\\d+M'
const durationDaySeg = '\\d+D'
const durationHourSeg = '\\d+H'
const durationMinuteSeg = '\\d+M'
const durationSecondSeg = '\\d+(\\.\\d+)?S'
const durationYearMonthSeg = `(${durationYearSeg}(${durationMonthSeg})?|${durationMonthSeg})`
const durationTimeSeg = `T((${durationHourSeg}(${durationMinuteSeg})?(${durationSecondSeg})?)|(${durationMinuteSeg}(${durationSecondSeg})?)|${durationSecondSeg})`
const durationDayTimeSeg = `(${durationDaySeg}(${durationTimeSeg})?|${durationTimeSeg})`
const durationSeg = `${dateSignSeg}P((${durationYearMonthSeg}(${durationDayTimeSeg})?)|${durationDayTimeSeg})`

const durationPattern = new RegExp(`^${durationSeg}$`)
validators.register(xsd.duration, value => durationPattern.test(value))

const dayTimeDurationPattern = new RegExp(`^${dateSignSeg}P${durationDayTimeSeg}$`)
validators.register(xsd.dayTimeDuration, value => dayTimeDurationPattern.test(value))

const yearMonthDurationPattern = new RegExp(`^${dateSignSeg}P${durationYearMonthSeg}$`)
validators.register(xsd.yearMonthDuration, value => yearMonthDurationPattern.test(value))

const yearSeg = `${dateSignSeg}\\d{4}`
const timezoneSeg = '(((\\+|-)\\d{2}:\\d{2})|Z)'
const monthSeg = '\\d{2}'
const daySeg = '\\d{2}'
const dateSeg = `${yearSeg}-${monthSeg}-${daySeg}`
const timeSeg = '\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?'

const dateTimePattern = new RegExp(`^${dateSeg}T${timeSeg}${timezoneSeg}?$`)
validators.register(xsd.dateTime, value => dateTimePattern.test(value))

const dateTimeStampPattern = new RegExp(`^${dateSeg}T${timeSeg}${timezoneSeg}$`)
validators.register(xsd.dateTimeStamp, value => dateTimeStampPattern.test(value))

const datePattern = new RegExp(`^${dateSeg}${timezoneSeg}?$`)
validators.register(xsd.date, value => datePattern.test(value))

const dayPattern = new RegExp(`^${daySeg}${timezoneSeg}?$`)
validators.register(xsd.gDay, value => dayPattern.test(value))

const monthPattern = new RegExp(`^${monthSeg}${timezoneSeg}?$`)
validators.register(xsd.gMonth, value => monthPattern.test(value))

const monthDayPattern = new RegExp(`^${monthSeg}-${daySeg}${timezoneSeg}?$`)
validators.register(xsd.gMonthDay, value => monthDayPattern.test(value))

const yearPattern = new RegExp(`^${yearSeg}${timezoneSeg}?$`)
validators.register(xsd.gYear, value => yearPattern.test(value))

const yearMonthPattern = new RegExp(`^${yearSeg}-${monthSeg}${timezoneSeg}?$`)
validators.register(xsd.gYearMonth, value => yearMonthPattern.test(value))

const timePattern = new RegExp(`^${timeSeg}${timezoneSeg}?$`)
validators.register(xsd.time, value => timePattern.test(value))

const hexBinaryPattern = /^([0-9a-fA-F]{2})*$/
validators.register(xsd.hexBinary, value => hexBinaryPattern.test(value))

const b64CharSeg = '[A-Za-z0-9+/]'
const b16CharSeg = '[AEIMQUYcgkosw048]'
const b04CharSeg = '[AQgw]'
const b64Seg = `(${b64CharSeg} ?)`
const b16Seg = `(${b16CharSeg} ?)`
const b04Seg = `(${b04CharSeg} ?)`
const b64Padded16Seg = `(${b64Seg}{2}${b16Seg}=)`
const b64Padded8Seg = `(${b64Seg}${b04Seg}= ?=)`
const b64QuadSeg = `(${b64Seg}{4})`
const b64FinalQuadSeg = `(${b64Seg}{3}${b64CharSeg})`
const b64FinalSeg = `(${b64FinalQuadSeg}|${b64Padded16Seg}|${b64Padded8Seg})`
const b64Pattern = new RegExp(`^(${b64QuadSeg}*${b64FinalSeg})?$`)
validators.register(xsd.base64Binary, value => b64Pattern.test(value))

validators.register(csvw.JSON, value => {
  try {
    JSON.parse(value)
    return true
  } catch (e) {
    return false
  }
})

// TODO
validators.register(xsd.NOTATION, value => true)
validators.register(xsd.QName, value => true)
validators.register(xsd.Name, value => true)
validators.register(xsd.NCName, value => true)
validators.register(xsd.ENTITY, value => true)
validators.register(xsd.ID, value => true)
validators.register(xsd.IDREF, value => true)
validators.register(xsd.NMTOKEN, value => true)
validators.register(xsd.ENTITIES, value => true)
validators.register(xsd.IDREFS, value => true)
validators.register(xsd.NMTOKENS, value => true)
validators.register(rdf.XMLLiteral, value => true)
validators.register(rdf.HTML, value => true)

module.exports = validators


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

const validators = __webpack_require__(95)

/**
 * Validate that a term's value is valid in regards to its declared datatype.
 *
 * @param {Term} term - The term to validate
 * @returns {boolean} - `true` if valid, `false` otherwise
 */
function validateTerm (term) {
  if (term.termType !== 'Literal') {
    throw new Error('Cannot validate non-literal terms')
  }

  const validator = validators.find(term.datatype)

  if (validator) {
    return validator(term.value)
  }

  return true
}

module.exports = validateTerm


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

const NodeSet = __webpack_require__(29)
const { rdf, sh } = __webpack_require__(17)

/**
 * Extracts all the nodes of a property path from a graph and returns a
 * property path object.
 *
 * @param {RDFLibGraph} graph
 * @param {Term} pathNode - Start node of the path
 * @return Property path object
 */
function extractPropertyPath (graph, pathNode) {
  if (pathNode.termType === 'NamedNode') {
    return pathNode
  }

  if (pathNode.termType === 'BlankNode') {
    const pathCf = graph.cf.node(pathNode)

    const first = pathCf.out(rdf.first).term
    if (first) {
      const paths = graph.rdfListToArray(pathNode)
      return paths.map(path => extractPropertyPath(graph, path))
    }

    const alternativePath = pathCf.out(sh.alternativePath).term
    if (alternativePath) {
      const paths = graph.rdfListToArray(alternativePath)
      return { or: paths.map(path => extractPropertyPath(graph, path)) }
    }

    const zeroOrMorePath = pathCf.out(sh.zeroOrMorePath).term
    if (zeroOrMorePath) {
      return { zeroOrMore: extractPropertyPath(graph, zeroOrMorePath) }
    }

    const oneOrMorePath = pathCf.out(sh.oneOrMorePath).term
    if (oneOrMorePath) {
      return { oneOrMore: extractPropertyPath(graph, oneOrMorePath) }
    }

    const zeroOrOnePath = pathCf.out(sh.zeroOrOnePath).term
    if (zeroOrOnePath) {
      return { zeroOrOne: extractPropertyPath(graph, zeroOrOnePath) }
    }

    const inversePath = pathCf.out(sh.inversePath).term
    if (inversePath) {
      return { inverse: extractPropertyPath(graph, inversePath) }
    }
  }

  throw new Error(`Unsupported SHACL path: ${pathNode.value}`)
}

/**
 * Follows a property path in a graph, starting from a given node, and returns
 * all the nodes it points to.
 *
 * @param {RDFLibGraph} graph
 * @param {Term} subject - Start node
 * @param {object} path - Property path object
 * @return {Term[]} - Nodes that are reachable through the property path
 */
function getPathObjects (graph, subject, path) {
  return [...getPathObjectsSet(graph, subject, path)]
}

function getPathObjectsSet (graph, subject, path) {
  if (path.termType === 'NamedNode') {
    return getNamedNodePathObjects(graph, subject, path)
  } else if (Array.isArray(path)) {
    return getSequencePathObjects(graph, subject, path)
  } else if (path.or) {
    return getOrPathObjects(graph, subject, path)
  } else if (path.inverse) {
    return getInversePathObjects(graph, subject, path)
  } else if (path.zeroOrOne) {
    return getZeroOrOnePathObjects(graph, subject, path)
  } else if (path.zeroOrMore) {
    return getZeroOrMorePathObjects(graph, subject, path)
  } else if (path.oneOrMore) {
    return getOneOrMorePathObjects(graph, subject, path)
  } else {
    throw new Error(`Unsupported path object: ${path}`)
  }
}

function getNamedNodePathObjects (graph, subject, path) {
  return new NodeSet(graph.cf.node(subject).out(path).terms)
}

function getSequencePathObjects (graph, subject, path) {
  // TODO: This one is really unreadable
  let subjects = new NodeSet([subject])
  for (const pathItem of path) {
    subjects = new NodeSet(flatMap(subjects, subjectItem =>
      getPathObjects(graph, subjectItem, pathItem)))
  }
  return subjects
}

function getOrPathObjects (graph, subject, path) {
  return new NodeSet(flatMap(path.or, pathItem => getPathObjects(graph, subject, pathItem)))
}

function getInversePathObjects (graph, subject, path) {
  if (path.inverse.termType !== 'NamedNode') {
    throw new Error('Unsupported: Inverse paths only work for named nodes')
  }

  return new NodeSet(graph.cf.node(subject).in(path.inverse).terms)
}

function getZeroOrOnePathObjects (graph, subject, path) {
  const pathObjects = getPathObjectsSet(graph, subject, path.zeroOrOne)
  pathObjects.add(subject)
  return pathObjects
}

function getZeroOrMorePathObjects (graph, subject, path) {
  const pathObjects = walkPath(graph, subject, path.zeroOrMore)
  pathObjects.add(subject)
  return pathObjects
}

function getOneOrMorePathObjects (graph, subject, path) {
  return walkPath(graph, subject, path.oneOrMore)
}

function walkPath (graph, subject, path, visited) {
  visited = visited || new NodeSet()

  visited.add(subject)

  const pathValues = getPathObjectsSet(graph, subject, path)

  const deeperValues = flatMap(pathValues, pathValue => {
    if (!visited.has(pathValue)) {
      return [...walkPath(graph, pathValue, path, visited)]
    } else {
      return []
    }
  })

  pathValues.addAll(deeperValues)
  return pathValues
}

function flatMap (arr, func) {
  return [...arr].reduce((acc, x) => acc.concat(func(x)), [])
}

module.exports = {
  extractPropertyPath,
  getPathObjects
}


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

const Clownface = __webpack_require__(223)

/**
 * Factory to create graph pointer objects
 *
 * @param {Object} init
 * @param {DatasetCore} init.dataset an RDF/JS dataset
 * @param {string|Term} [init.graph] graph URI
 * @param {Term|Term[]} [init.term] one or more RDF/JS term(s) which will be the pointer's context
 * @param {string} [init.value] one or more raw values which will create literal node as the pointer's context
 * @param {DataFactory} [init.factory=@rdfjs/data-model] an RDF/JS factory which will be used to create nodes
 * @param {Context} [init._context] an existing clownface context. takes precedence before other params
 * @returns {Clownface}
 */
function factory ({ dataset, graph, term, value, factory, _context }) {
  return new Clownface({ dataset, graph, term, value, factory, _context })
}

module.exports = factory


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

const { toLiteral } = __webpack_require__(225)

function blankNode (value, factory) {
  if (value && typeof value !== 'string') {
    throw new Error('Blank node identifier must be a string')
  }

  return factory.blankNode(value)
}

function literal (value, languageOrDatatype, factory) {
  if (typeof value === 'string') {
    // check if it's given, if given try RDF/JS Term value otherwise convert it to a string
    languageOrDatatype = languageOrDatatype && (languageOrDatatype.value || languageOrDatatype.toString())

    if (languageOrDatatype && languageOrDatatype.indexOf(':') !== -1) {
      languageOrDatatype = factory.namedNode(languageOrDatatype)
    }

    return factory.literal(value.toString(), languageOrDatatype)
  }

  const term = toLiteral(value, factory)

  if (!term) {
    throw new Error('The value cannot be converted to a literal node')
  }

  return term
}

function namedNode (value, factory) {
  if (typeof value !== 'string') {
    throw new Error('Named node must be an IRI string')
  }

  return factory.namedNode(value)
}

function term (value, type = 'Literal', languageOrDatatype, factory) {
  // it's already a RDF/JS Term
  if (value && typeof value === 'object' && value.termType) {
    return value
  }

  // first check if it's a blank node...
  if (type === 'BlankNode') {
    return blankNode(value, factory)
  }

  // ...cause that's the only type that doesn't require a value
  if (value === null || typeof value === 'undefined') {
    return undefined
  }

  if (type === 'Literal') {
    return literal(value, languageOrDatatype, factory)
  }

  if (type === 'NamedNode') {
    return namedNode(value, factory)
  }

  throw new Error('unknown type')
}

module.exports = term


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "Lexer", function() { return /* reexport */ N3Lexer["a" /* default */]; });
__webpack_require__.d(__webpack_exports__, "Parser", function() { return /* reexport */ N3Parser_N3Parser; });
__webpack_require__.d(__webpack_exports__, "Writer", function() { return /* reexport */ N3Writer_N3Writer; });
__webpack_require__.d(__webpack_exports__, "Store", function() { return /* reexport */ N3Store_N3Store; });
__webpack_require__.d(__webpack_exports__, "StreamParser", function() { return /* reexport */ N3StreamParser_N3StreamParser; });
__webpack_require__.d(__webpack_exports__, "StreamWriter", function() { return /* reexport */ N3StreamWriter_N3StreamWriter; });
__webpack_require__.d(__webpack_exports__, "Util", function() { return /* reexport */ N3Util_namespaceObject; });
__webpack_require__.d(__webpack_exports__, "DataFactory", function() { return /* reexport */ N3DataFactory; });
__webpack_require__.d(__webpack_exports__, "Term", function() { return /* reexport */ Term; });
__webpack_require__.d(__webpack_exports__, "NamedNode", function() { return /* reexport */ NamedNode; });
__webpack_require__.d(__webpack_exports__, "Literal", function() { return /* reexport */ Literal; });
__webpack_require__.d(__webpack_exports__, "BlankNode", function() { return /* reexport */ BlankNode; });
__webpack_require__.d(__webpack_exports__, "Variable", function() { return /* reexport */ Variable; });
__webpack_require__.d(__webpack_exports__, "DefaultGraph", function() { return /* reexport */ DefaultGraph; });
__webpack_require__.d(__webpack_exports__, "Quad", function() { return /* reexport */ Quad; });
__webpack_require__.d(__webpack_exports__, "Triple", function() { return /* reexport */ Quad; });
__webpack_require__.d(__webpack_exports__, "termFromId", function() { return /* reexport */ termFromId; });
__webpack_require__.d(__webpack_exports__, "termToId", function() { return /* reexport */ termToId; });

// NAMESPACE OBJECT: ./node_modules/n3/src/N3Util.js
var N3Util_namespaceObject = {};
__webpack_require__.r(N3Util_namespaceObject);
__webpack_require__.d(N3Util_namespaceObject, "isNamedNode", function() { return isNamedNode; });
__webpack_require__.d(N3Util_namespaceObject, "isBlankNode", function() { return isBlankNode; });
__webpack_require__.d(N3Util_namespaceObject, "isLiteral", function() { return isLiteral; });
__webpack_require__.d(N3Util_namespaceObject, "isVariable", function() { return isVariable; });
__webpack_require__.d(N3Util_namespaceObject, "isDefaultGraph", function() { return isDefaultGraph; });
__webpack_require__.d(N3Util_namespaceObject, "inDefaultGraph", function() { return inDefaultGraph; });
__webpack_require__.d(N3Util_namespaceObject, "prefix", function() { return N3Util_prefix; });
__webpack_require__.d(N3Util_namespaceObject, "prefixes", function() { return N3Util_prefixes; });

// EXTERNAL MODULE: ./node_modules/n3/src/N3Lexer.js
var N3Lexer = __webpack_require__(30);

// EXTERNAL MODULE: ./node_modules/n3/src/IRIs.js
var IRIs = __webpack_require__(1);

// CONCATENATED MODULE: ./node_modules/n3/src/N3Util.js
// **N3Util** provides N3 utility functions.



// Tests whether the given term represents an IRI
function isNamedNode(term) {
  return !!term && term.termType === 'NamedNode';
}

// Tests whether the given term represents a blank node
function isBlankNode(term) {
  return !!term && term.termType === 'BlankNode';
}

// Tests whether the given term represents a literal
function isLiteral(term) {
  return !!term && term.termType === 'Literal';
}

// Tests whether the given term represents a variable
function isVariable(term) {
  return !!term && term.termType === 'Variable';
}

// Tests whether the given term represents the default graph
function isDefaultGraph(term) {
  return !!term && term.termType === 'DefaultGraph';
}

// Tests whether the given quad is in the default graph
function inDefaultGraph(quad) {
  return isDefaultGraph(quad.graph);
}

// Creates a function that prepends the given IRI to a local name
function N3Util_prefix(iri, factory) {
  return N3Util_prefixes({ '': iri }, factory)('');
}

// Creates a function that allows registering and expanding prefixes
function N3Util_prefixes(defaultPrefixes, factory) {
  // Add all of the default prefixes
  var prefixes = Object.create(null);
  for (var prefix in defaultPrefixes)
    processPrefix(prefix, defaultPrefixes[prefix]);
  // Set the default factory if none was specified
  factory = factory || N3DataFactory;

  // Registers a new prefix (if an IRI was specified)
  // or retrieves a function that expands an existing prefix (if no IRI was specified)
  function processPrefix(prefix, iri) {
    // Create a new prefix if an IRI is specified or the prefix doesn't exist
    if (typeof iri === 'string') {
      // Create a function that expands the prefix
      var cache = Object.create(null);
      prefixes[prefix] = function (local) {
        return cache[local] || (cache[local] = factory.namedNode(iri + local));
      };
    }
    else if (!(prefix in prefixes)) {
      throw new Error('Unknown prefix: ' + prefix);
    }
    return prefixes[prefix];
  }
  return processPrefix;
}

// CONCATENATED MODULE: ./node_modules/n3/src/N3DataFactory.js
// N3.js implementations of the RDF/JS core data types
// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md



const { rdf, xsd } = IRIs["a" /* default */];

let DEFAULTGRAPH;
let _blankNodeCounter = 0;

const escapedLiteral = /^"(.*".*)(?="[^"]*$)/;
const quadId = /^<<("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ?("(?:""|[^"])*"[^ ]*|[^ ]+)?>>$/;

// ## DataFactory singleton
const DataFactory = {
  namedNode: N3DataFactory_namedNode,
  blankNode,
  variable,
  literal,
  defaultGraph,
  quad: N3DataFactory_quad,
  triple: N3DataFactory_quad,
};
/* harmony default export */ var N3DataFactory = (DataFactory);

// ## Term constructor
class Term {
  constructor(id) {
    this.id = id;
  }

  // ### The value of this term
  get value() {
    return this.id;
  }

  // ### Returns whether this object represents the same term as the other
  equals(other) {
    // If both terms were created by this library,
    // equality can be computed through ids
    if (other instanceof Term)
      return this.id === other.id;
    // Otherwise, compare term type and value
    return !!other && this.termType === other.termType &&
                      this.value    === other.value;
  }

  // ### Returns a plain object representation of this term
  toJSON() {
    return {
      termType: this.termType,
      value:    this.value,
    };
  }
}


// ## NamedNode constructor
class NamedNode extends Term {
  // ### The term type of this term
  get termType() {
    return 'NamedNode';
  }
}

// ## Literal constructor
class Literal extends Term {
  // ### The term type of this term
  get termType() {
    return 'Literal';
  }

  // ### The text value of this literal
  get value() {
    return this.id.substring(1, this.id.lastIndexOf('"'));
  }

  // ### The language of this literal
  get language() {
    // Find the last quotation mark (e.g., '"abc"@en-us')
    var id = this.id, atPos = id.lastIndexOf('"') + 1;
    // If "@" it follows, return the remaining substring; empty otherwise
    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';
  }

  // ### The datatype IRI of this literal
  get datatype() {
    return new NamedNode(this.datatypeString);
  }

  // ### The datatype string of this literal
  get datatypeString() {
    // Find the last quotation mark (e.g., '"abc"^^http://ex.org/types#t')
    var id = this.id, dtPos = id.lastIndexOf('"') + 1, ch;
    // If "^" it follows, return the remaining substring
    return dtPos < id.length && (ch = id[dtPos]) === '^' ? id.substr(dtPos + 2) :
           // If "@" follows, return rdf:langString; xsd:string otherwise
           (ch !== '@' ? xsd.string : rdf.langString);
  }

  // ### Returns whether this object represents the same term as the other
  equals(other) {
    // If both literals were created by this library,
    // equality can be computed through ids
    if (other instanceof Literal)
      return this.id === other.id;
    // Otherwise, compare term type, value, language, and datatype
    return !!other && !!other.datatype &&
                      this.termType === other.termType &&
                      this.value    === other.value    &&
                      this.language === other.language &&
                      this.datatype.value === other.datatype.value;
  }

  toJSON() {
    return {
      termType: this.termType,
      value:    this.value,
      language: this.language,
      datatype: { termType: 'NamedNode', value: this.datatypeString },
    };
  }
}

// ## BlankNode constructor
class BlankNode extends Term {
  constructor(name) {
    super('_:' + name);
  }

  // ### The term type of this term
  get termType() {
    return 'BlankNode';
  }

  // ### The name of this blank node
  get value() {
    return this.id.substr(2);
  }
}

class Variable extends Term {
  constructor(name) {
    super('?' + name);
  }

  // ### The term type of this term
  get termType() {
    return 'Variable';
  }

  // ### The name of this variable
  get value() {
    return this.id.substr(1);
  }
}

// ## DefaultGraph constructor
class DefaultGraph extends Term {
  constructor() {
    super('');
    return DEFAULTGRAPH || this;
  }

  // ### The term type of this term
  get termType() {
    return 'DefaultGraph';
  }

  // ### Returns whether this object represents the same term as the other
  equals(other) {
    // If both terms were created by this library,
    // equality can be computed through strict equality;
    // otherwise, compare term types.
    return (this === other) || (!!other && (this.termType === other.termType));
  }
}

// ## DefaultGraph singleton
DEFAULTGRAPH = new DefaultGraph();


// ### Constructs a term from the given internal string ID
function termFromId(id, factory) {
  factory = factory || DataFactory;

  // Falsy value or empty string indicate the default graph
  if (!id)
    return factory.defaultGraph();

  // Identify the term type based on the first character
  switch (id[0]) {
  case '?':
    return factory.variable(id.substr(1));
  case '_':
    return factory.blankNode(id.substr(2));
  case '"':
    // Shortcut for internal literals
    if (factory === DataFactory)
      return new Literal(id);
    // Literal without datatype or language
    if (id[id.length - 1] === '"')
      return factory.literal(id.substr(1, id.length - 2));
    // Literal with datatype or language
    var endPos = id.lastIndexOf('"', id.length - 1);
    return factory.literal(id.substr(1, endPos - 1),
            id[endPos + 1] === '@' ? id.substr(endPos + 2)
                                   : factory.namedNode(id.substr(endPos + 3)));
  case '<':
    const components = quadId.exec(id);
    return factory.quad(
      termFromId(unescapeQuotes(components[1]), factory),
      termFromId(unescapeQuotes(components[2]), factory),
      termFromId(unescapeQuotes(components[3]), factory),
      components[4] && termFromId(unescapeQuotes(components[4]), factory)
    );
  default:
    return factory.namedNode(id);
  }
}

// ### Constructs an internal string ID from the given term or ID string
function termToId(term) {
  if (typeof term === 'string')
    return term;
  if (term instanceof Term && term.termType !== 'Quad')
    return term.id;
  if (!term)
    return DEFAULTGRAPH.id;

  // Term instantiated with another library
  switch (term.termType) {
  case 'NamedNode':    return term.value;
  case 'BlankNode':    return '_:' + term.value;
  case 'Variable':     return '?' + term.value;
  case 'DefaultGraph': return '';
  case 'Literal':      return '"' + term.value + '"' +
    (term.language ? '@' + term.language :
      (term.datatype && term.datatype.value !== xsd.string ? '^^' + term.datatype.value : ''));
  case 'Quad':
    // To identify RDF* quad components, we escape quotes by doubling them.
    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.
    return `<<${
        escapeQuotes(termToId(term.subject))
      } ${
        escapeQuotes(termToId(term.predicate))
      } ${
        escapeQuotes(termToId(term.object))
      }${
        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`
      }>>`;
  default: throw new Error('Unexpected termType: ' + term.termType);
  }
}


// ## Quad constructor
class Quad extends Term {
  constructor(subject, predicate, object, graph) {
    super('');
    this.subject   = subject;
    this.predicate = predicate;
    this.object    = object;
    this.graph     = graph || DEFAULTGRAPH;
  }

  // ### The term type of this term
  get termType() {
    return 'Quad';
  }

  // ### Returns a plain object representation of this quad
  toJSON() {
    return {
      termType:  this.termType,
      subject:   this.subject.toJSON(),
      predicate: this.predicate.toJSON(),
      object:    this.object.toJSON(),
      graph:     this.graph.toJSON(),
    };
  }

  // ### Returns whether this object represents the same quad as the other
  equals(other) {
    return !!other && this.subject.equals(other.subject)     &&
                      this.predicate.equals(other.predicate) &&
                      this.object.equals(other.object)       &&
                      this.graph.equals(other.graph);
  }
}


// ### Escapes the quotes within the given literal
function escapeQuotes(id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/"/g, '""')}`);
}

// ### Unescapes the quotes within the given literal
function unescapeQuotes(id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/""/g, '"')}`);
}

// ### Creates an IRI
function N3DataFactory_namedNode(iri) {
  return new NamedNode(iri);
}

// ### Creates a blank node
function blankNode(name) {
  return new BlankNode(name || `n3-${_blankNodeCounter++}`);
}

// ### Creates a literal
function literal(value, languageOrDataType) {
  // Create a language-tagged string
  if (typeof languageOrDataType === 'string')
    return new Literal('"' + value + '"@' + languageOrDataType.toLowerCase());

  // Automatically determine datatype for booleans and numbers
  let datatype = languageOrDataType ? languageOrDataType.value : '';
  if (datatype === '') {
    // Convert a boolean
    if (typeof value === 'boolean')
      datatype = xsd.boolean;
    // Convert an integer or double
    else if (typeof value === 'number') {
      if (Number.isFinite(value))
        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;
      else {
        datatype = xsd.double;
        if (!Number.isNaN(value))
          value = value > 0 ? 'INF' : '-INF';
      }
    }
  }

  // Create a datatyped literal
  return (datatype === '' || datatype === xsd.string) ?
    new Literal('"' + value + '"') :
    new Literal('"' + value + '"^^' + datatype);
}

// ### Creates a variable
function variable(name) {
  return new Variable(name);
}

// ### Returns the default graph
function defaultGraph() {
  return DEFAULTGRAPH;
}

// ### Creates a quad
function N3DataFactory_quad(subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph);
}

// CONCATENATED MODULE: ./node_modules/n3/src/N3Parser.js
// **N3Parser** parses N3 documents.




let blankNodePrefix = 0;

// ## Constructor
class N3Parser_N3Parser {
  constructor(options) {
    this._contextStack = [];
    this._graph = null;

    // Set the document IRI
    options = options || {};
    this._setBase(options.baseIRI);
    options.factory && initDataFactory(this, options.factory);

    // Set supported features depending on the format
    var format = (typeof options.format === 'string') ?
                 options.format.match(/\w*$/)[0].toLowerCase() : '',
        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),
        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),
        isN3 = this._n3Mode = /n3/.test(format),
        isLineMode = isNTriples || isNQuads;
    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))
      this._readPredicateOrNamedGraph = this._readPredicate;
    // Support triples in other graphs
    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);
    // Support nesting of triples
    this._supportsRDFStar = format === '' || /star|\*$/.test(format);
    // Disable relative IRIs in N-Triples or N-Quads mode
    if (isLineMode)
      this._resolveRelativeIRI = function (iri) { return null; };
    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :
                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');
    this._lexer = options.lexer || new N3Lexer["a" /* default */]({ lineMode: isLineMode, n3: isN3 });
    // Disable explicit quantifiers by default
    this._explicitQuantifiers = !!options.explicitQuantifiers;
  }

  // ## Static class methods

  // ### `_resetBlankNodePrefix` restarts blank node prefix identification
  static _resetBlankNodePrefix() {
    blankNodePrefix = 0;
  }

  // ## Private methods

  // ### `_setBase` sets the base IRI to resolve relative IRIs
  _setBase(baseIRI) {
    if (!baseIRI) {
      this._base = '';
      this._basePath = '';
    }
    else {
      // Remove fragment if present
      var fragmentPos = baseIRI.indexOf('#');
      if (fragmentPos >= 0)
        baseIRI = baseIRI.substr(0, fragmentPos);
      // Set base IRI and its components
      this._base = baseIRI;
      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :
                         baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
      this._baseRoot   = baseIRI[0];
      this._baseScheme = baseIRI[1];
    }
  }

  // ### `_saveContext` stores the current parsing context
  // when entering a new scope (list, blank node, formula)
  _saveContext(type, graph, subject, predicate, object) {
    var n3Mode = this._n3Mode;
    this._contextStack.push({
      subject: subject, predicate: predicate, object: object,
      graph: graph, type: type,
      inverse: n3Mode ? this._inversePredicate : false,
      blankPrefix: n3Mode ? this._prefixes._ : '',
      quantified: n3Mode ? this._quantified : null,
    });
    // The settings below only apply to N3 streams
    if (n3Mode) {
      // Every new scope resets the predicate direction
      this._inversePredicate = false;
      // In N3, blank nodes are scoped to a formula
      // (using a dot as separator, as a blank node label cannot start with it)
      this._prefixes._ = (this._graph ? this._graph.id.substr(2) + '.' : '.');
      // Quantifiers are scoped to a formula
      this._quantified = Object.create(this._quantified);
    }
  }

  // ### `_restoreContext` restores the parent context
  // when leaving a scope (list, blank node, formula)
  _restoreContext() {
    var context = this._contextStack.pop(), n3Mode = this._n3Mode;
    this._subject   = context.subject;
    this._predicate = context.predicate;
    this._object    = context.object;
    this._graph     = context.graph;
    // The settings below only apply to N3 streams
    if (n3Mode) {
      this._inversePredicate = context.inverse;
      this._prefixes._ = context.blankPrefix;
      this._quantified = context.quantified;
    }
  }

  // ### `_readInTopContext` reads a token when in the top context
  _readInTopContext(token) {
    switch (token.type) {
    // If an EOF token arrives in the top context, signal that we're done
    case 'eof':
      if (this._graph !== null)
        return this._error('Unclosed graph', token);
      delete this._prefixes._;
      return this._callback(null, null, this._prefixes);
    // It could be a prefix declaration
    case 'PREFIX':
      this._sparqlStyle = true;
    case '@prefix':
      return this._readPrefix;
    // It could be a base declaration
    case 'BASE':
      this._sparqlStyle = true;
    case '@base':
      return this._readBaseIRI;
    // It could be a graph
    case '{':
      if (this._supportsNamedGraphs) {
        this._graph = '';
        this._subject = null;
        return this._readSubject;
      }
    case 'GRAPH':
      if (this._supportsNamedGraphs)
        return this._readNamedGraphLabel;
    // Otherwise, the next token must be a subject
    default:
      return this._readSubject(token);
    }
  }

  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable
  _readEntity(token, quantifier) {
    var value;
    switch (token.type) {
    // Read a relative or absolute IRI
    case 'IRI':
    case 'typeIRI':
      var iri = this._resolveIRI(token.value);
      if (iri === null)
        return this._error('Invalid IRI', token);
      value = this._namedNode(iri);
      break;
    // Read a prefixed name
    case 'type':
    case 'prefixed':
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      value = this._namedNode(prefix + token.value);
      break;
    // Read a blank node
    case 'blank':
      value = this._blankNode(this._prefixes[token.prefix] + token.value);
      break;
    // Read a variable
    case 'var':
      value = this._variable(token.value.substr(1));
      break;
    // Everything else is not an entity
    default:
      return this._error('Expected entity but got ' + token.type, token);
    }
    // In N3 mode, replace the entity if it is quantified
    if (!quantifier && this._n3Mode && (value.id in this._quantified))
      value = this._quantified[value.id];
    return value;
  }

  // ### `_readSubject` reads a quad's subject
  _readSubject(token) {
    this._predicate = null;
    switch (token.type) {
    case '[':
      // Start a new quad with a new blank node as subject
      this._saveContext('blank', this._graph,
                        this._subject = this._blankNode(), null, null);
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._saveContext('list', this._graph, this.RDF_NIL, null, null);
      this._subject = null;
      return this._readListItem;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph,
                        this._graph = this._blankNode(), null, null);
      return this._readSubject;
    case '}':
       // No subject; the graph in which we are reading is closed instead
      return this._readPunctuation(token);
    case '@forSome':
      if (!this._n3Mode)
        return this._error('Unexpected "@forSome"', token);
      this._subject = null;
      this._predicate = this.N3_FORSOME;
      this._quantifier = this._blankNode;
      return this._readQuantifierList;
    case '@forAll':
      if (!this._n3Mode)
        return this._error('Unexpected "@forAll"', token);
      this._subject = null;
      this._predicate = this.N3_FORALL;
      this._quantifier = this._variable;
      return this._readQuantifierList;
    case 'literal':
      if (!this._n3Mode)
        return this._error('Unexpected literal', token);

      if (token.prefix.length === 0) {
        this._literalValue = token.value;
        return this._completeSubjectLiteral;
      }
      else
        this._subject = this._literal(token.value, this._namedNode(token.prefix));

      break;
    case '<<':
      if (!this._supportsRDFStar)
        return this._error('Unexpected RDF* syntax', token);
      this._saveContext('<<', this._graph, null, null, null);
      this._graph = null;
      return this._readSubject;
    default:
      // Read the subject entity
      if ((this._subject = this._readEntity(token)) === undefined)
        return;
      // In N3 mode, the subject might be a path
      if (this._n3Mode)
        return this._getPathReader(this._readPredicateOrNamedGraph);
    }

    // The next token must be a predicate,
    // or, if the subject was actually a graph IRI, a named graph
    return this._readPredicateOrNamedGraph;
  }

  // ### `_readPredicate` reads a quad's predicate
  _readPredicate(token) {
    var type = token.type;
    switch (type) {
    case 'inverse':
      this._inversePredicate = true;
    case 'abbreviation':
      this._predicate = this.ABBREVIATIONS[token.value];
      break;
    case '.':
    case ']':
    case '}':
      // Expected predicate didn't come, must have been trailing semicolon
      if (this._predicate === null)
        return this._error('Unexpected ' + type, token);
      this._subject = null;
      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);
    case ';':
      // Additional semicolons can be safely ignored
      return this._predicate !== null ? this._readPredicate :
             this._error('Expected predicate but got ;', token);
    case 'blank':
      if (!this._n3Mode)
        return this._error('Disallowed blank node as predicate', token);
    default:
      if ((this._predicate = this._readEntity(token)) === undefined)
        return;
    }
    // The next token must be an object
    return this._readObject;
  }

  // ### `_readObject` reads a quad's object
  _readObject(token) {
    switch (token.type) {
    case 'literal':
      // Regular literal, can still get a datatype or language
      if (token.prefix.length === 0) {
        this._literalValue = token.value;
        return this._readDataTypeOrLang;
      }
      // Pre-datatyped string literal (prefix stores the datatype)
      else
        this._object = this._literal(token.value, this._namedNode(token.prefix));
      break;
    case '[':
      // Start a new quad with a new blank node as subject
      this._saveContext('blank', this._graph, this._subject, this._predicate,
                        this._subject = this._blankNode());
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);
      this._subject = null;
      return this._readListItem;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph, this._subject, this._predicate,
                        this._graph = this._blankNode());
      return this._readSubject;
    case '<<':
      if (!this._supportsRDFStar)
        return this._error('Unexpected RDF* syntax', token);
      this._saveContext('<<', this._graph, this._subject, this._predicate, null);
      this._graph = null;
      return this._readSubject;
    default:
      // Read the object entity
      if ((this._object = this._readEntity(token)) === undefined)
        return;
      // In N3 mode, the object might be a path
      if (this._n3Mode)
        return this._getPathReader(this._getContextEndReader());
    }
    return this._getContextEndReader();
  }

  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph
  _readPredicateOrNamedGraph(token) {
    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
  }

  // ### `_readGraph` reads a graph
  _readGraph(token) {
    if (token.type !== '{')
      return this._error('Expected graph but got ' + token.type, token);
    // The "subject" we read is actually the GRAPH's label
    this._graph = this._subject, this._subject = null;
    return this._readSubject;
  }

  // ### `_readBlankNodeHead` reads the head of a blank node
  _readBlankNodeHead(token) {
    if (token.type === ']') {
      this._subject = null;
      return this._readBlankNodeTail(token);
    }
    else {
      this._predicate = null;
      return this._readPredicate(token);
    }
  }

  // ### `_readBlankNodeTail` reads the end of a blank node
  _readBlankNodeTail(token) {
    if (token.type !== ']')
      return this._readBlankNodePunctuation(token);

    // Store blank node quad
    if (this._subject !== null)
      this._emit(this._subject, this._predicate, this._object, this._graph);

    // Restore the parent context containing this blank node
    var empty = this._predicate === null;
    this._restoreContext();
    // If the blank node was the subject, continue reading the predicate
    if (this._object === null)
      // If the blank node was empty, it could be a named graph label
      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
    // If the blank node was the object, restore previous context and read punctuation
    else
      return this._getContextEndReader();
  }

  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node
  _readPredicateAfterBlank(token) {
    switch (token.type) {
    case '.':
    case '}':
      // No predicate is coming if the triple is terminated here
      this._subject = null;
      return this._readPunctuation(token);
    default:
      return this._readPredicate(token);
    }
  }

  // ### `_readListItem` reads items from a list
  _readListItem(token) {
    var item = null,                      // The item of the list
        list = null,                      // The list itself
        previousList = this._subject,     // The previous list that contains this list
        stack = this._contextStack,       // The stack of parent contexts
        parent = stack[stack.length - 1], // The parent containing the current list
        next = this._readListItem;        // The next function to execute

    switch (token.type) {
    case '[':
      // Stack the current list quad and start a new quad with a blank node as subject
      this._saveContext('blank', this._graph,
                        list = this._blankNode(), this.RDF_FIRST,
                        this._subject = item = this._blankNode());
      next = this._readBlankNodeHead;
      break;
    case '(':
      // Stack the current list quad and start a new list
      this._saveContext('list', this._graph,
                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);
      this._subject = null;
      break;
    case ')':
      // Closing the list; restore the parent context
      this._restoreContext();
      // If this list is contained within a parent list, return the membership quad here.
      // This will be `<parent list element> rdf:first <this list>.`.
      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')
        this._emit(this._subject, this._predicate, this._object, this._graph);
      // Was this list the parent's subject?
      if (this._predicate === null) {
        // The next token is the predicate
        next = this._readPredicate;
        // No list tail if this was an empty list
        if (this._subject === this.RDF_NIL)
          return next;
      }
      // The list was in the parent context's object
      else {
        next = this._getContextEndReader();
        // No list tail if this was an empty list
        if (this._object === this.RDF_NIL)
          return next;
      }
      // Close the list by making the head nil
      list = this.RDF_NIL;
      break;
    case 'literal':
      // Regular literal, can still get a datatype or language
      if (token.prefix.length === 0) {
        this._literalValue = token.value;
        next = this._readListItemDataTypeOrLang;
      }
      // Pre-datatyped string literal (prefix stores the datatype)
      else {
        item = this._literal(token.value, this._namedNode(token.prefix));
        next = this._getContextEndReader();
      }
      break;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph, this._subject, this._predicate,
                        this._graph = this._blankNode());
      return this._readSubject;
    default:
      if ((item = this._readEntity(token)) === undefined)
        return;
    }

     // Create a new blank node if no item head was assigned yet
    if (list === null)
      this._subject = list = this._blankNode();

    // Is this the first element of the list?
    if (previousList === null) {
      // This list is either the subject or the object of its parent
      if (parent.predicate === null)
        parent.subject = list;
      else
        parent.object = list;
    }
    else {
      // Continue the previous list with the current list
      this._emit(previousList, this.RDF_REST, list, this._graph);
    }
    // If an item was read, add it to the list
    if (item !== null) {
      // In N3 mode, the item might be a path
      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {
        // Create a new context to add the item's path
        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);
        this._subject = item, this._predicate = null;
        // _readPath will restore the context and output the item
        return this._getPathReader(this._readListItem);
      }
      // Output the item
      this._emit(list, this.RDF_FIRST, item, this._graph);
    }
    return next;
  }

  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language
  _readDataTypeOrLang(token) {
    return this._completeObjectLiteral(token, false);
  }


  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list
  _readListItemDataTypeOrLang(token) {
    return this._completeObjectLiteral(token, true);
  }

  // ### `_completeLiteral` completes a literal with an optional datatype or language
  _completeLiteral(token) {
    // Create a simple string literal by default
    let literal = this._literal(this._literalValue);

    switch (token.type) {
    // Create a datatyped literal
    case 'type':
    case 'typeIRI':
      var datatype = this._readEntity(token);
      if (datatype === undefined) return; // No datatype means an error occurred
      literal = this._literal(this._literalValue, datatype);
      token = null;
      break;
    // Create a language-tagged string
    case 'langcode':
      literal = this._literal(this._literalValue, token.value);
      token = null;
      break;
    }

    return { token, literal };
  }

  // Completes a literal in subject position
  _completeSubjectLiteral(token) {
    this._subject = this._completeLiteral(token).literal;
    return this._readPredicateOrNamedGraph;
  }

  // Completes a literal in object position
  _completeObjectLiteral(token, listItem) {
    const completed = this._completeLiteral(token);
    if (!completed)
      return;
    this._object = completed.literal;

    // If this literal was part of a list, write the item
    // (we could also check the context stack, but passing in a flag is faster)
    if (listItem)
      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);
    // If the token was consumed, continue with the rest of the input
    if (completed.token === null)
      return this._getContextEndReader();
    // Otherwise, consume the token now
    else {
      this._readCallback = this._getContextEndReader();
      return this._readCallback(completed.token);
    }
  }

  // ### `_readFormulaTail` reads the end of a formula
  _readFormulaTail(token) {
    if (token.type !== '}')
      return this._readPunctuation(token);

    // Store the last quad of the formula
    if (this._subject !== null)
      this._emit(this._subject, this._predicate, this._object, this._graph);

    // Restore the parent context containing this formula
    this._restoreContext();
    // If the formula was the subject, continue reading the predicate.
    // If the formula was the object, read punctuation.
    return this._object === null ? this._readPredicate : this._getContextEndReader();
  }

  // ### `_readPunctuation` reads punctuation between quads or quad parts
  _readPunctuation(token) {
    var next, subject = this._subject, graph = this._graph,
        inversePredicate = this._inversePredicate;
    switch (token.type) {
    // A closing brace ends a graph
    case '}':
      if (this._graph === null)
        return this._error('Unexpected graph closing', token);
      if (this._n3Mode)
        return this._readFormulaTail(token);
      this._graph = null;
    // A dot just ends the statement, without sharing anything with the next
    case '.':
      this._subject = null;
      next = this._contextStack.length ? this._readSubject : this._readInTopContext;
      if (inversePredicate) this._inversePredicate = false;
      break;
    // Semicolon means the subject is shared; predicate and object are different
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different
    case ',':
      next = this._readObject;
      break;
    default:
      // An entity means this is a quad (only allowed if not already inside a graph)
      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {
        next = this._readQuadPunctuation;
        break;
      }
      return this._error('Expected punctuation to follow "' + this._object.id + '"', token);
    }
    // A quad has been completed now, so return it
    if (subject !== null) {
      var predicate = this._predicate, object = this._object;
      if (!inversePredicate)
        this._emit(subject, predicate, object,  graph);
      else
        this._emit(object,  predicate, subject, graph);
    }
    return next;
  }

    // ### `_readBlankNodePunctuation` reads punctuation in a blank node
  _readBlankNodePunctuation(token) {
    var next;
    switch (token.type) {
    // Semicolon means the subject is shared; predicate and object are different
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different
    case ',':
      next = this._readObject;
      break;
    default:
      return this._error('Expected punctuation to follow "' + this._object.id + '"', token);
    }
    // A quad has been completed now, so return it
    this._emit(this._subject, this._predicate, this._object, this._graph);
    return next;
  }

  // ### `_readQuadPunctuation` reads punctuation after a quad
  _readQuadPunctuation(token) {
    if (token.type !== '.')
      return this._error('Expected dot to follow quad', token);
    return this._readInTopContext;
  }

  // ### `_readPrefix` reads the prefix of a prefix declaration
  _readPrefix(token) {
    if (token.type !== 'prefix')
      return this._error('Expected prefix to follow @prefix', token);
    this._prefix = token.value;
    return this._readPrefixIRI;
  }

  // ### `_readPrefixIRI` reads the IRI of a prefix declaration
  _readPrefixIRI(token) {
    if (token.type !== 'IRI')
      return this._error('Expected IRI to follow prefix "' + this._prefix + ':"', token);
    var prefixNode = this._readEntity(token);
    this._prefixes[this._prefix] = prefixNode.value;
    this._prefixCallback(this._prefix, prefixNode);
    return this._readDeclarationPunctuation;
  }

  // ### `_readBaseIRI` reads the IRI of a base declaration
  _readBaseIRI(token) {
    var iri = token.type === 'IRI' && this._resolveIRI(token.value);
    if (!iri)
      return this._error('Expected valid IRI to follow base declaration', token);
    this._setBase(iri);
    return this._readDeclarationPunctuation;
  }

  // ### `_readNamedGraphLabel` reads the label of a named graph
  _readNamedGraphLabel(token) {
    switch (token.type) {
    case 'IRI':
    case 'blank':
    case 'prefixed':
      return this._readSubject(token), this._readGraph;
    case '[':
      return this._readNamedGraphBlankLabel;
    default:
      return this._error('Invalid graph label', token);
    }
  }

  // ### `_readNamedGraphLabel` reads a blank node label of a named graph
  _readNamedGraphBlankLabel(token) {
    if (token.type !== ']')
      return this._error('Invalid graph label', token);
    this._subject = this._blankNode();
    return this._readGraph;
  }

  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration
  _readDeclarationPunctuation(token) {
    // SPARQL-style declarations don't have punctuation
    if (this._sparqlStyle) {
      this._sparqlStyle = false;
      return this._readInTopContext(token);
    }

    if (token.type !== '.')
      return this._error('Expected declaration to end with a dot', token);
    return this._readInTopContext;
  }

  // Reads a list of quantified symbols from a @forSome or @forAll statement
  _readQuantifierList(token) {
    var entity;
    switch (token.type) {
    case 'IRI':
    case 'prefixed':
      if ((entity = this._readEntity(token, true)) !== undefined)
        break;
    default:
      return this._error('Unexpected ' + token.type, token);
    }
    // Without explicit quantifiers, map entities to a quantified entity
    if (!this._explicitQuantifiers)
      this._quantified[entity.id] = this._quantifier(this._blankNode().value);
    // With explicit quantifiers, output the reified quantifier
    else {
      // If this is the first item, start a new quantifier list
      if (this._subject === null)
        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,
                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
      // Otherwise, continue the previous list
      else
        this._emit(this._subject, this.RDF_REST,
                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
      // Output the list item
      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
    }
    return this._readQuantifierPunctuation;
  }

  // Reads punctuation from a @forSome or @forAll statement
  _readQuantifierPunctuation(token) {
    // Read more quantifiers
    if (token.type === ',')
      return this._readQuantifierList;
    // End of the quantifier list
    else {
      // With explicit quantifiers, close the quantifier list
      if (this._explicitQuantifiers) {
        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);
        this._subject = null;
      }
      // Read a dot
      this._readCallback = this._getContextEndReader();
      return this._readCallback(token);
    }
  }

  // ### `_getPathReader` reads a potential path and then resumes with the given function
  _getPathReader(afterPath) {
    this._afterPath = afterPath;
    return this._readPath;
  }

  // ### `_readPath` reads a potential path
  _readPath(token) {
    switch (token.type) {
    // Forward path
    case '!': return this._readForwardPath;
    // Backward path
    case '^': return this._readBackwardPath;
    // Not a path; resume reading where we left off
    default:
      var stack = this._contextStack, parent = stack.length && stack[stack.length - 1];
      // If we were reading a list item, we still need to output it
      if (parent && parent.type === 'item') {
        // The list item is the remaining subejct after reading the path
        var item = this._subject;
        // Switch back to the context of the list
        this._restoreContext();
        // Output the list item
        this._emit(this._subject, this.RDF_FIRST, item, this._graph);
      }
      return this._afterPath(token);
    }
  }

  // ### `_readForwardPath` reads a '!' path
  _readForwardPath(token) {
    var subject, predicate, object = this._blankNode();
    // The next token is the predicate
    if ((predicate = this._readEntity(token)) === undefined)
      return;
    // If we were reading a subject, replace the subject by the path's object
    if (this._predicate === null)
      subject = this._subject, this._subject = object;
    // If we were reading an object, replace the subject by the path's object
    else
      subject = this._object,  this._object  = object;
    // Emit the path's current quad and read its next section
    this._emit(subject, predicate, object, this._graph);
    return this._readPath;
  }

  // ### `_readBackwardPath` reads a '^' path
  _readBackwardPath(token) {
    var subject = this._blankNode(), predicate, object;
    // The next token is the predicate
    if ((predicate = this._readEntity(token)) === undefined)
      return;
    // If we were reading a subject, replace the subject by the path's subject
    if (this._predicate === null)
      object = this._subject, this._subject = subject;
    // If we were reading an object, replace the subject by the path's subject
    else
      object = this._object,  this._object  = subject;
    // Emit the path's current quad and read its next section
    this._emit(subject, predicate, object, this._graph);
    return this._readPath;
  }

  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple
  _readRDFStarTailOrGraph(token) {
    if (token.type !== '>>') {
      // An entity means this is a quad (only allowed if not already inside a graph)
      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)
        return this._readRDFStarTail;
      return this._error('Expected >> to follow "' + this._object.id + '"', token);
    }
    return this._readRDFStarTail(token);
  }

  // ### `_readRDFStarTail` reads the end of a nested RDF* triple
  _readRDFStarTail(token) {
    if (token.type !== '>>')
      return this._error(`Expected >> but got ${token.type}`, token);
    // Read the quad and restore the previous context
    const quad = this._quad(this._subject, this._predicate, this._object,
      this._graph || this.DEFAULTGRAPH);
    this._restoreContext();
    // If the triple was the subject, continue by reading the predicate.
    if (this._subject === null) {
      this._subject = quad;
      return this._readPredicate;
    }
    // If the triple was the object, read context end.
    else {
      this._object = quad;
      return this._getContextEndReader();
    }
  }

  // ### `_getContextEndReader` gets the next reader function at the end of a context
  _getContextEndReader() {
    var contextStack = this._contextStack;
    if (!contextStack.length)
      return this._readPunctuation;

    switch (contextStack[contextStack.length - 1].type) {
    case 'blank':
      return this._readBlankNodeTail;
    case 'list':
      return this._readListItem;
    case 'formula':
      return this._readFormulaTail;
    case '<<':
      return this._readRDFStarTailOrGraph;
    }
  }

  // ### `_emit` sends a quad through the callback
  _emit(subject, predicate, object, graph) {
    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
  }

  // ### `_error` emits an error message through the callback
  _error(message, token) {
    var err = new Error(message + ' on line ' + token.line + '.');
    err.context = {
      token: token,
      line: token.line,
      previousToken: this._lexer.previousToken,
    };
    this._callback(err);
    this._callback = noop;
  }

  // ### `_resolveIRI` resolves an IRI against the base path
  _resolveIRI(iri) {
    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
  }

  // ### `_resolveRelativeIRI` resolves an IRI against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative
  _resolveRelativeIRI(iri) {
    // An empty relative IRI indicates the base IRI
    if (!iri.length)
      return this._base;
    // Decide resolving strategy based in the first character
    switch (iri[0]) {
    // Resolve relative fragment IRIs against the base IRI
    case '#': return this._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return this._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default:
      // Relative IRIs cannot contain a colon in the first path segment
      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986
  _removeDotSegments(iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!/(^|\/)\.\.?($|[/#?])/.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // ## Public methods

  // ### `parse` parses the N3 input and emits each parsed quad through the callback
  parse(input, quadCallback, prefixCallback) {
    var self = this;
    // The read callback is the next function to be executed when a token arrives.
    // We start reading in the top context.
    this._readCallback = this._readInTopContext;
    this._sparqlStyle = false;
    this._prefixes = Object.create(null);
    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)
                                             : 'b' + blankNodePrefix++ + '_';
    this._prefixCallback = prefixCallback || noop;
    this._inversePredicate = false;
    this._quantified = Object.create(null);

    // Parse synchronously if no quad callback is given
    if (!quadCallback) {
      var quads = [], error;
      this._callback = function (e, t) { e ? (error = e) : t && quads.push(t); };
      this._lexer.tokenize(input).every(function (token) {
        return self._readCallback = self._readCallback(token);
      });
      if (error) throw error;
      return quads;
    }

    // Parse asynchronously otherwise, executing the read callback when a token arrives
    this._callback = quadCallback;
    this._lexer.tokenize(input, function (error, token) {
      if (error !== null)
        self._callback(error), self._callback = noop;
      else if (self._readCallback)
        self._readCallback = self._readCallback(token);
    });
  }
}

// The empty function
function noop() {}

// Initializes the parser with the given data factory
function initDataFactory(parser, factory) {
  // Set factory methods
  var namedNode = factory.namedNode;
  parser._namedNode   = namedNode;
  parser._blankNode   = factory.blankNode;
  parser._literal     = factory.literal;
  parser._variable    = factory.variable;
  parser._quad        = factory.quad;
  parser.DEFAULTGRAPH = factory.defaultGraph();

  // Set common named nodes
  parser.RDF_FIRST  = namedNode(IRIs["a" /* default */].rdf.first);
  parser.RDF_REST   = namedNode(IRIs["a" /* default */].rdf.rest);
  parser.RDF_NIL    = namedNode(IRIs["a" /* default */].rdf.nil);
  parser.N3_FORALL  = namedNode(IRIs["a" /* default */].r.forAll);
  parser.N3_FORSOME = namedNode(IRIs["a" /* default */].r.forSome);
  parser.ABBREVIATIONS = {
    'a': namedNode(IRIs["a" /* default */].rdf.type),
    '=': namedNode(IRIs["a" /* default */].owl.sameAs),
    '>': namedNode(IRIs["a" /* default */].log.implies),
  };
  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');
}
initDataFactory(N3Parser_N3Parser.prototype, N3DataFactory);

// CONCATENATED MODULE: ./node_modules/n3/src/N3Writer.js
// **N3Writer** writes N3 documents.




const N3Writer_DEFAULTGRAPH = N3DataFactory.defaultGraph();

const { rdf: N3Writer_rdf, xsd: N3Writer_xsd } = IRIs["a" /* default */];

// Characters in literals that require escaping
var N3Writer_escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapedCharacters = {
      '\\': '\\\\', '"': '\\"', '\t': '\\t',
      '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f',
    };

// ## Placeholder class to represent already pretty-printed terms
class N3Writer_SerializedTerm extends Term {
  // Pretty-printed nodes are not equal to any other node
  // (e.g., [] does not equal [])
  equals() {
    return false;
  }
}

// ## Constructor
class N3Writer_N3Writer {
  constructor(outputStream, options) {
    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
    this._prefixRegex = /$0^/;

    // Shift arguments if the first argument is not a stream
    if (outputStream && typeof outputStream.write !== 'function')
      options = outputStream, outputStream = null;
    options = options || {};
    this._lists = options.lists;

    // If no output stream given, send the output as string through the end callback
    if (!outputStream) {
      var output = '';
      this._outputStream = {
        write(chunk, encoding, done) { output += chunk; done && done(); },
        end:   function (done) { done && done(null, output); },
      };
      this._endStream = true;
    }
    else {
      this._outputStream = outputStream;
      this._endStream = options.end === undefined ? true : !!options.end;
    }

    // Initialize writer, depending on the format
    this._subject = null;
    if (!(/triple|quad/i).test(options.format)) {
      this._graph = N3Writer_DEFAULTGRAPH;
      this._prefixIRIs = Object.create(null);
      options.prefixes && this.addPrefixes(options.prefixes);
    }
    else {
      this._writeQuad = this._writeQuadLine;
    }
  }

  // ## Private methods

  // ### Whether the current graph is the default graph
  get _inDefaultGraph() {
    return N3Writer_DEFAULTGRAPH.equals(this._graph);
  }

  // ### `_write` writes the argument to the output stream
  _write(string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  }

  // ### `_writeQuad` writes the quad to the output stream
  _writeQuad(subject, predicate, object, graph, done) {
    try {
      // Write the graph's label if it has changed
      if (!graph.equals(this._graph)) {
        // Close the previous graph and start the new one
        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\n' : '\n}\n')) +
                    (N3Writer_DEFAULTGRAPH.equals(graph) ? '' : this._encodeIriOrBlank(graph) + ' {\n'));
        this._graph = graph;
        this._subject = null;
      }
      // Don't repeat the subject if it's the same
      if (subject.equals(this._subject)) {
        // Don't repeat the predicate if it's the same
        if (predicate.equals(this._predicate))
          this._write(', ' + this._encodeObject(object), done);
        // Same subject, different predicate
        else
          this._write(';\n    ' +
                      this._encodePredicate(this._predicate = predicate) + ' ' +
                      this._encodeObject(object), done);
      }
      // Different subject; write the whole quad
      else
        this._write((this._subject === null ? '' : '.\n') +
                    this._encodeSubject(this._subject = subject) + ' ' +
                    this._encodePredicate(this._predicate = predicate) + ' ' +
                    this._encodeObject(object), done);
    }
    catch (error) { done && done(error); }
  }

  // ### `_writeQuadLine` writes the quad to the output stream as a single line
  _writeQuadLine(subject, predicate, object, graph, done) {
    // Write the quad without prefixes
    delete this._prefixMatch;
    this._write(this.quadToString(subject, predicate, object, graph), done);
  }

  // ### `quadToString` serializes a quad as a string
  quadToString(subject, predicate, object, graph) {
    return  this._encodeSubject(subject)   + ' ' +
            this._encodeIriOrBlank(predicate) + ' ' +
            this._encodeObject(object) +
            (graph && graph.value ? ' ' + this._encodeIriOrBlank(graph) + ' .\n' : ' .\n');
  }

  // ### `quadsToString` serializes an array of quads as a string
  quadsToString(quads) {
    return quads.map(function (t) {
      return this.quadToString(t.subject, t.predicate, t.object, t.graph);
    }, this).join('');
  }

  // ### `_encodeSubject` represents a subject
  _encodeSubject(entity) {
    return entity.termType === 'Quad' ?
      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);
  }

  // ### `_encodeIriOrBlank` represents an IRI or blank node
  _encodeIriOrBlank(entity) {
    // A blank node or list is represented as-is
    if (entity.termType !== 'NamedNode') {
      // If it is a list head, pretty-print it
      if (this._lists && (entity.value in this._lists))
        entity = this.list(this._lists[entity.value]);
      return 'id' in entity ? entity.id : '_:' + entity.value;
    }
    // Escape special characters
    var iri = entity.value;
    if (N3Writer_escape.test(iri))
      iri = iri.replace(escapeAll, characterReplacer);
    // Try to represent the IRI as prefixed name
    var prefixMatch = this._prefixRegex.exec(iri);
    return !prefixMatch ? '<' + iri + '>' :
           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);
  }

  // ### `_encodeLiteral` represents a literal
  _encodeLiteral(literal) {
    // Escape special characters
    var value = literal.value;
    if (N3Writer_escape.test(value))
      value = value.replace(escapeAll, characterReplacer);
    // Write the literal, possibly with type or language
    if (literal.language)
      return '"' + value + '"@' + literal.language;
    else if (literal.datatype.value !== N3Writer_xsd.string)
      return '"' + value + '"^^' + this._encodeIriOrBlank(literal.datatype);
    else
      return '"' + value + '"';
  }

  // ### `_encodePredicate` represents a predicate
  _encodePredicate(predicate) {
    return predicate.value === N3Writer_rdf.type ? 'a' : this._encodeIriOrBlank(predicate);
  }

  // ### `_encodeObject` represents an object
  _encodeObject(object) {
    switch (object.termType) {
    case 'Quad':
      return this._encodeQuad(object);
    case 'Literal':
      return this._encodeLiteral(object);
    default:
      return this._encodeIriOrBlank(object);
    }
  }

  // ### `_encodeQuad` encodes an RDF* quad
  _encodeQuad({ subject, predicate, object, graph }) {
    return `<<${
      this._encodeSubject(subject)} ${
      this._encodePredicate(predicate)} ${
      this._encodeObject(object)}${
      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;
  }

  // ### `_blockedWrite` replaces `_write` after the writer has been closed
  _blockedWrite() {
    throw new Error('Cannot write because the writer has been closed.');
  }

  // ### `addQuad` adds the quad to the output stream
  addQuad(subject, predicate, object, graph, done) {
    // The quad was given as an object, so shift parameters
    if (object === undefined)
      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);
    // The optional `graph` parameter was not provided
    else if (typeof graph === 'function')
      this._writeQuad(subject, predicate, object, N3Writer_DEFAULTGRAPH, graph);
    // The `graph` parameter was provided
    else
      this._writeQuad(subject, predicate, object, graph || N3Writer_DEFAULTGRAPH, done);
  }

  // ### `addQuads` adds the quads to the output stream
  addQuads(quads) {
    for (var i = 0; i < quads.length; i++)
      this.addQuad(quads[i]);
  }

  // ### `addPrefix` adds the prefix to the output stream
  addPrefix(prefix, iri, done) {
    var prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  }

  // ### `addPrefixes` adds the prefixes to the output stream
  addPrefixes(prefixes, done) {
    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;
    for (var prefix in prefixes) {
      var iri = prefixes[prefix];
      if (typeof iri !== 'string')
        iri = iri.value;
      hasPrefixes = true;
      // Finish a possible pending quad
      if (this._subject !== null) {
        this._write(this._inDefaultGraph ? '.\n' : '\n}\n');
        this._subject = null, this._graph = '';
      }
      // Store and write the prefix
      prefixIRIs[iri] = (prefix += ':');
      this._write('@prefix ' + prefix + ' <' + iri + '>.\n');
    }
    // Recreate the prefix matcher
    if (hasPrefixes) {
      var IRIlist = '', prefixList = '';
      for (var prefixIRI in prefixIRIs) {
        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
      }
      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
    }
    // End a prefix block with a newline
    this._write(hasPrefixes ? '\n' : '', done);
  }

  // ### `blank` creates a blank node with the given content
  blank(predicate, object) {
    var children = predicate, child, length;
    // Empty blank node
    if (predicate === undefined)
      children = [];
    // Blank node passed as blank(Term("predicate"), Term("object"))
    else if (predicate.termType)
      children = [{ predicate: predicate, object: object }];
    // Blank node passed as blank({ predicate: predicate, object: object })
    else if (!('length' in predicate))
      children = [predicate];

    switch (length = children.length) {
    // Generate an empty blank node
    case 0:
      return new N3Writer_SerializedTerm('[]');
    // Generate a non-nested one-triple blank node
    case 1:
      child = children[0];
      if (!(child.object instanceof N3Writer_SerializedTerm))
        return new N3Writer_SerializedTerm('[ ' + this._encodePredicate(child.predicate) + ' ' +
                                  this._encodeObject(child.object) + ' ]');
    // Generate a multi-triple or nested blank node
    default:
      var contents = '[';
      // Write all triples in order
      for (var i = 0; i < length; i++) {
        child = children[i];
        // Write only the object is the predicate is the same as the previous
        if (child.predicate.equals(predicate))
          contents += ', ' + this._encodeObject(child.object);
        // Otherwise, write the predicate and the object
        else {
          contents += (i ? ';\n  ' : '\n  ') +
                      this._encodePredicate(child.predicate) + ' ' +
                      this._encodeObject(child.object);
          predicate = child.predicate;
        }
      }
      return new N3Writer_SerializedTerm(contents + '\n]');
    }
  }

  // ### `list` creates a list node with the given content
  list(elements) {
    var length = elements && elements.length || 0, contents = new Array(length);
    for (var i = 0; i < length; i++)
      contents[i] = this._encodeObject(elements[i]);
    return new N3Writer_SerializedTerm('(' + contents.join(' ') + ')');
  }

  // ### `end` signals the end of the output stream
  end(done) {
    // Finish a possible pending quad
    if (this._subject !== null) {
      this._write(this._inDefaultGraph ? '.\n' : '\n}\n');
      this._subject = null;
    }
    // Disallow further writing
    this._write = this._blockedWrite;

    // Try to end the underlying stream, ensuring done is called exactly one time
    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };
    if (this._endStream) {
      try { return this._outputStream.end(singleDone); }
      catch (error) { /* error closing stream */ }
    }
    singleDone && singleDone();
  }
}

// Replaces a character by its escaped version
function characterReplacer(character) {
  // Replace a single character by its escaped version
  var result = escapedCharacters[character];
  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    }
    // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                 character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }
  return result;
}

// EXTERNAL MODULE: ./node_modules/readable-stream/readable-browser.js
var readable_browser = __webpack_require__(21);

// CONCATENATED MODULE: ./node_modules/n3/src/N3Store.js
// **N3Store** objects store N3 quads by graph in memory.




// ## Constructor
class N3Store_N3Store {
  constructor(quads, options) {
    // The number of quads is initially zero
    this._size = 0;
    // `_graphs` contains subject, predicate, and object indexes per graph
    this._graphs = Object.create(null);
    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
    // saving memory by using only numbers as keys in `_graphs`
    this._id = 0;
    this._ids = Object.create(null);
    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero
    this._entities = Object.create(null); // inverse of `_ids`
    // `_blankNodeIndex` is the index of the last automatically named blank node
    this._blankNodeIndex = 0;

    // Shift parameters if `quads` is not given
    if (!options && quads && !quads[0])
      options = quads, quads = null;
    options = options || {};
    this._factory = options.factory || N3DataFactory;

    // Add quads if passed
    if (quads)
      this.addQuads(quads);
  }

  // ## Public properties

  // ### `size` returns the number of quads in the store
  get size() {
    // Return the quad count if if was cached
    var size = this._size;
    if (size !== null)
      return size;

    // Calculate the number of quads by counting to the deepest level
    size = 0;
    var graphs = this._graphs, subjects, subject;
    for (var graphKey in graphs)
      for (var subjectKey in (subjects = graphs[graphKey].subjects))
        for (var predicateKey in (subject = subjects[subjectKey]))
          size += Object.keys(subject[predicateKey]).length;
    return this._size = size;
  }

  // ## Private methods

  // ### `_addToIndex` adds a quad to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.
  _addToIndex(index0, key0, key1, key2) {
    // Create layers as necessary
    var index1 = index0[key0] || (index0[key0] = {});
    var index2 = index1[key1] || (index1[key1] = {});
    // Setting the key to _any_ value signals the presence of the quad
    var existed = key2 in index2;
    if (!existed)
      index2[key2] = null;
    return !existed;
  }

  // ### `_removeFromIndex` removes a quad from a three-layered index
  _removeFromIndex(index0, key0, key1, key2) {
    // Remove the quad from the index
    var index1 = index0[key0], index2 = index1[key1], key;
    delete index2[key2];

    // Remove intermediary index layers if they are empty
    for (key in index2) return;
    delete index1[key1];
    for (key in index1) return;
    delete index0[key0];
  }

  // ### `_findInIndex` finds a set of quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting quad
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created quads.
  // If `callback` is given, each result is passed through it
  // and iteration halts when it returns truthy for any quad.
  // If instead `array` is given, each result is added to the array.
  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
    var tmp, index1, index2, varCount = !key0 + !key1 + !key2,
        // depending on the number of variables, keys or reverse index are faster
        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;

    // If a key is specified, use only that part of index 0.
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      var entity0 = entityKeys[value0];

      if (index1 = index0[value0]) {
        // If a key is specified, use only that part of index 1.
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          var entity1 = entityKeys[value1];

          if (index2 = index1[value1]) {
            // If a key is specified, use only that part of index 2, if it exists.
            var values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);
            // Create quads for all items found in index 2.
            for (var l = 0; l < values.length; l++) {
              var parts = { subject: null, predicate: null, object: null };
              parts[name0] = termFromId(entity0, this._factory);
              parts[name1] = termFromId(entity1, this._factory);
              parts[name2] = termFromId(entityKeys[values[l]], this._factory);
              var quad = this._factory.quad(
                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));
              if (array)
                array.push(quad);
              else if (callback(quad))
                return true;
            }
          }
        }
      }
    }
    return array;
  }

  // ### `_loop` executes the callback on all keys of index 0
  _loop(index0, callback) {
    for (var key0 in index0)
      callback(key0);
  }

  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0
  _loopByKey0(index0, key0, callback) {
    var index1, key1;
    if (index1 = index0[key0]) {
      for (key1 in index1)
        callback(key1);
    }
  }

  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0
  _loopByKey1(index0, key1, callback) {
    var key0, index1;
    for (key0 in index0) {
      index1 = index0[key0];
      if (index1[key1])
        callback(key0);
    }
  }

  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2
  _loopBy2Keys(index0, key0, key1, callback) {
    var index1, index2, key2;
    if ((index1 = index0[key0]) && (index2 = index1[key1])) {
      for (key2 in index2)
        callback(key2);
    }
  }

  // ### `_countInIndex` counts matching quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  _countInIndex(index0, key0, key1, key2) {
    var count = 0, tmp, index1, index2;

    // If a key is specified, count only that part of index 0
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      if (index1 = index0[value0]) {
        // If a key is specified, count only that part of index 1
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          if (index2 = index1[value1]) {
            // If a key is specified, count the quad if it exists
            if (key2) (key2 in index2) && count++;
            // Otherwise, count all quads
            else count += Object.keys(index2).length;
          }
        }
      }
    }
    return count;
  }

  // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.
  _getGraphs(graph) {
    if (!isString(graph))
      return this._graphs;
    var graphs = {};
    graphs[graph] = this._graphs[graph];
    return graphs;
  }

  // ### `_uniqueEntities` returns a function that accepts an entity ID
  // and passes the corresponding entity to callback if it hasn't occurred before.
  _uniqueEntities(callback) {
    var uniqueIds = Object.create(null), entities = this._entities;
    return function (id) {
      if (!(id in uniqueIds)) {
        uniqueIds[id] = true;
        callback(termFromId(entities[id]));
      }
    };
  }

  // ## Public methods

  // ### `addQuad` adds a new quad to the store.
  // Returns if the quad index has changed, if the quad did not already exist.
  addQuad(subject, predicate, object, graph) {
    // Shift arguments if a quad object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;

    // Convert terms to internal string representation
    subject = termToId(subject);
    predicate = termToId(predicate);
    object = termToId(object);
    graph = termToId(graph);

    // Find the graph that will contain the triple
    var graphItem = this._graphs[graph];
    // Create the graph if it doesn't exist yet
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };
      // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway
      Object.freeze(graphItem);
    }

    // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.
    var ids = this._ids;
    var entities = this._entities;
    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);

    var changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);
    this._addToIndex(graphItem.predicates, predicate, object,    subject);
    this._addToIndex(graphItem.objects,    object,    subject,   predicate);

    // The cached quad count is now invalid
    this._size = null;
    return changed;
  }

  // ### `addQuads` adds multiple quads to the store
  addQuads(quads) {
    for (var i = 0; i < quads.length; i++)
      this.addQuad(quads[i]);
  }

  // ### `import` adds a stream of quads to the store
  import(stream) {
    var self = this;
    stream.on('data', function (quad) { self.addQuad(quad); });
    return stream;
  }

  // ### `removeQuad` removes a quad from the store if it exists
  removeQuad(subject, predicate, object, graph) {
    // Shift arguments if a quad object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;

    // Convert terms to internal string representation
    subject = termToId(subject);
    predicate = termToId(predicate);
    object = termToId(object);
    graph = termToId(graph);

    // Find internal identifiers for all components
    // and verify the quad exists.
    var graphItem, ids = this._ids, graphs = this._graphs, subjects, predicates;
    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||
        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||
        !(subjects   = graphItem.subjects[subject]) ||
        !(predicates = subjects[predicate]) ||
        !(object in predicates))
      return false;

    // Remove it from all indexes
    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);
    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);
    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);
    if (this._size !== null) this._size--;

    // Remove the graph if it is empty
    for (subject in graphItem.subjects) return true;
    delete graphs[graph];
    return true;
  }

  // ### `removeQuads` removes multiple quads from the store
  removeQuads(quads) {
    for (var i = 0; i < quads.length; i++)
      this.removeQuad(quads[i]);
  }

  // ### `remove` removes a stream of quads from the store
  remove(stream) {
    var self = this;
    stream.on('data', function (quad) { self.removeQuad(quad); });
    return stream;
  }

  // ### `removeMatches` removes all matching quads from the store
  // Setting any field to `undefined` or `null` indicates a wildcard.
  removeMatches(subject, predicate, object, graph) {
    return this.remove(this.match(subject, predicate, object, graph));
  }

  // ### `deleteGraph` removes all triples with the given graph from the store
  deleteGraph(graph) {
    return this.removeMatches(null, null, null, graph);
  }

  // ### `getQuads` returns an array of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getQuads(subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject);
    predicate = predicate && termToId(predicate);
    object = object && termToId(object);
    graph = graph && termToId(graph);

    var quads = [], graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return quads;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId)
            // If subject and object are given, the object index will be the fastest
            this._findInIndex(content.objects, objectId, subjectId, predicateId,
                              'object', 'subject', 'predicate', graphId, null, quads);
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            this._findInIndex(content.subjects, subjectId, predicateId, null,
                              'subject', 'predicate', 'object', graphId, null, quads);
        }
        else if (predicateId)
          // If only predicate and possibly object are given, the predicate index will be the fastest
          this._findInIndex(content.predicates, predicateId, objectId, null,
                            'predicate', 'object', 'subject', graphId, null, quads);
        else if (objectId)
          // If only object is given, the object index will be the fastest
          this._findInIndex(content.objects, objectId, null, null,
                            'object', 'subject', 'predicate', graphId, null, quads);
        else
          // If nothing is given, iterate subjects and predicates first
          this._findInIndex(content.subjects, null, null, null,
                            'subject', 'predicate', 'object', graphId, null, quads);
      }
    }
    return quads;
  }

  // ### `match` returns a stream of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  match(subject, predicate, object, graph) {
    var stream = new readable_browser["Readable"]({ objectMode: true });

    // Initialize stream once it is being read
    stream._read = () => {
      for (var quad of this.getQuads(subject, predicate, object, graph))
        stream.push(quad);
      stream.push(null);
    };

    return stream;
  }

  // ### `countQuads` returns the number of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  countQuads(subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject);
    predicate = predicate && termToId(predicate);
    object = object && termToId(object);
    graph = graph && termToId(graph);

    var count = 0, graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return 0;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subject) {
          if (object)
            // If subject and object are given, the object index will be the fastest
            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
        }
        else if (predicate) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
        }
        else {
          // If only object is possibly given, the object index will be the fastest
          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
        }
      }
    }
    return count;
  }

  // ### `forEach` executes the callback on all quads.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forEach(callback, subject, predicate, object, graph) {
    this.some(function (quad) {
      callback(quad);
      return false;
    }, subject, predicate, object, graph);
  }

  // ### `every` executes the callback on all quads,
  // and returns `true` if it returns truthy for all them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  every(callback, subject, predicate, object, graph) {
    var some = false;
    var every = !this.some(function (quad) {
      some = true;
      return !callback(quad);
    }, subject, predicate, object, graph);
    return some && every;
  }

  // ### `some` executes the callback on all quads,
  // and returns `true` if it returns truthy for any of them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  some(callback, subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject);
    predicate = predicate && termToId(predicate);
    object = object && termToId(object);
    graph = graph && termToId(graph);

    var graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return false;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId) {
          // If subject and object are given, the object index will be the fastest
            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,
                                  'object', 'subject', 'predicate', graphId, callback, null))
              return true;
          }
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            if (this._findInIndex(content.subjects, subjectId, predicateId, null,
                                  'subject', 'predicate', 'object', graphId, callback, null))
              return true;
        }
        else if (predicateId) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          if (this._findInIndex(content.predicates, predicateId, objectId, null,
                                'predicate', 'object', 'subject', graphId, callback, null)) {
            return true;
          }
        }
        else if (objectId) {
          // If only object is given, the object index will be the fastest
          if (this._findInIndex(content.objects, objectId, null, null,
                                'object', 'subject', 'predicate', graphId, callback, null)) {
            return true;
          }
        }
        else
        // If nothing is given, iterate subjects and predicates first
        if (this._findInIndex(content.subjects, null, null, null,
                              'subject', 'predicate', 'object', graphId, callback, null)) {
          return true;
        }
      }
    }
    return false;
  }

  // ### `getSubjects` returns all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getSubjects(predicate, object, graph) {
    var results = [];
    this.forSubjects(function (s) { results.push(s); }, predicate, object, graph);
    return results;
  }

  // ### `forSubjects` executes the callback on all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forSubjects(callback, predicate, object, graph) {
    // Convert terms to internal string representation
    predicate = predicate && termToId(predicate);
    object = object && termToId(object);
    graph = graph && termToId(graph);

    var ids = this._ids, graphs = this._getGraphs(graph), content, predicateId, objectId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (predicateId) {
          if (objectId)
            // If predicate and object are given, the POS index is best.
            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);
          else
            // If only predicate is given, the SPO index is best.
            this._loopByKey1(content.subjects, predicateId, callback);
        }
        else if (objectId)
          // If only object is given, the OSP index is best.
          this._loopByKey0(content.objects, objectId, callback);
        else
          // If no params given, iterate all the subjects
          this._loop(content.subjects, callback);
      }
    }
  }

  // ### `getPredicates` returns all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getPredicates(subject, object, graph) {
    var results = [];
    this.forPredicates(function (p) { results.push(p); }, subject, object, graph);
    return results;
  }

  // ### `forPredicates` executes the callback on all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forPredicates(callback, subject, object, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject);
    object = object && termToId(object);
    graph = graph && termToId(graph);

    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, objectId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(subject) && !(subjectId = ids[subject]) ||
        isString(object)  && !(objectId  = ids[object]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (objectId)
            // If subject and object are given, the OSP index is best.
            this._loopBy2Keys(content.objects, objectId, subjectId, callback);
          else
            // If only subject is given, the SPO index is best.
            this._loopByKey0(content.subjects, subjectId, callback);
        }
        else if (objectId)
          // If only object is given, the POS index is best.
          this._loopByKey1(content.predicates, objectId, callback);
        else
          // If no params given, iterate all the predicates.
          this._loop(content.predicates, callback);
      }
    }
  }

  // ### `getObjects` returns all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getObjects(subject, predicate, graph) {
    var results = [];
    this.forObjects(function (o) { results.push(o); }, subject, predicate, graph);
    return results;
  }

  // ### `forObjects` executes the callback on all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forObjects(callback, subject, predicate, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject);
    predicate = predicate && termToId(predicate);
    graph = graph && termToId(graph);

    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, predicateId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject]) ||
        isString(predicate) && !(predicateId = ids[predicate]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (predicateId)
            // If subject and predicate are given, the SPO index is best.
            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);
          else
            // If only subject is given, the OSP index is best.
            this._loopByKey1(content.objects, subjectId, callback);
        }
        else if (predicateId)
          // If only predicate is given, the POS index is best.
          this._loopByKey0(content.predicates, predicateId, callback);
        else
          // If no params given, iterate all the objects.
          this._loop(content.objects, callback);
      }
    }
  }

  // ### `getGraphs` returns all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getGraphs(subject, predicate, object) {
    var results = [];
    this.forGraphs(function (g) { results.push(g); }, subject, predicate, object);
    return results;
  }

  // ### `forGraphs` executes the callback on all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forGraphs(callback, subject, predicate, object) {
    for (var graph in this._graphs) {
      this.some(function (quad) {
        callback(quad.graph);
        return true; // Halt iteration of some()
      }, subject, predicate, object, graph);
    }
  }

  // ### `createBlankNode` creates a new blank node, returning its name
  createBlankNode(suggestedName) {
    var name, index;
    // Generate a name based on the suggested name
    if (suggestedName) {
      name = suggestedName = '_:' + suggestedName, index = 1;
      while (this._ids[name])
        name = suggestedName + index++;
    }
    // Generate a generic blank node name
    else {
      do { name = '_:b' + this._blankNodeIndex++; }
      while (this._ids[name]);
    }
    // Add the blank node to the entities, avoiding the generation of duplicates
    this._ids[name] = ++this._id;
    this._entities[this._id] = name;
    return this._factory.blankNode(name.substr(2));
  }

  // ### `extractLists` finds and removes all list triples
  // and returns the items per list.
  extractLists({ remove = false, ignoreErrors = false } = {}) {
    var lists = {}; // has scalar keys so could be a simple Object
    var onError = ignoreErrors ? (() => true) :
                  ((node, message) => { throw new Error(`${node.value} ${message}`); });

    // Traverse each list from its tail
    var tails = this.getQuads(null, IRIs["a" /* default */].rdf.rest, IRIs["a" /* default */].rdf.nil, null);
    var toRemove = remove ? [...tails] : [];
    tails.forEach(tailQuad => {
      var items = [];             // the members found as objects of rdf:first quads
      var malformed = false;      // signals whether the current list is malformed
      var head;                   // the head of the list (_:b1 in above example)
      var headPos;                // set to subject or object when head is set
      var graph = tailQuad.graph; // make sure list is in exactly one graph

      // Traverse the list from tail to end
      var current = tailQuad.subject;
      while (current && !malformed) {
        var objectQuads = this.getQuads(null, null, current, null);
        var subjectQuads = this.getQuads(current, null, null, null);
        var i, quad, first = null, rest = null, parent = null;

        // Find the first and rest of this list node
        for (i = 0; i < subjectQuads.length && !malformed; i++) {
          quad = subjectQuads[i];
          if (!quad.graph.equals(graph))
            malformed = onError(current, 'not confined to single graph');
          else if (head)
            malformed = onError(current, 'has non-list arcs out');

          // one rdf:first
          else if (quad.predicate.value === IRIs["a" /* default */].rdf.first) {
            if (first)
              malformed = onError(current, 'has multiple rdf:first arcs');
            else
              toRemove.push(first = quad);
          }

          // one rdf:rest
          else if (quad.predicate.value === IRIs["a" /* default */].rdf.rest) {
            if (rest)
              malformed = onError(current, 'has multiple rdf:rest arcs');
            else
              toRemove.push(rest = quad);
          }

          // alien triple
          else if (objectQuads.length)
            malformed = onError(current, 'can\'t be subject and object');
          else {
            head = quad; // e.g. { (1 2 3) :p :o }
            headPos = 'subject';
          }
        }

        // { :s :p (1 2) } arrives here with no head
        // { (1 2) :p :o } arrives here with head set to the list.
        for (i = 0; i < objectQuads.length && !malformed; ++i) {
          quad = objectQuads[i];
          if (head)
            malformed = onError(current, 'can\'t have coreferences');
          // one rdf:rest
          else if (quad.predicate.value === IRIs["a" /* default */].rdf.rest) {
            if (parent)
              malformed = onError(current, 'has incoming rdf:rest arcs');
            else
              parent = quad;
          }
          else {
            head = quad; // e.g. { :s :p (1 2) }
            headPos = 'object';
          }
        }

        // Store the list item and continue with parent
        if (!first)
          malformed = onError(current, 'has no list head');
        else
          items.unshift(first.object);
        current = parent && parent.subject;
      }

      // Don't remove any quads if the list is malformed
      if (malformed)
        remove = false;
      // Store the list under the value of its head
      else if (head)
        lists[head[headPos].value] = items;
    });

    // Remove list quads if requested
    if (remove)
      this.removeQuads(toRemove);
    return lists;
  }
}

// Determines whether the argument is a string
function isString(s) {
  return typeof s === 'string' || s instanceof String;
}

// CONCATENATED MODULE: ./node_modules/n3/src/N3StreamParser.js
// **N3StreamParser** parses a text stream into a quad stream.



// ## Constructor
class N3StreamParser_N3StreamParser extends readable_browser["Transform"] {
  constructor(options) {
    super({ decodeStrings: true });
    this._readableState.objectMode = true;

    // Set up parser with dummy stream to obtain `data` and `end` callbacks
    var self = this, parser = new N3Parser_N3Parser(options), onData, onEnd;
    parser.parse({
      on: function (event, callback) {
        switch (event) {
        case 'data': onData = callback; break;
        case 'end':   onEnd = callback; break;
        }
      },
    },
      // Handle quads by pushing them down the pipeline
      function (error, quad) { error && self.emit('error', error) || quad && self.push(quad); },
      // Emit prefixes through the `prefix` event
      function (prefix, uri) { self.emit('prefix', prefix, uri); }
    );

    // Implement Transform methods through parser callbacks
    this._transform = function (chunk, encoding, done) { onData(chunk); done(); };
    this._flush = function (done) { onEnd(); done(); };
  }

  // ### Parses a stream of strings
  import(stream) {
    var self = this;
    stream.on('data',  function (chunk) { self.write(chunk); });
    stream.on('end',   function ()      { self.end(); });
    stream.on('error', function (error) { self.emit('error', error); });
    return this;
  }
}

// CONCATENATED MODULE: ./node_modules/n3/src/N3StreamWriter.js
// **N3StreamWriter** serializes a quad stream into a text stream.



// ## Constructor
class N3StreamWriter_N3StreamWriter extends readable_browser["Transform"] {
  constructor(options) {
    super({ encoding: 'utf8' });
    this._writableState.objectMode = true;

    // Set up writer with a dummy stream object
    var self = this;
    var writer = this._writer = new N3Writer_N3Writer({
      write: function (quad, encoding, callback) { self.push(quad); callback && callback(); },
      end: function (callback) { self.push(null); callback && callback(); },
    }, options);

    // Implement Transform methods on top of writer
    this._transform = function (quad, encoding, done) { writer.addQuad(quad, done); };
    this._flush = function (done) { writer.end(done); };
  }

// ### Serializes a stream of quads
  import(stream) {
    var self = this;
    stream.on('data',   function (quad)  { self.write(quad); });
    stream.on('end',    function ()      { self.end(); });
    stream.on('error',  function (error) { self.emit('error', error); });
    stream.on('prefix', function (prefix, iri) { self._writer.addPrefix(prefix, iri); });
    return this;
  }
}

// CONCATENATED MODULE: ./node_modules/n3/src/index.js













/***/ }),
/* 101 */
/***/ (function(module, exports) {

/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let promise

module.exports = typeof queueMicrotask === 'function'
  ? queueMicrotask
  // reuse resolved promise, and allocate it lazily
  : cb => (promise || (promise = Promise.resolve()))
    .then(cb)
    .catch(err => setTimeout(() => { throw err }, 0))


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2020 Anastasiia Byvsheva & Dan Brickley
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module.exports = {
    ShexValidator: __webpack_require__(103).Validator,
    ShaclValidator: __webpack_require__(205).Validator,
    inputToQuads: __webpack_require__(12).inputToQuads,
    parseJsonLd: __webpack_require__(12).parseJsonLd,
    parseMicrodata: __webpack_require__(12).parseMicrodata,
    parseRdfa: __webpack_require__(12).parseRdfa,
    parseTurtle: __webpack_require__(12).parseTurtle,
    randomUrl: __webpack_require__(12).randomUrl
}

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2020 Anastasiia Byvsheva & Dan Brickley
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const shex = __webpack_require__(104);
const utils = __webpack_require__(12);
const errors = __webpack_require__(90);

const TYPE = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';

class ValidationReport {
    /**
     * @param {object} jsonReport - report from shex.js, which needs to be simplified
     * @param {object} schema - parsed shapes in ShExJ format
     * @param {object} annotations
     */
    constructor(jsonReport, schema, annotations) {
        this.failures = [];
        this.shapes = new Map();
        schema.shapes.forEach(shape => {
            this.shapes.set(shape.id, this.getShapeCore(shape));
        });
        this.simplify(jsonReport, undefined, undefined);
        this.annotations = annotations;
    }

    /**
     * Simplifies shex.js nested report into a linear structure
     * @param {object} jsonReport
     * @param {string|undefined} parentNode
     * @param {string|undefined} parentShape
     */
    simplify(jsonReport, parentNode, parentShape) {

        if (Array.isArray(jsonReport)) {
            jsonReport.forEach(err => this.simplify(err, parentNode, parentShape));
            return;
        }
        // STEP 1: if report doesn't contain errors, MissingProperty @type or failures
        // that doesn't need to be added, return
        if (!jsonReport.type ||
            jsonReport.type === 'ShapeAndResults' ||
            jsonReport.type === 'ShapeOrResults' ||
            jsonReport.property === TYPE ||
            jsonReport.constraint && jsonReport.constraint.predicate === TYPE ||
            jsonReport.type === 'NodeConstraintViolation' ||
            jsonReport.type === 'ShapeOrFailure' ||
            jsonReport.type === 'ShapeTest') {
            return;
        }

        // STEP 2: if array or intermediate nested structure, simplify nested values
        if (jsonReport.type === 'ShapeAndFailure' ||
            jsonReport.type === 'Failure' ||
            jsonReport.type === 'SemActFailure' ||
            jsonReport.type === 'FailureList' ||
            jsonReport.type === 'ExtendedResults' ||
            jsonReport.type === 'ExtensionFailure' ||
            (!jsonReport.type) && jsonReport.errors) {
            const node = jsonReport.node;
            this.simplify(jsonReport.errors, node || parentNode, jsonReport.shape || parentShape);
            return;
        }
        // STEP 3: handle closed shape errors
        if (jsonReport.type === 'ClosedShapeViolation') {
            jsonReport.unexpectedTriples.forEach(trpl => {
                let failure = {
                    type: jsonReport.type,
                    property: trpl.predicate,
                    message: `Unexpected property ${trpl.predicate}`,
                    node: parentNode,
                    shape: parentShape
                }
                this.failures.push(failure);
            });
            return;
        }
        // STEP 4: fill out the failure
        const failure = {
            type: jsonReport.type,
            property: jsonReport.property || (jsonReport.constraint && jsonReport.constraint.predicate),
            message: '',
            node: (jsonReport.triple && jsonReport.triple.subject) || parentNode,
            shape: parentShape,
        };
        switch (jsonReport.type) {
            case 'TypeMismatch':
                failure.message = `Value provided for property ${failure.property} has a wrong type`;
                this.simplify(jsonReport.errors, undefined, undefined);
                break;
            case 'MissingProperty':
                failure.message = `Property ${failure.property} not found`;
                break;
            case 'ExcessTripleViolation':
                failure.message = `Property ${failure.property} has a cardinality issue`;
                break;
            case 'BooleanSemActFailure':
                if (!jsonReport.ctx.predicate) return;
                failure.message = `Property ${failure.property} failed semantic action with code js:'${jsonReport.code}'`;
                break;
            default:
                throw new errors.ShexValidationError(`Unknown failure type ${jsonReport.type}`);
        }
        this.failures.push(failure);
    }

    /**
     * Recursively parses ShExJ Shape structure to get the core Shape with properties
     * @param {object} node
     * @returns {object}
     */
    getShapeCore(node) {
        if (node.type === 'Shape') {
            return node;
        }
        if (node.shapeExprs) {
            return node.shapeExprs
                .map(/** @param {*} nestedStruct */nestedStruct => this.getShapeCore(nestedStruct))
                .filter(/** @param {*} nestedStruct */nestedStruct => nestedStruct !== undefined);
        }
    }

    /**
     * Gets annotations for specific property in shape from the ShExJ shape
     * @param {string} shape
     * @param {string} property
     * @returns {Map<string, string>}
     */
    getAnnotations(shape, property) {
        const mapper = new Map();
        if (!this.shapes.get(shape) || this.shapes.get(shape).length === 0) return mapper;
        let shapeObj = this.shapes.get(shape);
        shapeObj = Array.isArray(shapeObj) ? shapeObj[0] : shapeObj;
        let propStructure = shapeObj.expression.expressions
            .filter(/** @param {{predicate: string}} x */x => x.predicate === property)[0];
        if (!propStructure || !propStructure.annotations) return mapper;
        propStructure.annotations.forEach(/** @param {{predicate: string, object:{value: string}}} x*/x => {
            mapper.set(x.predicate, x.object.value);
        });
        return mapper;
    }

    /**
     * Transforms a temporary report failures to structured data report failures
     * @returns {[StructuredDataFailure]}
     */
    toStructuredDataReport() {
        return this.failures.map(err => {
            /** @type StructuredDataFailure */
            let failure = {
                property: err.property,
                message: err.message,
                shape: err.shape,
                severity: 'error'
            }
            if (err.shape && err.property && this.annotations) {
                let shapeAnnotations = this.getAnnotations(err.shape, err.property);
                for (const [key, value] of Object.entries(this.annotations)) {
                    let annotation = shapeAnnotations.get(value) || failure[key];
                    if (annotation) failure[key] = annotation;
                }
            }
            return failure;
        });
    }
}

class ShexValidator {
    /**
     * @param {object|string} shapes - ShExJ shapes
     * @param {{annotations:object|undefined}} options
     */
    constructor(shapes, options={}) {
        if (typeof shapes === 'string') {
            this.shapes = shex.Parser.construct('', {}, {}).parse(shapes);
        } else {
            this.shapes = shapes;
        }
        this.annotations = options.annotations;
    }

    /**
     * Validates data against ShEx shapes
     * @param {string} data
     * @param {string} shape -  identifier of the target shape
     * @param {{ baseUrl: string|undefined }} options
     * @returns {Promise<{baseUrl: string, quads: Store, report: [StructuredDataFailure]}>}
     */
    async validate(data, shape, options = {}) {
        const baseUrl = options.baseUrl || utils.randomUrl();
        const quads = await utils.inputToQuads(data, baseUrl);
        const db = shex.Util.makeN3DB(quads);
        const validator = shex.Validator.construct(this.shapes);
        const errors = new ValidationReport(validator.validate(db, [{
            node: baseUrl,
            shape: shape,
        }]), this.shapes, this.annotations);
        return {
            baseUrl: baseUrl,
            quads: quads,
            failures: errors.toStructuredDataReport()
        };
    }
}

/**
 * @typedef {{
 *     property: string,
 *     message: string,
 *     severity: 'error'|'warning'|'info',
 *     shape: string
 * }} StructuredDataFailure
 */

module.exports = {Validator: ShexValidator}

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 *
 * isIRI, isBlank, getLiteralType, getLiteralValue
 */

var ShExTerm = (function () {

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  const RdfLangString = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
  const XsdString = "http://www.w3.org/2001/XMLSchema#string";

  // N3.js:third_party/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function resolveRelativeIRI (base, iri) {

    if (absoluteIRI.test(iri))
      return iri

    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      let m = base.match(schemeAuthority);
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? m[1] : m[0]) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(base.replace(/[^\/?]*(?:\?.*)?$/, '') + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  function internalTerm (node) { // !!rdfjsTermToInternal
    switch (node.termType) {
    case ("NamedNode"):
      return node.value;
    case ("BlankNode"):
      return "_:" + node.value;
    case ("Literal"):
      return "\"" + node.value + "\"" + (
        node.datatypeString === RdfLangString
          ? "@" + node.language
          : node.datatypeString === XsdString
          ? ""
          : "^^" + node.datatypeString
      );
    default: throw Error("unknown RDFJS node type: " + JSON.stringify(node))
    }
  }

  function internalTriple (triple) { // !!rdfjsTripleToInternal
    return {
      subject: internalTerm(triple.subject),
      predicate: internalTerm(triple.predicate),
      object: internalTerm(triple.object)
    };
  }

  function externalTerm (node, factory) { // !!intermalTermToRdfjs
    if (isIRI(node)) {
      return factory.namedNode(node);
    } else if (isBlank(node)) {
      return factory.blankNode(node.substr(2));
    } else if (isLiteral(node)) {
      let dtOrLang = getLiteralLanguage(node) ||
          (getLiteralType(node) === XsdString
           ? null // seems to screw up N3.js
           : factory.namedNode(getLiteralType(node)))
      return factory.literal(getLiteralValue(node), dtOrLang)
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  }

  function externalTriple (triple, factory) { // !!rename internalTripleToRdjs
    return factory.quad(
      externalTerm(triple.subject, factory),
      externalTerm(triple.predicate, factory),
      externalTerm(triple.object, factory)
    );
  }

  function intermalTermToTurtle (node, base, prefixes) {
    if (isIRI(node)) {
      // if (node === RDF_TYPE) // only valid in Turtle predicates
      //   return "a";

      // Escape special characters
      if (escape.test(node))
        node = node.replace(escapeAll, characterReplacer);
      var pref = Object.keys(prefixes).find(pref => node.startsWith(prefixes[pref]));
      if (pref) {
        var rest = node.substr(prefixes[pref].length);
        if (rest.indexOf("\\") === -1) // could also say no more than n of these: [...]
          return pref + ":" + rest.replace(/([~!$&'()*+,;=/?#@%])/g, '\\' + "$1");
      }
      if (node.startsWith(base)) {
        return "<" + node.substr(base.length) + ">";
      } else {
        return "<" + node + ">";
      }
    } else if (isBlank(node)) {
      return node;
    } else if (isLiteral(node)) {
      var value = getLiteralValue(node);
      var type = getLiteralType(node);
      var language = getLiteralLanguage(node);
      // Escape special characters
      if (escape.test(value))
        value = value.replace(escapeAll, characterReplacer);
      // Write the literal, possibly with type or language
      if (language)
        return '"' + value + '"@' + language;
      else if (type && type !== "http://www.w3.org/2001/XMLSchema#string")
        return '"' + value + '"^^' + this.intermalTermToTurtle(type, base, prefixes);
      else
        return '"' + value + '"';
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  }

  // Tests whether the given entity (triple object) represents an IRI in the N3 library
  function isIRI (entity) {
    if (typeof entity !== 'string')
      return false;
    else if (entity.length === 0)
      return true;
    else {
      var firstChar = entity[0];
      return firstChar !== '"' && firstChar !== '_';
    }
  }

  // Tests whether the given entity (triple object) represents a literal in the N3 library
  function isLiteral (entity) {
    return typeof entity === 'string' && entity[0] === '"';
  }

  // Tests whether the given entity (triple object) represents a blank node in the N3 library
  function isBlank (entity) {
    return typeof entity === 'string' && entity.substr(0, 2) === '_:';
  }

  // Tests whether the given entity represents the default graph
  function isDefaultGraph (entity) {
    return !entity;
  }

  // Tests whether the given triple is in the default graph
  function inDefaultGraph (triple) {
    return !triple.graph;
  }

  // Gets the string value of a literal in the N3 library
  function getLiteralValue (literal) {
    var match = /^"([^]*)"/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1];
  }

  // Gets the type of a literal in the N3 library
  function getLiteralType (literal) {
    var match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] || (match[2] ? RdfLangString : XsdString);
  }

  // Gets the language of a literal in the N3 library
  function getLiteralLanguage (literal) {
    var match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] ? match[1].toLowerCase() : '';
  }


// rdf:type predicate (for 'a' abbreviation)
var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_TYPE   = RDF_PREFIX + 'type';

// Characters in literals that require escaping
var escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapeReplacements = {
      '\\': '\\\\', '"': '\\"', '\t': '\\t',
      '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f',
    };

  // Replaces a character by its escaped version
  function characterReplacer (character) {
    // Replace a single character by its escaped version
    var result = escapeReplacements[character];
    if (result === undefined) {
      // Replace a single character with its 4-bit unicode escape sequence
      if (character.length === 1) {
        result = character.charCodeAt(0).toString(16);
        result = '\\u0000'.substr(0, 6 - result.length) + result;
      }
      // Replace a surrogate pair with its 8-bit unicode escape sequence
      else {
        result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                  character.charCodeAt(1) + 0x2400).toString(16);
        result = '\\U00000000'.substr(0, 10 - result.length) + result;
      }
    }
    return result;
  }

  return {
    RdfLangString: RdfLangString,
    XsdString: XsdString,
    resolveRelativeIRI: resolveRelativeIRI,
    isIRI: isIRI,
    isLiteral: isLiteral,
    isBlank: isBlank,
    isDefaultGraph: isDefaultGraph,
    inDefaultGraph: inDefaultGraph,
    getLiteralValue: getLiteralValue,
    getLiteralType: getLiteralType,
    getLiteralLanguage: getLiteralLanguage,
    internalTerm: internalTerm,
    internalTriple: internalTriple,
    externalTerm: externalTerm,
    externalTriple: externalTriple,
    intermalTermToTurtle: intermalTermToTurtle,
  }
})();

if (true)
  module.exports = ShExTerm; // node environment


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// **ShExUtil** provides ShEx utility functions

var ShExUtil = (function () {
var RdfTerm = __webpack_require__(0);
const Visitor = __webpack_require__(2)
const Hierarchy = __webpack_require__(5)

const SX = {};
SX._namespace = "http://www.w3.org/ns/shex#";
["Schema", "@context", "imports", "startActs", "start", "shapes",
 "ShapeDecl", "ShapeOr", "ShapeAnd", "shapeExprs", "nodeKind",
 "NodeConstraint", "iri", "bnode", "nonliteral", "literal", "datatype", "length", "minlength", "maxlength", "pattern", "flags", "mininclusive", "minexclusive", "maxinclusive", "maxexclusive", "totaldigits", "fractiondigits", "values",
 "ShapeNot", "shapeExpr",
 "Shape", "abstract", "closed", "extra", "expression", "extends", "restricts", "semActs",
 "ShapeRef", "reference", "ShapeExternal",
 "EachOf", "OneOf", "expressions", "min", "max", "annotation",
 "TripleConstraint", "inverse", "negated", "predicate", "valueExpr",
 "Inclusion", "include", "Language", "languageTag",
 "IriStem", "LiteralStem", "LanguageStem", "stem",
 "IriStemRange", "LiteralStemRange", "LanguageStemRange", "exclusion",
 "Wildcard", "SemAct", "name", "code",
 "Annotation", "object"].forEach(p => {
  SX[p] = SX._namespace+p;
});
const RDF = {};
RDF._namespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
["type", "first", "rest", "nil"].forEach(p => {
  RDF[p] = RDF._namespace+p;
});
const XSD = {}
XSD._namespace = "http://www.w3.org/2001/XMLSchema#";
["anyURI"].forEach(p => {
  XSD[p] = XSD._namespace+p;
});
const OWL = {}
OWL._namespace = "http://www.w3.org/2002/07/owl#";
["Thing"].forEach(p => {
  OWL[p] = OWL._namespace+p;
});

const Missed = {}; // singleton
var UNBOUNDED = -1;

function extend (base) {
  if (!base) base = {};
  for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
    for (var name in arg)
      base[name] = arg[name];
  return base;
}

    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }

  function isShapeRef (expr) {
    return typeof expr === "string" // test for JSON-LD @ID
  }
  let isInclusion = isShapeRef;

        function ldify (term) {
          if (term[0] !== "\"")
            return term;
          var ret = { value: RdfTerm.getLiteralValue(term) };
          var dt = RdfTerm.getLiteralType(term);
          if (dt &&
              dt !== "http://www.w3.org/2001/XMLSchema#string" &&
              dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString")
            ret.type = dt;
          var lang = RdfTerm.getLiteralLanguage(term)
          if (lang)
            ret.language = lang;
          return ret;
        }
var ShExUtil = {

  SX: SX,
  RDF: RDF,
  version: function () {
    return "0.5.0";
  },

  Visitor: Visitor,
  index: Visitor.index,

  // tests
  // console.warn("HERE:", ShExJtoAS({"type":"Schema","shapes":[{"id":"http://all.example/S1","type":"Shape","expression":
  //  { "id":"http://all.example/S1e", "type":"EachOf","expressions":[ ] },
  // // { "id":"http://all.example/S1e","type":"TripleConstraint","predicate":"http://all.example/p1"},
  // "extra":["http://all.example/p3","http://all.example/p1","http://all.example/p2"]
  // }]}).shapes['http://all.example/S1']);

  ShExJtoAS: function (schema) {
    var _ShExUtil = this;
    schema._prefixes = schema.prefixes || {  };
    schema._index = this.index(schema);
    return schema;
  },

  AStoShExJ: function (schema, abbreviate) {
    schema["@context"] = schema["@context"] || "http://www.w3.org/ns/shex.jsonld";
    delete schema["_index"];
    delete schema["_prefixes"];
    return schema;
  },

  ShExRVisitor: function (knownShapeExprs) {
    var v = ShExUtil.Visitor();
    var knownExpressions = {};
    var oldVisitShapeExpr = v.visitShapeExpr,
        oldVisitValueExpr = v.visitValueExpr,
        oldVisitExpression = v.visitExpression;
    v.keepShapeExpr = oldVisitShapeExpr;

    v.visitShapeExpr = v.visitValueExpr = function (expr, label) {
      if (typeof expr === "string")
        return expr;
      if ("id" in expr) {
        if (knownShapeExprs.indexOf(expr.id) !== -1 || Object.keys(expr).length === 1)
          return expr.id;
        delete expr.id;
      }
      return oldVisitShapeExpr.call(this, expr, label);
    };

    v.visitExpression = function (expr) {
      if (typeof expr === "string") // shortcut for recursive references e.g. 1Include1 and ../doc/TODO.md
        return expr;
      if ("id" in expr) {
        if (expr.id in knownExpressions) {
          knownExpressions[expr.id].refCount++;
          return expr.id;
        }
      }
      var ret = oldVisitExpression.call(this, expr);
      // Everything from RDF has an ID, usually a BNode.
      knownExpressions[expr.id] = { refCount: 1, expr: ret };
      return ret;
    }

    v.cleanIds = function () {
      for (var k in knownExpressions) {
        var known = knownExpressions[k];
        if (known.refCount === 1 && RdfTerm.isBlank(known.expr.id))
          delete known.expr.id;
      };
    }

    return v;
  },


  // tests
  // var shexr = ShExUtil.ShExRtoShExJ({ "type": "Schema", "shapes": [
  //   { "id": "http://a.example/S1", "type": "Shape",
  //     "expression": {
  //       "type": "TripleConstraint", "predicate": "http://a.example/p1",
  //       "valueExpr": {
  //         "type": "ShapeAnd", "shapeExprs": [
  //           { "type": "NodeConstraint", "nodeKind": "bnode" },
  //           { "id": "http://a.example/S2", "type": "Shape",
  //             "expression": {
  //               "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
  //           //            "http://a.example/S2"
  //         ] } } },
  //   { "id": "http://a.example/S2", "type": "Shape",
  //     "expression": {
  //       "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
  // ] });
  // console.warn("HERE:", shexr.shapes[0].expression.valueExpr);
  // ShExUtil.ShExJtoAS(shexr);
  // console.warn("THERE:", shexr.shapes["http://a.example/S1"].expression.valueExpr);


  ShExRtoShExJ: function (schema) {
    // compile a list of known shapeExprs
    var knownShapeExprs = [];
    if ("shapes" in schema)
      knownShapeExprs = knownShapeExprs.concat(schema.shapes.map(sh => { return sh.id; }));

    // normalize references to those shapeExprs
    var v = this.ShExRVisitor(knownShapeExprs);
    if ("start" in schema)
      schema.start = v.visitShapeExpr(schema.start);
    if ("shapes" in schema)
      schema.shapes = schema.shapes.map(sh => {
        return sh.type === SX.ShapeDecl ?
          {
            type: "ShapeDecl",
            id: sh.id,
            abstract: sh.abstract,
            shapeExpr: v.visitShapeExpr(sh.shapeExpr)
          } :
          v.keepShapeExpr(sh);
      });

    // remove extraneous BNode IDs
    v.cleanIds();
    return schema;
  },

  valGrep: function (obj, type, f) {
    var _ShExUtil = this;
    var ret = [];
    for (var i in obj) {
      var o = obj[i];
      if (typeof o === "object") {
        if ("type" in o && o.type === type)
          ret.push(f(o));
        ret.push.apply(ret, _ShExUtil.valGrep(o, type, f));
      }
    }
    return ret;
  },

  n3jsToTurtle: function (res) {
    function termToLex (node) {
      return typeof node === "object" ? ("\"" + node.value + "\"" + (
        "type" in node ? "^^<" + node.type + ">" :
          "language" in node ? "@" + node.language :
          ""
      )) :
      RdfTerm.isIRI(node) ? "<" + node + ">" :
      RdfTerm.isBlank(node) ? node :
      "???";
    }
    return this.valGrep(res, "TestedTriple", function (t) {
      return ["subject", "predicate", "object"].map(k => {
        return termToLex(t[k]);
      }).join(" ")+" .";
    });
  },

  valToN3js: function (res, factory) {
    return this.valGrep(res, "TestedTriple", function (t) {
      var ret = JSON.parse(JSON.stringify(t));
      if (typeof t.object === "object")
        ret.object = ("\"" + t.object.value + "\"" + (
          "type" in t.object ? "^^" + t.object.type :
            "language" in t.object ? "@" + t.object.language :
            ""
        ));
      return RdfTerm.externalTriple(ret, factory);
    });
  },

  n3jsToTurtle: function (n3js) {
    function termToLex (node) {
      if (RdfTerm.isIRI(node))
        return "<" + node + ">";
      if (RdfTerm.isBlank(node))
        return node;
      var t = RdfTerm.getLiteralType(node);
      if (t && t !== "http://www.w3.org/2001/XMLSchema#string")
        return "\"" + RdfTerm.getLiteralValue(node) + "\"" +
        "^^<" + t + ">";
      return node;
    }
    return n3js.map(function (t) {
      return ["subject", "predicate", "object"].map(k => {
        return termToLex(t[k]);
      }).join(" ")+" .";
    });
  },

  /* canonicalize: move all tripleExpression references to their first expression.
   *
   */
  canonicalize: function (schema, trimIRI) {
    var ret = JSON.parse(JSON.stringify(schema));
    ret["@context"] = ret["@context"] || "http://www.w3.org/ns/shex.jsonld";
    delete ret._prefixes;
    delete ret._base;
    let index = ret._index || this.index(schema);
    delete ret._index;
    let sourceMap = ret._sourceMap;
    delete ret._sourceMap;
    // Don't delete ret.productions as it's part of the AS.
    var v = ShExUtil.Visitor();
    var knownExpressions = [];
    var oldVisitInclusion = v.visitInclusion, oldVisitExpression = v.visitExpression;
    v.visitInclusion = function (inclusion) {
      if (knownExpressions.indexOf(inclusion) === -1 &&
          inclusion in index.tripleExprs) {
        knownExpressions.push(inclusion)
        return oldVisitExpression.call(v, index.tripleExprs[inclusion]);
      }
      return oldVisitInclusion.call(v, inclusion);
    };
    v.visitExpression = function (expression) {
      if (typeof expression === "object" && "id" in expression) {
        if (knownExpressions.indexOf(expression.id) === -1) {
          knownExpressions.push(expression.id)
          return oldVisitExpression.call(v, index.tripleExprs[expression.id]);
        }
        return expression.id; // Inclusion
      }
      return oldVisitExpression.call(v, expression);
    };
    if (trimIRI) {
      v.visitIRI = function (i) {
        return i.replace(trimIRI, "");
      }
      if ("imports" in ret)
        ret.imports = v.visitImports(ret.imports);
    }
    if ("shapes" in ret) {
      ret.shapes = Object.keys(index.shapeExprs).sort().map(k => {
        if ("extra" in index.shapeExprs[k])
          index.shapeExprs[k].extra.sort();
        return v.visitShapeDecl(index.shapeExprs[k]);
      });
    }
    return ret;
  },

  BiDiClosure: function () {
    return {
      needs: {},
      neededBy: {},
      inCycle: [],
      test: function () {
        function expect (l, r) { var ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+" !== "+rs); }
        // this.add(1, 2); expect(this.needs, { 1:[2]                     }); expect(this.neededBy, { 2:[1]                     });
        // this.add(3, 4); expect(this.needs, { 1:[2], 3:[4]              }); expect(this.neededBy, { 2:[1], 4:[3]              });
        // this.add(2, 3); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1] });

        this.add(2, 3); expect(this.needs, { 2:[3]                     }); expect(this.neededBy, { 3:[2]                     });
        this.add(1, 2); expect(this.needs, { 1:[2,3], 2:[3]            }); expect(this.neededBy, { 3:[2,1], 2:[1]            });
        this.add(1, 3); expect(this.needs, { 1:[2,3], 2:[3]            }); expect(this.neededBy, { 3:[2,1], 2:[1]            });
        this.add(3, 4); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(6, 7); expect(this.needs, { 6:[7]                    , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6]                    , 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(5, 6); expect(this.needs, { 5:[6,7], 6:[7]           , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5]           , 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(5, 7); expect(this.needs, { 5:[6,7], 6:[7]           , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5]           , 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(7, 8); expect(this.needs, { 5:[6,7,8], 6:[7,8], 7:[8], 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5], 8:[7,6,5], 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(4, 5);
        expect(this.needs,    { 1:[2,3,4,5,6,7,8], 2:[3,4,5,6,7,8], 3:[4,5,6,7,8], 4:[5,6,7,8], 5:[6,7,8], 6:[7,8], 7:[8] });
        expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1], 5:[4,3,2,1], 6:[5,4,3,2,1], 7:[6,5,4,3,2,1], 8:[7,6,5,4,3,2,1] });
      },
      add: function (needer, needie, negated) {
        var r = this;
        if (!(needer in r.needs))
          r.needs[needer] = [];
        if (!(needie in r.neededBy))
          r.neededBy[needie] = [];

        // // [].concat.apply(r.needs[needer], [needie], r.needs[needie]). emitted only last element
        r.needs[needer] = r.needs[needer].concat([needie], r.needs[needie]).
          filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });
        // // [].concat.apply(r.neededBy[needie], [needer], r.neededBy[needer]). emitted only last element
        r.neededBy[needie] = r.neededBy[needie].concat([needer], r.neededBy[needer]).
          filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });

        if (needer in this.neededBy) this.neededBy[needer].forEach(function (e) {
          r.needs[e] = r.needs[e].concat([needie], r.needs[needie]).
            filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });
        });

        if (needie in this.needs) this.needs[needie].forEach(function (e) {
          r.neededBy[e] = r.neededBy[e].concat([needer], r.neededBy[needer]).
            filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; })
        });
        // this.neededBy[needie].push(needer);

        if (r.needs[needer].indexOf(needer) !== -1)
          r.inCycle = r.inCycle.concat(r.needs[needer]);
      },
      trim: function () {
        function _trim (a) {
          // filter(function (el, ord, l) { return l.indexOf(el) === ord; })
          for (var i = a.length-1; i > -1; --i)
            if (a.indexOf(a[i]) < i)
              a.splice(i, i+1);
        }
        for (k in this.needs)
          _trim(this.needs[k]);
        for (k in this.neededBy)
          _trim(this.neededBy[k]);
      },
      foundIn: {},
      addIn: function (tripleExpr, shapeExpr) {
        this.foundIn[tripleExpr] = shapeExpr;
      }
    }
  },
  /** @@TODO tests
   * options:
   *   no: don't do anything; just report nestable shapes
   *   transform: function to change shape labels
   */
  nestShapes: function (schema, options = {}) {
    var _ShExUtil = this;
    const index = schema._index || this.index(schema);
    if (!('no' in options)) { options.no = false }

    let shapeLabels = Object.keys(index.shapeExprs || [])
    let shapeReferences = {}
    shapeLabels.forEach(label => {
      let shape = index.shapeExprs[label]
      noteReference(label, null) // just note the shape so we have a complete list at the end
      shape = _ShExUtil.skipDecl(shape)
      if (shape.type === 'Shape') {
        if ('extends' in shape) {
          shape.extends.forEach(
             // !!! assumes simple reference, not e.g. AND
            parent => noteReference(parent, shape)
          )
        }
        if ('expression' in shape) {
          (_ShExUtil.simpleTripleConstraints(shape) || []).forEach(tc => {
            let target = _ShExUtil.getValueType(tc.valueExpr, true)
            noteReference(target, {type: 'tc', shapeLabel: label, tc: tc})
          })
        }
      } else if (shape.type === 'NodeConstraint') {
        // can't have any refs to other shapes
      } else {
        throw Error('nestShapes currently only supports Shapes and NodeConstraints')
      }
    })
    let nestables = Object.keys(shapeReferences).filter(
      label => shapeReferences[label].length === 1
        && shapeReferences[label][0].type === 'tc' // no inheritance support yet
        && _ShExUtil.skipDecl(index.shapeExprs[label]).type === 'Shape' // Don't nest e.g. valuesets for now
    ).filter(
      nestable => !('noNestPattern' in options)
        || !nestable.match(RegExp(options.noNestPattern))
    ).reduce((acc, label) => {
      acc[label] = {
        referrer: shapeReferences[label][0].shapeLabel,
        predicate: shapeReferences[label][0].tc.predicate
      }
      return acc
    }, {})
    if (!options.no) {
      let oldToNew = {}

      if (options.rename) {
      if (!('transform' in options)) {
        options.transform = (function () {
          let map = shapeLabels.reduce((acc, k, idx) => {
            acc[k] = '_:transformed' + idx
            return acc
          }, {})
          return function (id, shapeExpr) {
            return map[id]
          }
        })()
      }
      Object.keys(nestables).forEach(oldName => {
        let shapeExpr = index.shapeExprs[oldName]
        let newName = options.transform(oldName, shapeExpr)
        oldToNew[oldName] = newName
        shapeLabels[shapeLabels.indexOf(oldName)] = newName
        nestables[newName] = nestables[oldName]
        nestables[newName].was = oldName
        delete nestables[oldName]
        index.shapeExprs[newName] = index.shapeExprs[oldName]
        delete index.shapeExprs[oldName]
        if (shapeReferences[oldName].length !== 1) { throw Error('assertion: ' + oldName + ' doesn\'t have one reference: [' + shapeReferences[oldName] + ']') }
        let ref = shapeReferences[oldName][0]
        if (ref.type === 'tc') {
          if (ref.tc.valueExpr.type === 'ShapeRef') {
            ref.tc.valueExpr.reference = newName
          } else {
            throw Error('assertion: rename not implemented for TripleConstraint expr: ' + ref.tc.valueExpr)
            // _ShExUtil.setValueType(ref, newName)
          }
        } else if (ref.type === 'Shape') {
          throw Error('assertion: rename not implemented for Shape: ' + ref)
        } else {
          throw Error('assertion: ' + ref.type + ' not TripleConstraint or Shape')
        }
      })

      Object.keys(nestables).forEach(k => {
        let n = nestables[k]
        if (n.referrer in oldToNew) {
          n.newReferrer = oldToNew[n.referrer]
        }
      })

      // Restore old order for more concise diffs.
      let shapesCopy = {}
      shapeLabels.forEach(label => shapesCopy[label] = index.shapeExprs[label])
      index.shapeExprs = shapesCopy
      } else {
        const doomed = []
        const ids = schema.shapes.map(s => s.id)
        Object.keys(nestables).forEach(oldName => {
          shapeReferences[oldName][0].tc.valueExpr = index.shapeExprs[oldName].shapeExpr
          const delme = ids.indexOf(oldName)
          if (schema.shapes[delme].id !== oldName)
            throw Error('assertion: found ' + schema.shapes[delme].id + ' instead of ' + oldName)
          doomed.push(delme)
          delete index.shapeExprs[oldName]
        })
        doomed.sort((l, r) => r - l).forEach(delme => {
          const id = schema.shapes[delme].id
          if (!nestables[id])
            throw Error('deleting unexpected shape ' + id)
          schema.shapes.splice(delme, 1)
        })
      }
    }
    // console.dir(nestables)
    // console.dir(shapeReferences)
    return nestables

    function noteReference (id, reference) {
      if (!(id in shapeReferences)) {
        shapeReferences[id] = []
      }
      if (reference) {
        shapeReferences[id].push(reference)
      }
    }
  },

  /** @@TODO tests
   *
   */
  getPredicateUsage: function (schema, untyped = {}) {
    var _ShExUtil = this;

    // populate shapeHierarchy
    let shapeHierarchy = Hierarchy.create()
    Object.keys(schema.shapes).forEach(label => {
      let shapeExpr = _ShExUtil.skipDecl(schema.shapes[label])
      if (shapeExpr.type === 'Shape') {
        (shapeExpr.extends || []).forEach(
          superShape => shapeHierarchy.add(superShape.reference, label)
        )
      }
    })
    Object.keys(schema.shapes).forEach(label => {
      if (!(label in shapeHierarchy.parents))
        shapeHierarchy.parents[label] = []
    })

    let predicates = { } // IRI->{ uses: [shapeLabel], commonType: shapeExpr }
    Object.keys(schema.shapes).forEach(shapeLabel => {
      let shapeExpr = _ShExUtil.skipDecl(schema.shapes[shapeLabel])
      if (shapeExpr.type === 'Shape') {
        let tcs = _ShExUtil.simpleTripleConstraints(shapeExpr) || []
        tcs.forEach(tc => {
          let newType = _ShExUtil.getValueType(tc.valueExpr)
          if (!(tc.predicate in predicates)) {
            predicates[tc.predicate] = {
              uses: [shapeLabel],
              commonType: newType,
              polymorphic: false
            }
            if (typeof newType === 'object') {
              untyped[tc.predicate] = {
                shapeLabel,
                predicate: tc.predicate,
                newType,
                references: []
              }
            }
          } else {
            predicates[tc.predicate].uses.push(shapeLabel)
            let curType = predicates[tc.predicate].commonType
            if (typeof curType === 'object' || curType === null) {
              // another use of a predicate with no commonType
              // console.warn(`${shapeLabel} ${tc.predicate}:${newType} uses untypable predicate`)
              untyped[tc.predicate].references.push({ shapeLabel, newType })
            } else if (typeof newType === 'object') {
              // first use of a predicate with no detectable commonType
              predicates[tc.predicate].commonType = null
              untyped[tc.predicate] = {
                shapeLabel,
                predicate: tc.predicate,
                curType,
                newType,
                references: []
              }
            } else if (curType === newType) {
              ; // same type again
            } else if (shapeHierarchy.parents[curType] && shapeHierarchy.parents[curType].indexOf(newType) !== -1) {
              predicates[tc.predicate].polymorphic = true; // already covered by current commonType
            } else {
              let idx = shapeHierarchy.parents[newType] ? shapeHierarchy.parents[newType].indexOf(curType) : -1
              if (idx === -1) {
                let intersection = shapeHierarchy.parents[curType]
                    ? shapeHierarchy.parents[curType].filter(
                      lab => -1 !== shapeHierarchy.parents[newType].indexOf(lab)
                    )
                    : []
                if (intersection.length === 0) {
                  untyped[tc.predicate] = {
                    shapeLabel,
                    predicate: tc.predicate,
                    curType,
                    newType,
                    references: []
                  }
                  // console.warn(`${shapeLabel} ${tc.predicate} : ${newType} isn\'t related to ${curType}`)
                  predicates[tc.predicate].commonType = null
                } else {
                  predicates[tc.predicate].commonType = intersection[0]
                  predicates[tc.predicate].polymorphic = true
                }
              } else {
                predicates[tc.predicate].commonType = shapeHierarchy.parents[newType][idx]
                predicates[tc.predicate].polymorphic = true
              }
            }
          }
        })
      }
    })
    return predicates
  },

  /** @@TODO tests
   *
   */
  simpleTripleConstraints: function (shape) {
    if (!('expression' in shape)) {
      return []
    }
    if (shape.expression.type === 'TripleConstraint') {
      return [ shape.expression ]
    }
    if (shape.expression.type === 'EachOf' &&
        !(shape.expression.expressions.find(
          expr => expr.type !== 'TripleConstraint'
        ))) {
          return shape.expression.expressions
        }
    throw Error('can\'t (yet) express ' + JSON.stringify(shape))
  },

  skipDecl: function (shapeExpr) {
    return shapeExpr.type === 'ShapeDecl' ? shapeExpr.shapeExpr : shapeExpr
  },

  getValueType: function (valueExpr) {
    if (typeof valueExpr === 'string') { return valueExpr }
    if (valueExpr.reference) { return valueExpr.reference }
    if (valueExpr.nodeKind === 'iri') { return OWL.Thing } // !! push this test to callers
    if (valueExpr.datatype) { return valueExpr.datatype }
    // if (valueExpr.extends && valueExpr.extends.length === 1) { return valueExpr.extends[0] }
    return valueExpr // throw Error('no value type for ' + JSON.stringify(valueExpr))
  },

  /** getDependencies: find which shappes depend on other shapes by inheritance
   * or inclusion.
   * TODO: rewrite in terms of Visitor.
   */
  getDependencies: function (schema, ret) {
    ret = ret || this.BiDiClosure();
    (schema.shapes || []).forEach(function (shape) {
      function _walkShapeExpression (shapeExpr, negated) {
        if (typeof shapeExpr === "string") { // ShapeRef
          ret.add(shape.id, shapeExpr);
        } else if (shapeExpr.type === "ShapeOr" || shapeExpr.type === "ShapeAnd") {
          shapeExpr.shapeExprs.forEach(function (expr) {
            _walkShapeExpression(expr, negated);
          });
        } else if (shapeExpr.type === "ShapeNot") {
          _walkShapeExpression(shapeExpr.shapeExpr, negated ^ 1); // !!! test negation
        } else if (shapeExpr.type === "Shape") {
          _walkShape(shapeExpr, negated);
        } else if (shapeExpr.type === "NodeConstraint") {
          // no impact on dependencies
        } else if (shapeExpr.type === "ShapeExternal") {
        } else
          throw Error("expected Shape{And,Or,Ref,External} or NodeConstraint in " + JSON.stringify(shapeExpr));
      }

      function _walkShape (shape, negated) {
        function _walkTripleExpression (tripleExpr, negated) {
          function _exprGroup (exprs, negated) {
            exprs.forEach(function (nested) {
              _walkTripleExpression(nested, negated) // ?? negation allowed?
            });
          }

          function _walkTripleConstraint (tc, negated) {
            if (tc.valueExpr)
              _walkShapeExpression(tc.valueExpr, negated);
            if (negated && ret.inCycle.indexOf(shape.id) !== -1) // illDefined/negatedRefCycle.err
              throw Error("Structural error: " + shape.id + " appears in negated cycle");
          }

          if (typeof tripleExpr === "string") { // Inclusion
            ret.add(shape.id, tripleExpr);
          } else {
            if ("id" in tripleExpr)
              ret.addIn(tripleExpr.id, shape.id)
            if (tripleExpr.type === "TripleConstraint") {
              _walkTripleConstraint(tripleExpr, negated);
            } else if (tripleExpr.type === "OneOf" || tripleExpr.type === "EachOf") {
              _exprGroup(tripleExpr.expressions);
            } else {
              throw Error("expected {TripleConstraint,OneOf,EachOf,Inclusion} in " + tripleExpr);
            }
          }
        }

        (["extends", "restricts"]).forEach(attr => {
        if (shape[attr] && shape[attr].length > 0)
          shape[attr].forEach(function (i) {
            ret.add(shape.id, i);
          });
        })
        if (shape.expression)
          _walkTripleExpression(shape.expression, negated);
      }
      if (shape.type === "ShapeDecl")
        shape = shape.shapeExpr;
      _walkShapeExpression(shape, 0); // 0 means false for bitwise XOR
    });
    return ret;
  },

  /** partition: create subset of a schema with only desired shapes and
   * their dependencies.
   *
   * @schema: input schema
   * @partition: shape name or array of desired shape names
   * @deps: (optional) dependency tree from getDependencies.
   *        map(shapeLabel -> [shapeLabel])
   */
  partition: function (schema, includes, deps, cantFind) {
    const inputIndex = schema._index || this.index(schema)
    const outputIndex = { shapeExprs: new Map(), tripleExprs: new Map() };
    includes = includes instanceof Array ? includes : [includes];

    // build dependency tree if not passed one
    deps = deps || this.getDependencies(schema);
    cantFind = cantFind || function (what, why) {
      throw new Error("Error: can't find shape " +
                      (why ?
                       why + " dependency " + what :
                       what));
    };
    var partition = {};
    for (var k in schema)
      partition[k] = k === "shapes" ? [] : schema[k];
    includes.forEach(function (i) {
      if (i in outputIndex.shapeExprs) {
        // already got it.
      } else if (i in inputIndex.shapeExprs) {
        const adding = inputIndex.shapeExprs[i];
        partition.shapes.push(adding);
        outputIndex.shapeExprs[adding.id] = adding;
        if (i in deps.needs)
          deps.needs[i].forEach(function (n) {
            // Turn any needed TE into an SE.
            if (n in deps.foundIn)
              n = deps.foundIn[n];

            if (n in outputIndex.shapeExprs) {
            } else if (n in inputIndex.shapeExprs) {
              const needed = inputIndex.shapeExprs[n];
              partition.shapes.push(needed);
              outputIndex.shapeExprs[needed.id] = needed;
            } else
              cantFind(n, i);
          });
      } else {
        cantFind(i, "supplied");
      }
    });
    return partition;
  },


  /** @@TODO flatten: return copy of input schema with all shape and value class
   * references substituted by a copy of their referent.
   *
   * @schema: input schema
   */
  flatten: function (schema, deps, cantFind) {
    var v = this.Visitor();
    return v.visitSchema(schema);
  },

  // @@ put predicateUsage here

  emptySchema: function () {
    return {
      type: "Schema"
    };
  },
  merge: function (left, right, overwrite, inPlace) {
    var ret = inPlace ? left : this.emptySchema();

    function mergeArray (attr) {
      Object.keys(left[attr] || {}).forEach(function (key) {
        if (!(attr in ret))
          ret[attr] = {};
        ret[attr][key] = left[attr][key];
      });
      Object.keys(right[attr] || {}).forEach(function (key) {
        if (!(attr  in left) || !(key in left[attr]) || overwrite) {
          if (!(attr in ret))
            ret[attr] = {};
          ret[attr][key] = right[attr][key];
        }
      });
    }

    function mergeMap (attr) {
      (left[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr in ret))
          ret[attr] = new Map();
        ret[attr].set(key, left[attr].get(key));
      });
      (right[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr  in left) || !(left[attr].has(key)) || overwrite) {
          if (!(attr in ret))
            ret[attr] = new Map();
          ret[attr].set(key, right[attr].get(key));
        }
      });
    }

    // base
    if ("_base" in left)
      ret._base = left._base;
    if ("_base" in right)
      if (!("_base" in left) || overwrite)
        ret._base = right._base;

    mergeArray("_prefixes");

    mergeMap("_sourceMap");

    if ("imports" in right)
      if (!("imports" in left) || overwrite)
        ret.imports = right.imports;

    // startActs
    if ("startActs" in left)
      ret.startActs = left.startActs;
    if ("startActs" in right)
      if (!("startActs" in left) || overwrite)
        ret.startActs = right.startActs;

    // start
    if ("start" in left)
      ret.start = left.start;
    if ("start" in right)
      if (!("start" in left) || overwrite)
        ret.start = right.start;

    let lindex = left._index || this.index(left);

    // shapes
    if (!inPlace)
      (left.shapes || []).forEach(function (lshape) {
        if (!("shapes" in ret))
          ret.shapes = [];
        ret.shapes.push(lshape);
      });
    (right.shapes || []).forEach(function (rshape) {
      if (!("shapes"  in left) || !(rshape.id in lindex.shapeExprs) || overwrite) {
        if (!("shapes" in ret))
          ret.shapes = [];
        ret.shapes.push(rshape)
      }
    });

    if (left._index || right._index)
      ret._index = this.index(ret); // inefficient; could build above

    return ret;
  },

  absolutizeResults: function (parsed, base) {
    // !! duplicate of Validation-test.js:84: var referenceResult = parseJSONFile(resultsFile...)
    function mapFunction (k, obj) {
      // resolve relative URLs in results file
      if (["shape", "reference", "node", "subject", "predicate", "object"].indexOf(k) !== -1 &&
          RdfTerm.isIRI(obj[k])) {
        obj[k] = RdfTerm.resolveRelativeIRI(base, obj[k]);
      }}

    function resolveRelativeURLs (obj) {
      Object.keys(obj).forEach(function (k) {
        if (typeof obj[k] === "object") {
          resolveRelativeURLs(obj[k]);
        }
        if (mapFunction) {
          mapFunction(k, obj);
        }
      });
    }
    resolveRelativeURLs(parsed);
    return parsed;
  },

  getProofGraph: function (res, db, dataFactory) {
    function _dive1 (solns) {
      if (solns.type === "NodeTest" || solns.type === "NodeConstraintTest") {
      } else if (solns.type === "SolutionList" ||
          solns.type === "ShapeAndResults") {
        solns.solutions.forEach(s => {
          if (s.solution) // no .solution for <S> {}
            _dive1(s.solution);
        });
      } else if (solns.type === "ShapeOrResults") {
        _dive1(solns.solution);
      } else if (solns.type === "ShapeTest") {
        if ("solution" in solns)
          _dive1(solns.solution);
      } else if (solns.type === "OneOfSolutions" ||
                 solns.type === "EachOfSolutions") {
        solns.solutions.forEach(s => {
          _dive1(s);
        });
      } else if (solns.type === "OneOfSolution" ||
                 solns.type === "EachOfSolution") {
        solns.expressions.forEach(s => {
          _dive1(s);
        });
      } else if (solns.type === "TripleConstraintSolutions") {
        solns.solutions.map(s => {
          if (s.type !== "TestedTriple")
            throw Error("unexpected result type: " + s.type);
          var s2 = s;
          if (typeof s2.object === "object")
            s2.object = "\"" + s2.object.value.replace(/"/g, "\\\"") + "\""
            + (s2.object.language ? ("@" + s2.object.language) :
               s2.object.type ? ("^^" + s2.object.type) :
               "");
          db.addQuad(RdfTerm.externalTriple(s2, dataFactory))
          if ("referenced" in s) {
            _dive1(s.referenced);
          }
        });
      } else {
        throw Error("unexpected expr type "+solns.type+" in " + JSON.stringify(solns));
      }
    }
    _dive1(res);
    return db;
  },

  validateSchema: function (schema) { // obselete, but may need other validations in the future.
    var _ShExUtil = this;
    var visitor = this.Visitor();
    var currentLabel = currentExtra = null;
    var currentNegated = false;
    var dependsOn = { };
    var inTE = false;
    var oldVisitShape = visitor.visitShape;
    var negativeDeps = Hierarchy.create();
    var positiveDeps = Hierarchy.create();
    let index = schema.index || this.index(schema);

    visitor.visitShape = function (shape, label) {
      var lastExtra = currentExtra;
      currentExtra = shape.extra;
      var ret = oldVisitShape.call(visitor, shape, label);
      currentExtra = lastExtra;
      return ret;
    }

    var oldVisitShapeNot = visitor.visitShapeNot;
    visitor.visitShapeNot = function (shapeNot, label) {
      var lastNegated = currentNegated;
      currentNegated ^= true;
      var ret = oldVisitShapeNot.call(visitor, shapeNot, label);
      currentNegated = lastNegated;
      return ret;
    }

    var oldVisitTripleConstraint = visitor.visitTripleConstraint;
    visitor.visitTripleConstraint = function (expr) {
      var lastNegated = currentNegated;
      if (currentExtra && currentExtra.indexOf(expr.predicate) !== -1)
        currentNegated ^= true;
      inTE = true;
      var ret = oldVisitTripleConstraint.call(visitor, expr);
      inTE = false;
      currentNegated = lastNegated;
      return ret;
    };

    var oldVisitShapeRef = visitor.visitShapeRef;
    visitor.visitShapeRef = function (shapeRef) {
      if (!(shapeRef in index.shapeExprs))
        throw firstError(Error("Structural error: reference to " + JSON.stringify(shapeRef) + " not found in schema shape expressions:\n" + dumpKeys(index.shapeExprs) + "."), shapeRef);
      if (!inTE && shapeRef === currentLabel)
        throw firstError(Error("Structural error: circular reference to " + currentLabel + "."), shapeRef);
      (currentNegated ? negativeDeps : positiveDeps).add(currentLabel, shapeRef)
      return oldVisitShapeRef.call(visitor, shapeRef);
    }

    var oldVisitInclusion = visitor.visitInclusion;
    visitor.visitInclusion = function (inclusion) {
      var refd;
      if (!(refd = index.tripleExprs[inclusion]))
        throw firstError(Error("Structural error: included shape " + inclusion + " not found in schema triple expressions:\n" + dumpKeys(index.tripleExprs) + "."), inclusion);
      // if (refd.type !== "Shape")
      //   throw Error("Structural error: " + inclusion + " is not a simple shape.");
      return oldVisitInclusion.call(visitor, inclusion);
    };

    (schema.shapes || []).forEach(function (shape) {
      currentLabel = shape.id;
      visitor.visitShapeDecl(shape, shape.id);
    });
    let circs = Object.keys(negativeDeps.children).filter(
      k => negativeDeps.children[k].filter(
        k2 => k2 in negativeDeps.children && negativeDeps.children[k2].indexOf(k) !== -1
          || k2 in positiveDeps.children && positiveDeps.children[k2].indexOf(k) !== -1
      ).length > 0
    );
    if (circs.length)
      throw firstError(Error("Structural error: circular negative dependencies on " + circs.join(',') + "."), circs[0]);

    function dumpKeys (obj) {
      return obj ? Object.keys(obj).map(
        u => u.substr(0, 2) === '_:' ? u : '<' + u + '>'
      ).join("\n        ") : '- none defined -'
    }

    function firstError (e, obj) {
      if ("_sourceMap" in schema)
        e.location = (schema._sourceMap.get(obj) || [undefined])[0];
      return e;
    }
  },

  /** isWellDefined: assert that schema is well-defined.
   *
   * @schema: input schema
   * @@TODO
   */
  isWellDefined: function (schema) {
    this.validateSchema(schema);
    // var deps = this.getDependencies(schema);
    return schema;
  },

  walkVal: function (val, cb) {
    var _ShExUtil = this;
    if (val.type === "NodeTest") {
      return null;
    } else if (val.type === "ShapeTest") {
      return "solution" in val ? _ShExUtil.walkVal(val.solution, cb) : null;
    } else if (val.type === "ShapeOrResults") {
      return _ShExUtil.walkVal(val.solution || val.solutions, cb);
    } else if (val.type === "ShapeAndResults") {
      return val.solutions.reduce((ret, exp) => {
        var n = _ShExUtil.walkVal(exp, cb);
        if (n)
          Object.keys(n).forEach(k => {
            if (k in ret)
              ret[k] = ret[k].concat(n[k]);
            else
              ret[k] = n[k];
          })
        return ret;
      }, {});
    } else if (val.type === "EachOfSolutions" || val.type === "OneOfSolutions") {
      return val.solutions.reduce((ret, sln) => {
        sln.expressions.forEach(exp => {
          var n = _ShExUtil.walkVal(exp, cb);
          if (n)
            Object.keys(n).forEach(k => {
              if (k in ret)
                ret[k] = ret[k].concat(n[k]);
              else
                ret[k] = n[k];
            })
        });
        return ret;
      }, {});
    } else if (val.type === "OneOfSolutions") {
      return val.solutions.reduce((ret, sln) => {
        Object.assign(ret, _ShExUtil.walkVal(sln, cb));
        return ret;
      }, {});
    } else if (val.type === "TripleConstraintSolutions") {
      if ("solutions" in val) {
        var ret = {};
        var vals = [];
        ret[val.predicate] = vals;
        val.solutions.forEach(sln => {
          var toAdd = [];
          if (chaseList(sln.referenced, toAdd)) {
            vals = vals.concat(toAdd);
          } else {
            var newElt = cb(sln);
            if ("referenced" in sln) {
              var t = _ShExUtil.walkVal(sln.referenced, cb);
              if (t)
                newElt.nested = t;
            }
            vals.push(newElt);
          }
          function chaseList (li) {
            if (!li) return false;
            if (li.node === RDF.nil) return true;
            if ("solution" in li && "solutions" in li.solution &&
                li.solution.solutions.length === 1 &&
                "expressions" in li.solution.solutions[0] &&
                li.solution.solutions[0].expressions.length === 2 &&
                "predicate" in li.solution.solutions[0].expressions[0] &&
                li.solution.solutions[0].expressions[0].predicate === RDF.first &&
                li.solution.solutions[0].expressions[1].predicate === RDF.rest) {
              var expressions = li.solution.solutions[0].expressions;
              var ent = expressions[0];
              var rest = expressions[1].solutions[0];
              var member = ent.solutions[0];
              var newElt = cb(member);
              if ("referenced" in member) {
                var t = _ShExUtil.walkVal(member.referenced, cb);
                if (t)
                  newElt.nested = t;
              }
              vals.push(newElt);
              return rest.object === RDF.nil ?
                true :
                chaseList(rest.referenced.type === "ShapeOrResults" // heuristic for `nil  OR @<list>` idiom
                          ? rest.referenced.solution
                          : rest.referenced);
            }
          }
        });
        return vals.length ? ret : null;
      } else {
        return null;
      }
    } else if (val.type === "NodeConstraintTest") {
      return null;
    } else if (val.type === "Recursion") {
      return null;
    } else {
      // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }
    return val;
  },

  /**
   * Convert val results to a property tree.
   * @exports
   * @returns {@code {p1:[{p2: v2},{p3: v3}]}}
   */
  valToValues: function (val) {
    return this.walkVal (val, function (sln) {
      return { ldterm: sln.object };
    });
  },

  valToExtension: function (val, lookfor) {
    var map = this.walkVal (val, function (sln) {
      return { extensions: sln.extensions };
    });
    function extensions (obj) {
      var list = [];
      var crushed = {};
      function crush (elt) {
        if (crushed === null)
          return elt;
        if (elt.constructor === Array) {
          crushed = null;
          return elt;
        }
        for (k in elt) {
          if (k in crushed) {
            crushed = null
            return elt;
          }
          crushed[k] = ldify(elt[k]);
        }
        return elt;
      }
      for (var k in obj) {
        if (k === "extensions") {
          if (obj[k])
            list.push(crush(ldify(obj[k][lookfor])));
        } else if (k === "nested") {
          var nested = extensions(obj[k]);
          if (nested.constructor === Array)
            nested.forEach(crush);
          else
            crush(nested);
          list = list.concat(nested);
        } else {
          list.push(crush(extensions(obj[k])));
        }
      }
      return list.length === 1 ? list[0] :
        crushed ? crushed :
        list;
    }
    return extensions(map);
  },

  valuesToSchema: function (values) {
    // console.log(JSON.stringify(values, null, "  "));
    var v = values;
    var t = values[RDF.type][0].ldterm;
    if (t === SX.Schema) {
      /* Schema { "@context":"http://www.w3.org/ns/shex.jsonld"
       *           startActs:[SemAct+]? start:(shapeExpr|labeledShapeExpr)?
       *           shapes:[labeledShapeExpr+]? }
       */
      var ret = {
        "@context": "http://www.w3.org/ns/shex.jsonld",
        type: "Schema"
      }
      if (SX.startActs in v)
        ret.startActs = v[SX.startActs].map(e => {
          var ret = {
            type: "SemAct",
            name: e.nested[SX.name][0].ldterm
          };
          if (SX.code in e.nested)
            ret.code = e.nested[SX.code][0].ldterm.value;
          return ret;
        });
      if (SX.imports in v)
        ret.imports = v[SX.imports].map(e => {
          return e.ldterm;
        });
      if (values[SX.start])
        ret.start = extend({id: values[SX.start][0].ldterm}, shapeExpr(values[SX.start][0].nested));
      var shapes = values[SX.shapes];
      if (shapes) {
        ret.shapes = shapes.map(v => { // @@ console.log(v.nested);
          var t = v.nested[RDF.type][0].ldterm;
          var obj = t === SX.ShapeDecl ?
              {
                type: SX.ShapeDecl,
                abstract: !!v.nested[SX["abstract"]][0].ldterm.value,
                shapeExpr: shapeExpr(v.nested[SX.shapeExpr][0].nested)
              } :
              shapeExpr(v.nested);
          return extend({id: v.ldterm}, obj);
        });
      }
      // console.log(ret);
      return ret;
    } else {
      throw Error("unknown schema type in " + JSON.stringify(values));
    }
    function findType (v, elts, f) {
      var t = v[RDF.type][0].ldterm.substr(SX._namespace.length);
      var elt = elts[t];
      if (!elt)
        return Missed;
      if (elt.nary) {
        var ret = {
          type: t,
        };
        ret[elt.prop] = v[SX[elt.prop]].map(e => {
          return valueOf(e);
        });
        return ret;
      } else {
        var ret = {
          type: t
        };
        if (elt.prop) {
          ret[elt.prop] = valueOf(v[SX[elt.prop]][0]);
        }
        return ret;
      }

      function valueOf (x) {
        return elt.expr && "nested" in x ? extend({ id: x.ldterm, }, f(x.nested)) : x.ldterm;
      }
    }
    function shapeExpr (v) {
      // shapeExpr = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;
      var elts = { "ShapeAnd"     : { nary: true , expr: true , prop: "shapeExprs" },
                   "ShapeOr"      : { nary: true , expr: true , prop: "shapeExprs" },
                   "ShapeNot"     : { nary: false, expr: true , prop: "shapeExpr"  },
                   "ShapeRef"     : { nary: false, expr: false, prop: "reference"  },
                   "ShapeExternal": { nary: false, expr: false, prop: null         } };
      var ret = findType(v, elts, shapeExpr);
      if (ret !== Missed)
        return ret;

      var t = v[RDF.type][0].ldterm;
      if (t === SX.ShapeDecl) {
        var ret = { type: "ShapeDecl" };
        ["abstract"].forEach(a => {
          if (SX[a] in v)
            ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.shapeExpr in v) {
          ret.shapeExpr =
            "nested" in v[SX.shapeExpr][0] ?
            extend({id: v[SX.shapeExpr][0].ldterm}, shapeExpr(v[SX.shapeExpr][0].nested)) :
            v[SX.shapeExpr][0].ldterm;
        }
        return ret;
      } else if (t === SX.Shape) {
        var ret = { type: "Shape" };
        ["closed"].forEach(a => {
          if (SX[a] in v)
            ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        ["extra", "extends", "restricts"].forEach(a => {
          if (SX[a] in v)
            ret[a] = v[SX[a]].map(e => { return e.ldterm; });
        });
        if (SX.expression in v) {
          ret.expression =
            "nested" in v[SX.expression][0] ?
            extend({id: v[SX.expression][0].ldterm}, tripleExpr(v[SX.expression][0].nested)) :
            v[SX.expression][0].ldterm;
        }
        if (SX.annotation in v)
          ret.annotations = v[SX.annotation].map(e => {
            return {
              type: "Annotation",
              predicate: e.nested[SX.predicate][0].ldterm,
              object: e.nested[SX.object][0].ldterm
            };
          });
        if (SX.semActs in v)
          ret.semActs = v[SX.semActs].map(e => {
            var ret = {
              type: "SemAct",
              name: e.nested[SX.name][0].ldterm
            };
            if (SX.code in e.nested)
              ret.code = e.nested[SX.code][0].ldterm.value;
            return ret;
          });
        return ret;
      } else if (t === SX.NodeConstraint) {
        var ret = { type: "NodeConstraint" };
        if (SX.values in v)
          ret.values = v[SX.values].map(v1 => { return objectValue(v1); });
        if (SX.nodeKind in v)
          ret.nodeKind = v[SX.nodeKind][0].ldterm.substr(SX._namespace.length);
        ["length", "minlength", "maxlength", "mininclusive", "maxinclusive", "minexclusive", "maxexclusive", "totaldigits", "fractiondigits"].forEach(a => {
          if (SX[a] in v)
            ret[a] = parseFloat(v[SX[a]][0].ldterm.value);
        });
        if (SX.pattern in v)
          ret.pattern = v[SX.pattern][0].ldterm.value;
        if (SX.flags in v)
          ret.flags = v[SX.flags][0].ldterm.value;
        if (SX.datatype in v)
          ret.datatype = v[SX.datatype][0].ldterm;
        return ret;
      } else {
        throw Error("unknown shapeExpr type in " + JSON.stringify(v));
      }

    }

    function objectValue (v, expectString) {
      if ("nested" in v) {
        var t = v.nested[RDF.type][0].ldterm;
        if ([SX.IriStem, SX.LiteralStem, SX.LanguageStem].indexOf(t) !== -1) {
          var ldterm = v.nested[SX.stem][0].ldterm.value;
          return {
            type: t.substr(SX._namespace.length),
            stem: ldterm
          };
        } else if ([SX.Language].indexOf(t) !== -1) {
          return {
            type: "Language",
            languageTag: v.nested[SX.languageTag][0].ldterm.value
          };
        } else if ([SX.IriStemRange, SX.LiteralStemRange, SX.LanguageStemRange].indexOf(t) !== -1) {
          var st = v.nested[SX.stem][0];
          var stem = st;
          if (typeof st === "object") {
            if (typeof st.ldterm === "object") {
              stem = st.ldterm;
            } else if (st.ldterm.startsWith("_:")) {
              stem = { type: "Wildcard" };
            }
          }
          var ret = {
            type: t.substr(SX._namespace.length),
            stem: stem.type !== "Wildcard" ? stem.value : stem
          };
          if (SX.exclusion in v.nested) {
            // IriStemRange:
            // * [{"ldterm":"http://a.example/v1"},{"ldterm":"http://a.example/v3"}] <-- no value
            // * [{"ldterm":"_:b836","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v1"}}]}},
            //    {"ldterm":"_:b838","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v3"}}]}}]

            // LiteralStemRange:
            // * [{"ldterm":{"value":"v1"}},{"ldterm":{"value":"v3"}}]
            // * [{"ldterm":"_:b866","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v1"}}]}},
            //    {"ldterm":"_:b868","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v3"}}]}}]

            // LanguageStemRange:
            // * [{"ldterm":{"value":"fr-be"}},{"ldterm":{"value":"fr-ch"}}]
            // * [{"ldterm":"_:b851","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-be"}}]}},
            //    {"ldterm":"_:b853","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-ch"}}]}}]
            ret.exclusions = v.nested[SX.exclusion].map(v1 => {
              return objectValue(v1, t !== SX.IriStemRange);
            });
          }
          return ret;
        } else {
          throw Error("unknown objectValue type in " + JSON.stringify(v));
        }
      } else {
        return expectString ? v.ldterm.value : v.ldterm;
      }
    }

    function tripleExpr (v) {
      // tripleExpr = EachOf | OneOf | TripleConstraint | Inclusion ;
      var elts = { "EachOf"   : { nary: true , expr: true , prop: "expressions" },
                   "OneOf"    : { nary: true , expr: true , prop: "expressions" },
                   "Inclusion": { nary: false, expr: false, prop: "include"     } };
      var ret = findType(v, elts, tripleExpr);
      if (ret !== Missed) {
        minMaxAnnotSemActs(v, ret);
        return ret;
      }

      var t = v[RDF.type][0].ldterm;
      if (t === SX.TripleConstraint) {
        var ret = {
          type: "TripleConstraint",
          predicate: v[SX.predicate][0].ldterm
        };
        ["inverse"].forEach(a => {
          if (SX[a] in v)
            ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.valueExpr in v)
          ret.valueExpr = extend({id: v[SX.valueExpr][0].ldterm}, "nested" in v[SX.valueExpr][0] ? shapeExpr(v[SX.valueExpr][0].nested) : {});
        minMaxAnnotSemActs(v, ret);
        return ret;
      } else {
        throw Error("unknown tripleExpr type in " + JSON.stringify(v));
      }
    }
    function minMaxAnnotSemActs (v, ret) {
      if (SX.min in v)
        ret.min = parseInt(v[SX.min][0].ldterm.value);
      if (SX.max in v) {
        ret.max = parseInt(v[SX.max][0].ldterm.value);
        if (isNaN(ret.max))
          ret.max = UNBOUNDED;
      }
      if (SX.annotation in v)
        ret.annotations = v[SX.annotation].map(e => {
          return {
            type: "Annotation",
            predicate: e.nested[SX.predicate][0].ldterm,
            object: e.nested[SX.object][0].ldterm
          };
        });
      if (SX.semActs in v)
        ret.semActs = v[SX.semActs].map(e => {
          var ret = {
            type: "SemAct",
            name: e.nested[SX.name][0].ldterm
          };
          if (SX.code in e.nested)
            ret.code = e.nested[SX.code][0].ldterm.value;
          return ret;
        });
      return ret;
    }
  },

  valToSimple: function (val) {
    var _ShExUtil = this;
    function _join (list) {
      return list.reduce((ret, elt) => {
        Object.keys(elt).forEach(k => {
          if (k in ret) {
            ret[k] = Array.from(new Set(ret[k].concat(elt[k])));
          } else {
            ret[k] = elt[k];
          }
        });
        return ret;
      }, {});
    }
    if (val.type === "TripleConstraintSolutions") {
      if ("solutions" in val) {
        return val.solutions.reduce((ret, sln) => {
          if (!("referenced" in sln))
            return {};
          var toAdd = {};
          if (chaseList(sln.referenced, toAdd)) {
            return _join(ret, toAdd);
          } else {
            return _join(ret, _ShExUtil.valToSimple(sln.referenced));
          }
          function chaseList (li) {
            if (!li) return false;
            if (li.node === RDF.nil) return true;
            if ("solution" in li && "solutions" in li.solution &&
                li.solution.solutions.length === 1 &&
                "expressions" in li.solution.solutions[0] &&
                li.solution.solutions[0].expressions.length === 2 &&
                "predicate" in li.solution.solutions[0].expressions[0] &&
                li.solution.solutions[0].expressions[0].predicate === RDF.first &&
                li.solution.solutions[0].expressions[1].predicate === RDF.rest) {
              var expressions = li.solution.solutions[0].expressions;
              var ent = expressions[0];
              var rest = expressions[1].solutions[0];
              var member = ent.solutions[0];
              var newElt = { ldterm: member.object };
              if ("referenced" in member) {
                var t = _ShExUtil.valToSimple(member.referenced);
                if (t)
                  newElt.nested = t;
              }
              toAdd = _join(toAdd, newElt);
              return rest.object === RDF.nil ?
                true :
                chaseList(rest.referenced);
            }
          }
        }, []);
      } else {
        return [];
      }
    } else if (["TripleConstraintSolutions"].indexOf(val.type) !== -1) {
      return {  };
    } else if (val.type === "NodeTest") {
      var thisNode = {  };
      thisNode[n3ify(val.node)] = [val.shape];
      return thisNode;
    } else if (val.type === "ShapeTest") {
      var thisNode = {  };
      thisNode[n3ify(val.node)] = [val.shape];
      return "solution" in val ? _join([thisNode].concat(_ShExUtil.valToSimple(val.solution))) : thisNode;
    } else if (val.type === "Recursion") {
      return {  };
    } else if ("solutions" in val) {
      // ["SolutionList", "EachOfSolutions", "OneOfSolutions", "ShapeAndResults", "ShapeOrResults"].indexOf(val.type) !== -1
      return _join(val.solutions.map(sln => {
        return _ShExUtil.valToSimple(sln);
      }));
    } else if ("expressions" in val) {
      return _join(val.expressions.map(sln => {
        return _ShExUtil.valToSimple(sln);
      }));
    } else {
      // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }
    return val;
  },

  simpleToShapeMap: function (x) {
    return Object.keys(x).reduce((ret, k) => {
      x[k].forEach(s => {
        ret.push({node: k, shape: s });
      });
      return ret;
    }, []);
  },

  absolutizeShapeMap: function (parsed, base) {
    return parsed.map(elt => {
      return Object.assign(elt, {
        node: RdfTerm.resolveRelativeIRI(base, elt.node),
        shape: RdfTerm.resolveRelativeIRI(base, elt.shape)
      });
    });
  },

  errsToSimple: function (val, node, shape) {
    var _ShExUtil = this;
    if (val.type === "FailureList") {
      return val.errors.reduce((ret, e) => {
        return ret.concat(_ShExUtil.errsToSimple(e));
      }, []);
    } else if (val.type === "Failure") {
      return ["validating " + val.node + " as " + val.shape + ":"].concat(errorList(val.errors).reduce((ret, e) => {
        var nested = _ShExUtil.errsToSimple(e).map(s => "  " + s);
        return ret.length > 0 ? ret.concat(["  OR"]).concat(nested) : nested.map(s => "  " + s);
      }, []));
    } else if (val.type === "TypeMismatch") {
      var nested = val.errors.constructor === Array ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["validating " + n3ify(val.triple.object) + ":"].concat(nested);
    } else if (val.type === "RestrictionError") {
      var nested = val.errors.constructor === Array ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["validating restrictions on " + n3ify(val.focus) + ":"].concat(nested);
    } else if (val.type === "ShapeAndFailure") {
      return val.errors.constructor === Array ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    } else if (val.type === "ShapeOrFailure") {
      return val.errors.constructor === Array ?
          val.errors.reduce((ret, e) => {
            return ret.concat(" OR " + (typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)));
          }, []) :
          " OR " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    } else if (val.type === "ShapeNotFailure") {
      return ["Node " + val.errors.node + " expected to NOT pass " + val.errors.shape];
    } else if (val.type === "ExcessTripleViolation") {
      return ["validating " + n3ify(val.triple.object) + ": exceeds cardinality"];
    } else if (val.type === "ClosedShapeViolation") {
      return ["ClosedShapeError: unexpected: {"].concat(
        val.unexpectedTriples.map(t => {
          return "  " + t.subject + " " + t.predicate + " " + n3ify(t.object) + " ."
        })
      ).concat(["}"]);
    } else if (val.type === "NodeConstraintViolation") {
      var w = __webpack_require__(6)();
      w._write(w._writeNodeConstraint(val.shapeExpr).join(""));
      var txt;
      w.end((err, res) => {
        txt = res;
      });
      return ["NodeConstraintError: expected to match " + txt];
    } else if (val.type === "MissingProperty") {
      return ["Missing property: " + val.property];
    } else if (val.type === "NegatedProperty") {
      return ["Unexpected property: " + val.property];
    } else if (val.type === "AbstractShapeFailure") {
      return ["Abstract Shape: " + val.shape];
    } else if (val.constructor === Array) {
      return val.reduce((ret, e) => {
        var nested = _ShExUtil.errsToSimple(e).map(s => "  " + s);
        return ret.length ? ret.concat(["AND"]).concat(nested) : nested;
      }, []);
    } else if (val.type === "SemActFailure") {
      var nested = val.errors.constructor === Array ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["rejected by semantic action:"].concat(nested);
    } else if (val.type === "SemActViolation") {
      return [val.message];
    } else if (val.type === "BooleanSemActFailure") {
      return ["Failed evaluating " + val.code + " on context " + JSON.stringify(val.ctx)];
    } else {
      debugger; // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }
    function errorList (errors) {
      return errors.reduce(function (acc, e) {
        var attrs = Object.keys(e);
        return acc.concat(
          (attrs.length === 1 && attrs[0] === "errors")
            ? errorList(e.errors)
            : e);
      }, []);
    }
  },

  resolveRelativeIRI: RdfTerm.resolveRelativeIRI,

  resolvePrefixedIRI: function (prefixedIri, prefixes) {
    var colon = prefixedIri.indexOf(":");
    if (colon === -1)
      return null;
    var prefix = prefixes[prefixedIri.substr(0, colon)];
    return prefix === undefined ? null : prefix + prefixedIri.substr(colon+1);
  },

  parsePassedNode: function (passedValue, meta, deflt, known, reportUnknown) {
    if (passedValue === undefined || passedValue.length === 0)
      return known && known(meta.base) ? meta.base : deflt ? deflt() : this.NotSupplied;
    if (passedValue[0] === "_" && passedValue[1] === ":")
      return passedValue;
    if (passedValue[0] === "\"") {
      var m = passedValue.match(/^"((?:[^"\\]|\\")*)"(?:@(.+)|\^\^(?:<(.*)>|([^:]*):(.*)))?$/);
      if (!m)
        throw Error("malformed literal: " + passedValue);
      var lex = m[1], lang = m[2], rel = m[3], pre = m[4], local = m[5];
      // Turn the literal into an N3.js atom.
      var quoted = "\""+lex+"\"";
      if (lang !== undefined)
        return quoted + "@" + lang;
      if (pre !== undefined) {
        if (!(pre in meta.prefixes))
          throw Error("error parsing node "+passedValue+" no prefix for \"" + pre + "\"");
        return quoted + "^^" + meta.prefixes[pre] + local;
      }
      if (rel !== undefined)
        return quoted + "^^" + RdfTerm.resolveRelativeIRI(meta.base, rel);
      return quoted;
    }
    if (!meta)
      return known(passedValue) ? passedValue : this.UnknownIRI;
    var relIRI = passedValue[0] === "<" && passedValue[passedValue.length-1] === ">";
    if (relIRI)
      passedValue = passedValue.substr(1, passedValue.length-2);
    var t = RdfTerm.resolveRelativeIRI(meta.base || "", passedValue); // fall back to base-less mode
    if (known(t))
      return t;
    if (!relIRI) {
      var t2 = this.resolvePrefixedIRI(passedValue, meta.prefixes);
      if (t2 !== null && known(t2))
        return t2;
    }
    return reportUnknown ? reportUnknown(t) : this.UnknownIRI;
  },

  executeQueryPromise: function (query, endpoint) {
    var rows;

    var queryURL = endpoint + "?query=" + encodeURIComponent(query);
    return fetch(queryURL, {
      headers: {
        'Accept': 'application/sparql-results+json'
      }}).then(resp => resp.json()).then(t => {
        var selects = t.head.vars;
        return t.results.bindings.map(row => {
          return selects.map(sel => {
            var elt = row[sel];
            switch (elt.type) {
            case "uri": return elt.value;
            case "bnode": return "_:" + elt.value;
            case "literal":
              var datatype = elt.datatype;
              var lang = elt["xml:lang"];
              return "\"" + elt.value + "\"" + (
                datatype ? "^^" + datatype :
                  lang ? "@" + lang :
                  "");
            default: throw "unknown XML results type: " + elt.prop("tagName");
            }
            return row[sel];
          })
        });
      })// .then(x => new Promise(resolve => setTimeout(() => resolve(x), 1000)));
  },

  executeQuery: function (query, endpoint) {
    var rows, t, j;
    var queryURL = endpoint + "?query=" + encodeURIComponent(query);
    var xhr = new XMLHttpRequest();
    xhr.open("GET", queryURL, false);
    xhr.setRequestHeader('Accept', 'application/sparql-results+json');
    xhr.send();
    // var selectsBlock = query.match(/SELECT\s*(.*?)\s*{/)[1];
    // var selects = selectsBlock.match(/\?[^\s?]+/g);
    var t = JSON.parse(xhr.responseText);
    var selects = t.head.vars;
    return t.results.bindings.map(row => {
      return selects.map(sel => {
        var elt = row[sel];
        switch (elt.type) {
        case "uri": return elt.value;
        case "bnode": return "_:" + elt.value;
        case "literal":
          var datatype = elt.datatype;
          var lang = elt["xml:lang"];
          return "\"" + elt.value + "\"" + (
            datatype ? "^^" + datatype :
              lang ? "@" + lang :
              "");
        default: throw "unknown XML results type: " + elt.prop("tagName");
        }
        return row[sel];
      })
    });

/* TO ADD? XML results format parsed with jquery:
        $(data).find("sparql > results > result").
          each((_, row) => {
            rows.push($(row).find("binding > *:nth-child(1)").
              map((idx, elt) => {
                elt = $(elt);
                var text = elt.text();
                switch (elt.prop("tagName")) {
                case "uri": return text;
                case "bnode": return "_:" + text;
                case "literal":
                  var datatype = elt.attr("datatype");
                  var lang = elt.attr("xml:lang");
                  return "\"" + text + "\"" + (
                    datatype ? "^^" + datatype :
                    lang ? "@" + lang :
                      "");
                default: throw "unknown XML results type: " + elt.prop("tagName");
                }
              }).get());
          });
*/
  },

  makeN3DB: function (db, queryTracker) {

    function getSubjects () { return db.getSubjects().map(RdfTerm.internalTerm); }
    function getPredicates () { return db.getPredicates().map(RdfTerm.internalTerm); }
    function getObjects () { return db.getObjects().map(RdfTerm.internalTerm); }
    function getQuads () { return db.getQuads.apply(db, arguments).map(RdfTerm.internalTriple); }

    function getNeighborhood (point, shapeLabel/*, shape */) {
      // I'm guessing a local DB doesn't benefit from shape optimization.
      var startTime;
      if (queryTracker) {
        startTime = new Date();
        queryTracker.start(false, point, shapeLabel);
      }
      var outgoing = db.getQuads(point, null, null, null).map(RdfTerm.internalTriple);
      if (queryTracker) {
        var time = new Date();
        queryTracker.end(outgoing, time - startTime);
        startTime = time;
      }
      if (queryTracker) {
        queryTracker.start(true, point, shapeLabel);
      }
      var incoming = db.getQuads(null, null, point, null).map(RdfTerm.internalTriple);
      if (queryTracker) {
        queryTracker.end(incoming, new Date() - startTime);
      }
      return {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      // size: db.size,
      getNeighborhood: getNeighborhood,
      getSubjects: getSubjects,
      getPredicates: getPredicates,
      getObjects: getObjects,
      getQuads: getQuads,
      get size() { return db.size; },
      // getQuads: function (s, p, o, graph, shapeLabel) {
      //   // console.log(Error(s + p + o).stack)
      //   if (queryTracker)
      //     queryTracker.start(!!s, s ? s : o, shapeLabel);
      //   var quads = db.getQuads(s, p, o, graph)
      //   if (queryTracker)
      //     queryTracker.end(quads, new Date() - startTime);
      //   return quads;
      // }
    }
  },
  /** emulate N3Store().getQuads() with additional parm.
   */
  makeQueryDB: function (endpoint, queryTracker) {
    var _ShExUtil = this;

    function getQuads(s, p, o, g) {
      return mapQueryToTriples("SELECT " + [
        (s?"":"?s"), (p?"":"?p"), (o?"":"?o"),
        "{",
        (s?s:"?s"), (p?p:"?s"), (o?o:"?s"),
        "}"].join(" "), s, o)
    }

    function mapQueryToTriples (query, s, o) {
      var rows = _ShExUtil.executeQuery(query, endpoint);
      var triples = rows.map(row =>  {
        return s ? {
          subject: s,
          predicate: row[0],
          object: row[1]
        } : {
          subject: row[0],
          predicate: row[1],
          object: o
        };
      });
      return triples;
    }

    function getTripleConstraints (tripleExpr) {
      var visitor = _ShExUtil.Visitor();
      var ret = {
        out: [],
        inc: []
      };
      visitor.visitTripleConstraint = function (expr) {
        ret[expr.inverse ? "inc" : "out"].push(expr);
        return expr;
      };

      if (tripleExpr)
        visitor.visitExpression(tripleExpr);
      return ret;
    }

    function getNeighborhood (point, shapeLabel, shape) {
      // I'm guessing a local DB doesn't benefit from shape optimization.
      var startTime;
      var tcs = getTripleConstraints(shape.expression);
      var pz = tcs.out.map(t => t.predicate);
      pz = pz.filter((p, idx) => pz.lastIndexOf(p) === idx);
      if (queryTracker) {
        startTime = new Date();
        queryTracker.start(false, point, shapeLabel);
      }
      var outgoing = (tcs.out.length > 0 || shape.closed)
          ? mapQueryToTriples(
            shape.closed
              ? `SELECT ?p ?o { <${point}> ?p ?o }`
              : "SELECT ?p ?o {\n" +
              pz.map(
                p => `  {<${point}> <${p}> ?o BIND(<${p}> AS ?p)}`
              ).join(" UNION\n") +
              "\n}",
            point, null
          )
          : [];
      if (queryTracker) {
        var time = new Date();
        queryTracker.end(outgoing, time - startTime);
        startTime = time;
      }
      if (queryTracker) {
        queryTracker.start(true, point, shapeLabel);
      }
      var incoming = tcs.inc.length > 0
          ? mapQueryToTriples(`SELECT ?s ?p { ?s ?p <${point}> }`, null, point)
          : []
      if (queryTracker) {
        queryTracker.end(incoming, new Date() - startTime);
      }
      return  {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      getNeighborhood: getNeighborhood,
      getQuads: getQuads,
      getSubjects: function () { return ["!Query DB can't index subjects"] },
      getPredicates: function () { return ["!Query DB can't index predicates"] },
      getObjects: function () { return ["!Query DB can't index objects"] },
      get size() { return undefined; }
    };
  },

  /** Directly construct a DB from triples.
   */
  makeTriplesDB: function (queryTracker) {
    var _ShExUtil = this;
    var incoming = [];
    var outgoing = [];

    function getTriplesByIRI(s, p, o, g) {
      return incoming.concat(outgoing).filter(
        t =>
          (!s || s === t.subject) &&
          (!p || p === t.predicate) &&
          (!s || s === t.object)
      );
    }

    function getNeighborhood (point, shapeLabel, shape) {
      return {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      getNeighborhood: getNeighborhood,
      getTriplesByIRI: getTriplesByIRI,
      getSubjects: function () { return ["!Triples DB can't index subjects"] },
      getPredicates: function () { return ["!Triples DB can't index predicates"] },
      getObjects: function () { return ["!Triples DB can't index objects"] },
      get size() { return undefined; },
      addIncomingTriples: function (tz) { Array.prototype.push.apply(incoming, tz); },
      addOutgoingTriples: function (tz) { Array.prototype.push.apply(outgoing, tz); }
    };
  },

  NotSupplied: "-- not supplied --", UnknownIRI: "-- not found --",

  /**
   * unescape numerics and allowed single-character escapes.
   * throws: if there are any unallowed sequences
   */
  unescapeText: function (string, replacements) {
    var regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return String.fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    }
    catch (error) { console.warn(error); return ''; }
  },

};

function n3ify (ldterm) {
  if (typeof ldterm !== "object")
    return ldterm;
  var ret = "\"" + ldterm.value + "\"";
  if ("language" in ldterm)
    return ret + "@" + ldterm.language;
  if ("type" in ldterm)
    return ret + "^^" + ldterm.type;
  return ret;
}

// Add the ShExUtil functions to the given object or its prototype
function AddShExUtil(parent, toPrototype) {
  for (var name in ShExUtil)
    if (!toPrototype)
      parent[name] = ShExUtil[name];
    else
      parent.prototype[name] = ApplyToThis(ShExUtil[name]);

  return parent;
}

// Returns a function that applies `f` to the `this` object
function ApplyToThis(f) {
  return function (a) { return f(this, a); };
}

return AddShExUtil(AddShExUtil);
})();

if (true)
  module.exports = ShExUtil; // node environment


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {


    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }

  function isShapeRef (expr) {
    return typeof expr === "string" // test for JSON-LD @ID
  }
  let isInclusion = isShapeRef;


function ShExVisitor () {
  // function expect (l, r) { var ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+" !== "+rs); }
  var _ShExUtil = this;
  function visitMap (map, val) {
    var ret = {};
    Object.keys(map).forEach(function (item) {
      ret[item] = val(map[item]);
    });
    return ret;
  }
  var r = {
    runtimeError: function (e) {
      throw e;
    },

    visitSchema: function (schema) {
      var ret = { type: "Schema" };
      _expect(schema, "type", "Schema");
      this._maybeSet(schema, ret, "Schema",
                     ["@context", "prefixes", "base", "imports", "startActs", "start", "shapes"],
                     ["_base", "_prefixes", "_index", "_sourceMap"]
                    );
      return ret;
    },

    visitPrefixes: function (prefixes) {
      return prefixes === undefined ?
        undefined :
        visitMap(prefixes, function (val) {
          return val;
        });
    },

    visitIRI: function (i) {
      return i;
    },

    visitImports: function (imports) {
      var _Visitor = this;
      return imports.map(function (imp) {
        return _Visitor.visitIRI(imp);
      });
    },

    visitStartActs: function (startActs) {
      var _Visitor = this;
      return startActs === undefined ?
        undefined :
        startActs.map(function (act) {
          return _Visitor.visitSemAct(act);
        });
    },
    visitSemActs: function (semActs) {
      var _Visitor = this;
      if (semActs === undefined)
        return undefined;
      var ret = []
      Object.keys(semActs).forEach(function (label) {
        ret.push(_Visitor.visitSemAct(semActs[label], label));
      });
      return ret;
    },
    visitSemAct: function (semAct, label) {
      var ret = { type: "SemAct" };
      _expect(semAct, "type", "SemAct");

      this._maybeSet(semAct, ret, "SemAct",
                     ["name", "code"]);
      return ret;
    },

    visitShapes: function (shapes) {
      var _Visitor = this;
      if (shapes === undefined)
        return undefined;
      return shapes.map(
        shapeExpr =>
          _Visitor.visitShapeDecl(shapeExpr)
      );
    },

    visitProductions999: function (productions) { // !! DELETE
      var _Visitor = this;
      if (productions === undefined)
        return undefined;
      var ret = {}
      Object.keys(productions).forEach(function (label) {
        ret[label] = _Visitor.visitExpression(productions[label], label);
      });
      return ret;
    },

    visitShapeDecl: function (decl, label) {
      return decl.type === "ShapeDecl" ?
        this._maybeSet(decl, { type: "ShapeDecl" }, "ShapeDecl",
                       ["id", "abstract", "restricts", "shapeExpr"]) :
        this.visitShapeExpr(decl, label);
    },

    visitShapeExpr: function (expr, label) {
      if (isShapeRef(expr))
        return this.visitShapeRef(expr)
      var r =
          expr.type === "Shape" ? this.visitShape(expr, label) :
          expr.type === "NodeConstraint" ? this.visitNodeConstraint(expr, label) :
          expr.type === "ShapeAnd" ? this.visitShapeAnd(expr, label) :
          expr.type === "ShapeOr" ? this.visitShapeOr(expr, label) :
          expr.type === "ShapeNot" ? this.visitShapeNot(expr, label) :
          expr.type === "ShapeExternal" ? this.visitShapeExternal(expr) :
          null;// if (expr.type === "ShapeRef") r = 0; // console.warn("visitShapeExpr:", r);
      if (r === null)
        throw Error("unexpected shapeExpr type: " + expr.type);
      else
        return r;
    },

    // _visitShapeGroup: visit a grouping expression (shapeAnd, shapeOr)
    _visitShapeGroup: function (expr, label) {
      this._testUnknownAttributes(expr, ["id", "shapeExprs"], expr.type, this.visitShapeNot)
      var _Visitor = this;
      var r = { type: expr.type };
      if ("id" in expr)
        r.id = expr.id;
      r.shapeExprs = expr.shapeExprs.map(function (nested) {
        return _Visitor.visitShapeExpr(nested, label);
      });
      return r;
    },

    // _visitShapeNot: visit negated shape
    visitShapeNot: function (expr, label) {
      this._testUnknownAttributes(expr, ["id", "shapeExpr"], "ShapeNot", this.visitShapeNot)
      var r = { type: expr.type };
      if ("id" in expr)
        r.id = expr.id;
      r.shapeExpr = this.visitShapeExpr(expr.shapeExpr, label);
      return r;
    },

    // ### `visitNodeConstraint` deep-copies the structure of a shape
    visitShape: function (shape, label) {
      var ret = { type: "Shape" };
      _expect(shape, "type", "Shape");

      this._maybeSet(shape, ret, "Shape",
                     [ "id",
                       "abstract", "extends",
                       "closed",
                       "expression", "extra", "semActs", "annotations"]);
      return ret;
    },

    _visitShapeExprList: function (ext) {
      var _Visitor = this;
      return ext.map(function (t) {
        return _Visitor.visitShapeExpr(t, undefined);
      });
    },

    // ### `visitNodeConstraint` deep-copies the structure of a shape
    visitNodeConstraint: function (shape, label) {
      var ret = { type: "NodeConstraint" };
      _expect(shape, "type", "NodeConstraint");

      this._maybeSet(shape, ret, "NodeConstraint",
                     [ "id",
                       // "abstract", "extends", "restricts", -- futureWork
                       "nodeKind", "datatype", "pattern", "flags", "length",
                       "reference", "minlength", "maxlength",
                       "mininclusive", "minexclusive", "maxinclusive", "maxexclusive",
                       "totaldigits", "fractiondigits", "values", "annotations", "semActs"]);
      return ret;
    },

    visitShapeRef: function (reference) {
      if (typeof reference !== "string") {
        let ex = Exception("visitShapeRef expected a string, not " + JSON.stringify(reference));
        console.warn(ex);
        throw ex;
      }
      return reference;
    },

    visitShapeExternal: function (expr) {
      this._testUnknownAttributes(expr, ["id"], "ShapeExternal", this.visitShapeNot)
      return Object.assign("id" in expr ? { id: expr.id } : {}, { type: "ShapeExternal" });
    },

    // _visitGroup: visit a grouping expression (someOf or eachOf)
    _visitGroup: function (expr, type) {
      var _Visitor = this;
      var r = Object.assign(
        // pre-declare an id so it sorts to the top
        "id" in expr ? { id: null } : { },
        { type: expr.type }
      );
      r.expressions = expr.expressions.map(function (nested) {
        return _Visitor.visitExpression(nested);
      });
      return this._maybeSet(expr, r, "expr",
                            ["id", "min", "max", "annotations", "semActs"], ["expressions"]);
    },

    visitTripleConstraint: function (expr) {
      return this._maybeSet(expr,
                            Object.assign(
                              // pre-declare an id so it sorts to the top
                              "id" in expr ? { id: null } : { },
                              { type: "TripleConstraint" }
                            ),
                            "TripleConstraint",
                            ["id", "inverse", "predicate", "valueExpr",
                             "min", "max", "annotations", "semActs"])
    },

    visitExpression: function (expr) {
      if (typeof expr === "string")
        return this.visitInclusion(expr);
      var r = expr.type === "TripleConstraint" ? this.visitTripleConstraint(expr) :
          expr.type === "OneOf" ? this.visitOneOf(expr) :
          expr.type === "EachOf" ? this.visitEachOf(expr) :
          null;
      if (r === null)
        throw Error("unexpected expression type: " + expr.type);
      else
        return r;
    },

    visitValues: function (values) {
      var _Visitor = this;
      return values.map(function (t) {
        return isTerm(t) || t.type === "Language" ?
          t :
          _Visitor.visitStemRange(t);
      });
    },

    visitStemRange: function (t) {
      var _Visitor = this; // console.log(Error(t.type).stack);
      // _expect(t, "type", "IriStemRange");
      if (!("type" in t))
        _Visitor.runtimeError(Error("expected "+JSON.stringify(t)+" to have a 'type' attribute."));
      var stemRangeTypes = ["IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
      if (stemRangeTypes.indexOf(t.type) === -1)
        _Visitor.runtimeError(Error("expected type attribute '"+t.type+"' to be in '"+stemRangeTypes+"'."));
      var stem;
      if (isTerm(t)) {
        _expect(t.stem, "type", "Wildcard");
        stem = { type: t.type, stem: { type: "Wildcard" } };
      } else {
        stem = { type: t.type, stem: t.stem };
      }
      if (t.exclusions) {
        stem.exclusions = t.exclusions.map(function (c) {
          return _Visitor.visitExclusion(c);
        });
      }
      return stem;
    },

    visitExclusion: function (c) {
      if (!isTerm(c)) {
        // _expect(c, "type", "IriStem");
        if (!("type" in c))
          _Visitor.runtimeError(Error("expected "+JSON.stringify(c)+" to have a 'type' attribute."));
        var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
        if (stemTypes.indexOf(c.type) === -1)
          _Visitor.runtimeError(Error("expected type attribute '"+c.type+"' to be in '"+stemTypes+"'."));
        return { type: c.type, stem: c.stem };
      } else {
        return c;
      }
    },

    visitInclusion: function (inclusion) {
      if (typeof inclusion !== "string") {
        let ex = Exception("visitInclusion expected a string, not " + JSON.stringify(inclusion));
        console.warn(ex);
        throw ex;
      }
      return inclusion;
    },

    _maybeSet: function (obj, ret, context, members, ignore) {
      var _Visitor = this;
      this._testUnknownAttributes(obj, ignore ? members.concat(ignore) : members, context, this._maybeSet)
      members.forEach(function (member) {
        var methodName = "visit" + member.charAt(0).toUpperCase() + member.slice(1);
        if (member in obj) {
          var f = _Visitor[methodName];
          if (typeof f !== "function") {
            throw Error(methodName + " not found in Visitor");
          }
          var t = f.call(_Visitor, obj[member]);
          if (t !== undefined) {
            ret[member] = t;
          }
        }
      });
      return ret;
    },
    _visitValue: function (v) {
      return v;
    },
    _visitList: function (l) {
      return l.slice();
    },
    _testUnknownAttributes: function (obj, expected, context, captureFrame) {
      var unknownMembers = Object.keys(obj).reduce(function (ret, k) {
        return k !== "type" && expected.indexOf(k) === -1 ? ret.concat(k) : ret;
      }, []);
      if (unknownMembers.length > 0) {
        var e = Error("unknown propert" + (unknownMembers.length > 1 ? "ies" : "y") + ": " +
                      unknownMembers.map(function (p) {
                        return "\"" + p + "\"";
                      }).join(",") +
                      " in " + context + ": " + JSON.stringify(obj));
        Error.captureStackTrace(e, captureFrame);
        throw e;
      }
    }

  };
  r.visitBase = r.visitStart = r.visitVirtual = r.visitClosed = r["visit@context"] = r._visitValue;
  r.visitRestricts = r.visitExtends = r._visitShapeExprList;
  r.visitExtra = r.visitAnnotations = r._visitList;
  r.visitAbstract = r.visitInverse = r.visitPredicate = r._visitValue;
  r.visitName = r.visitId = r.visitCode = r.visitMin = r.visitMax = r._visitValue;

  r.visitType = r.visitNodeKind = r.visitDatatype = r.visitPattern = r.visitFlags = r.visitLength = r.visitMinlength = r.visitMaxlength = r.visitMininclusive = r.visitMinexclusive = r.visitMaxinclusive = r.visitMaxexclusive = r.visitTotaldigits = r.visitFractiondigits = r._visitValue;
  r.visitOneOf = r.visitEachOf = r._visitGroup;
  r.visitShapeAnd = r.visitShapeOr = r._visitShapeGroup;
  r.visitInclude = r._visitValue;
  r.visitValueExpr = r.visitShapeExpr;
  return r;

  // Expect property p with value v in object o
  function _expect (o, p, v) {
    if (!(p in o))
      this._error("expected "+JSON.stringify(o)+" to have a ."+p);
    if (arguments.length > 2 && o[p] !== v)
      this._error("expected "+o[o]+" to equal ."+v);
  }

  function _error (str) {
    throw new Error(str);
  }
}

// The ShEx Vistor is here to minimize deps for ShExValidator.
/** create indexes for schema
 */
ShExVisitor.index = function (schema) {
  let index = {
    shapeExprs: {},
    tripleExprs: {}
  };
  let v = ShExVisitor();

  let oldVisitExpression = v.visitExpression;
  v.visitExpression = function (expression) {
    if (typeof expression === "object" && "id" in expression)
      index.tripleExprs[expression.id] = expression;
    return oldVisitExpression.call(v, expression);
  };

  let oldVisitShapeExpr = v.visitShapeExpr;
  v.visitShapeExpr = v.visitValueExpr = function (shapeExpr, label) {
    if (typeof shapeExpr === "object" && "id" in shapeExpr)
      index.shapeExprs[shapeExpr.id] = shapeExpr;
    return oldVisitShapeExpr.call(v, shapeExpr, label);
  };

  let oldVisitShapeDecl = v.visitShapeDecl;
  v.visitShapeDecl = v.visitValueExpr = function (shapeExpr, label) {
    if (typeof shapeExpr === "object" && "id" in shapeExpr)
      index.shapeExprs[shapeExpr.id] = shapeExpr;
    return oldVisitShapeDecl.call(v, shapeExpr, label);
  };

  v.visitSchema(schema);
  return index;
}

if (true)
  module.exports = ShExVisitor;



/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    Validator: __webpack_require__(4),
    Util: __webpack_require__(1),
    Parser: __webpack_require__(10),
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* ShExValidator - javascript module to validate a graph with respect to Shape Expressions
 *
 * Status: 1/2 tested, no known bugs.
 *
 * TODO:
 *   constraint violation reporting.
 */

var ShExValidator = (function () {
var UNBOUNDED = -1;

// interface constants
var Start = { term: "START" }
var InterfaceOptions = {
  "or": {
    "oneOf": "exactly one disjunct must pass",
    "someOf": "one or more disjuncts must pass",
    "firstOf": "disjunct evaluation stops after one passes"
  },
  "partition": {
    "greedy": "each triple constraint consumes all triples matching predicate and object",
    "exhaustive": "search all mappings of triples to triple constriant"
  }
};

var VERBOSE = "VERBOSE" in process.env;
// **ShExValidator** provides ShEx utility functions

var ProgramFlowError = { type: "ProgramFlowError", errors: { type: "UntrackedError" } };

var RdfTerm = __webpack_require__(0);
let ShExVisitor = __webpack_require__(2);
let ShExUtil = __webpack_require__(1);
// var ShExWriter = require("@shexjs/writer");
const Hierarchy = __webpack_require__(8)

function getLexicalValue (term) {
  return RdfTerm.isIRI(term) ? term :
    RdfTerm.isLiteral(term) ? RdfTerm.getLiteralValue(term) :
    term.substr(2); // bnodes start with "_:"
}


var XSD = "http://www.w3.org/2001/XMLSchema#";
var integerDatatypes = [
  XSD + "integer",
  XSD + "nonPositiveInteger",
  XSD + "negativeInteger",
  XSD + "long",
  XSD + "int",
  XSD + "short",
  XSD + "byte",
  XSD + "nonNegativeInteger",
  XSD + "unsignedLong",
  XSD + "unsignedInt",
  XSD + "unsignedShort",
  XSD + "unsignedByte",
  XSD + "positiveInteger"
];

var decimalDatatypes = [
  XSD + "decimal",
].concat(integerDatatypes);

var numericDatatypes = [
  XSD + "float",
  XSD + "double"
].concat(decimalDatatypes);

var numericParsers = {};
numericParsers[XSD + "integer"] = function (label, parseError) {
  if (!(label.match(/^[+-]?[0-9]+$/))) {
    parseError("illegal integer value '" + label + "'");
  }
  return parseInt(label);
};
numericParsers[XSD + "decimal"] = function (label, parseError) {
  if (!(label.match(/^[+-]?(?:[0-9]*\.[0-9]+|[0-9]+)$/))) { // XSD has no pattern for decimal?
    parseError("illegal decimal value '" + label + "'");
  }
  return parseFloat(label);
};
const DECIMAL_REGEX = /^[+\-]?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][+\-]?[0-9]+)?$/;
numericParsers[XSD + "float"  ] = function (label, parseError) {
  if (label === "NaN") return NaN;
  if (label === "INF") return Infinity;
  if (label === "-INF") return -Infinity;
  if (!(label.match(DECIMAL_REGEX))) { // XSD has no pattern for float?
    parseError("illegal float value '" + label + "'");
  }
  return parseFloat(label);
};
numericParsers[XSD + "double" ] = function (label, parseError) {
  if (label === "NaN") return NaN;
  if (label === "INF") return Infinity;
  if (label === "-INF") return -Infinity;
  if (!(label.match(DECIMAL_REGEX))) {
    parseError("illegal double value '" + label + "'");
  }
  return Number(label);
};

testRange = function (value, datatype, parseError) {
  const ranges = {
    //    integer            -1 0 1 +1 | "" -1.0 +1.0 1e0 NaN INF
    //    decimal            -1 0 1 +1 -1.0 +1.0 | "" 1e0 NaN INF
    //    float              -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | "" +INF
    //    double             -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | "" +INF
    //    nonPositiveInteger -1 0 +0 -0 | 1 +1 1a a1
    //    negativeInteger    -1 | 0 +0 -0 1
    //    long               -1 0 1 +1 |
    //    int                -1 0 1 +1 |
    //    short              -32768 0 32767 | -32769 32768
    //    byte               -128 0 127 | "" -129 128
    //    nonNegativeInteger 0 -0 +0 1 +1 | -1
    //    unsignedLong       0 1 | -1
    //    unsignedInt        0 1 | -1
    //    unsignedShort      0 65535 | -1 65536
    //    unsignedByte       0 255 | -1 256
    //    positiveInteger    1 | -1 0
    //    string             "" "a" "0"
    //    boolean            true false 0 1 | "" TRUE FALSE tRuE fAlSe -1 2 10 01
    //    dateTime           "2012-01-02T12:34:56.78Z" | "" "2012-01-02T" "2012-01-02"
    integer:            { min: -Infinity           , max: Infinity },
    decimal:            { min: -Infinity           , max: Infinity },
    float:              { min: -Infinity           , max: Infinity },
    double:             { min: -Infinity           , max: Infinity },
    nonPositiveInteger: { min: -Infinity           , max: 0        },
    negativeInteger:    { min: -Infinity           , max: -1       },
    long:               { min: -9223372036854775808, max: 9223372036854775807 },
    int:                { min: -2147483648         , max: 2147483647 },
    short:              { min: -32768              , max: 32767    },
    byte:               { min: -128                , max: 127      },
    nonNegativeInteger: { min: 0                   , max: Infinity },
    unsignedLong:       { min: 0                   , max: 18446744073709551615 },
    unsignedInt:        { min: 0                   , max: 4294967295 },
    unsignedShort:      { min: 0                   , max: 65535    },
    unsignedByte:       { min: 0                   , max: 255      },
    positiveInteger:    { min: 1                   , max: Infinity }
  }
  var parms = ranges[datatype.substr(XSD.length)];
  if (!parms) throw Error("unexpected datatype: " + datatype);
  if (value < parms.min) {
    parseError("\"" + value + "\"^^<" + datatype + "> is less than the min:", parms.min);
  } else if (value > parms.max) {
    parseError("\"" + value + "\"^^<" + datatype + "> is greater than the max:", parms.min);
  }
};

/*
function intSubType (spec, label, parseError) {
  var ret = numericParsers[XSD + "integer"](label, parseError);
  if ("min" in spec && ret < spec.min)
    parseError("illegal " + XSD + spec.type + " value '" + label + "' should not be < " + spec.min);
  if ("max" in spec && ret > spec.max)
    parseError("illegal " + XSD + spec.type + " value '" + label + "' should not be > " + spec.max);
  return ret;
}
[{type: "nonPositiveInteger", max: 0},
 {type: "negativeInteger", max: -1},
 {type: "long", min: -9223372036854775808, max: 9223372036854775807}, // beyond IEEE double
 {type: "int", min: -2147483648, max: 2147483647},
 {type: "short", min: -32768, max: 32767},
 {type: "byte", min: -128, max: 127},
 {type: "nonNegativeInteger", min: 0},
 {type: "unsignedLong", min: 0, max: 18446744073709551615},
 {type: "unsignedInt", min: 0, max: 4294967295},
 {type: "unsignedShort", min: 0, max: 65535},
 {type: "unsignedByte", min: 0, max: 255},
 {type: "positiveInteger", min: 1}].forEach(function (i) {
   numericParsers[XSD + i.type ] = function (label, parseError) {
     return intSubType(i, label, parseError);
   };
 });
*/

var stringTests = {
  length   : function (v, l) { return v.length === l; },
  minlength: function (v, l) { return v.length  >= l; },
  maxlength: function (v, l) { return v.length  <= l; }
};

var numericValueTests = {
  mininclusive  : function (n, m) { return n >= m; },
  minexclusive  : function (n, m) { return n >  m; },
  maxinclusive  : function (n, m) { return n <= m; },
  maxexclusive  : function (n, m) { return n <  m; }
};

var decimalLexicalTests = {
  totaldigits   : function (v, d) {
    var m = v.match(/[0-9]/g);
    return m && m.length <= d;
  },
  fractiondigits: function (v, d) {
    var m = v.match(/^[+-]?[0-9]*\.?([0-9]*)$/);
    return m && m[1].length <= d;
  }
};

        function ldify (term) {
          if (term[0] !== "\"")
            return term;
          var ret = { value: RdfTerm.getLiteralValue(term) };
          var dt = RdfTerm.getLiteralType(term);
          if (dt &&
              dt !== "http://www.w3.org/2001/XMLSchema#string" &&
              dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString")
            ret.type = dt;
          var lang = RdfTerm.getLiteralLanguage(term)
          if (lang)
            ret.language = lang;
          return ret;
        }

    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }

/* ShExValidator_constructor - construct an object for validating a schema.
 *
 * schema: a structure produced by a ShEx parser or equivalent.
 * options: object with controls for
 *   lax(true): boolean: whine about missing types in schema.
 *   diagnose(false): boolean: makde validate return a structure with errors.
 */
function ShExValidator_constructor(schema, options) {
  if (!(this instanceof ShExValidator_constructor))
    return new ShExValidator_constructor(schema, options);
  let index = schema._index || ShExVisitor.index(schema)
  this.type = "ShExValidator";
  options = options || {};
  this.options = options;
  this.options.or = this.options.or || "someOf";
  this.options.partition = this.options.partition || "exhaustive";
  if (!("noCache" in options && options.noCache))
    this.known = {};

  var _ShExValidator = this;
  this.schema = schema;
  this._expect = this.options.lax ? noop : expect; // report errors on missing types.
  this._optimize = {}; // optimizations:
    // hasRepeatedGroups: whether there are patterns like (:p1 ., :p2 .)*
  this.reset = function () {  }; // included in case we need it later.
  // var regexModule = this.options.regexModule || require("@shexjs/eval-simple-1err");
  var regexModule = this.options.regexModule || __webpack_require__(9);

  /* getAST - compile a traditional regular expression abstract syntax tree.
   * Tested but not used at present.
   */
  this.getAST = function () {
    return {
      type: "AST",
      shapes: schema.shapes.reduce(function (ret, shape) {
        ret[shape.id] = {
          type: "ASTshape",
          expression: _compileShapeToAST(shape.expression, [], _ShExValidator.schema)
        };
        return ret;
      }, {})
    };
  };

  /* indexTripleConstraints - compile regular expression and index triple constraints
   */
  this.indexTripleConstraints = function (expression) {
    // list of triple constraints from (:p1 ., (:p2 . | :p3 .))
    var tripleConstraints = [];

    if (expression)
      indexTripleConstraints_dive(expression);
    return tripleConstraints;

    function indexTripleConstraints_dive (expr) {
      if (typeof expr === "string") // Inclusion
        return record(indexTripleConstraints_dive(index.tripleExprs[expr]));

      else if (expr.type === "TripleConstraint") {
        tripleConstraints.push(expr);
        return record([tripleConstraints.length - 1]); // index of expr
      }

      else if (expr.type === "OneOf" || expr.type === "EachOf")
        return record(expr.expressions.reduce(function (acc, nested) {
          return acc.concat(indexTripleConstraints_dive(nested));
        }, []));

      else if (expr.type === "NestedShape")
        return [];

      else
        runtimeError("unexpected expr type: " + expr.type);

      function record (tcs) {
        if (typeof expr !== "string" && "onShapeExpression" in expr) // !ShapeRef
          expr.scopedTripleConstraints = tcs;
        return tcs;
      }
    };
  };

  /* emptyTracker - a tracker that does nothing
   */
  this.emptyTracker = function () {
    var noop = x => x;
    return {
      recurse: noop,
      known: noop,
      enter: function (point, label) { ++this.depth; },
      exit: function (point, label, ret) { --this.depth; },
      depth: 0
    };
  };

  /* validate - test point in db against the schema for labelOrShape
   * depth: level of recurssion; for logging.
   */
  this.validate = function (db, point, label, tracker, seen, subGraph) {
    // default to schema's start shape
    if (typeof point === "object" && "termType" in point) {
      point = RdfTerm.internalTerm(point)
    }
    if (typeof point === "object") {
      var shapeMap = point;
      if (this.options.results === "api") {
        return shapeMap.map(pair => {
          var time = new Date();
          var res = this.validate(db, pair.node, pair.shape, label, tracker); // really tracker and seen
          time = new Date() - time;
          return {
            node: pair.node,
            shape: pair.shape,
            status: "errors" in res ? "nonconformant" : "conformant",
            appinfo: res,
            elapsed: time
          };
        });
      }
      var results = shapeMap.reduce((ret, pair) => {
        var res = this.validate(db, pair.node, pair.shape, label, tracker, subGraph); // really tracker and seen
        return "errors" in res ?
          { passes: ret.passes, failures: ret.failures.concat(res) } :
          { passes: ret.passes.concat(res), failures: ret.failures } ;
      }, {passes: [], failures: []});
      if (false) { var _add, ret; }
      if (results.failures.length > 0) {
        return results.failures.length !== 1 ?
          { type: "FailureList", errors: results.failures } :
          results.failures [0];
      } else {
        return results.passes.length !== 1 ?
          { type: "SolutionList", solutions: results.passes } :
          results.passes [0];
      }
    }

    var outside = tracker === undefined;
    // logging stuff
    if (!tracker)
      tracker = this.emptyTracker();
    if (!label || label === Start) {
      if (!schema.start)
        runtimeError("start production not defined");
    }

    var shape = null;
    if (label == Start) {
      shape = schema.start;
    } else if (!("shapes" in this.schema) || this.schema.shapes.length === 0) {
      runtimeError("shape " + label + " not found; no shapes in schema");
    } else if (label in index.shapeExprs) {
      shape = index.shapeExprs[label]
    } else {
      runtimeError("shape " + label + " not found in:\n" + Object.keys(index.shapeExprs || []).map(s => "  " + s).join("\n"));
    }
    if (typeof label !== "string")
      return this._validateShapeDecl(db, point, shape, Start, 0, tracker, seen);

    if (seen === undefined)
      seen = {};
    var seenKey = point + "@" + (label === Start ? "_: -start-" : label);
    if (!subGraph) {
      if (seenKey in seen)
        return tracker.recurse({
          type: "Recursion",
          node: ldify(point),
          shape: label
        });
      if ("known" in this && seenKey in this.known)
        return tracker.known(this.known[seenKey]);
      seen[seenKey] = { point: point, shape: label };
      tracker.enter(point, label);
    }

    function schemaExtensions (schema) {
      var abstractness = {};
      var extensions = Hierarchy.create();
      makeSchemaVisitor().visitSchema(schema);
      return extensions.children;

      function makeSchemaVisitor (schema) {
        var schemaVisitor = ShExUtil.Visitor();
        var curLabel;
        var curAbstract;
        var oldVisitShapeDecl = schemaVisitor.visitShapeDecl;
        schemaVisitor.visitShapeDecl = function (decl) {
          curLabel = decl.id;
          curAbstract = decl.abstract;
          abstractness[decl.id] = decl.abstract;
          return oldVisitShapeDecl.call(schemaVisitor, decl, decl.id);
        };
        var oldVisitShape = schemaVisitor.visitShape;
        schemaVisitor.visitShape = function (shape) {
          if ("extends" in shape) {
            shape.extends.forEach(ext => {
              var extendsVisitor = ShExUtil.Visitor();
              extendsVisitor.visitShapeRef = function (parent) {
                extensions.add(parent, curLabel);
                // makeSchemaVisitor().visitSchema(schema);
                return "null";
              };
              extendsVisitor.visitShapeExpr(ext);
            })
          }
          return "null";
        };
        return schemaVisitor;
      }
    }
    // Get derived shapes.
    var candidates = [label];
    if (!subGraph) {
      candidates = candidates.concat(schemaExtensions(this.schema)[label] || []);
      // Uniquify list.
      for (var i = candidates.length - 1; i >= 0; --i) {
        if (candidates.indexOf(candidates[i]) < i)
          candidates.splice(i, 1);
      }
      // Filter out abstract shapes.
      candidates = candidates.filter(l => !index.shapeExprs[l].abstract);
    }
    var results = candidates.reduce((ret, label) => {
      var shapeExpr = index.shapeExprs[label];
      var res = this._validateShapeDecl(db, point, shapeExpr, label, 0, tracker, seen, subGraph);
      return "errors" in res ?
        { passes: ret.passes, failures: ret.failures.concat(res) } :
        { passes: ret.passes.concat(res), failures: ret.failures } ;

    }, {passes: [], failures: []});
    var ret;
    if (results.passes.length > 0) {
      ret = results.passes.length !== 1 ?
        { type: "SolutionList", solutions: results.passes } :
      results.passes [0];
    } else if (results.failures.length > 0) {
      ret = results.failures.length !== 1 ?
        { type: "FailureList", errors: results.failures } :
      results.failures [0];
    } else {
      ret = {
        type: "AbstractShapeFailure",
        shape: label,
        errors: label + " has no non-abstract children"
      };
    }
    if (!subGraph) {
      tracker.exit(point, label, ret);
      delete seen[seenKey];
      // Don't cache EXTENDS validations as they aren't testing the neighborhood.
      if ("known" in this)
        this.known[seenKey] = ret;
    }
    if ("startActs" in schema && outside) {
      ret.startActs = schema.startActs;
    }
    return ret;
  }

  this._validateShapeDecl = function (db, point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph) {
    var expr = shapeExpr.type === "ShapeDecl" ? shapeExpr.shapeExpr : shapeExpr;
    return this._validateShapeExpr(db, point, expr, shapeLabel, depth, tracker, seen, subgraph);
  }

  this._validateShapeExpr = function (db, point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph) {
    if (point === "")
      throw Error("validation needs a valid focus node");
    if (typeof shapeExpr === "string") { // ShapeRef
      return this._validateShapeDecl(db, point, index.shapeExprs[shapeExpr], shapeExpr, depth, tracker, seen, subgraph);
    } else if (shapeExpr.type === "NodeConstraint") {
      var sub = this._errorsMatchingNodeConstraint(point, shapeExpr, null);
      return sub.errors && sub.errors.length ? {
        type: "Failure",
        node: ldify(point),
        shape: shapeLabel,
        errors: sub.errors.map(function (error) { // !!! just sub.errors?
          return {
            type: "NodeConstraintViolation",
            shapeExpr: shapeExpr,
            error: error
          };
        })
      } : {
        type: "NodeTest",
        node: ldify(point),
        shape: shapeLabel,
        shapeExpr: shapeExpr
      };
    } else if (shapeExpr.type === "Shape") {
      return this._validateShape(db, point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph);
      // return this._validateShape(db, point, regexModule.compile(schema, shapeExpr, index),
      //                            shapeExpr, shapeLabel, tracker, seen);
    } else if (shapeExpr.type === "ShapeExternal") {
      return this.options.validateExtern(db, point, shapeLabel, tracker, seen);
    } else if (shapeExpr.type === "ShapeOr") {
      var errors = [];
      for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {
        var nested = shapeExpr.shapeExprs[i];
        var sub = this._validateShapeExpr(db, point, nested, shapeLabel, depth, tracker, seen, subgraph);
        if ("errors" in sub)
          errors.push(sub);
        else
          return { type: "ShapeOrResults", solution: sub };
      }
      return { type: "ShapeOrFailure", errors: errors };
    } else if (shapeExpr.type === "ShapeNot") {
      var sub = this._validateShapeExpr(db, point, shapeExpr.shapeExpr, shapeLabel, depth, tracker, seen, subgraph);
      if ("errors" in sub)
          return { type: "ShapeNotResults", solution: sub };
        else
          return { type: "ShapeNotFailure", errors: sub };
    } else if (shapeExpr.type === "ShapeAnd") {
      var passes = [];
      var errors = [];
      for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {
        var nested = shapeExpr.shapeExprs[i];
        var sub = this._validateShapeExpr(db, point, nested, shapeLabel, depth, tracker, seen, subgraph);
        if ("errors" in sub)
          errors.push(sub);
        else
          passes.push(sub);
      }
      if (errors.length > 0) {
        return  { type: "ShapeAndFailure", errors: errors};
      }
      return { type: "ShapeAndResults", solutions: passes };
    } else
      throw Error("expected one of Shape{Ref,And,Or} or NodeConstraint, got " + JSON.stringify(shapeExpr));
  }

  this._validateShape = function (db, point, shape, shapeLabel, depth, tracker, seen, subgraph) {
    var _ShExValidator = this;
    var valParms = { db: db, shapeLabel: shapeLabel, depth: depth, tracker: tracker, seen: seen };

    var extendedTCs = []; // TCs found in the extends
    var constraintToExtends = []; // map from TC to list of extends
    effectiveShapeExpression(shape, extendedTCs, constraintToExtends);
      // var tempShape = new ShExWriter({simplifyParentheses: true})._writeShapeExpr(effectiveExpr).join('');
      // console.log(JSON.stringify(effectiveExpr, null, 2))
      // console.log(tempShape)
      // var tempSchema = {type:"Schema", shapes: {}}; tempSchema.shapes[labelOrShape] = effectiveExpr;
      // new ShEx.Writer().writeSchema(tempSchema, function (error, text, prefixes) { console.log(text) })


    var ret = null;
    var startAcionStorage = {}; // !!! need test to see this write to results structure.
    if ("startActs" in schema) {
      const semActErrors = this.semActHandler.dispatchAll(schema.startActs, null, startAcionStorage)
      if (semActErrors.length)
        return {
          type: "Failure",
          node: ldify(point),
          shape: shapeLabel,
          errors: semActErrors
        }; // some semAct aborted !! return real error
    }
    // @@ add to tracker: f("validating <" + point + "> as <" + shapeLabel + ">");

    var fromDB  = (subgraph || db).getNeighborhood(point, shapeLabel, shape);
    var outgoing = indexNeighborhood(fromDB.outgoing.sort(
      (l, r) => l.predicate.localeCompare(r.predicate) || sparqlOrder(l.object, r.object)
    ));
    var incoming = indexNeighborhood(fromDB.incoming.sort(
      (l, r) => l.predicate.localeCompare(r.predicate) || sparqlOrder(l.subject, r.subject)
    ));
    var outgoingLength = fromDB.outgoing.length;
    var neighborhood = fromDB.outgoing.concat(fromDB.incoming);

    var localTCs = this.indexTripleConstraints(shape.expression);
    var constraintList = extendedTCs.concat(localTCs); // !! adds tcis to shape.expression
    var tripleList = constraintList.reduce(function (ret, constraint, cNo) {

      // subject and object depend on direction of constraint.
      var searchSubject = constraint.inverse ? null : point;
      var searchObject = constraint.inverse ? point : null;
      var index = constraint.inverse ? incoming : outgoing;

      // get triples matching predciate
      var matchPredicate = index.byPredicate[constraint.predicate] ||
        []; // empty list when no triple matches that constraint

      // strip to triples matching value constraints (apart from @<someShape>)
      var matchConstraints = _ShExValidator._triplesMatchingShapeExpr(
        matchPredicate, constraint, valParms
      );

      matchConstraints.hits.forEach(function (evidence) {
        var tNo = neighborhood.indexOf(evidence.triple);
        ret.constraintList[tNo].push(cNo);
        ret.results[cNo][tNo] = evidence.sub;
      });
      matchConstraints.misses.forEach(function (evidence) {
        var tNo = neighborhood.indexOf(evidence.triple);
        ret.misses[tNo] = {constraintNo: cNo, errors: evidence.errors};
      });
      return ret;
    }, { misses: {}, results: _alist(constraintList.length), constraintList:_alist(neighborhood.length) }); // start with [[],[]...]

    // @@ add to tracker: f("constraints by triple: ", JSON.stringify(tripleList.constraintList));

    var extras = []; // triples accounted for by EXTRA
    var misses = tripleList.constraintList.reduce(function (ret, constraints, ord) {
      if (constraints.length === 0 &&   // matches no constraints
          ord < outgoingLength &&       // not an incoming triple
          ord in tripleList.misses) {   // predicate matched some constraint(s)
        if (shape.extra !== undefined &&
            shape.extra.indexOf(neighborhood[ord].predicate) !== -1) {
          extras.push(ord);
        } else {                                            // not declared extra
          ret.push({                                        // so it's a missed triple.
            tripleNo: ord,
            constraintNo: tripleList.misses[ord].constraintNo,
            errors: tripleList.misses[ord].errors
          });
        }
      }
      return ret;
    }, []);

    var xp = crossProduct(tripleList.constraintList);
    var partitionErrors = [];
    var regexEngine = regexModule.compile(schema, shape, index);
    while ((misses.length === 0 || this.options.partition !== "greedy") && xp.next() && ret === null) {
      // caution: early continues

      var usedTriples = []; // [{s1,p1,o1},{s2,p2,o2}] implicated triples -- used for messages
      var constraintMatchCount = // [2,1,0,1] how many triples matched a constraint
        _seq(neighborhood.length).map(function () { return 0; });
      var tripleToConstraintMapping0 = xp.get(); // [0,1,0,3] mapping from triple to constraint
      var tripleToConstraintMapping = []
      var tripleToExtendsMapping = []
      var extendsToTriples = _seq((shape.extends || []).length).map(() => [])
      tripleToConstraintMapping0.forEach((cNo, tNo) => {
        if (cNo < extendedTCs.length) {
          constraintToExtends[cNo].forEach(extNo => {
            extendsToTriples[extNo].push(neighborhood[tNo]);
            tripleToExtendsMapping[tNo] = cNo;
            tripleToConstraintMapping[tNo] = undefined;
          })
        } else {
          tripleToExtendsMapping[tNo] = undefined;
          tripleToConstraintMapping[tNo] = cNo;
        }
      });
      // Triples not mapped to triple constraints are not allowed in closed shapes.
      if (shape.closed) {
        var unexpectedTriples = neighborhood.slice(0, outgoingLength).filter((t, i) => {
          return tripleToExtendsMapping[i] === undefined && // didn't match an EXTENDS
          tripleToConstraintMapping[i] === undefined && // didn't match a constraint
          extras.indexOf(i) === -1; // wasn't in EXTRAs.
        });
        if (unexpectedTriples.length > 0) {
          partitionErrors.push({
            errors: [
              {
                type: "ClosedShapeViolation",
                unexpectedTriples: unexpectedTriples
              }
            ]
          });// closed shape violation.
        }
      }

      // Set usedTriples and constraintMatchCount.
      tripleToConstraintMapping.forEach(function (tpNumber, ord) {
        if (tpNumber !== undefined) {
          usedTriples.push(neighborhood[ord]);
          ++constraintMatchCount[tpNumber];
        }
      });

      // Pivot to triples by constraint.
      function _constraintToTriples () {
        return tripleToConstraintMapping.slice().
          reduce(function (ret, cNo, tNo) {
            if (cNo !== undefined)
              ret[cNo].push({tNo: tNo, res: tripleList.results[cNo][tNo]});
            return ret;
          }, _seq(constraintList.length).map(() => [])); // [length][]
      }
      var constraintToTriplesMapping = _constraintToTriples(); // e.g. [[t0, t2], [t1, t3]]

      tripleToConstraintMapping.slice().sort(function (a,b) { return a-b; }).filter(function (i) { // sort constraint numbers
        return i !== undefined;
      }).map(function (n) { return n + " "; }).join(""); // e.g. 0 0 1 3

      var results = passScoped(shape, extendsToTriples, valParms);
      if (!results) {
        results = {};
      }
      if (!results.errors) {
        results.errors = [];
      }
      var sub = regexEngine.match(db, point, constraintList, constraintToTriplesMapping, tripleToConstraintMapping, neighborhood, this.semActHandler, null);
      if (!("errors" in sub)) {
        results.extended = { type: "ExtendedResults", extensions: results };
        if (Object.keys(sub).length > 0) // no empty objects from {}s.
          results.local = sub;
      } else {
        results.errors.push(sub.errors);
      }
      if (results.errors.length > 0) {
        partitionErrors.push({
          errors: results.errors
        });
        if (_ShExValidator.options.partition !== "exhaustive")
          break;
        else
          continue;
      }

      // @@ add to tracker: f("post-regexp " + usedTriples.join(" "));

      var possibleRet = { type: "ShapeTest", node: ldify(point), shape: shapeLabel };
      if (Object.keys(results).length > 0) // only include .solution for non-empty pattern
        possibleRet.solution = results;
      if ("semActs" in shape) {
        const semActErrors = this.semActHandler.dispatchAll(shape.semActs, results, possibleRet)
        if (semActErrors.length) {
          // some semAct aborted
          partitionErrors.push({
            errors: semActErrors
          });
          if (_ShExValidator.options.partition !== "exhaustive")
            break;
          else
            continue;
        }
      }
      // @@ add to tracker: f("final " + usedTriples.join(" "));

      ret = possibleRet;
      partitionErrors = [];
      // alts.push(tripleToConstraintMapping);

      function passScoped (expr, extendsToTriples, valParms) {
        if (!("extends" in expr))
          return null;
        var passes = [];
        var errors = [];
        for (var eNo = 0; eNo < expr.extends.length; ++eNo) {
          var extend = expr.extends[eNo];
          var subgraph = ShExUtil.makeTriplesDB(null); // These triples were tracked earlier.
          extendsToTriples[eNo].forEach(t => subgraph.addOutgoingTriples([t]));
          var sub = _ShExValidator._errorsMatchingShapeExpr(point, extend, valParms, subgraph);

          if ("errors" in sub)
            errors.push(sub);
          else
            passes.push(sub);
        }
        if (errors.length > 0) {
          return { type: "ExtensionFailure", errors: errors};
        }
        return { type: "ExtensionResults", solutions: passes };
      }

    }
    var missErrors = misses.map(function (miss) {
      var t = neighborhood[miss.tripleNo];
      return {
        type: "TypeMismatch",
        triple: {type: "TestedTriple", subject: t.subject, predicate: t.predicate, object: ldify(t.object)},
        constraint: constraintList[miss.constraintNo],
        errors: miss.errors
      };
    });
    let errors = missErrors.concat(partitionErrors.length === 1 ? partitionErrors[0].errors : partitionErrors);
    if (errors.length > 0) {
      ret = {
        type: "Failure",
        node: ldify(point),
        shape: shapeLabel,
        errors: errors
      };
    }

    if (VERBOSE) { // remove N3jsTripleToString
      neighborhood.forEach(function (t) {
        delete t.toString;
      });
    }
    // @@ add to tracker: f("</" + shapeLabel + ">");
    return addShapeAttributes(ret);

    function addShapeAttributes (ret) {
      if ("annotations" in shape)
        ret.annotations = shape.annotations;
      return ret;
    }
  };

  this._triplesMatchingShapeExpr = function (triples, constraint, valParms) {
    var _ShExValidator = this;
    var misses = [];
    var hits = [];
    triples.forEach(function (triple) {
      var value = constraint.inverse ? triple.subject : triple.object;
      var sub;
      var oldBindings = JSON.parse(JSON.stringify(_ShExValidator.semActHandler.results));
      var errors = constraint.valueExpr === undefined ?
          undefined :
          (sub = _ShExValidator._errorsMatchingShapeExpr(value, constraint.valueExpr, valParms)).errors;
      if (!errors) {
        hits.push({triple: triple, sub: sub});
      } else if (hits.indexOf(triple) === -1) {
        _ShExValidator.semActHandler.results = JSON.parse(JSON.stringify(oldBindings));
        misses.push({triple: triple, errors: errors});
      }
    });
    return { hits: hits, misses: misses };
  }
  this._errorsMatchingShapeExpr = function (value, valueExpr, valParms, subgraph) {
    var _ShExValidator = this;
    if (typeof valueExpr === "string") { // ShapeRef
      return _ShExValidator.validate(valParms.db, value, valueExpr, valParms.tracker, valParms.seen, subgraph);
    } else if (valueExpr.type === "NodeConstraint") {
      return this._errorsMatchingNodeConstraint(value, valueExpr, null);
    } else if (valueExpr.type === "Shape") {
      return _ShExValidator._validateShapeExpr(valParms.db, value, valueExpr, valParms.shapeLabel, valParms.depth, valParms.tracker, valParms.seen, subgraph)
      return validateBySExpr(value, valueExpr);
    } else if (valueExpr.type === "ShapeOr") {
      var errors = [];
      for (var i = 0; i < valueExpr.shapeExprs.length; ++i) {
        var nested = valueExpr.shapeExprs[i];
        var sub = _ShExValidator._errorsMatchingShapeExpr(value, nested, valParms, subgraph);
        if ("errors" in sub)
          errors.push(sub);
        else
          return { type: "ShapeOrResults", solution: sub };
      }
      return { type: "ShapeOrFailure", errors: errors };
    } else if (valueExpr.type === "ShapeAnd") {
      var passes = [];
      for (var i = 0; i < valueExpr.shapeExprs.length; ++i) {
        var nested = valueExpr.shapeExprs[i];
        var sub = _ShExValidator._errorsMatchingShapeExpr(value, nested, valParms, subgraph);
        if ("errors" in sub)
          return { type: "ShapeAndFailure", errors: [sub] };
        else
          passes.push(sub);
      }
      return { type: "ShapeAndResults", solutions: passes };
    } else if (valueExpr.type === "ShapeNot") {
      var sub = _ShExValidator._errorsMatchingShapeExpr(value, valueExpr.shapeExpr, valParms, subgraph);
      // return sub.errors && sub.errors.length ? {} : {
      //   errors: ["Error validating " + value + " as " + JSON.stringify(valueExpr) + ": expected NOT to pass"] };
      var ret = Object.assign({
        type: null,
        focus: value
      }, valueExpr);
      if (sub.errors && sub.errors.length) {
        ret.type = "ShapeNotTest";
        // ret = {};
      } else {
        ret.type = "ShapeNotFailure";
        ret.errors = ["Error validating " + value + " as " + JSON.stringify(valueExpr) + ": expected NOT to pass"]
      }
      return ret;
    } else {
      throw Error("unknown value expression type '" + valueExpr.type + "'");
    }
  };

  /* _errorsMatchingNodeConstraint - return whether the value matches the value
   * expression without checking shape references.
   */
  this._errorsMatchingNodeConstraint = function (value, valueExpr, recurse) {
    var errors = [];
    var label = RdfTerm.isLiteral(value) ? RdfTerm.getLiteralValue(value) :
      RdfTerm.isBlank(value) ? value.substring(2) :
      value;
    var dt = RdfTerm.isLiteral(value) ? RdfTerm.getLiteralType(value) : null;
    var numeric = integerDatatypes.indexOf(dt) !== -1 ? XSD + "integer" : numericDatatypes.indexOf(dt) !== -1 ? dt : undefined;

    function validationError () {
      var errorStr = Array.prototype.join.call(arguments, "");
      errors.push("Error validating " + value + " as " + JSON.stringify(valueExpr) + ": " + errorStr);
      return false;
    }
    // if (negated) ;
    if (false) {} else {
      if ("nodeKind" in valueExpr) {
        if (["iri", "bnode", "literal", "nonliteral"].indexOf(valueExpr.nodeKind) === -1) {
          validationError("unknown node kind '" + valueExpr.nodeKind + "'");
        }
        if (RdfTerm.isBlank(value)) {
          if (valueExpr.nodeKind === "iri" || valueExpr.nodeKind === "literal") {
            validationError("blank node found when " + valueExpr.nodeKind + " expected");
          }
        } else if (RdfTerm.isLiteral(value)) {
          if (valueExpr.nodeKind !== "literal") {
            validationError("literal found when " + valueExpr.nodeKind + " expected");
          }
        } else if (valueExpr.nodeKind === "bnode" || valueExpr.nodeKind === "literal") {
          validationError("iri found when " + valueExpr.nodeKind + " expected");
        }
      }

      if (valueExpr.datatype  && valueExpr.values  ) validationError("found both datatype and values in "   +tripleConstraint);

      if (valueExpr.datatype) {
        if (!RdfTerm.isLiteral(value)) {
          validationError("mismatched datatype: " + value + " is not a literal with datatype " + valueExpr.datatype);
        }
        else if (RdfTerm.getLiteralType(value) !== valueExpr.datatype) {
          validationError("mismatched datatype: " + RdfTerm.getLiteralType(value) + " !== " + valueExpr.datatype);
        }
        else if (numeric) {
          testRange(numericParsers[numeric](label, validationError), valueExpr.datatype, validationError);
        }
        else if (valueExpr.datatype === XSD + "boolean") {
          if (label !== "true" && label !== "false" && label !== "1" && label !== "0")
            validationError("illegal boolean value: " + label);
        }
        else if (valueExpr.datatype === XSD + "dateTime") {
          if (!label.match(/^[+-]?\d{4}-[01]\d-[0-3]\dT[0-5]\d:[0-5]\d:[0-5]\d(\.\d+)?([+-][0-2]\d:[0-5]\d|Z)?$/))
            validationError("illegal dateTime value: " + label);
        }
      }

      if (valueExpr.values) {
        if (RdfTerm.isLiteral(value) && valueExpr.values.reduce((ret, v) => {
          if (ret) return true;
          var ld = ldify(value);
          if (v.type === "Language") {
            return v.languageTag === ld.language; // @@ use equals/normalizeTest
          }
          if (!(typeof v === "object" && "value" in v))
            return false;
          return v.value === ld.value &&
            v.type === ld.type &&
            v.language === ld.language;
        }, false)) {
          // literal match
        } else if (valueExpr.values.indexOf(value) !== -1) {
          // trivial match
        } else {
          if (!(valueExpr.values.some(function (valueConstraint) {
            if (typeof valueConstraint === "object" && !("value" in valueConstraint)) { // isTerm me -- strike "value" in
              if (!("type" in valueConstraint))
                runtimeError("expected "+JSON.stringify(valueConstraint)+" to have a 'type' attribute.");
              var stemRangeTypes = [
                "Language",
                "IriStem",      "LiteralStem",      "LanguageStem",
                "IriStemRange", "LiteralStemRange", "LanguageStemRange"
              ];
              if (stemRangeTypes.indexOf(valueConstraint.type) === -1)
                runtimeError("expected type attribute '"+valueConstraint.type+"' to be in '"+stemRangeTypes+"'.");

              /* expect N3.js literals with {Literal,Language}StemRange
               *       or non-literals with IriStemRange
               */
              function normalizedTest (val, ref, func) {
                if (RdfTerm.isLiteral(val)) {
                  if (["LiteralStem", "LiteralStemRange"].indexOf(valueConstraint.type) !== -1) {
                    return func(RdfTerm.getLiteralValue(val), ref);
                  } else if (["LanguageStem", "LanguageStemRange"].indexOf(valueConstraint.type) !== -1) {
                    return func(RdfTerm.getLiteralLanguage(val) || null, ref);
                  } else {
                    return validationError("literal " + val + " not comparable with non-literal " + ref);
                  }
                } else {
                  if (["IriStem", "IriStemRange"].indexOf(valueConstraint.type) === -1) {
                    return validationError("nonliteral " + val + " not comparable with literal " + JSON.stringify(ref));
                  } else {
                    return func(val, ref);
                  }
                }
              }
              function startsWith (val, ref) {
                return normalizedTest(val, ref, (l, r) => {
                  return (valueConstraint.type === "LanguageStem" ||
                          valueConstraint.type === "LanguageStemRange") ?
                    // rfc4647 basic filtering
                    l !== null && (l === r || r === "" || l[r.length] === "-") :
                    // simple substring
                    l.startsWith(r);
                });
              }
              function equals (val, ref) {
                return normalizedTest(val, ref, (l, r) => { return l === r; });
              }

              if (!isTerm(valueConstraint.stem)) {
                expect(valueConstraint.stem, "type", "Wildcard");
                // match whatever but check exclusions below
              } else {
                if (!(startsWith(value, valueConstraint.stem))) {
                  return false;
                }
              }
              if (valueConstraint.exclusions) {
                return !valueConstraint.exclusions.some(function (c) {
                  if (!isTerm(c)) {
                    if (!("type" in c))
                      runtimeError("expected "+JSON.stringify(c)+" to have a 'type' attribute.");
                    var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                    if (stemTypes.indexOf(c.type) === -1)
                      runtimeError("expected type attribute '"+c.type+"' to be in '"+stemTypes+"'.");
                    return startsWith(value, c.stem);
                  } else {
                    return equals(value, c);
                  }
                });
              }
              return true;
            } else {
              // ignore -- would have caught it above
            }
          }))) {
            validationError("value " + value + " not found in set " + JSON.stringify(valueExpr.values));
          }
        }
      }
    }

    if ("pattern" in valueExpr) {
      var regexp = "flags" in valueExpr ?
	  new RegExp(valueExpr.pattern, valueExpr.flags) :
	  new RegExp(valueExpr.pattern);
      if (!(getLexicalValue(value).match(regexp)))
        validationError("value " + getLexicalValue(value) + " did not match pattern " + valueExpr.pattern);
    }

    Object.keys(stringTests).forEach(function (test) {
      if (test in valueExpr && !stringTests[test](label, valueExpr[test])) {
        validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
      }
    });

    Object.keys(numericValueTests).forEach(function (test) {
      if (test in valueExpr) {
        if (numeric) {
          if (!numericValueTests[test](numericParsers[numeric](label, validationError), valueExpr[test])) {
            validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
          }
        } else {
          validationError("facet violation: numeric facet " + test + " can't apply to " + value);
        }
      }
    });

    Object.keys(decimalLexicalTests).forEach(function (test) {
      if (test in valueExpr) {
        if (numeric === XSD + "integer" || numeric === XSD + "decimal") {
          if (!decimalLexicalTests[test](""+numericParsers[numeric](label, validationError), valueExpr[test])) {
            validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
          }
        } else {
          validationError("facet violation: numeric facet " + test + " can't apply to " + value);
        }
      }
    });
    var ret = {
      type: null,
      focus: value,
      shapeExpr: valueExpr
    };
    if (errors.length) {
      ret.type = "NodeConstraintViolation";
      ret.errors = errors;
    } else {
      ret.type = "NodeConstraintTest";
    }
    return ret;
  };

  this.semActHandler = {
    handlers: { },
    results: { },
    /**
     * Store a semantic action handler.
     *
     * @param {string} name - semantic action's URL.
     * @param {object} handler - handler function.
     *
     * The handler object has a dispatch function is invoked with:
     * @param {string} code - text of the semantic action.
     * @param {object} ctx - matched triple or results subset.
     * @param {object} extensionStorage - place where the extension writes into the result structure.
     * @return {bool} false if the extension failed or did not accept the ctx object.
     */
    register: function (name, handler) {
      this.handlers[name] = handler;
    },
    /**
     * Calls all semantic actions, allowing each to write to resultsArtifact.
     *
     * @param {array} semActs - list of semantic actions to invoke.
     * @return {bool} false if any result was false.
     */
    dispatchAll: function (semActs, ctx, resultsArtifact) {
      var _semActHanlder = this;
      return semActs.reduce(function (ret, semAct) {
        if (ret.length === 0 && semAct.name in _semActHanlder.handlers) {
          var code = "code" in semAct ? semAct.code : _ShExValidator.options.semActs[semAct.name];
          var existing = "extensions" in resultsArtifact && semAct.name in resultsArtifact.extensions;
          var extensionStorage = existing ? resultsArtifact.extensions[semAct.name] : {};
          const response = _semActHanlder.handlers[semAct.name].dispatch(code, ctx, extensionStorage); debugger
          if (typeof response === 'boolean') {
            if (!response)
              ret.push({ type: "SemActFailure", errors: [{ type: "BooleanSemActFailure", code: code, ctx }] })
          } else if (typeof response === 'object' && response.constructor === Array) {
            if (response.length > 0)
              ret.push({ type: "SemActFailure", errors: response })
          } else {
            throw Error("unsupported response from semantic action handler: " + JSON.stringify(response))
          }
          if (!existing && Object.keys(extensionStorage).length > 0) {
            if (!("extensions" in resultsArtifact))
              resultsArtifact.extensions = {};
            resultsArtifact.extensions[semAct.name] = extensionStorage;
          }
          return ret;
        }
        return ret;
      }, []);
    }
  };

  function effectiveShapeExpression (shape, tcs, constraintToExtends) {
    if ("extends" in shape) {
      shape.extends.forEach((se, extendsNo) => {
        // build NestedShape.scopedTripleConstraints = indexes of the TCs in se
        var ins = {}, outs = {};
        // constraintToExtends[extendsNo] = [];
        mergeEffectiveTripleConstraints(se, ins, outs);
        [ins, outs].forEach(direction => {
          Object.keys(direction).forEach(p => {
            // constraintToExtends[extendsNo].push(tcs.length);
            let tc = direction[p]
            let cNo = tcs.indexOf(tc)
            if (cNo === -1) {
              cNo = tcs.length
              tcs.push(tc)
              constraintToExtends[cNo] = []
            } else {
              console.log("reuse", tc)
            }
            constraintToExtends[cNo].push(extendsNo);
          })
        });
      })
    }
    return;

    /** mergeEffectiveTripleConstraints - turn a ShapeExpression with
     * a projection te into TripleExpression with an optional SE'
     * where shapes contributing to te are NOPs.

     * @expr - shape expression to walk
     * @ins - incoming arcs: map from IRI to {min, max, seen}
     * @outs - outgoing arcs
     */
    function mergeEffectiveTripleConstraints (expr, ins, outs) {
      var visitor = ShExUtil.Visitor();
      var outerMin = 1;
      var outerMax = 1;
      var oldVisitOneOf = visitor.visitOneOf;

      visitor.visitShapeRef = function (inclusion) {
        return visitor.visitShapeDecl(index.shapeExprs[inclusion]);
      };

      visitor.visitShape = function (shape, label) {
        if ("extends" in shape) {
          shape.extends.forEach( // extension of an extension
            se => mergeEffectiveTripleConstraints(se, ins, outs)
          )
        }
        if ("expression" in shape) {
          visitor.visitExpression(shape.expression);
        }
        return { type: "Shape" }; // NOP
      }

      visitor.visitOneOf = function (expr) {
        var oldOuterMin = outerMin;
        var oldOuterMax = outerMax;
        outerMin = 0;
        oldVisitOneOf.call(visitor, expr);
        outerMin = oldOuterMin;
        outerMax = oldOuterMax;
      }

      visitor.visitTripleConstraint = function (expr) {
        idx = expr.inverse ? ins : outs; // pick an index
        var min = "min" in expr ? expr.min : 1; min = min * outerMin;
        var max = "max" in expr ? expr.max : 1; max = max * outerMax;
        idx[expr.predicate] = {
          type: "TripleConstraint",
          predicate: expr.predicate,
          min: expr.predicate in idx ? Math.max(idx[expr.predicate].min, min) : min,
          max: expr.predicate in idx ? Math.min(idx[expr.predicate].max, max) : max,
          seen: expr.predicate in idx ? idx[expr.predicate].seen + 1 : 1,
          tcs: expr.predicate in idx ? idx[expr.predicate].tcs.concat([expr]) : [expr]
        }
        return expr;
      };

      visitor.visitShapeExpr(expr);
    }
  }
}

/* _compileShapeToAST - compile a shape expression to an abstract syntax tree.
 *
 * currently tested but not used.
 */
function _compileShapeToAST (expression, tripleConstraints, schema) {

  function Epsilon () {
    this.type = "Epsilon";
  }

  function TripleConstraint (ordinal, predicate, inverse, negated, valueExpr) {
    this.type = "TripleConstraint";
    // this.ordinal = ordinal; @@ does 1card25
    this.inverse = !!inverse;
    this.negated = !!negated;
    this.predicate = predicate;
    if (valueExpr !== undefined)
      this.valueExpr = valueExpr;
  }

  function Choice (disjuncts) {
    this.type = "Choice";
    this.disjuncts = disjuncts;
  }

  function EachOf (conjuncts) {
    this.type = "EachOf";
    this.conjuncts = conjuncts;
  }

  function SemActs (expression, semActs) {
    this.type = "SemActs";
    this.expression = expression;
    this.semActs = semActs;
  }

  function KleeneStar (expression) {
    this.type = "KleeneStar";
    this.expression = expression;
  }

  function _compileExpression (expr, schema) {
    var repeated, container;

    /* _repeat: map expr with a min and max cardinality to a corresponding AST with Groups and Stars.
       expr 1 1 => expr
       expr 0 1 => Choice(expr, Eps)
       expr 0 3 => Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps)
       expr 2 5 => EachOf(expr, expr, Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps))
       expr 0 * => KleeneStar(expr)
       expr 1 * => EachOf(expr, KleeneStar(expr))
       expr 2 * => EachOf(expr, expr, KleeneStar(expr))

       @@TODO: favor Plus over Star if Epsilon not in expr.
    */
    function _repeat (expr, min, max) {
      if (min === undefined) { min = 1; }
      if (max === undefined) { max = 1; }

      if (min === 1 && max === 1) { return expr; }

      var opts = max === UNBOUNDED ?
        new KleeneStar(expr) :
        _seq(max - min).reduce(function (ret, elt, ord) {
          return ord === 0 ?
            new Choice([expr, new Epsilon]) :
            new Choice([new EachOf([expr, ret]), new Epsilon]);
        }, undefined);

      var reqd = min !== 0 ?
        new EachOf(_seq(min).map(function (ret) {
          return expr; // @@ something with ret
        }).concat(opts)) : opts;
      return reqd;
    }

    if (typeof expr === "string") { // Inclusion
      var included = schema._index.tripleExprs[expr].expression;
      return _compileExpression(included, schema);
    }

    else if (expr.type === "TripleConstraint") {
      // predicate, inverse, negated, valueExpr, annotations, semActs, min, max
      var valueExpr = "valueExprRef" in expr ?
        schema.valueExprDefns[expr.valueExprRef] :
        expr.valueExpr;
      var ordinal = tripleConstraints.push(expr)-1;
      var tp = new TripleConstraint(ordinal, expr.predicate, expr.inverse, expr.negated, valueExpr);
      repeated = _repeat(tp, expr.min, expr.max);
      return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
    }

    else if (expr.type === "OneOf") {
      container = new Choice(expr.expressions.map(function (e) {
        return _compileExpression(e, schema);
      }));
      repeated = _repeat(container, expr.min, expr.max);
      return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
    }

    else if (expr.type === "EachOf") {
      container = new EachOf(expr.expressions.map(function (e) {
        return _compileExpression(e, schema);
      }));
      repeated = _repeat(container, expr.min, expr.max);
      return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
    }

    else throw Error("unexpected expr type: " + expr.type);
  }

  return expression ? _compileExpression(expression, schema) : new Epsilon();
}

// http://stackoverflow.com/questions/9422386/lazy-cartesian-product-of-arrays-arbitrary-nested-loops
function crossProduct(sets) {
  var n = sets.length, carets = [], args = null;

  function init() {
    args = [];
    for (var i = 0; i < n; i++) {
      carets[i] = 0;
      args[i] = sets[i][0];
    }
  }

  function next() {

    // special case: crossProduct([]).next().next() returns false.
    if (args !== null && args.length === 0)
      return false;

    if (args === null) {
      init();
      return true;
    }
    var i = n - 1;
    carets[i]++;
    if (carets[i] < sets[i].length) {
      args[i] = sets[i][carets[i]];
      return true;
    }
    while (carets[i] >= sets[i].length) {
      if (i == 0) {
        return false;
      }
      carets[i] = 0;
      args[i] = sets[i][0];
      carets[--i]++;
    }
    args[i] = sets[i][carets[i]];
    return true;
  }

  return {
    next: next,
    do: function (block, _context) { // old API
      return block.apply(_context, args);
    },
    // new API because
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#Description
    // cautions about functions over arguments.
    get: function () { return args; }
  };
}

/* N3jsTripleToString - simple toString function to make N3.js's triples
 * printable.
 */
var N3jsTripleToString = function () {
  function fmt (n) {
    return RdfTerm.isLiteral(n) ?
      [ "http://www.w3.org/2001/XMLSchema#integer",
        "http://www.w3.org/2001/XMLSchema#float",
        "http://www.w3.org/2001/XMLSchema#double"
      ].indexOf(RdfTerm.getLiteralType(n)) !== -1 ?
      parseInt(RdfTerm.getLiteralValue(n)) :
      n :
    RdfTerm.isBlank(n) ?
      n :
      "<" + n + ">";
  }
  return fmt(this.subject) + " " + fmt(this.predicate) + " " + fmt(this.object) + " .";
};

/* indexNeighborhood - index triples by predicate
 * returns: {
 *     byPredicate: Object: mapping from predicate to triples containing that
 *                  predicate.
 *
 *     candidates: [[1,3], [0,2]]: mapping from triple to the triple constraints
 *                 it matches.  It is initialized to []. Mappings that remain an
 *                 empty set indicate a triple which didn't matching anything in
 *                 the shape.
 *
 *     misses: list to recieve value constraint failures.
 *   }
 */
function indexNeighborhood (triples) {
  return {
    byPredicate: triples.reduce(function (ret, t) {
      var p = t.predicate;
      if (!(p in ret))
        ret[p] = [];
      ret[p].push(t);

      // If in VERBOSE mode, add a nice toString to N3.js's triple objects.
      if (VERBOSE)
        t.toString = N3jsTripleToString;

      return ret;
    }, {}),
    candidates: _seq(triples.length).map(function () {
      return [];
    }),
    misses: []
  };
}

/* sparqlOrder - sort triples by subject following SPARQL partial ordering.
 */
function sparqlOrder (l, r) {
  var [lprec, rprec] = [l, r].map(
    x => RdfTerm.isBlank(x) ? 1 : RdfTerm.isLiteral(x) ? 2 : 3
  );
  return lprec === rprec ? l.localeCompare(r) : lprec - rprec;
}

/* Return a list of n ""s.
 *
 * Note that Array(n) on its own returns a "sparse array" so Array(n).map(f)
 * never calls f.
 */
function _seq (n) {
  return n === 0 ?
    [] :
    Array(n).join(" ").split(/ /); // hahaha, javascript, you suck.
}

/* Expect property p with value v in object o
 */
function expect (o, p, v) {
  if (!(p in o))
    runtimeError("expected "+JSON.stringify(o)+" to have a '"+p+"' attribute.");
  if (arguments.length > 2 && o[p] !== v)
    runtimeError("expected "+p+" attribute '"+o[p]+"' to equal '"+v+"'.");
}

function noop () {  }

function runtimeError () {
  var errorStr = Array.prototype.join.call(arguments, "");
  var e = new Error(errorStr);
  Error.captureStackTrace(e, runtimeError);
  throw e;
}

  function _alist (len) {
    return _seq(len).map(() => [])
  }

  return {
    construct: ShExValidator_constructor,
    start: Start,
    options: InterfaceOptions
  };
})();

// Export the `ShExValidator` class as a whole.
if (true)
  module.exports = ShExValidator;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var HierarchyClosure = (function () {
  /** create a hierarchy object
   * This object keeps track of direct children and parents as well as transitive children and parents.
   */
  function makeHierarchy () {
    let roots = {}
    let parents = {}
    let children = {}
    let holders = {}
    return {
      add: function (parent, child) {
        if (// test if this is a novel entry.
          (parent in children && children[parent].indexOf(child) !== -1)) {
          return
        }
        let target = parent in holders
          ? getNode(parent)
          : (roots[parent] = getNode(parent)) // add new parents to roots.
        let value = getNode(child)

        target[child] = value
        delete roots[child]

        // // maintain hierarchy (direct and confusing)
        // children[parent] = children[parent].concat(child, children[child])
        // children[child].forEach(c => parents[c] = parents[c].concat(parent, parents[parent]))
        // parents[child] = parents[child].concat(parent, parents[parent])
        // parents[parent].forEach(p => children[p] = children[p].concat(child, children[child]))

        // maintain hierarchy (generic and confusing)
        updateClosure(children, parents, child, parent)
        updateClosure(parents, children, parent, child)
        function updateClosure (container, members, near, far) {
          container[far] = container[far].filter(
            e => /* e !== near && */ container[near].indexOf(e) === -1
          ).concat(container[near].indexOf(near) === -1 ? [near] : [], container[near])
          container[near].forEach(
            n => (members[n] = members[n].filter(
              e => e !== far && members[far].indexOf(e) === -1
            ).concat(members[far].indexOf(far) === -1 ? [far] : [], members[far]))
          )
        }

        function getNode (node) {
          if (!(node in holders)) {
            parents[node] = []
            children[node] = []
            holders[node] = {}
          }
          return holders[node]
        }
      },
      roots: roots,
      parents: parents,
      children: children
    }
  }

  function depthFirst (n, f, p) {
    return Object.keys(n).reduce((ret, k) => {
      return ret.concat(
        depthFirst(n[k], f, k),
        p ? f(k, p) : []) // outer invocation can have null parent
    }, [])
  }

  return { create: makeHierarchy, depthFirst }
})()

/* istanbul ignore next */
if (true) {
  module.exports = HierarchyClosure
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

// **ShExWriter** writes ShEx documents.

var ShExWriter = (function () {
var util = __webpack_require__(7);
var UNBOUNDED = -1;

// Matches a literal as represented in memory by the ShEx library
var ShExLiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i;

// rdf:type predicate (for 'a' abbreviation)
var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_TYPE   = RDF_PREFIX + 'type';

// Characters in literals that require escaping
var ESCAPE_1 = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    ESCAPE_g = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    ESCAPE_replacements = { '\\': '\\\\', '"': '\\"', '/': '\\/', '\t': '\\t',
                            '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f' };

var nodeKinds = {
  'iri': "IRI",
  'bnode': "BNODE",
  'literal': "LITERAL",
  'nonliteral': "NONLITERAL"
};
var nonLitNodeKinds = {
  'iri': "IRI",
  'bnode': "BNODE",
  'literal': "LITERAL",
  'nonliteral': "NONLITERAL"
};

// ## Constructor
function ShExWriter (outputStream, options) {
  if (!(this instanceof ShExWriter))
    return new ShExWriter(outputStream, options);

  // Shift arguments if the first argument is not a stream
  if (outputStream && typeof outputStream.write !== 'function')
    options = outputStream, outputStream = null;
  options = options || {};

  // If no output stream given, send the output as string through the end callback
  if (!outputStream) {
    var output = '';
    this._outputStream = {
      write: function (chunk, encoding, done) { output += chunk; done && done(); },
      end:   function (done) { done && done(null, output); },
    };
    this._endStream = true;
  }
  else {
    this._outputStream = outputStream;
    this._endStream = options.end === undefined ? true : !!options.end;
  }

  // Initialize writer, depending on the format
  this._prefixIRIs = Object.create(null);
  options.prefixes && this.addPrefixes(options.prefixes);

  this._error = options.error || _throwError;
  this.forceParens = !options.simplifyParentheses; // default to false
  this._expect = options.lax ? noop : expect;
}

ShExWriter.prototype = {
  // ## Private methods

  // ### `_write` writes the argument to the output stream
  _write: function (string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  },

  // ### `_writeSchema` writes the shape to the output stream
  _writeSchema: function (schema, done) {
    var _ShExWriter = this;
    this._expect(schema, "type", "Schema");
    _ShExWriter.addPrefixes(schema.prefixes);
    if (schema.base)
      _ShExWriter._write("BASE " + this._encodeIriOrBlankNode(schema.base) + "\n");

    if (schema.imports)
      schema.imports.forEach(function (imp) {
        _ShExWriter._write("IMPORT " + _ShExWriter._encodeIriOrBlankNode(imp) + "\n");
      });
    if (schema.startActs)
      schema.startActs.forEach(function (act) {
        _ShExWriter._expect(act, "type", "SemAct");
        _ShExWriter._write(" %"+
                           _ShExWriter._encodePredicate(act.name)+
                           ("code" in act ? "{"+escapeCode(act.code)+"%"+"}" : "%"));
      });
    if (schema.start)
      _ShExWriter._write("start = " + _ShExWriter._writeShapeExpr(schema.start, done, true, 0).join('') + "\n")
    if ("shapes" in schema)
      schema.shapes.forEach(function (shapeExpr) {
        let id = shapeExpr.id;
        var abstract = "";
        if (shapeExpr.type === "ShapeDecl") {
          if (shapeExpr.abstract)
            abstract = "abstract "
          shapeExpr = shapeExpr.shapeExpr;
        }
        _ShExWriter._write(
          abstract +
          _ShExWriter._encodeShapeName(id, false) +
            " " +
            _ShExWriter._writeShapeExpr(shapeExpr, done, true, 0).join("")+"\n",
          done
        );
      })
  },

  _writeShapeExpr: function (shapeExpr, done, forceBraces, parentPrec) {
    var _ShExWriter = this;
    var pieces = [];
    if (typeof shapeExpr === "string") // ShapeRef
      pieces.push("@", _ShExWriter._encodeShapeName(shapeExpr));
    // !!! []s for precedence!
    else if (shapeExpr.type === "ShapeDecl")
      pieces.push(_ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, false, 3));
    else if (shapeExpr.type === "ShapeExternal")
      pieces.push("EXTERNAL");
    else if (shapeExpr.type === "ShapeAnd") {
      if (parentPrec >= 3)
        pieces.push("(");
      var lastAndElided = false;
      shapeExpr.shapeExprs.forEach(function (expr, ord) {
        if (ord > 0) { // && !!! grammar rules too weird here
          /*
            shapeAtom:
                  nonLitNodeConstraint shapeOrRef?
                | shapeDecl nonLitNodeConstraint?

            nonLitInlineNodeConstraint:
                  nonLiteralKind stringFacet*
          */
          function nonLitNodeConstraint (idx) {
            let c = shapeExpr.shapeExprs[idx];
            return c.type !== "NodeConstraint"
              || ("nodeKind" in c && c.nodeKind === "literal")
              || "datatype" in c
              || "values" in c
              ? false
              : true;
          }

          function shapeOrRef (idx) {
            let c = shapeExpr.shapeExprs[idx];
            return c.type === "Shape" || c.type === "ShapeRef";
          }

          function shapeDecl (idx) {
            let c = shapeExpr.shapeExprs[idx];
            return c.type === "Shape";
          }

          let elideAnd = !lastAndElided
              && (nonLitNodeConstraint(ord-1) && shapeOrRef(ord)
                  || shapeDecl(ord-1) && nonLitNodeConstraint(ord))
          if (!elideAnd) {
            pieces.push(" AND ");
          }
          lastAndElided = elideAnd;
        }
        pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr, done, false, 3));
      });
      if (parentPrec >= 3)
        pieces.push(")");
    } else if (shapeExpr.type === "ShapeOr") {
      if (parentPrec >= 2)
        pieces.push("(");
      shapeExpr.shapeExprs.forEach(function (expr, ord) {
        if (ord > 0)
          pieces.push(" OR ");
        pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr, done, forceBraces, 2));
      });
      if (parentPrec >= 2)
        pieces.push(")");
    } else if (shapeExpr.type === "ShapeNot") {
      if (parentPrec >= 4)
        pieces.push("(");
      pieces.push("NOT ");
      pieces = pieces.concat(_ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, forceBraces, 4));
      if (parentPrec >= 4)
        pieces.push(")");
    } else if (shapeExpr.type === "Shape") {
      pieces = pieces.concat(_ShExWriter._writeShape(shapeExpr, done, forceBraces));
    } else if (shapeExpr.type === "NodeConstraint") {
      pieces = pieces.concat(_ShExWriter._writeNodeConstraint(shapeExpr, done, forceBraces));
    } else
      throw Error("expected Shape{,And,Or,Ref} or NodeConstraint in " + util.inspect(shapeExpr));
    return pieces;
  },

  // ### `_writeShape` writes the shape to the output stream
  _writeShape: function (shape, done, forceBraces) {
    var _ShExWriter = this;
    try {
      var pieces = []; // guessing push/join is faster than concat
      this._expect(shape, "type", "Shape");

      if (shape.closed) pieces.push("CLOSED ");

      [{keyword: "extends", marker: "&"}].forEach(pair => {
         // pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));
         if (shape[pair.keyword] && shape[pair.keyword].length > 0) {
           shape[pair.keyword].forEach(function (i, ord) {
             if (ord)
               pieces.push(" ")
             pieces.push(pair.marker);
             pieces = pieces.concat(_ShExWriter._writeShapeExpr(i, done, true, 0));
           });
           pieces.push(" ");
         }
       });

      if (shape.extra && shape.extra.length > 0) {
        pieces.push("EXTRA ");
        shape.extra.forEach(function (i, ord) {
          pieces.push(_ShExWriter._encodeShapeName(i, false)+" ");
        });
        pieces.push(" ");
      }
      var empties = ["values", "length", "minlength", "maxlength", "pattern", "flags"];
      pieces.push("{\n");

      function _writeShapeActions (semActs) {
        if (!semActs)
          return;

        semActs.forEach(function (act) {
          _ShExWriter._expect(act, "type", "SemAct");
          pieces.push(" %",
                      _ShExWriter._encodePredicate(act.name),
                      ("code" in act ? "{"+escapeCode(act.code)+"%"+"}" : "%"));
        });
      }

      function _writeCardinality (min, max) {
        if      (min === 0 && max === 1)         pieces.push("?");
        else if (min === 0 && max === UNBOUNDED) pieces.push("*");
        else if (min === undefined && max === undefined)                         ;
        else if (min === 1 && max === UNBOUNDED) pieces.push("+");
        else
          pieces.push("{", min, ",", (max === UNBOUNDED ? "*" : max), "}"); // by coincidence, both use the same character.
      }

      function _writeExpression (expr, indent, parentPrecedence) {
        function _writeScopedShapeExpression (scopedShapeExpr) {
          if (scopedShapeExpr) {
            pieces.push(" ON SHAPE EXPRESSION\n");
            pieces = pieces.concat(
              _ShExWriter._writeShapeExpr(scopedShapeExpr, done, true, 0).map(
                line => indent + "    " + line
              )
            )
          }
        }

        function _writeExpressionActions (semActs) {
          if (semActs) {

            semActs.forEach(function (act) {
              _ShExWriter._expect(act, "type", "SemAct");
              pieces.push("\n"+indent+"   %");
              pieces.push(_ShExWriter._encodeValue(act.name));
              if ("code" in act)
                pieces.push("{"+escapeCode(act.code)+"%"+"}");
              else
                pieces.push("%");
            });
          }
        }

        function _exprGroup (exprs, separator, precedence, forceParens) {
          var needsParens = precedence < parentPrecedence || forceParens;
          if (needsParens) {
            pieces.push("(");
          }
          exprs.forEach(function (nested, ord) {
            _writeExpression(nested, indent+"  ", precedence)
            if (ord < exprs.length - 1)
              pieces.push(separator);
          });
          if (needsParens) {
            pieces.push(")");
          }
        }

        if (typeof expr === "string") {
          pieces.push("&");
          pieces.push(_ShExWriter._encodeShapeName(expr, false));
        } else {

        if ("id" in expr) {
          pieces.push("$");
          pieces.push(_ShExWriter._encodeIriOrBlankNode(expr.id, true));
        }

        if (expr.type === "TripleConstraint") {
          if (expr.inverse)
            pieces.push("^");
          if (expr.negated)
            pieces.push("!");
          pieces.push(indent,
                      _ShExWriter._encodePredicate(expr.predicate),
                      " ");

          if ("valueExpr" in expr)
            pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));
          else
            pieces.push(". ");

          _writeCardinality(expr.min, expr.max);
          _writeScopedShapeExpression(expr.onShapeExpression);
          _ShExWriter._annotations(pieces, expr.annotations, indent);
          _writeExpressionActions(expr.semActs);
        }

        else if (expr.type === "OneOf") {
          var needsParens = "id" in expr || "min" in expr || "max" in expr || "onShapeExpression" in expr || "annotations" in expr || "semActs" in expr;
          _exprGroup(expr.expressions, "\n"+indent+"| ", 1, needsParens || _ShExWriter.forceParens);
          _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt
          _writeScopedShapeExpression(expr.onShapeExpression);
          _ShExWriter._annotations(pieces, expr.annotations, indent);
          _writeExpressionActions(expr.semActs);
        }

        else if (expr.type === "EachOf") {
          var needsParens = "id" in expr || "min" in expr || "max" in expr || "onShapeExpression" in expr || "annotations" in expr || "semActs" in expr;
          _exprGroup(expr.expressions, ";\n"+indent, 2, needsParens || _ShExWriter.forceParens);
          _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt
          _writeScopedShapeExpression(expr.onShapeExpression);
          _ShExWriter._annotations(pieces, expr.annotations, indent);
          _writeExpressionActions(expr.semActs);
        }

        else throw Error("unexpected expr type: " + expr.type);
        }
      }

      if (shape.expression) // t: 0, 0Extend1
        _writeExpression(shape.expression, "  ", 0);
      pieces.push("\n}");
      _writeShapeActions(shape.semActs);
      _ShExWriter._annotations(pieces, shape.annotations, "  ");

      return pieces;
    }
    catch (error) { done && done(error); }
  },

  // ### `_writeShape` writes the shape to the output stream
  _writeNodeConstraint: function (v, done) {
    var _ShExWriter = this;
    try {
      _ShExWriter._expect(v, "type", "NodeConstraint");

      var pieces = [];
      if (v.nodeKind in nodeKinds)       pieces.push(nodeKinds[v.nodeKind], " ");
      else if (v.nodeKind !== undefined) _ShExWriter._error("unexpected nodeKind: " + v.nodeKind); // !!!!

      this._fillNodeConstraint(pieces, v, done);
      this._annotations(pieces, v.annotations, "  ");
      return pieces;
    }
    catch (error) { done && done(error); }

  },

  _annotations: function (pieces, annotations, indent) {
    var _ShExWriter = this;
    if (annotations) {
      annotations.forEach(function (a) {
        _ShExWriter._expect(a, "type", "Annotation");
        pieces.push("//\n"+indent+"   ");
        pieces.push(_ShExWriter._encodeValue(a.predicate));
        pieces.push(" ");
        pieces.push(_ShExWriter._encodeValue(a.object));
      });
    }
  },

  _fillNodeConstraint: function (pieces, v, done) {
    var _ShExWriter = this;
    if (v.datatype  && v.values  ) _ShExWriter._error("found both datatype and values in "   +expr);
    if (v.datatype) {
      pieces.push(_ShExWriter._encodeShapeName(v.datatype));
    }

    if (v.values) {
      pieces.push("[");

      v.values.forEach(function (t, ord) {
        if (ord > 0)
          pieces.push(" ");

        if (!isTerm(t)) {
//          expect(t, "type", "IriStemRange");
              if (!("type" in t))
                runtimeError("expected "+JSON.stringify(t)+" to have a 'type' attribute.");
          var stemRangeTypes = ["Language", "IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
              if (stemRangeTypes.indexOf(t.type) === -1)
                runtimeError("expected type attribute '"+t.type+"' to be in '"+stemRangeTypes+"'.");
          if (t.type === "Language") {
            pieces.push("@" + t.languageTag);
          } else if (!isTerm(t.stem)) {
            expect(t.stem, "type", "Wildcard");
            pieces.push(".");
          } else {
            pieces.push(langOrLiteral(t, t.stem) + "~");
          }
          if (t.exclusions) {
            t.exclusions.forEach(function (c) {
              pieces.push(" - ");
              if (!isTerm(c)) {
//                expect(c, "type", "IriStem");
                    if (!("type" in c))
                      runtimeError("expected "+JSON.stringify(c)+" to have a 'type' attribute.");
                    var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                    if (stemTypes.indexOf(c.type) === -1)
                      runtimeError("expected type attribute '"+c.type+"' to be in '"+stemTypes+"'.");
                pieces.push(langOrLiteral(t, c.stem) + "~");
              } else {
                pieces.push(langOrLiteral(t, c));
              }
            });
          }
          function langOrLiteral (t, c) {
            return ["LanguageStem", "LanguageStemRange"].indexOf(t.type) !== -1 ? "@" + c :
              ["LiteralStem", "LiteralStemRange"].indexOf(t.type) !== -1 ? '"' + c.replace(ESCAPE_g, c) + '"' :
              _ShExWriter._encodeValue(c)
          }
        } else {
          pieces.push(_ShExWriter._encodeValue(t));
        }
      });

      pieces.push("]");
    }

    if ('pattern' in v) {
      var pattern = v.pattern.
          replace(/\//g, "\\/");
      // if (ESCAPE_1.test(pattern))
      //   pattern = pattern.replace(ESCAPE_g, characterReplacer);
      var flags = 'flags' in v ? v.flags : "";
      pieces.push("/" + pattern + "/" + flags + " ");
    }
    ['length', 'minlength', 'maxlength',
     'mininclusive', 'minexclusive', 'maxinclusive', 'maxexclusive',
     'totaldigits', 'fractiondigits'
    ].forEach(function (a) {
      if (v[a])
        pieces.push(" ", a, " ", v[a]);
    });
    return pieces;

    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }
  },

  // ### `_encodeIriOrBlankNode` represents an IRI or blank node
  _encodeIriOrBlankNode: function (iri, trailingSpace) {
    trailingSpace = trailingSpace ? ' ' : '';
    // A blank node is represented as-is
    if (iri[0] === '_' && iri[1] === ':') return iri;
    // Escape special characters
    if (ESCAPE_1.test(iri))
      iri = iri.replace(ESCAPE_g, characterReplacer);
    // Try to represent the IRI as prefixed name
    var prefixMatch = this._prefixRegex.exec(iri);
    return !prefixMatch ? '<' + iri + '>' :
           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]) + trailingSpace;
  },

  // ### `_encodeLiteral` represents a literal
  _encodeLiteral: function (value, type, language) {
    // Escape special characters
    if (ESCAPE_1.test(value))
      value = value.replace(ESCAPE_g, characterReplacer);
    // Write the literal, possibly with type or language
    if (language)
      return '"' + value + '"@' + language;
    else if (type)
      return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);
    else
      return '"' + value + '"';
  },

  // ### `_encodeShapeName` represents a subject
  _encodeShapeName: function (subject, trailingSpace) {
    if (subject[0] === '"')
      throw new Error('A literal as subject is not allowed: ' + subject);
    return this._encodeIriOrBlankNode(subject, trailingSpace);
  },

  // ### `_encodePredicate` represents a predicate
  _encodePredicate: function (predicate) {
    if (predicate[0] === '"')
      throw new Error('A literal as predicate is not allowed: ' + predicate);
    return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
  },

  // ### `_encodeValue` represents an object
  _encodeValue: function (object) {
    // Represent an IRI or blank node
    if (typeof object !== "object")
      return this._encodeIriOrBlankNode(object);
    // Represent a literal
    return this._encodeLiteral(object.value, object.type, object.language);
  },

  // ### `_blockedWrite` replaces `_write` after the writer has been closed
  _blockedWrite: function () {
    throw new Error('Cannot write because the writer has been closed.');
  },

  writeSchema: function (shape, done) {
    this._writeSchema(shape, done);
    this.end(done);
  },

  // ### `addShape` adds the shape to the output stream
  addShape: function (shape, name, done) {
    this._write(
      _ShExWriter._encodeShapeName(name, false) +
        " " +
        _ShExWriter._writeShapeExpr(shape, done, true, 0).join(""),
      done
    );
  },

  // ### `addShapes` adds the shapes to the output stream
  addShapes: function (shapes) {
    for (var i = 0; i < shapes.length; i++)
      this.addShape(shapes[i]);
  },

  // ### `addPrefix` adds the prefix to the output stream
  addPrefix: function (prefix, iri, done) {
    var prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  },

  // ### `addPrefixes` adds the prefixes to the output stream
  addPrefixes: function (prefixes, done) {
    // Add all useful prefixes
    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;
    for (var prefix in prefixes) {
      // Verify whether the prefix can be used and does not exist yet
      var iri = prefixes[prefix];
      if (// @@ /[#\/]$/.test(iri) && !! what was that?
          prefixIRIs[iri] !== (prefix += ':')) {
        hasPrefixes = true;
        prefixIRIs[iri] = prefix;
        // Write prefix
        this._write('PREFIX ' + prefix + ' <' + iri + '>\n');
      }
    }
    // Recreate the prefix matcher
    if (hasPrefixes) {
      var IRIlist = '', prefixList = '';
      for (var prefixIRI in prefixIRIs) {
        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
      }
      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
    }
    // End a prefix block with a newline
    this._write(hasPrefixes ? '\n' : '', done);
  },

  // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
  _prefixRegex: /$0^/,

  // ### `end` signals the end of the output stream
  end: function (done) {
    // Disallow further writing
    this._write = this._blockedWrite;

    // Try to end the underlying stream, ensuring done is called exactly one time
    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };
    if (this._endStream) {
      try { return this._outputStream.end(singleDone); }
      catch (error) { /* error closing stream */ }
    }
    singleDone && singleDone();
  },
};

// Replaces a character by its escaped version
function characterReplacer(character) {
  // Replace a single character by its escaped version
  var result = ESCAPE_replacements[character];
  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    }
    // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                 character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }
  return result;
}

function escapeCode (code) {
  return code.replace(/\\/g, "\\\\").replace(/%/g, "\\%")
}

/** _throwError: overridable function to throw Errors().
 *
 * @param func (optional): function at which to truncate stack trace
 * @param str: error message
 */
function _throwError (func, str) {
  if (typeof func !== "function") {
    str = func;
    func = _throwError;
  }
  var e = new Error(str);
  Error.captureStackTrace(e, func);
  throw e;
}

// Expect property p with value v in object o
function expect (o, p, v) {
  if (!(p in o))
    this._error(expect, "expected "+o+" to have a ."+p);
  if (arguments.length > 2 && o[p] !== v)
    this._error(expect, "expected "+o[o]+" to equal ."+v);
}

// The empty function
function noop () {}

return ShExWriter;
})();

// Export the `ShExWriter` class as a whole.
if (true)
  module.exports = ShExWriter; // node environment


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(31);

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var HierarchyClosure = (function () {
  /** create a hierarchy object
   * This object keeps track of direct children and parents as well as transitive children and parents.
   */
  function makeHierarchy () {
    let roots = {}
    let parents = {}
    let children = {}
    let holders = {}
    return {
      add: function (parent, child) {
        if (// test if this is a novel entry.
          (parent in children && children[parent].indexOf(child) !== -1)) {
          return
        }
        let target = parent in holders
          ? getNode(parent)
          : (roots[parent] = getNode(parent)) // add new parents to roots.
        let value = getNode(child)

        target[child] = value
        delete roots[child]

        // // maintain hierarchy (direct and confusing)
        // children[parent] = children[parent].concat(child, children[child])
        // children[child].forEach(c => parents[c] = parents[c].concat(parent, parents[parent]))
        // parents[child] = parents[child].concat(parent, parents[parent])
        // parents[parent].forEach(p => children[p] = children[p].concat(child, children[child]))

        // maintain hierarchy (generic and confusing)
        updateClosure(children, parents, child, parent)
        updateClosure(parents, children, parent, child)
        function updateClosure (container, members, near, far) {
          container[far] = container[far].filter(
            e => /* e !== near && */ container[near].indexOf(e) === -1
          ).concat(container[near].indexOf(near) === -1 ? [near] : [], container[near])
          container[near].forEach(
            n => (members[n] = members[n].filter(
              e => e !== far && members[far].indexOf(e) === -1
            ).concat(members[far].indexOf(far) === -1 ? [far] : [], members[far]))
          )
        }

        function getNode (node) {
          if (!(node in holders)) {
            parents[node] = []
            children[node] = []
            holders[node] = {}
          }
          return holders[node]
        }
      },
      roots: roots,
      parents: parents,
      children: children
    }
  }

  function depthFirst (n, f, p) {
    return Object.keys(n).reduce((ret, k) => {
      return ret.concat(
        depthFirst(n[k], f, k),
        p ? f(k, p) : []) // outer invocation can have null parent
    }, [])
  }

  return { create: makeHierarchy, depthFirst }
})()

/* istanbul ignore next */
if (true) {
  module.exports = HierarchyClosure
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var EvalThreadedNErr = (function () {
var RdfTerm = __webpack_require__(0);
var UNBOUNDED = -1;

function vpEngine (schema, shape, index) {
    var outerExpression = shape.expression;
    return {
      match:match
    };

    function match (graph, node, constraintList, constraintToTripleMapping, tripleToConstraintMapping, neighborhood, semActHandler, trace) {

      /*
       * returns: list of passing or failing threads (no heterogeneous lists)
       */
      function validateExpr (expr, thread) {
        if (typeof expr === "string") { // Inclusion
          var included = index.tripleExprs[expr];
          return validateExpr(included, thread);
        }

        var constraintNo = constraintList.indexOf(expr);
        var min = "min" in expr ? expr.min : 1;
        var max = "max" in expr ? expr.max === UNBOUNDED ? Infinity : expr.max : 1;

        function validateRept (type, val) {
          var repeated = 0, errOut = false;
          var newThreads = [thread];
          var minmax = {  };
          if ("min" in expr && expr.min !== 1 || "max" in expr && expr.max !== 1) {
            minmax.min = expr.min;
            minmax.max = expr.max;
          }
          if ("semActs" in expr)
            minmax.semActs = expr.semActs;
          if ("annotations" in expr)
            minmax.annotations = expr.annotations;
          for (; repeated < max && !errOut; ++repeated) {
            var inner = [];
            for (var t = 0; t < newThreads.length; ++t) {
              var newt = newThreads[t];
              var sub = val(newt);
              if (sub.length > 0 && sub[0].errors.length === 0) { // all subs pass or all fail
                sub.forEach(newThread => {
                  var solutions =
                      "expression" in newt ? newt.expression.solutions : [];
                  if ("solution" in newThread)
                    solutions = solutions.concat(newThread.solution);
                  delete newThread.solution;
                  newThread.expression = extend({
                    type: type,
                    solutions: solutions
                  }, minmax);
                });
              }
              if (sub.length === 0 /* min:0 */ || sub[0].errors.length > 0)
                return repeated < min ? sub : newThreads;
              else
                inner = inner.concat(sub);
              // newThreads.expressions.push(sub);
            }
            newThreads = inner;
          }
          if (newThreads.length > 0 && newThreads[0].errors.length === 0 && "semActs" in expr) {
            var passes = [];
            var failures = [];
            newThreads.forEach(newThread => {
              const semActErrors = semActHandler.dispatchAll(expr.semActs, "???", newThread)
              if (semActErrors.length === 0) {
                passes.push(newThread)
              } else {
                [].push.apply(newThread.errors, semActErrors);
                failures.push(newThread);
              }
            });
            newThreads = passes.length > 0 ? passes : failures;
          }
          return newThreads;
        }

        if (expr.type === "TripleConstraint") {
          var negated = "negated" in expr && expr.negated || max === 0;
          if (negated)
            min = max = Infinity;
          if (thread.avail[constraintNo] === undefined)
            thread.avail[constraintNo] = constraintToTripleMapping[constraintNo].map(pair => pair.tNo);
          var minmax = {  };
          if ("min" in expr && expr.min !== 1 || "max" in expr && expr.max !== 1) {
            minmax.min = expr.min;
            minmax.max = expr.max;
          }
          if ("semActs" in expr)
            minmax.semActs = expr.semActs;
          if ("annotations" in expr)
            minmax.annotations = expr.annotations;
          var taken = thread.avail[constraintNo].splice(0, min);
          var passed = negated ? taken.length === 0 : taken.length >= min;
          var ret = [];
          var matched = thread.matched;
          if (passed) {
            do {
              const passFail = taken.reduce((acc, tripleNo) => {
                const t = neighborhood[tripleNo]
                const tested = {
                  type: "TestedTriple",
                  subject: t.subject,
                  predicate: t.predicate,
                  object: ldify(t.object)
                }
                var hit = constraintToTripleMapping[constraintNo].find(x => x.tNo === tripleNo);
                if (hit.res && Object.keys(hit.res).length > 0)
                  tested.referenced = hit.res;
                const semActErrors = thread.errors.concat(
                  "semActs" in expr
                    ? semActHandler.dispatchAll(expr.semActs, t, tested)
                    : []
                )
                if (semActErrors.length > 0)
                  acc.fail.push({tripleNo, tested, semActErrors})
                else
                  acc.pass.push({tripleNo, tested, semActErrors})
                return acc
              }, {pass: [], fail: []})


              // return an empty solution if min card was 0
              if (passFail.fail.length === 0) {
                // If we didn't take anything, fall back to old errors.
                // Could do something fancy here with a semAct registration for negative matches.
                const totalErrors = taken.length === 0 ? thread.errors.slice() : []
                const myThread = makeThread(passFail.pass, totalErrors)
                ret.push(myThread);
                // ret.push();
              } else {
                passFail.fail.forEach(
                  f => ret.push(makeThread([f], f.semActErrors))
                )
              }

              function makeThread (tests, errors) {
                return {
                  avail: thread.avail.map(a => { // copy parent thread's avail vector
                    return a.slice();
                  }),
                  errors: errors,
                  matched: matched.concat({
                    tNos: tests.map(p => p.tripleNo)
                  }),
                  expression: extend(
                    {
                      type: "TripleConstraintSolutions",
                      predicate: expr.predicate
                    },
                    "valueExpr" in expr ? { valueExpr: expr.valueExpr } : {},
                    "productionLabel" in expr ? { productionLabel: expr.productionLabel } : {},
                    minmax,
                    {
                      solutions: tests.map(p => p.tested)
                    }
                  )
                }
              }
            } while ((function () {
              if (thread.avail[constraintNo].length > 0 && taken.length < max) {
                // build another thread.
                taken.push(thread.avail[constraintNo].shift());
                return true;
              } else {
                // no more threads
                return false;
              }
            })());
          } else {
            var valueExpr = null;
            if (typeof expr.valueExpr === "string") { // ShapeRef
              valueExpr = expr.valueExpr;
              if (RdfTerm.isBlank(valueExpr))
                valueExpr = index.shapeExprs[valueExpr];
            } else if (expr.valueExpr) {
              valueExpr = extend({}, expr.valueExpr)
            }
            ret.push({
              avail: thread.avail,
              errors: thread.errors.concat([
                extend({
                  type: negated ? "NegatedProperty" : "MissingProperty",
                  property: expr.predicate
                }, valueExpr ? { valueExpr: valueExpr } : {})
              ]),
              matched: matched
            });
          }

          return ret;
        }

        else if (expr.type === "OneOf") {
          return validateRept("OneOfSolutions", (th) => {
            var accept = null;
            var matched = [];
            var failed = [];
            expr.expressions.forEach(nested => {
              var thcopy = {
                avail: th.avail.map(a => { return a.slice(); }),
                errors: th.errors,
                matched: th.matched//.slice() ever needed??
              };
              var sub = validateExpr(nested, thcopy);
              if (sub[0].errors.length === 0) { // all subs pass or all fail
                matched = matched.concat(sub);
                sub.forEach(newThread => {
                  var expressions =
                      "solution" in thcopy ? thcopy.solution.expressions : [];
                  if ("expression" in newThread) // undefined for no matches on min card:0
                    expressions = expressions.concat([newThread.expression]);
                  delete newThread.expression;
                  newThread.solution = {
                    type: "OneOfSolution",
                    expressions: expressions
                  };
                });
              } else
                failed = failed.concat(sub);
            });
            return matched.length > 0 ? matched : failed;
          });
        }

        else if (expr.type === "EachOf") {
          return homogenize(validateRept("EachOfSolutions", (th) => {
            // Iterate through nested expressions, exprThreads starts as [th].
            return expr.expressions.reduce((exprThreads, nested) => {
              // Iterate through current thread list composing nextThreads.
              // Consider e.g.
              // <S1> { <p1> . | <p2> .; <p3> . } / { <x> <p2> 2; <p3> 3 } (should pass)
              // <S1> { <p1> .; <p2> . }          / { <s1> <p1> 1 }        (should fail)
              return homogenize(exprThreads.reduce((nextThreads, exprThread) => {
                var sub = validateExpr(nested, exprThread);
                // Move newThread.expression into a hierarchical solution structure.
                sub.forEach(newThread => {
                  if (newThread.errors.length === 0) {
                    var expressions =
                        "solution" in exprThread ? exprThread.solution.expressions : [];
                    if ("expression" in newThread) // undefined for no matches on min card:0
                      expressions = expressions.concat([newThread.expression]);
                    // console.warn(threadMatched(newThread), " vs ", exprMatched(expressions));
                    delete newThread.expression;
                    newThread.solution = {
                      type: "EachOfSolution",
                      expressions: expressions // exprThread.expression + newThread.expression
                    };
                  }
                });
                return nextThreads.concat(sub);
              }, []));
            }, [th]);
          }));
        }

        // else if (expr.type === "Inclusion") {
        //   var included = schema.productions[expr.include];
        //   return validateExpr(included, thread);
        // }

        // else if (expr.type === "NestedShape") {
        //   var newThreads = [thread]
        //   return newThreads;
        // }

        runtimeError("unexpected expr type: " + expr.type);

        function homogenize (list) {
          return list.reduce((acc, elt) => {
            if (elt.errors.length === 0) {
              if (acc.errors) {
                return { errors: false, l: [elt] };
              } else {
                return { errors: false, l: acc.l.concat(elt) };
              }
            } else {
              if (acc.errors) {
                return { errors: true, l: acc.l.concat(elt) };
              } else {
                return acc; }
            }
          }, {errors: true, l: []}).l;
        }
      }

      var startingThread = {
        avail:[],   // triples remaining by constraint number
        matched:[], // triples matched in this thread
        errors:[]   // errors encounted
      };
      if (!outerExpression)
        return { }; // vapid match if no expression
      var ret = validateExpr(outerExpression, startingThread);
      // console.log(JSON.stringify(ret));
      // note: don't return if ret.length === 1 because it might fail the unmatchedTriples test.
      var longerChosen =
          ret.reduce((ret, elt) => {
            if (elt.errors.length > 0)
              return ret;              // early return
            var unmatchedTriples = {};
            // Collect triples assigned to some constraint.
            Object.keys(tripleToConstraintMapping).forEach(k => {
              if (tripleToConstraintMapping[k] !== undefined)
                unmatchedTriples[k] = tripleToConstraintMapping[k];
            });
            // Removed triples matched in this thread.
            elt.matched.forEach(m => {
              m.tNos.forEach(t => {
                delete unmatchedTriples[t];
              });
            });
            // Remaining triples are unaccounted for.
            Object.keys(unmatchedTriples).forEach(t => {
              elt.errors.push({
                type: "ExcessTripleViolation",
                triple: neighborhood[t],
                constraint: constraintList[unmatchedTriples[t]]
              });
            });
            return ret !== null ? ret : // keep first solution
            // Accept thread with no unmatched triples.
            Object.keys(unmatchedTriples).length > 0 ? null : elt;
          }, null);
      return longerChosen !== null ?
        finish(longerChosen.expression, constraintList,
               neighborhood, semActHandler) :
        ret.length > 1 ? {
          type: "PossibleErrors",
          errors: ret.reduce((all, e) => {
            return all.concat([e.errors]);
          }, [])
        } : ret[0];
    }

        function ldify (term) {
          if (term[0] !== "\"")
            return term;
          var ret = { value: RdfTerm.getLiteralValue(term) };
          var dt = RdfTerm.getLiteralType(term);
          if (dt &&
              dt !== "http://www.w3.org/2001/XMLSchema#string" &&
              dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString")
            ret.type = dt;
          var lang = RdfTerm.getLiteralLanguage(term)
          if (lang)
            ret.language = lang;
          return ret;
        }

    function finish (fromValidatePoint, constraintList, neighborhood, semActHandler) {
      function _dive (solns) {
        if (solns.type === "OneOfSolutions" ||
            solns.type === "EachOfSolutions") {
          solns.solutions.forEach(s => {
            s.expressions.forEach(e => {
              _dive(e);
            });
          });
        } else if (solns.type === "TripleConstraintSolutions") {
          solns.solutions = solns.solutions.map(x => {
            if (x.type === "TestedTriple") // already done
              return x; // c.f. validation/3circularRef1_pass-open
            var t = neighborhood[x.tripleNo];
            var expr = constraintList[x.constraintNo];
            var ret = {
              type: "TestedTriple", subject: t.subject, predicate: t.predicate, object: ldify(t.object)
            };
            function diver (focus, shapeLabel, dive) {
              var sub = dive(focus, shapeLabel);
              if ("errors" in sub) {
                // console.dir(sub);
                var err = {
                  type: "ReferenceError", focus: focus,
                  shape: shapeLabel
                };
                if (typeof shapeLabel === "string" && RdfTerm.isBlank(shapeLabel))
                  err.referencedShape = shape;
                err.errors = sub;
                return [err];
              }
              if (("solution" in sub || "solutions" in sub)&& Object.keys(sub.solution || sub.solutions).length !== 0 ||
                  sub.type === "Recursion")
                ret.referenced = sub; // !!! needs to aggregate errors and solutions
              return [];
            }
            function diveRecurse (focus, shapeLabel) {
              return diver(focus, shapeLabel, recurse);
            }
            function diveDirect (focus, shapeLabel) {
              return diver(focus, shapeLabel, direct);
            }
            var subErrors = "valueExpr" in expr ?
                checkValueExpr(expr.inverse ? t.subject : t.object, expr.valueExpr, diveRecurse, diveDirect) :
                [];
            if (subErrors.length === 0 && "semActs" in expr)
              [].push.apply(subErrors, semActHandler.dispatchAll(expr.semActs, t, ret))
            if (subErrors.length > 0) {
              fromValidatePoint.errors = fromValidatePoint.errors || [];
              fromValidatePoint.errors = fromValidatePoint.errors.concat(subErrors);
            }
            return ret;
          });
        } else {
          throw Error("unexpected expr type in " + JSON.stringify(solns));
        }
      }
      if (Object.keys(fromValidatePoint).length > 0) // guard against {}
        _dive(fromValidatePoint);
      if ("semActs" in shape)
        fromValidatePoint.semActs = shape.semActs;
      return fromValidatePoint;
    }
  }

        function ldify (term) {
          if (term[0] !== "\"")
            return term;
          var ret = { value: N3Util.getLiteralValue(term) };
          var dt = N3Util.getLiteralType(term);
          if (dt &&
              dt !== "http://www.w3.org/2001/XMLSchema#string" &&
              dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString")
            ret.type = dt;
          var lang = N3Util.getLiteralLanguage(term)
          if (lang)
            ret.language = lang;
          return ret;
        }

function extend(base) {
  if (!base) base = {};
  for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
    for (var name in arg)
      base[name] = arg[name];
  return base;
}

return {
  name: "eval-threaded-nerr",
  description: "emulation of regular expression engine with error permutations",
  compile: vpEngine
};
})();

if (true)
  module.exports = EvalThreadedNErr;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var ShExParser = (function () {

// stolen as much as possible from SPARQL.js
if (true) {
  ShExJison = __webpack_require__(11).Parser; // node environment
} else {}

// Creates a ShEx parser with the given pre-defined prefixes
var prepareParser = function (baseIRI, prefixes, schemaOptions) {
  schemaOptions = schemaOptions || {};
  // Create a copy of the prefixes
  var prefixesCopy = {};
  for (var prefix in prefixes || {})
    prefixesCopy[prefix] = prefixes[prefix];

  // Create a new parser with the given prefixes
  // (Workaround for https://github.com/zaach/jison/issues/241)
  var parser = new ShExJison();

  function runParser () {
    // ShExJison.base = baseIRI || "";
    // ShExJison.basePath = ShExJison.base.replace(/[^\/]*$/, '');
    // ShExJison.baseRoot = ShExJison.base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    ShExJison._prefixes = Object.create(prefixesCopy);
    ShExJison._imports = [];
    ShExJison._setBase(baseIRI);
    ShExJison._setFileName(baseIRI);
    ShExJison.options = schemaOptions;
    let errors = [];
    ShExJison.recoverable = e =>
      errors.push(e);
    let ret = null;
    try {
      ret = ShExJison.prototype.parse.apply(parser, arguments);
    } catch (e) {
      errors.push(e);
    }
    ShExJison.reset();
    errors.forEach(e => {
      if ("hash" in e) {
        const hash = e.hash;
        const location = hash.loc;
        delete hash.loc;
        Object.assign(e, hash, {location: location});
      }
      return e;
    })
    if (errors.length == 1) {
      errors[0].parsed = ret;
      throw errors[0];
    } else if (errors.length) {
      const all = new Error("" + errors.length  + " parser errors:\n" + errors.map(
        e => contextError(e, parser.yy.lexer)
      ).join("\n"));
      all.errors = errors;
      all.parsed = ret;
      throw all;
    } else {
      return ret;
    }
  }
  parser.parse = runParser;
  parser._setBase = function (base) {
    ShExJison._setBase;
    baseIRI = base;
  }
  parser._setFileName = ShExJison._setFileName;
  parser._setOptions = function (opts) { ShExJison.options = opts; };
  parser._resetBlanks = ShExJison._resetBlanks;
  parser.reset = ShExJison.reset;
  ShExJison.options = schemaOptions;
  return parser;

  function contextError (e, lexer) {
    // use the lexer's pretty-printing
    var line = e.location.first_line;
    var col  = e.location.first_column + 1;
    var posStr = "pos" in e.hash ? "\n" + e.hash.pos : ""
    return `${baseIRI}\n line: ${line}, column: ${col}: ${e.message}${posStr}`;
  }
}

return {
  construct: prepareParser
};
})();

if (true)
  module.exports = ShExParser;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,18,19,20,21,23,26,36,198,220,221],$V1=[19,21,220,221],$V2=[2,27],$V3=[1,22],$V4=[1,23],$V5=[2,12],$V6=[2,13],$V7=[2,14],$V8=[7,18,19,20,21,23,26,36,220,221],$V9=[1,29],$Va=[1,32],$Vb=[1,31],$Vc=[2,18],$Vd=[2,19],$Ve=[1,38],$Vf=[1,42],$Vg=[1,41],$Vh=[1,40],$Vi=[1,44],$Vj=[1,47],$Vk=[1,46],$Vl=[2,15],$Vm=[2,17],$Vn=[2,264],$Vo=[2,265],$Vp=[2,266],$Vq=[2,267],$Vr=[19,21,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,194,220,223],$Vs=[2,61],$Vt=[1,65],$Vu=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,184,194,220,223,225],$Vv=[2,29],$Vw=[2,242],$Vx=[2,243],$Vy=[2,268],$Vz=[198,200],$VA=[1,73],$VB=[1,76],$VC=[1,75],$VD=[2,16],$VE=[7,18,19,20,21,23,26,36,51,220,221],$VF=[2,47],$VG=[7,18,19,20,21,23,26,36,51,53,220,221],$VH=[2,54],$VI=[119,125,127,194,223],$VJ=[2,139],$VK=[1,111],$VL=[1,119],$VM=[1,93],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,110],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[1,125],$V_=[1,106],$V$=[1,118],$V01=[2,62],$V11=[19,21,69,71,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,194,220,223],$V21=[1,136],$V31=[1,137],$V41=[1,138],$V51=[1,135],$V61=[1,134],$V71=[2,233],$V81=[2,234],$V91=[2,235],$Va1=[2,20],$Vb1=[1,145],$Vc1=[2,53],$Vd1=[1,147],$Ve1=[2,60],$Vf1=[2,69],$Vg1=[1,153],$Vh1=[1,154],$Vi1=[1,155],$Vj1=[2,65],$Vk1=[2,71],$Vl1=[1,162],$Vm1=[1,163],$Vn1=[1,164],$Vo1=[1,167],$Vp1=[1,170],$Vq1=[2,68],$Vr1=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,194,195,198,220,221,223],$Vs1=[2,95],$Vt1=[7,18,19,20,21,23,26,36,51,53,195,198,220,221],$Vu1=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,220,221],$Vv1=[2,87],$Vw1=[2,88],$Vx1=[7,18,19,20,21,23,26,36,51,53,79,80,81,101,102,103,104,119,125,127,194,195,198,220,221,223],$Vy1=[2,108],$Vz1=[2,107],$VA1=[7,18,19,20,21,23,26,36,51,53,101,102,103,104,112,113,114,115,116,117,195,198,220,221],$VB1=[2,102],$VC1=[2,101],$VD1=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,195,198,220,221],$VE1=[2,91],$VF1=[2,92],$VG1=[2,112],$VH1=[2,113],$VI1=[2,114],$VJ1=[2,110],$VK1=[2,241],$VL1=[19,21,71,81,100,108,109,168,190,209,210,211,212,213,214,215,216,217,218,220],$VM1=[2,187],$VN1=[7,18,19,20,21,23,26,36,51,53,112,113,114,115,116,117,195,198,220,221],$VO1=[2,104],$VP1=[1,194],$VQ1=[1,196],$VR1=[1,198],$VS1=[1,197],$VT1=[2,118],$VU1=[1,205],$VV1=[1,206],$VW1=[1,207],$VX1=[1,208],$VY1=[100,108,109,211,212,213,214],$VZ1=[2,26],$V_1=[2,31],$V$1=[2,32],$V02=[79,80,81,119,125,127,194,223],$V12=[51,53],$V22=[1,270],$V32=[1,275],$V42=[1,252],$V52=[1,260],$V62=[1,261],$V72=[1,262],$V82=[1,269],$V92=[1,265],$Va2=[1,274],$Vb2=[2,48],$Vc2=[2,55],$Vd2=[2,64],$Ve2=[2,70],$Vf2=[2,66],$Vg2=[2,72],$Vh2=[7,18,19,20,21,23,26,36,51,53,101,102,103,104,195,198,220,221],$Vi2=[1,326],$Vj2=[1,334],$Vk2=[1,335],$Vl2=[1,336],$Vm2=[1,342],$Vn2=[1,343],$Vo2=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,194,198,220,221,223],$Vp2=[2,231],$Vq2=[7,18,19,20,21,23,26,36,51,53,198,220,221],$Vr2=[1,351],$Vs2=[2,106],$Vt2=[2,111],$Vu2=[2,98],$Vv2=[1,357],$Vw2=[2,99],$Vx2=[2,100],$Vy2=[2,105],$Vz2=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,198,220,221],$VA2=[2,93],$VB2=[1,374],$VC2=[1,380],$VD2=[1,369],$VE2=[1,373],$VF2=[1,383],$VG2=[1,384],$VH2=[1,385],$VI2=[1,372],$VJ2=[1,386],$VK2=[1,387],$VL2=[1,392],$VM2=[1,393],$VN2=[1,394],$VO2=[1,395],$VP2=[1,388],$VQ2=[1,389],$VR2=[1,390],$VS2=[1,391],$VT2=[1,379],$VU2=[19,21,69,165,204,220],$VV2=[2,167],$VW2=[2,141],$VX2=[1,408],$VY2=[1,407],$VZ2=[1,421],$V_2=[1,424],$V$2=[1,420],$V03=[1,423],$V13=[2,117],$V23=[2,122],$V33=[2,124],$V43=[2,125],$V53=[2,126],$V63=[2,256],$V73=[2,257],$V83=[2,258],$V93=[2,259],$Va3=[2,123],$Vb3=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,184,194,195,198,220,223,225],$Vc3=[2,36],$Vd3=[2,74],$Ve3=[2,77],$Vf3=[2,35],$Vg3=[2,39],$Vh3=[2,42],$Vi3=[2,45],$Vj3=[1,446],$Vk3=[1,448],$Vl3=[1,454],$Vm3=[1,455],$Vn3=[1,456],$Vo3=[1,463],$Vp3=[1,464],$Vq3=[1,465],$Vr3=[1,468],$Vs3=[2,41],$Vt3=[1,538],$Vu3=[2,44],$Vv3=[1,574],$Vw3=[2,67],$Vx3=[51,53,70],$Vy3=[1,603],$Vz3=[51,53,70,79,80,81,119,125,127,194,195,198,223],$VA3=[51,53,70,195,198],$VB3=[51,53,70,96,97,98,101,102,103,104,195,198],$VC3=[51,53,70,79,80,81,101,102,103,104,119,125,127,194,195,198,223],$VD3=[51,53,70,101,102,103,104,112,113,114,115,116,117,195,198],$VE3=[51,53,70,112,113,114,115,116,117,195,198],$VF3=[51,70],$VG3=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,194,220,221,223],$VH3=[2,97],$VI3=[2,96],$VJ3=[2,230],$VK3=[1,645],$VL3=[1,648],$VM3=[1,644],$VN3=[1,647],$VO3=[2,94],$VP3=[2,109],$VQ3=[2,103],$VR3=[2,115],$VS3=[2,116],$VT3=[2,134],$VU3=[2,186],$VV3=[1,678],$VW3=[19,21,71,81,100,108,109,168,183,190,209,210,211,212,213,214,215,216,217,218,220],$VX3=[2,236],$VY3=[2,237],$VZ3=[2,238],$V_3=[2,249],$V$3=[2,252],$V04=[2,246],$V14=[2,247],$V24=[2,248],$V34=[2,254],$V44=[2,255],$V54=[2,260],$V64=[2,261],$V74=[2,262],$V84=[2,263],$V94=[19,21,71,81,100,108,109,111,168,183,190,209,210,211,212,213,214,215,216,217,218,220],$Va4=[2,146],$Vb4=[2,147],$Vc4=[1,686],$Vd4=[2,148],$Ve4=[121,135],$Vf4=[2,153],$Vg4=[2,154],$Vh4=[2,156],$Vi4=[1,689],$Vj4=[1,690],$Vk4=[19,21,204,220],$Vl4=[2,179],$Vm4=[1,698],$Vn4=[121,135,140,141],$Vo4=[2,165],$Vp4=[119,125,127,194,195,198,223],$Vq4=[19,21,119,125,127,194,204,220,223],$Vr4=[2,239],$Vs4=[2,240],$Vt4=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,184,194,198,220,223,225],$Vu4=[2,33],$Vv4=[2,37],$Vw4=[2,73],$Vx4=[2,75],$Vy4=[2,34],$Vz4=[2,43],$VA4=[2,40],$VB4=[2,46],$VC4=[1,765],$VD4=[1,771],$VE4=[1,811],$VF4=[1,858],$VG4=[51,53,70,101,102,103,104,195,198],$VH4=[51,53,70,79,80,81,119,125,127,194,198,223],$VI4=[51,53,70,198],$VJ4=[1,901],$VK4=[51,53,70,96,97,98,101,102,103,104,198],$VL4=[1,911],$VM4=[1,948],$VN4=[1,984],$VO4=[2,232],$VP4=[1,995],$VQ4=[1,1001],$VR4=[1,1000],$VS4=[19,21,100,108,109,209,210,211,212,213,214,215,216,217,218,220],$VT4=[1,1021],$VU4=[1,1027],$VV4=[1,1026],$VW4=[1,1048],$VX4=[1,1054],$VY4=[1,1053],$VZ4=[1,1071],$V_4=[1,1073],$V$4=[1,1075],$V05=[19,21,71,81,100,108,109,168,184,190,209,210,211,212,213,214,215,216,217,218,220],$V15=[1,1079],$V25=[1,1085],$V35=[1,1088],$V45=[1,1089],$V55=[1,1090],$V65=[1,1078],$V75=[1,1091],$V85=[1,1092],$V95=[1,1097],$Va5=[1,1098],$Vb5=[1,1099],$Vc5=[1,1100],$Vd5=[1,1093],$Ve5=[1,1094],$Vf5=[1,1095],$Vg5=[1,1096],$Vh5=[1,1084],$Vi5=[2,250],$Vj5=[2,253],$Vk5=[2,135],$Vl5=[2,149],$Vm5=[2,151],$Vn5=[2,155],$Vo5=[2,157],$Vp5=[2,158],$Vq5=[2,162],$Vr5=[2,164],$Vs5=[2,169],$Vt5=[2,170],$Vu5=[1,1115],$Vv5=[1,1118],$Vw5=[1,1114],$Vx5=[1,1117],$Vy5=[1,1128],$Vz5=[2,226],$VA5=[2,244],$VB5=[2,245],$VC5=[119,125,127,194,198,223],$VD5=[2,127],$VE5=[2,76],$VF5=[1,1168],$VG5=[1,1204],$VH5=[1,1263],$VI5=[1,1269],$VJ5=[1,1301],$VK5=[1,1307],$VL5=[51,53,70,79,80,81,119,125,127,194,223],$VM5=[51,53,70,96,97,98,101,102,103,104],$VN5=[1,1365],$VO5=[1,1412],$VP5=[2,227],$VQ5=[2,228],$VR5=[2,229],$VS5=[7,18,19,20,21,23,26,36,51,53,79,80,81,111,119,125,127,194,195,198,220,221,223],$VT5=[7,18,19,20,21,23,26,36,51,53,111,195,198,220,221],$VU5=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,111,195,198,220,221],$VV5=[2,209],$VW5=[1,1465],$VX5=[19,21,71,81,100,108,109,168,183,184,190,209,210,211,212,213,214,215,216,217,218,220],$VY5=[19,21,71,81,100,108,109,111,168,183,184,190,209,210,211,212,213,214,215,216,217,218,220],$VZ5=[2,251],$V_5=[2,152],$V$5=[2,150],$V06=[2,159],$V16=[2,163],$V26=[2,160],$V36=[2,161],$V46=[19,21,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,194,220,223],$V56=[1,1482],$V66=[70,135],$V76=[1,1485],$V86=[1,1486],$V96=[70,135,140,141],$Va6=[1,1509],$Vb6=[1,1515],$Vc6=[1,1514],$Vd6=[1,1552],$Ve6=[1,1599],$Vf6=[1,1632],$Vg6=[1,1638],$Vh6=[1,1637],$Vi6=[1,1658],$Vj6=[1,1664],$Vk6=[1,1663],$Vl6=[1,1685],$Vm6=[1,1691],$Vn6=[1,1690],$Vo6=[1,1736],$Vp6=[1,1802],$Vq6=[1,1808],$Vr6=[1,1807],$Vs6=[1,1828],$Vt6=[1,1834],$Vu6=[1,1833],$Vv6=[1,1854],$Vw6=[1,1860],$Vx6=[1,1859],$Vy6=[1,1901],$Vz6=[1,1907],$VA6=[1,1939],$VB6=[1,1945],$VC6=[121,135,140,141,155,195,198],$VD6=[2,172],$VE6=[1,1965],$VF6=[1,1966],$VG6=[1,1967],$VH6=[1,1968],$VI6=[121,135,140,141,155,161,162,163,164,195,198],$VJ6=[2,38],$VK6=[51,121,135,140,141,155,161,162,163,164,195,198],$VL6=[2,51],$VM6=[51,53,121,135,140,141,155,161,162,163,164,195,198],$VN6=[2,58],$VO6=[1,1997],$VP6=[1,2017],$VQ6=[1,2023],$VR6=[1,2022],$VS6=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,111,112,113,114,115,116,117,119,125,127,166,184,194,195,198,220,223,225],$VT6=[1,2069],$VU6=[1,2075],$VV6=[1,2107],$VW6=[1,2113],$VX6=[1,2166],$VY6=[1,2199],$VZ6=[1,2205],$V_6=[1,2204],$V$6=[1,2225],$V07=[1,2231],$V17=[1,2230],$V27=[1,2252],$V37=[1,2258],$V47=[1,2257],$V57=[1,2279],$V67=[1,2285],$V77=[1,2284],$V87=[1,2305],$V97=[1,2311],$Va7=[1,2310],$Vb7=[1,2332],$Vc7=[1,2338],$Vd7=[1,2337],$Ve7=[51,53,70,79,80,81,111,119,125,127,194,195,198,223],$Vf7=[51,53,70,111,195,198],$Vg7=[51,53,70,96,97,98,101,102,103,104,111,195,198],$Vh7=[1,2407],$Vi7=[121,135,140,141,195,198],$Vj7=[2,174],$Vk7=[1,2469],$Vl7=[2,173],$Vm7=[2,181],$Vn7=[2,182],$Vo7=[2,183],$Vp7=[2,184],$Vq7=[2,49],$Vr7=[2,56],$Vs7=[2,63],$Vt7=[2,83],$Vu7=[2,79],$Vv7=[2,85],$Vw7=[1,2491],$Vx7=[2,82],$Vy7=[51,53,79,80,81,101,102,103,104,119,121,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$Vz7=[51,53,79,80,81,119,121,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$VA7=[51,53,101,102,103,104,112,113,114,115,116,117,121,135,140,141,155,161,162,163,164,195,198],$VB7=[51,53,96,97,98,101,102,103,104,121,135,140,141,155,161,162,163,164,195,198],$VC7=[2,89],$VD7=[2,90],$VE7=[51,53,112,113,114,115,116,117,121,135,140,141,155,161,162,163,164,195,198],$VF7=[111,119,125,127,194,195,198,223],$VG7=[1,2560],$VH7=[1,2649],$VI7=[1,2655],$VJ7=[1,2738],$VK7=[1,2771],$VL7=[1,2777],$VM7=[1,2776],$VN7=[1,2797],$VO7=[1,2803],$VP7=[1,2802],$VQ7=[1,2824],$VR7=[1,2830],$VS7=[1,2829],$VT7=[1,2851],$VU7=[1,2857],$VV7=[1,2856],$VW7=[1,2877],$VX7=[1,2883],$VY7=[1,2882],$VZ7=[1,2904],$V_7=[1,2910],$V$7=[1,2909],$V08=[2,176],$V18=[1,2928],$V28=[2,52],$V38=[2,59],$V48=[2,78],$V58=[2,84],$V68=[2,80],$V78=[2,86],$V88=[51,53,101,102,103,104,121,135,140,141,155,161,162,163,164,195,198],$V98=[1,2952],$Va8=[70,135,140,141,155,195,198],$Vb8=[1,2961],$Vc8=[1,2962],$Vd8=[1,2963],$Ve8=[1,2964],$Vf8=[70,135,140,141,155,161,162,163,164,195,198],$Vg8=[51,70,135,140,141,155,161,162,163,164,195,198],$Vh8=[51,53,70,135,140,141,155,161,162,163,164,195,198],$Vi8=[1,2993],$Vj8=[1,3022],$Vk8=[1,3055],$Vl8=[1,3061],$Vm8=[1,3060],$Vn8=[1,3081],$Vo8=[1,3087],$Vp8=[1,3086],$Vq8=[1,3108],$Vr8=[1,3114],$Vs8=[1,3113],$Vt8=[1,3135],$Vu8=[1,3141],$Vv8=[1,3140],$Vw8=[1,3161],$Vx8=[1,3167],$Vy8=[1,3166],$Vz8=[1,3188],$VA8=[1,3194],$VB8=[1,3193],$VC8=[1,3271],$VD8=[1,3277],$VE8=[121,135,140,141,198],$VF8=[1,3338],$VG8=[2,50],$VH8=[1,3372],$VI8=[2,57],$VJ8=[1,3405],$VK8=[2,81],$VL8=[70,135,140,141,195,198],$VM8=[1,3430],$VN8=[1,3452],$VO8=[51,53,70,79,80,81,101,102,103,104,119,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$VP8=[51,53,70,79,80,81,119,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$VQ8=[51,53,70,101,102,103,104,112,113,114,115,116,117,135,140,141,155,161,162,163,164,195,198],$VR8=[51,53,70,96,97,98,101,102,103,104,135,140,141,155,161,162,163,164,195,198],$VS8=[51,53,70,112,113,114,115,116,117,135,140,141,155,161,162,163,164,195,198],$VT8=[1,3500],$VU8=[1,3506],$VV8=[1,3569],$VW8=[1,3575],$VX8=[1,3574],$VY8=[1,3595],$VZ8=[1,3601],$V_8=[1,3600],$V$8=[1,3622],$V09=[1,3628],$V19=[1,3627],$V29=[2,178],$V39=[2,175],$V49=[51,121,135,140,141,195,198],$V59=[51,53,121,135,140,141,195,198],$V69=[1,3714],$V79=[1,3740],$V89=[1,3782],$V99=[2,171],$Va9=[51,53,70,101,102,103,104,135,140,141,155,161,162,163,164,195,198],$Vb9=[1,3834],$Vc9=[1,3909],$Vd9=[1,3915],$Ve9=[1,3914],$Vf9=[1,3935],$Vg9=[1,3941],$Vh9=[1,3940],$Vi9=[1,3962],$Vj9=[1,3968],$Vk9=[1,3967],$Vl9=[1,3988],$Vm9=[1,3994],$Vn9=[1,3993],$Vo9=[1,4031],$Vp9=[51,53,79,80,81,101,102,103,104,119,121,125,127,135,140,141,194,195,198,223],$Vq9=[51,53,79,80,81,119,121,125,127,135,140,141,194,195,198,223],$Vr9=[51,53,101,102,103,104,112,113,114,115,116,117,121,135,140,141,195,198],$Vs9=[51,53,96,97,98,101,102,103,104,121,135,140,141,195,198],$Vt9=[51,53,112,113,114,115,116,117,121,135,140,141,195,198],$Vu9=[1,4076],$Vv9=[1,4100],$Vw9=[70,135,140,141,198],$Vx9=[1,4115],$Vy9=[1,4148],$Vz9=[1,4181],$VA9=[1,4210],$VB9=[1,4216],$VC9=[1,4215],$VD9=[1,4236],$VE9=[1,4242],$VF9=[1,4241],$VG9=[1,4263],$VH9=[1,4269],$VI9=[1,4268],$VJ9=[111,121,135,140,141,195,198],$VK9=[51,53,101,102,103,104,121,135,140,141,195,198],$VL9=[1,4344],$VM9=[1,4376],$VN9=[51,70,135,140,141,195,198],$VO9=[51,53,70,135,140,141,195,198],$VP9=[1,4446],$VQ9=[1,4472],$VR9=[1,4514],$VS9=[1,4600],$VT9=[1,4633],$VU9=[1,4673],$VV9=[1,4706],$VW9=[1,4712],$VX9=[1,4711],$VY9=[1,4749],$VZ9=[51,53,70,79,80,81,101,102,103,104,119,125,127,135,140,141,194,195,198,223],$V_9=[51,53,70,79,80,81,119,125,127,135,140,141,194,195,198,223],$V$9=[51,53,70,101,102,103,104,112,113,114,115,116,117,135,140,141,195,198],$V0a=[51,53,70,96,97,98,101,102,103,104,135,140,141,195,198],$V1a=[51,53,70,112,113,114,115,116,117,135,140,141,195,198],$V2a=[1,4794],$V3a=[1,4818],$V4a=[1,4855],$V5a=[1,4897],$V6a=[1,4942],$V7a=[70,111,135,140,141,195,198],$V8a=[51,53,70,101,102,103,104,135,140,141,195,198],$V9a=[1,4989],$Vaa=[1,5021],$Vba=[1,5080],$Vca=[1,5104],$Vda=[1,5161],$Vea=[1,5194],$Vfa=[1,5234],$Vga=[1,5289],$Vha=[1,5349],$Via=[1,5391],$Vja=[1,5436],$Vka=[1,5471],$Vla=[1,5526],$Vma=[1,5550],$Vna=[1,5596],$Voa=[1,5640],$Vpa=[1,5714],$Vqa=[1,5769];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"importDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"iri":22,"IT_IMPORT":23,"start":24,"shapeExprDecl":25,"IT_start":26,"=":27,"shapeAnd":28,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":29,"QcodeDecl_E_Plus":30,"codeDecl":31,"QIT_ABSTRACT_E_Opt":32,"shapeExprLabel":33,"Qrestriction_E_Star":34,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":35,"IT_ABSTRACT":36,"restriction":37,"shapeExpression":38,"IT_EXTERNAL":39,"QIT_NOT_E_Opt":40,"shapeAtomNoRef":41,"QshapeOr_E_Opt":42,"IT_NOT":43,"shapeRef":44,"shapeOr":45,"inlineShapeExpression":46,"inlineShapeOr":47,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus":48,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus":49,"O_QIT_OR_E_S_QshapeAnd_E_C":50,"IT_OR":51,"O_QIT_AND_E_S_QshapeNot_E_C":52,"IT_AND":53,"shapeNot":54,"inlineShapeAnd":55,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":56,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":57,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":58,"inlineShapeNot":59,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":60,"O_QIT_AND_E_S_QinlineShapeNot_E_C":61,"shapeAtom":62,"inlineShapeAtom":63,"nonLitNodeConstraint":64,"QshapeOrRef_E_Opt":65,"litNodeConstraint":66,"shapeOrRef":67,"QnonLitNodeConstraint_E_Opt":68,"(":69,")":70,".":71,"shapeDefinition":72,"nonLitInlineNodeConstraint":73,"QinlineShapeOrRef_E_Opt":74,"litInlineNodeConstraint":75,"inlineShapeOrRef":76,"QnonLitInlineNodeConstraint_E_Opt":77,"inlineShapeDefinition":78,"ATPNAME_LN":79,"ATPNAME_NS":80,"@":81,"Qannotation_E_Star":82,"semanticActions":83,"annotation":84,"IT_LITERAL":85,"QxsFacet_E_Star":86,"datatype":87,"valueSet":88,"QnumericFacet_E_Plus":89,"xsFacet":90,"numericFacet":91,"nonLiteralKind":92,"QstringFacet_E_Star":93,"QstringFacet_E_Plus":94,"stringFacet":95,"IT_IRI":96,"IT_BNODE":97,"IT_NONLITERAL":98,"stringLength":99,"INTEGER":100,"REGEXP":101,"IT_LENGTH":102,"IT_MINLENGTH":103,"IT_MAXLENGTH":104,"numericRange":105,"rawNumeric":106,"numericLength":107,"DECIMAL":108,"DOUBLE":109,"string":110,"^^":111,"IT_MININCLUSIVE":112,"IT_MINEXCLUSIVE":113,"IT_MAXINCLUSIVE":114,"IT_MAXEXCLUSIVE":115,"IT_TOTALDIGITS":116,"IT_FRACTIONDIGITS":117,"Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":118,"{":119,"QtripleExpression_E_Opt":120,"}":121,"O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":122,"extension":123,"extraPropertySet":124,"IT_CLOSED":125,"tripleExpression":126,"IT_EXTRA":127,"Qpredicate_E_Plus":128,"predicate":129,"oneOfTripleExpr":130,"groupTripleExpr":131,"multiElementOneOf":132,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":133,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":134,"|":135,"singleElementGroup":136,"multiElementGroup":137,"unaryTripleExpr":138,"QGT_SEMI_E_Opt":139,",":140,";":141,"Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus":142,"O_QGT_SEMI_E_S_QunaryTripleExpr_E_C":143,"Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt":144,"O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C":145,"include":146,"O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C":147,"$":148,"tripleExprLabel":149,"tripleConstraint":150,"bracketedTripleExpr":151,"Qcardinality_E_Opt":152,"QonShapeExpression_E_Opt":153,"cardinality":154,"IT_ON":155,"QIT_SHAPE_IT_EXPRESSION_E_Opt":156,"IT_SHAPE":157,"IT_EXPRESSION":158,"QsenseFlags_E_Opt":159,"senseFlags":160,"*":161,"+":162,"?":163,"REPEAT_RANGE":164,"^":165,"[":166,"QvalueSetValue_E_Star":167,"]":168,"valueSetValue":169,"iriRange":170,"literalRange":171,"languageRange":172,"O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C":173,"QiriExclusion_E_Plus":174,"iriExclusion":175,"QliteralExclusion_E_Plus":176,"literalExclusion":177,"QlanguageExclusion_E_Plus":178,"languageExclusion":179,"Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt":180,"QiriExclusion_E_Star":181,"O_QGT_TILDE_E_S_QiriExclusion_E_Star_C":182,"~":183,"-":184,"QGT_TILDE_E_Opt":185,"literal":186,"Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt":187,"QliteralExclusion_E_Star":188,"O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C":189,"LANGTAG":190,"Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt":191,"O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C":192,"QlanguageExclusion_E_Star":193,"&":194,"//":195,"O_Qiri_E_Or_Qliteral_E_C":196,"QcodeDecl_E_Star":197,"%":198,"O_QCODE_E_Or_QGT_MODULO_E_C":199,"CODE":200,"rdfLiteral":201,"numericLiteral":202,"booleanLiteral":203,"a":204,"blankNode":205,"langString":206,"Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt":207,"O_QGT_DTYPE_E_S_Qdatatype_E_C":208,"IT_true":209,"IT_false":210,"STRING_LITERAL1":211,"STRING_LITERAL_LONG1":212,"STRING_LITERAL2":213,"STRING_LITERAL_LONG2":214,"LANG_STRING_LITERAL1":215,"LANG_STRING_LITERAL_LONG1":216,"LANG_STRING_LITERAL2":217,"LANG_STRING_LITERAL_LONG2":218,"prefixedName":219,"PNAME_LN":220,"BLANK_NODE_LABEL":221,"O_QIT_EXTENDS_E_Or_QGT_AMP_E_C":222,"IT_EXTENDS":223,"O_QIT_RESTRICTS_E_Or_QGT_MINUS_E_C":224,"IT_RESTRICTS":225,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",23:"IT_IMPORT",26:"IT_start",27:"=",36:"IT_ABSTRACT",39:"IT_EXTERNAL",43:"IT_NOT",51:"IT_OR",53:"IT_AND",69:"(",70:")",71:".",79:"ATPNAME_LN",80:"ATPNAME_NS",81:"@",85:"IT_LITERAL",96:"IT_IRI",97:"IT_BNODE",98:"IT_NONLITERAL",100:"INTEGER",101:"REGEXP",102:"IT_LENGTH",103:"IT_MINLENGTH",104:"IT_MAXLENGTH",108:"DECIMAL",109:"DOUBLE",111:"^^",112:"IT_MININCLUSIVE",113:"IT_MINEXCLUSIVE",114:"IT_MAXINCLUSIVE",115:"IT_MAXEXCLUSIVE",116:"IT_TOTALDIGITS",117:"IT_FRACTIONDIGITS",119:"{",121:"}",125:"IT_CLOSED",127:"IT_EXTRA",135:"|",140:",",141:";",148:"$",155:"IT_ON",157:"IT_SHAPE",158:"IT_EXPRESSION",161:"*",162:"+",163:"?",164:"REPEAT_RANGE",165:"^",166:"[",168:"]",183:"~",184:"-",190:"LANGTAG",194:"&",195:"//",198:"%",200:"CODE",204:"a",209:"IT_true",210:"IT_false",211:"STRING_LITERAL1",212:"STRING_LITERAL_LONG1",213:"STRING_LITERAL2",214:"STRING_LITERAL_LONG2",215:"LANG_STRING_LITERAL1",216:"LANG_STRING_LITERAL_LONG1",217:"LANG_STRING_LITERAL2",218:"LANG_STRING_LITERAL_LONG2",220:"PNAME_LN",221:"BLANK_NODE_LABEL",223:"IT_EXTENDS",225:"IT_RESTRICTS"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[10,1],[10,1],[24,4],[11,1],[30,1],[30,2],[13,1],[13,1],[25,4],[32,0],[32,1],[34,0],[34,2],[35,1],[35,1],[38,3],[38,3],[38,2],[42,0],[42,1],[46,1],[45,1],[45,2],[50,2],[48,1],[48,2],[52,2],[49,1],[49,2],[29,0],[29,2],[47,2],[57,2],[56,0],[56,2],[28,2],[58,0],[58,2],[55,2],[61,2],[60,0],[60,2],[54,2],[40,0],[40,1],[59,2],[62,2],[62,1],[62,2],[62,3],[62,1],[65,0],[65,1],[68,0],[68,1],[41,2],[41,1],[41,2],[41,3],[41,1],[63,2],[63,1],[63,2],[63,3],[63,1],[74,0],[74,1],[77,0],[77,1],[67,1],[67,1],[76,1],[76,1],[44,1],[44,1],[44,2],[66,3],[82,0],[82,2],[64,3],[75,2],[75,2],[75,2],[75,1],[86,0],[86,2],[89,1],[89,2],[73,2],[73,1],[93,0],[93,2],[94,1],[94,2],[92,1],[92,1],[92,1],[90,1],[90,1],[95,2],[95,1],[99,1],[99,1],[99,1],[91,2],[91,2],[106,1],[106,1],[106,1],[106,3],[105,1],[105,1],[105,1],[105,1],[107,1],[107,1],[72,3],[78,4],[122,1],[122,1],[122,1],[118,0],[118,2],[120,0],[120,1],[124,2],[128,1],[128,2],[126,1],[130,1],[130,1],[132,2],[134,2],[133,1],[133,2],[131,1],[131,1],[136,2],[139,0],[139,1],[139,1],[137,3],[143,2],[143,2],[142,1],[142,2],[138,2],[138,1],[147,2],[144,0],[144,1],[145,1],[145,1],[151,7],[152,0],[152,1],[153,0],[153,3],[156,0],[156,2],[150,7],[159,0],[159,1],[154,1],[154,1],[154,1],[154,1],[160,1],[88,3],[167,0],[167,2],[169,1],[169,1],[169,1],[169,2],[174,1],[174,2],[176,1],[176,2],[178,1],[178,2],[173,1],[173,1],[173,1],[170,2],[181,0],[181,2],[182,2],[180,0],[180,1],[175,3],[185,0],[185,1],[171,2],[188,0],[188,2],[189,2],[187,0],[187,1],[177,3],[172,2],[172,2],[193,0],[193,2],[192,2],[191,0],[191,1],[179,3],[146,2],[84,3],[196,1],[196,1],[83,1],[197,0],[197,2],[31,3],[199,1],[199,1],[186,1],[186,1],[186,1],[129,1],[129,1],[87,1],[33,1],[33,1],[149,1],[149,1],[202,1],[202,1],[202,1],[201,1],[201,2],[208,2],[207,0],[207,1],[203,1],[203,1],[110,1],[110,1],[110,1],[110,1],[206,1],[206,1],[206,1],[206,1],[22,1],[22,1],[219,1],[219,1],[205,1],[123,2],[222,1],[222,1],[37,2],[224,1],[224,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        let imports = Object.keys(Parser._imports).length ? { imports: Parser._imports } : {}
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        let shapes = Parser.shapes ? { shapes: Object.values(Parser.shapes) } : {};
        var shexj = Object.assign(
          { type: "Schema" }, imports, startActs, startObj, shapes
        )
        if (Parser.options.index) {
          if (Parser._base !== null)
            shexj._base = Parser._base;
          shexj._prefixes = Parser._prefixes;
          shexj._index = {
            shapeExprs: Parser.shapes || new Map(),
            tripleExprs: Parser.productions || new Map()
          };
          shexj._sourceMap = Parser._sourceMap;
        }
        return shexj;

break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ;
break;
case 15:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));

break;
case 16:
 // t: ShExParser-test.js/with pre-defined prefixes
        Parser._prefixes[$$[$0-1].slice(0, -1)] = $$[$0];

break;
case 17:
 // t: @@
        Parser._imports.push($$[$0]);

break;
case 20:

        if (Parser.start)
          error(new Error("Parse error: start already defined"), yy);
        Parser.start = shapeJunction("ShapeOr", $$[$0-1], $$[$0]); // t: startInline

break;
case 21:

        Parser.startActs = $$[$0]; // t: startCode1

break;
case 22:
this.$ = [$$[$0]] // t: startCode1;
break;
case 23:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 26:
 // t: 1dot 1val1vsMinusiri3??
        if ($$[$0-3].abstract || $$[$0-1].length) { // t: $$[$0-3]: 1dotAbstractShapeCode1  $$[$0-2]: @@
          addShape($$[$0-2], Object.assign({type: "ShapeDecl"}, $$[$0-3],
                                     $$[$0-1].length > 0 ? { restricts: $$[$0-1] } : { },
                                     {shapeExpr: $$[$0]}), yy) // $$[$01]: t: @@
        } else {
          addShape($$[$0-2],  $$[$0], yy);
        }

break;
case 27:
this.$ = {  };
break;
case 28:
this.$ = { abstract: true };
break;
case 29: case 95:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 30: case 96:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 31:

        this.$ = nonest($$[$0]);

break;
case 32:
this.$ = { type: "ShapeExternal" };
break;
case 33:

        if ($$[$0-2])
          $$[$0-1] = { type: "ShapeNot", "shapeExpr": nonest($$[$0-1]) }; // t:@@
        if ($$[$0]) { // If there were disjuncts,
          //           shapeOr will have $$[$0].set needsAtom.
          //           Prepend $$[$0].needsAtom with $$[$0-1].
          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
          $$[$0].needsAtom.unshift(nonest($$[$0-1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0-1];
        }

break;
case 34:

        $$[$0-1] = { type: "ShapeNot", "shapeExpr": nonest($$[$0-1]) } // !!! opt
        if ($$[$0]) { // If there were disjuncts,
          //           shapeOr will have $$[$0].set needsAtom.
          //           Prepend $$[$0].needsAtom with $$[$0-1].
          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
          $$[$0].needsAtom.unshift(nonest($$[$0-1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0-1];
        }

break;
case 35:

        $$[$0].needsAtom.unshift(nonest($$[$0-1]));
        delete $$[$0].needsAtom;
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };

break;
case 36: case 235: case 252:
this.$ = null;
break;
case 37: case 41: case 44: case 50: case 57: case 192: case 251:
this.$ = $$[$0];
break;
case 39:
 // returns a ShapeOr
        var disjuncts = $$[$0].map(nonest);
        this.$ = { type: "ShapeOr", shapeExprs: disjuncts, needsAtom: disjuncts }; // t: @@

break;
case 40:
 // returns a ShapeAnd
        // $$[$0-1] could have implicit conjuncts and explicit nested ANDs (will have .nested: true)
        $$[$0-1].filter(c => c.type === "ShapeAnd").length === $$[$0-1].length
        var and = {
          type: "ShapeAnd",
          shapeExprs: $$[$0-1].reduce(
            (acc, elt) =>
              acc.concat(elt.type === 'ShapeAnd' && !elt.nested ? elt.shapeExprs : nonest(elt)), []
          )
        };
        this.$ = $$[$0].length > 0 ? { type: "ShapeOr", shapeExprs: [and].concat($$[$0].map(nonest)) } : and; // t: @@
        this.$.needsAtom = and.shapeExprs;

break;
case 42: case 45:
this.$ = [$$[$0]];
break;
case 43: case 46: case 48: case 52: case 55: case 59:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 47: case 51: case 54: case 58:
this.$ = [];
break;
case 49:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 53: case 56:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]) // t: @@;
break;
case 60:
this.$ = $$[$0-1] ? { type: "ShapeNot", "shapeExpr": nonest($$[$0]) } /* t:@@ */ : $$[$0];
break;
case 61:
this.$ = false;
break;
case 62:
this.$ = true;
break;
case 63:
this.$ = $$[$0-1] ? { type: "ShapeNot", "shapeExpr": nonest($$[$0]) } /* t: 1NOTNOTdot, 1NOTNOTIRI, 1NOTNOTvs */ : $$[$0];
break;
case 64: case 73: case 78:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1];
break;
case 66:
this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) /* t: 1dotRef1 */ : $$[$0-1] // t:@@;
break;
case 67: case 76: case 81:
this.$ = Object.assign($$[$0-1], {nested: true}) // t: 1val1vsMinusiri3;
break;
case 68: case 77: case 82:
this.$ = EmptyShape // t: 1dot;
break;
case 75:
this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) /* t:@@ */ : $$[$0-1]	 // t: 1dotRef1 -- use _QnonLitNodeConstraint_E_Opt like below?;
break;
case 80:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 91:
 // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = addSourceMap(expandPrefix($$[$0].substr(0, namePos), yy) + $$[$0].substr(namePos + 1), yy); // ShapeRef

break;
case 92:
 // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = addSourceMap(expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy), yy); // ShapeRef

break;
case 93:
this.$ = addSourceMap($$[$0], yy) // ShapeRef // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 94: case 97:
 // t: !!
        this.$ = $$[$0-2]
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !!
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !!

break;
case 98:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 99:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error(new Error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]), yy);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype

break;
case 100:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 101:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 102:
this.$ = {} // t: 1literalPattern;
break;
case 103:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error(new Error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times"), yy);
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength

break;
case 105: case 111:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error(new Error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times"), yy);
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength

break;
case 106:
this.$ = extend({ type: "NodeConstraint" }, $$[$0-1], $$[$0] ? $$[$0] : {}) // t: 1iriPattern;
break;
case 107:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: @@;
break;
case 108:
this.$ = {};
break;
case 109:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error(new Error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times"), yy);
        }
        this.$ = extend($$[$0-1], $$[$0])

break;
case 112:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 113:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 114:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 117:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 118:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 119:
this.$ = "length" // t: 1literalLength;
break;
case 120:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 121:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 122:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 123:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 124:
this.$ = parseInt($$[$0], 10);
break;
case 125: case 126:
this.$ = parseFloat($$[$0]);
break;
case 127:
 // ## deprecated
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2].value);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2].value)
        else
          error(new Error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]), yy);

break;
case 128:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 129:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 130:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 131:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 132:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 133:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 134:
 // t: 1dotExtend3
        this.$ = $$[$0-2] === EmptyShape ? { type: "Shape" } : $$[$0-2]; // t: 0
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot

break;
case 135:
 // t: 1dotExtend3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Extend1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);

break;
case 136:
this.$ = [ "extends", [$$[$0]] ] // t: 1dotExtend1;
break;
case 137:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 138:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 139:
this.$ = EmptyObject;
break;
case 140:

        if ($$[$0-1] === EmptyObject)
          $$[$0-1] = {};
        if ($$[$0][0] === "closed")
          $$[$0-1]["closed"] = true; // t: 1dotClosed
        else if ($$[$0][0] in $$[$0-1])
          $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotExtend3, 3groupdot3Extra, 3groupdotExtra3
        else
          $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotExtend1
        this.$ = $$[$0-1];

break;
case 143:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 144:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 145:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 149:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 150:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 151:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 152:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 155:
this.$ = $$[$0-1];
break;
case 159:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 160:
this.$ = $$[$0] // ## deprecated // t: 2groupOfdot;
break;
case 161:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 162:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 163:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 164:

        if ($$[$0-1]) {
          this.$ = extend({ id: $$[$0-1] }, $$[$0]);
          addProduction($$[$0-1],  this.$, yy);
        } else {
          this.$ = $$[$0]
        }

break;
case 166:
this.$ = addSourceMap($$[$0], yy);
break;
case 171:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-5];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-3]) { this.$.min = $$[$0-3].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-3]) { this.$.max = $$[$0-3].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-2]) { this.$.onShapeExpression = $$[$0-2]; } // t: !!
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-5] ? $$[$0-5].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot

break;
case 172:
this.$ = {} // t: 1dot;
break;
case 174:
this.$ = null // t: 1dot;
break;
case 175:
this.$ = $$[$0]	// t: !!;
break;
case 178:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-4] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-4], yy);
	  $$[$0-4] = t; // ShapeRef
	}
        // %7: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-6], { predicate: $$[$0-5] }, ($$[$0-4] === EmptyShape ? {} : { valueExpr: $$[$0-4] }), $$[$0-3], $$[$0]); // t: 1dot, 1inversedot
        if ($$[$0-2])
          this.$.onShapeExpression = $$[$0-2]; // t: !!
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3, 1inversedotAnnot3

break;
case 181:
this.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;
break;
case 182:
this.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;
break;
case 183:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 184:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = UNBOUNDED;

break;
case 185:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 186:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 187:
this.$ = [] // t: 1val1IRIREF;
break;
case 188:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 193:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 194:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 195:
this.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 196:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 197:
this.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 198:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 199:
this.$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] };
break;
case 200:
this.$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] };
break;
case 201:
this.$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] };
break;
case 202:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }

break;
case 203:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 204:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 205:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 208:
this.$ = $$[$0] ? { type: "IriStem", stem: $$[$0-1] } /* t: 1val1iriStemMinusiriStem3 */ : $$[$0-1] // t: 1val1iriStemMinusiri3;
break;
case 211:

        if ($$[$0]) {
          this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0-1].value
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0-1]; // t: 1val1LITERAL
        }

break;
case 212:
this.$ = [] // t: 1val1literalStem, 1val1literalStemMinusliteral3;
break;
case 213:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1literalStemMinusliteral3;
break;
case 214:
this.$ = $$[$0] // t: 1val1literalStemMinusliteral3;
break;
case 217:
this.$ = $$[$0] ? { type: "LiteralStem", stem: $$[$0-1].value } /* t: 1val1literalStemMinusliteral3 */ : $$[$0-1].value // t: 1val1literalStemMinusliteralStem3;
break;
case 218:

        if ($$[$0]) {
          this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
        } else {
          this.$ = { type: "Language", languageTag: $$[$0-1] }; // t: 1val1language
        }

break;
case 219:

        this.$ = {  // t: @@
          type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
          stem: ""
        };
        if ($$[$0].length)
          this.$["exclusions"] = $$[$0]; // t: @@

break;
case 220:
this.$ = [] // t: 1val1languageStem, 1val1languageStemMinuslanguage3;
break;
case 221:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1languageStemMinuslanguage3;
break;
case 222:
this.$ = $$[$0] // t: 1val1languageStemMinuslanguage3;
break;
case 225:
this.$ = $$[$0] ? { type: "LanguageStem", stem: $$[$0-1] } /* t: 1val1languageStemMinuslanguageStem3 */ : $$[$0-1] // t: 1val1languageStemMinuslanguage3;
break;
case 226:
this.$ = addSourceMap($$[$0], yy) // Inclusion // t: 2groupInclude1;
break;
case 227:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 230:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null // t: 1dotCode1/2oneOfDot;
break;
case 231:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 232:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 233:
this.$ = $$[$0] ? unescapeSemanticAction($$[$0-1], $$[$0]) /* t: 1dotCode1 */ : { type: "SemAct", name: $$[$0-1] } // t: 1dotNoCode1;
break;
case 240:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 246:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 247:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 248:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 250:
this.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1] // t: 1val1Datatype;
break;
case 254:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 255:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 256:
this.$ = unescapeString($$[$0], 1)	// t: 1val1STRING_LITERAL2;
break;
case 257:
this.$ = unescapeString($$[$0], 3)	// t: 1val1STRING_LITERAL1;
break;
case 258:
this.$ = unescapeString($$[$0], 1)	// t: 1val1STRING_LITERAL_LONG2;
break;
case 259:
this.$ = unescapeString($$[$0], 3)	// t: 1val1STRING_LITERAL_LONG1;
break;
case 260:
this.$ = unescapeLangString($$[$0], 1)	// t: @@;
break;
case 261:
this.$ = unescapeLangString($$[$0], 3)	// t: @@;
break;
case 262:
this.$ = unescapeLangString($$[$0], 1)	// t: 1val1LANGTAG;
break;
case 263:
this.$ = unescapeLangString($$[$0], 3)	// t: 1val1STRING_LITERAL_LONG2_with_LANGTAG;
break;
case 264:
 // t: 1dot
        var unesc = ShExUtil.unescapeText($$[$0].slice(1,-1), {});
        this.$ = Parser._base === null || absoluteIRI.test(unesc) ? unesc : _resolveIRI(unesc)

break;
case 266:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos), yy) + ShExUtil.unescapeText($$[$0].substr(namePos + 1), pnameEscapeReplacements);

break;
case 267:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);

break;
case 269:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 272:
this.$ = $$[$0] // t: @_$[$0-1]dotSpecialize1, @_$[$0-1]dot3Specialize, @_$[$0-1]dotSpecialize3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),o($V1,$V2,{6:4,8:5,14:6,15:7,16:8,17:9,9:10,10:14,11:15,24:16,25:17,30:18,32:20,31:21,7:[2,10],18:[1,11],20:[1,12],23:[1,13],26:[1,19],36:$V3,198:$V4}),{7:[1,24]},o($V0,[2,4]),{7:[2,11]},o($V0,$V5),o($V0,$V6),o($V0,$V7),o($V8,[2,7],{12:25}),{19:[1,26]},{21:[1,27]},{19:$V9,21:$Va,22:28,219:30,220:$Vb},o($V8,[2,5]),o($V8,[2,6]),o($V8,$Vc),o($V8,$Vd),o($V8,[2,21],{31:33,198:$V4}),{27:[1,34]},{19:$Ve,21:$Vf,22:36,33:35,205:37,219:39,220:$Vg,221:$Vh},o($V0,[2,22]),o($V1,[2,28]),{19:$Vi,21:$Vj,22:43,219:45,220:$Vk},{1:[2,1]},o($V1,$V2,{13:48,8:49,10:50,15:51,16:52,17:53,24:54,25:55,32:60,7:[2,9],18:[1,56],20:[1,57],23:[1,58],26:[1,59],36:$V3}),o($V0,$Vl),{19:$V9,21:$Va,22:61,219:30,220:$Vb},o($V0,$Vm),o($V0,$Vn),o($V0,$Vo),o($V0,$Vp),o($V0,$Vq),o($V0,[2,23]),o($Vr,$Vs,{28:62,54:63,40:64,43:$Vt}),o($Vu,$Vv,{34:66}),o($Vu,$Vw),o($Vu,$Vx),o($Vu,$Vn),o($Vu,$Vo),o($Vu,$Vy),o($Vu,$Vp),o($Vu,$Vq),{198:[1,69],199:67,200:[1,68]},o($Vz,$Vn),o($Vz,$Vo),o($Vz,$Vp),o($Vz,$Vq),o($V8,[2,8]),o($V8,[2,24]),o($V8,[2,25]),o($V8,$V5),o($V8,$V6),o($V8,$V7),o($V8,$Vc),o($V8,$Vd),{19:[1,70]},{21:[1,71]},{19:$VA,21:$VB,22:72,219:74,220:$VC},{27:[1,77]},{19:$Ve,21:$Vf,22:36,33:78,205:37,219:39,220:$Vg,221:$Vh},o($V0,$VD),o($VE,$VF,{29:79}),o($VG,$VH,{58:80}),o($VI,$VJ,{62:81,64:82,66:83,67:84,73:87,75:88,72:89,44:90,92:91,94:92,87:94,88:95,89:96,78:97,95:104,22:105,91:107,118:108,99:109,219:112,105:113,107:114,19:$VK,21:$VL,69:[1,85],71:[1,86],79:[1,98],80:[1,99],81:[1,100],85:$VM,96:$VN,97:$VO,98:$VP,101:$VQ,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V_,220:$V$}),o($Vr,$V01),o($V11,$Vs,{35:126,37:127,38:128,224:130,40:131,44:133,39:[1,129],43:[1,132],79:$V21,80:$V31,81:$V41,184:$V51,225:$V61}),o($V0,$V71),o($V0,$V81),o($V0,$V91),o($V8,$Vl),{19:$VA,21:$VB,22:139,219:74,220:$VC},o($V8,$Vm),o($V8,$Vn),o($V8,$Vo),o($V8,$Vp),o($V8,$Vq),o($Vr,$Vs,{28:140,54:141,40:142,43:$Vt}),o($Vu,$Vv,{34:143}),o($V8,$Va1,{50:144,51:$Vb1}),o($VE,$Vc1,{52:146,53:$Vd1}),o($VG,$Ve1),o($VG,$Vf1,{65:148,67:149,72:150,44:151,78:152,118:156,79:$Vg1,80:$Vh1,81:$Vi1,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:157,64:158,73:159,92:160,94:161,95:165,99:166,96:$Vl1,97:$Vm1,98:$Vn1,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{38:168,40:169,44:171,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:172}),o($Vt1,$Vs1,{82:173}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:174}),o($Vr1,$Vz1,{99:109,95:175,101:$VQ,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:176}),o($VA1,$VB1,{86:177}),o($VA1,$VB1,{86:178}),o($Vt1,$VC1,{105:113,107:114,91:179,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:180}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,184],21:[1,188],22:182,33:181,205:183,219:185,220:[1,187],221:[1,186]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:189}),o($VN1,$VO1),{119:[1,190],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,199]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,201],106:200,108:[1,202],109:[1,203],110:204,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,209]},{100:[2,119]},{100:[2,120]},{100:[2,121]},o($VA1,$Vp),o($VA1,$Vq),o($VY1,[2,128]),o($VY1,[2,129]),o($VY1,[2,130]),o($VY1,[2,131]),{100:[2,132]},{100:[2,133]},o($V8,$VZ1),o($Vu,[2,30]),o($V8,$V_1),o($V8,$V$1),o($VI,$VJ,{67:210,72:211,44:212,78:213,118:217,79:[1,214],80:[1,215],81:[1,216]}),o($VI,$VJ,{73:87,75:88,92:91,94:92,87:94,88:95,89:96,78:97,95:104,22:105,91:107,118:108,99:109,219:112,105:113,107:114,41:218,64:219,66:220,72:221,19:$VK,21:$VL,69:[1,222],71:[1,223],85:$VM,96:$VN,97:$VO,98:$VP,101:$VQ,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V_,220:$V$}),o($V11,$V01,{44:224,79:$Vg1,80:$Vh1,81:$Vi1}),{45:225,48:226,49:227,50:228,51:$Vb1,52:229,53:$Vd1},o($V02,[2,273]),o($V02,[2,274]),o($V12,$VE1),o($V12,$VF1),{19:[1,233],21:[1,237],22:231,33:230,205:232,219:234,220:[1,236],221:[1,235]},o($V8,$VD),o($VE,$VF,{29:238}),o($VG,$VH,{58:239}),o($VI,$VJ,{62:240,64:241,66:242,67:243,73:246,75:247,72:248,44:249,92:250,94:251,87:253,88:254,89:255,78:256,95:263,22:264,91:266,118:267,99:268,219:271,105:272,107:273,19:$V22,21:$V32,69:[1,244],71:[1,245],79:[1,257],80:[1,258],81:[1,259],85:$V42,96:$V52,97:$V62,98:$V72,101:$V82,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V92,220:$Va2}),o($V11,$Vs,{37:127,224:130,35:276,38:277,40:279,44:281,39:[1,278],43:[1,280],79:$V21,80:$V31,81:$V41,184:$V51,225:$V61}),o($VE,$Vb2),o($Vr,$Vs,{28:282,54:283,40:284,43:$Vt}),o($VG,$Vc2),o($Vr,$Vs,{54:285,40:286,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:287}),o($VG,$VE1),o($VG,$VF1),{19:[1,291],21:[1,295],22:289,33:288,205:290,219:292,220:[1,294],221:[1,293]},{119:[1,296],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:297}),o($Vh2,$Vy1,{93:298}),o($Vt1,$Vz1,{99:166,95:299,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,300]},o($Vh2,$VT1),{70:[1,301]},o($VI,$VJ,{41:302,64:303,66:304,72:305,73:308,75:309,78:310,92:311,94:312,87:314,88:315,89:316,118:317,95:321,22:322,91:324,99:325,219:328,105:329,107:330,19:[1,327],21:[1,332],69:[1,306],71:[1,307],85:[1,313],96:[1,318],97:[1,319],98:[1,320],101:$Vi2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,323],220:[1,331]}),o($V11,$V01,{44:333,79:$Vj2,80:$Vk2,81:$Vl2}),{45:337,48:338,49:339,50:340,51:$Vm2,52:341,53:$Vn2},o($Vo2,$Vp2,{83:344,84:345,197:346,195:[1,347]}),o($Vq2,$Vp2,{83:348,84:349,197:350,195:$Vr2}),o($Vr1,$Vs2,{99:109,95:352,101:$VQ,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:353,95:354,91:355,99:356,105:358,107:359,101:$Vv2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:353,95:354,91:355,99:356,105:358,107:359,101:$Vv2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:353,95:354,91:355,99:356,105:358,107:359,101:$Vv2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:360,84:361,197:362,195:[1,363]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,364],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{120:396,126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,121:$VW2,148:$VX2,194:$VY2}),o($VI,[2,140]),o($VI,[2,136]),o($VI,[2,137]),o($VI,[2,138]),o($VI,$VJ,{67:409,72:410,44:411,78:412,118:416,79:[1,413],80:[1,414],81:[1,415]}),{19:$VZ2,21:$V_2,22:419,128:417,129:418,204:$V$2,219:422,220:$V03},o($V02,[2,270]),o($V02,[2,271]),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,425]},{111:$V63},{111:$V73},{111:$V83},{111:$V93},o($VN1,$Va3),o($Vu,[2,272]),o($Vu,$Vv1),o($Vu,$Vw1),o($Vb3,$Vs1,{82:426}),o($Vu,$VE1),o($Vu,$VF1),{19:[1,430],21:[1,434],22:428,33:427,205:429,219:431,220:[1,433],221:[1,432]},{119:[1,435],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V8,$Vc3,{48:226,49:227,50:228,52:229,42:436,45:437,51:$Vb1,53:$Vd1}),o($VG,$Vf1,{67:149,72:150,44:151,78:152,118:156,65:438,79:$Vg1,80:$Vh1,81:$Vi1,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vd3),o($VG,$Vk1,{64:158,73:159,92:160,94:161,95:165,99:166,68:439,96:$Vl1,97:$Vm1,98:$Vn1,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:440,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Ve3),o($V8,$Vc3,{48:226,49:227,50:228,52:229,45:437,42:441,51:$Vb1,53:$Vd1}),o($V8,$Vf3),o($V8,$Vg3,{50:442,51:$Vb1}),o($VE,$VF,{29:443,52:444,53:$Vd1}),o($VE,$Vh3),o($VG,$Vi3),o($V12,$VA2),o($V12,$Vw),o($V12,$Vx),o($V12,$Vn),o($V12,$Vo),o($V12,$Vy),o($V12,$Vp),o($V12,$Vq),o($V8,$Va1,{50:445,51:$Vj3}),o($VE,$Vc1,{52:447,53:$Vk3}),o($VG,$Ve1),o($VG,$Vf1,{65:449,67:450,72:451,44:452,78:453,118:457,79:$Vl3,80:$Vm3,81:$Vn3,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:458,64:459,73:460,92:461,94:462,95:466,99:467,96:$Vo3,97:$Vp3,98:$Vq3,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:469,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:470}),o($Vt1,$Vs1,{82:471}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:472}),o($Vr1,$Vz1,{99:268,95:473,101:$V82,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:474}),o($VA1,$VB1,{86:475}),o($VA1,$VB1,{86:476}),o($Vt1,$VC1,{105:272,107:273,91:477,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:478}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,482],21:[1,486],22:480,33:479,205:481,219:483,220:[1,485],221:[1,484]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:487}),o($VN1,$VO1),{119:[1,488],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,489]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,491],106:490,108:[1,492],109:[1,493],110:494,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,495]},o($VA1,$Vp),o($VA1,$Vq),o($V8,$VZ1),o($V8,$V_1),o($V8,$V$1),o($VI,$VJ,{73:246,75:247,92:250,94:251,87:253,88:254,89:255,78:256,95:263,22:264,91:266,118:267,99:268,219:271,105:272,107:273,41:496,64:497,66:498,72:499,19:$V22,21:$V32,69:[1,500],71:[1,501],85:$V42,96:$V52,97:$V62,98:$V72,101:$V82,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V92,220:$Va2}),o($V11,$V01,{44:502,79:$Vl3,80:$Vm3,81:$Vn3}),{45:503,48:504,49:505,50:506,51:$Vj3,52:507,53:$Vk3},o($VE,$Vs3),o($VG,$VH,{58:508}),o($VI,$VJ,{62:509,64:510,66:511,67:512,73:515,75:516,72:517,44:518,92:519,94:520,87:522,88:523,89:524,78:525,95:532,22:533,91:535,118:536,99:537,219:540,105:541,107:542,19:[1,539],21:[1,544],69:[1,513],71:[1,514],79:[1,526],80:[1,527],81:[1,528],85:[1,521],96:[1,529],97:[1,530],98:[1,531],101:$Vt3,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,534],220:[1,543]}),o($VG,$Vu3),o($VI,$VJ,{62:545,64:546,66:547,67:548,73:551,75:552,72:553,44:554,92:555,94:556,87:558,88:559,89:560,78:561,95:568,22:569,91:571,118:572,99:573,219:576,105:577,107:578,19:[1,575],21:[1,580],69:[1,549],71:[1,550],79:[1,562],80:[1,563],81:[1,564],85:[1,557],96:[1,565],97:[1,566],98:[1,567],101:$Vv3,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,570],220:[1,579]}),o($Vq2,$Vp2,{84:349,197:350,83:581,195:$Vr2}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:582,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:349,197:350,83:583,195:$Vr2}),o($Vt1,$Vs2,{99:166,95:584,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),{42:585,45:586,48:338,49:339,50:340,51:$Vm2,52:341,53:$Vn2,70:$Vc3},o($VI,$VJ,{65:587,67:588,72:589,44:590,78:591,118:592,51:$Vf1,53:$Vf1,70:$Vf1,79:$Vj2,80:$Vk2,81:$Vl2}),o($Vx3,$Vd3),o($Vx3,$Vk1,{68:593,64:594,73:595,92:596,94:597,95:601,99:602,96:[1,598],97:[1,599],98:[1,600],101:$Vy3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:604,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Ve3),o($Vz3,$Vs1,{82:605}),o($VA3,$Vs1,{82:606}),o($VB3,$Vs1,{82:607}),o($VC3,$Vy1,{93:608}),o($Vz3,$Vz1,{99:325,95:609,101:$Vi2,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:610}),o($VD3,$VB1,{86:611}),o($VD3,$VB1,{86:612}),o($VA3,$VC1,{105:329,107:330,91:613,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),{119:[1,614],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:615}),o($VE3,$VO1),{100:[1,616]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,618],106:617,108:[1,619],109:[1,620],110:621,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,622]},o($VD3,$Vp),o($VD3,$Vq),{42:623,45:586,48:338,49:339,50:340,51:$Vm2,52:341,53:$Vn2,70:$Vc3},o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,627],21:[1,631],22:625,33:624,205:626,219:628,220:[1,630],221:[1,629]},{70:$Vf3},{50:632,51:$Vm2,70:$Vg3},o($VF3,$VF,{29:633,52:634,53:$Vn2}),o($VF3,$Vh3),o($Vx3,$Vi3),o($Vr,$Vs,{28:635,54:636,40:637,43:$Vt}),o($Vr,$Vs,{54:638,40:639,43:$Vt}),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:640,198:[1,641]}),{19:$VK3,21:$VL3,22:643,129:642,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:649,198:[1,650]}),{19:$VK3,21:$VL3,22:643,129:651,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,652]},o($VA1,$VT1),{100:[1,654],106:653,108:[1,655],109:[1,656],110:657,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,658]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:659,198:[1,660]}),{19:$VK3,21:$VL3,22:643,129:661,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),o($VL1,[2,188]),o($VL1,[2,189]),o($VL1,[2,190]),o($VL1,[2,191]),{173:662,174:663,175:666,176:664,177:667,178:665,179:668,184:[1,669]},o($VL1,[2,206],{180:670,182:671,183:[1,672]}),o($VL1,[2,215],{187:673,189:674,183:[1,675]}),o($VL1,[2,223],{191:676,192:677,183:$VV3}),{183:$VV3,192:679},o($VW3,$Vn),o($VW3,$Vo),o($VW3,$VX3),o($VW3,$VY3),o($VW3,$VZ3),o($VW3,$Vp),o($VW3,$Vq),o($VW3,$V_3),o($VW3,$V$3,{207:680,208:681,111:[1,682]}),o($VW3,$V04),o($VW3,$V14),o($VW3,$V24),o($VW3,$V34),o($VW3,$V44),o($VW3,$V54),o($VW3,$V64),o($VW3,$V74),o($VW3,$V84),o($V94,$V63),o($V94,$V73),o($V94,$V83),o($V94,$V93),{121:[1,683]},{121:[2,142]},{121:$Va4},{121:$Vb4,133:684,134:685,135:$Vc4},{121:$Vd4},o($Ve4,$Vf4),o($Ve4,$Vg4),o($Ve4,$Vh4,{139:687,142:688,143:691,140:$Vi4,141:$Vj4}),o($Vk4,$Vl4,{145:692,150:693,151:694,159:695,160:697,69:[1,696],165:$Vm4}),o($Vn4,$Vo4),o($VU2,[2,168]),{19:[1,702],21:[1,706],22:700,149:699,205:701,219:703,220:[1,705],221:[1,704]},{19:[1,710],21:[1,714],22:708,149:707,205:709,219:711,220:[1,713],221:[1,712]},o($VI,[2,269]),o($VI,$Vv1),o($VI,$Vw1),o($Vp4,$Vs1,{82:715}),o($VI,$VE1),o($VI,$VF1),{19:[1,719],21:[1,723],22:717,33:716,205:718,219:720,220:[1,722],221:[1,721]},{119:[1,724],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VI,[2,143],{22:419,219:422,129:725,19:$VZ2,21:$V_2,204:$V$2,220:$V03}),o($Vq4,[2,144]),o($Vq4,$Vr4),o($Vq4,$Vs4),o($Vq4,$Vn),o($Vq4,$Vo),o($Vq4,$Vp),o($Vq4,$Vq),{19:[1,728],21:[1,731],22:727,87:726,219:729,220:[1,730]},o($Vt4,$Vp2,{83:732,84:733,197:734,195:[1,735]}),o($Vu,$VA2),o($Vu,$Vw),o($Vu,$Vx),o($Vu,$Vn),o($Vu,$Vo),o($Vu,$Vy),o($Vu,$Vp),o($Vu,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:736,121:$VW2,148:$VX2,194:$VY2}),o($V8,$Vu4),o($V8,$Vv4),o($VG,$Vw4),o($VG,$Vx4),{70:[1,737]},o($V8,$Vy4),o($VE,$Vz4),o($V8,$VA4,{50:144,51:$Vb1}),o($VG,$VB4),o($VE,$Vb2),o($Vr,$Vs,{28:738,54:739,40:740,43:$Vt}),o($VG,$Vc2),o($Vr,$Vs,{54:741,40:742,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:743}),o($VG,$VE1),o($VG,$VF1),{19:[1,747],21:[1,751],22:745,33:744,205:746,219:748,220:[1,750],221:[1,749]},{119:[1,752],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:753}),o($Vh2,$Vy1,{93:754}),o($Vt1,$Vz1,{99:467,95:755,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,756]},o($Vh2,$VT1),{70:[1,757]},o($Vo2,$Vp2,{83:758,84:759,197:760,195:[1,761]}),o($Vq2,$Vp2,{83:762,84:763,197:764,195:$VC4}),o($Vr1,$Vs2,{99:268,95:766,101:$V82,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:767,95:768,91:769,99:770,105:772,107:773,101:$VD4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:767,95:768,91:769,99:770,105:772,107:773,101:$VD4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:767,95:768,91:769,99:770,105:772,107:773,101:$VD4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:774,84:775,197:776,195:[1,777]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,778],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:779,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,780]},o($VN1,$Va3),o($V8,$Vc3,{48:504,49:505,50:506,52:507,42:781,45:782,51:$Vj3,53:$Vk3}),o($VG,$Vf1,{67:450,72:451,44:452,78:453,118:457,65:783,79:$Vl3,80:$Vm3,81:$Vn3,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vd3),o($VG,$Vk1,{64:459,73:460,92:461,94:462,95:466,99:467,68:784,96:$Vo3,97:$Vp3,98:$Vq3,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:785,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Ve3),o($V8,$Vc3,{48:504,49:505,50:506,52:507,45:782,42:786,51:$Vj3,53:$Vk3}),o($V8,$Vf3),o($V8,$Vg3,{50:787,51:$Vj3}),o($VE,$VF,{29:788,52:789,53:$Vk3}),o($VE,$Vh3),o($VG,$Vi3),o($VE,$Vc1,{52:790,53:[1,791]}),o($VG,$Ve1),o($VG,$Vf1,{65:792,67:793,72:794,44:795,78:796,118:800,79:[1,797],80:[1,798],81:[1,799],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:801,64:802,73:803,92:804,94:805,95:809,99:810,96:[1,806],97:[1,807],98:[1,808],101:$VE4,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:812,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:813}),o($Vt1,$Vs1,{82:814}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:815}),o($Vr1,$Vz1,{99:537,95:816,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:817}),o($VA1,$VB1,{86:818}),o($VA1,$VB1,{86:819}),o($Vt1,$VC1,{105:541,107:542,91:820,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:821}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,825],21:[1,829],22:823,33:822,205:824,219:826,220:[1,828],221:[1,827]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:830}),o($VN1,$VO1),{119:[1,831],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,832]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,834],106:833,108:[1,835],109:[1,836],110:837,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,838]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$Ve1),o($VG,$Vf1,{65:839,67:840,72:841,44:842,78:843,118:847,79:[1,844],80:[1,845],81:[1,846],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:848,64:849,73:850,92:851,94:852,95:856,99:857,96:[1,853],97:[1,854],98:[1,855],101:$VF4,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:859,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:860}),o($Vt1,$Vs1,{82:861}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:862}),o($Vr1,$Vz1,{99:573,95:863,101:$Vv3,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:864}),o($VA1,$VB1,{86:865}),o($VA1,$VB1,{86:866}),o($Vt1,$VC1,{105:577,107:578,91:867,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:868}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,872],21:[1,876],22:870,33:869,205:871,219:873,220:[1,875],221:[1,874]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:877}),o($VN1,$VO1),{119:[1,878],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,879]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,881],106:880,108:[1,882],109:[1,883],110:884,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,885]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,886]},o($VG,$VH3),o($Vh2,$VP3),{70:$Vu4},{70:$Vv4},o($Vx3,$Vw4),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:887}),{119:[1,888],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vx4),o($Vx3,$Vg2),o($VA3,$Vs1,{82:889}),o($VG4,$Vy1,{93:890}),o($VA3,$Vz1,{99:602,95:891,101:$Vy3,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,892]},o($VG4,$VT1),{70:[1,893]},o($VH4,$Vp2,{83:894,84:895,197:896,195:[1,897]}),o($VI4,$Vp2,{83:898,84:899,197:900,195:$VJ4}),o($VK4,$Vp2,{83:902,84:903,197:904,195:[1,905]}),o($Vz3,$Vs2,{99:325,95:906,101:$Vi2,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:907,95:908,91:909,99:910,105:912,107:913,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:907,95:908,91:909,99:910,105:912,107:913,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:907,95:908,91:909,99:910,105:912,107:913,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:914,121:$VW2,148:$VX2,194:$VY2}),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,915],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,916]},o($VE3,$Va3),{70:$Vy4},o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VF3,$Vz4),{50:917,51:$Vm2,70:$VA4},o($Vx3,$VB4),o($VF3,$Vs3),o($Vx3,$VH,{58:918}),o($VI,$VJ,{62:919,64:920,66:921,67:922,73:925,75:926,72:927,44:928,92:929,94:930,87:932,88:933,89:934,78:935,95:942,22:943,91:945,118:946,99:947,219:950,105:951,107:952,19:[1,949],21:[1,954],69:[1,923],71:[1,924],79:[1,936],80:[1,937],81:[1,938],85:[1,931],96:[1,939],97:[1,940],98:[1,941],101:$VM4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,944],220:[1,953]}),o($Vx3,$Vu3),o($VI,$VJ,{62:955,64:956,66:957,67:958,73:961,75:962,72:963,44:964,92:965,94:966,87:968,88:969,89:970,78:971,95:978,22:979,91:981,118:982,99:983,219:986,105:987,107:988,19:[1,985],21:[1,990],69:[1,959],71:[1,960],79:[1,972],80:[1,973],81:[1,974],85:[1,967],96:[1,975],97:[1,976],98:[1,977],101:$VN4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,980],220:[1,989]}),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:991,219:45,220:$Vk},{19:$VP4,21:$VQ4,22:993,100:[1,1004],108:[1,1005],109:[1,1006],110:1003,186:994,196:992,201:997,202:998,203:999,206:1002,209:[1,1007],210:[1,1008],211:[1,1013],212:[1,1014],213:[1,1015],214:[1,1016],215:[1,1009],216:[1,1010],217:[1,1011],218:[1,1012],219:996,220:$VR4},o($VS4,$Vr4),o($VS4,$Vs4),o($VS4,$Vn),o($VS4,$Vo),o($VS4,$Vp),o($VS4,$Vq),o($Vq2,$VO4),{19:$Vi,21:$Vj,22:1017,219:45,220:$Vk},{19:$VT4,21:$VU4,22:1019,100:[1,1030],108:[1,1031],109:[1,1032],110:1029,186:1020,196:1018,201:1023,202:1024,203:1025,206:1028,209:[1,1033],210:[1,1034],211:[1,1039],212:[1,1040],213:[1,1041],214:[1,1042],215:[1,1035],216:[1,1036],217:[1,1037],218:[1,1038],219:1022,220:$VV4},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,1043]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:1044,219:45,220:$Vk},{19:$VW4,21:$VX4,22:1046,100:[1,1057],108:[1,1058],109:[1,1059],110:1056,186:1047,196:1045,201:1050,202:1051,203:1052,206:1055,209:[1,1060],210:[1,1061],211:[1,1066],212:[1,1067],213:[1,1068],214:[1,1069],215:[1,1062],216:[1,1063],217:[1,1064],218:[1,1065],219:1049,220:$VY4},o($VL1,[2,192]),o($VL1,[2,199],{175:1070,184:$VZ4}),o($VL1,[2,200],{177:1072,184:$V_4}),o($VL1,[2,201],{179:1074,184:$V$4}),o($V05,[2,193]),o($V05,[2,195]),o($V05,[2,197]),{19:$V15,21:$V25,22:1076,100:$V35,108:$V45,109:$V55,110:1087,186:1077,190:$V65,201:1081,202:1082,203:1083,206:1086,209:$V75,210:$V85,211:$V95,212:$Va5,213:$Vb5,214:$Vc5,215:$Vd5,216:$Ve5,217:$Vf5,218:$Vg5,219:1080,220:$Vh5},o($VL1,[2,202]),o($VL1,[2,207]),o($V05,[2,203],{181:1101}),o($VL1,[2,211]),o($VL1,[2,216]),o($V05,[2,212],{188:1102}),o($VL1,[2,218]),o($VL1,[2,224]),o($V05,[2,220],{193:1103}),o($VL1,[2,219]),o($VW3,$Vi5),o($VW3,$Vj5),{19:$VB2,21:$VC2,22:1105,87:1104,219:375,220:$VT2},o($VD1,$Vk5),{121:$Vl5,134:1106,135:$Vc4},o($Ve4,$Vm5),o($VU2,$VV2,{136:401,137:402,138:403,144:404,146:405,147:406,131:1107,148:$VX2,194:$VY2}),o($Ve4,$Vn5),o($Ve4,$Vh4,{139:1108,143:1109,140:$Vi4,141:$Vj4}),o($VU2,$VV2,{144:404,146:405,147:406,138:1110,121:$Vo5,135:$Vo5,148:$VX2,194:$VY2}),o($VU2,$VV2,{144:404,146:405,147:406,138:1111,121:$Vp5,135:$Vp5,148:$VX2,194:$VY2}),o($Vn4,$Vq5),o($Vn4,$Vr5),o($Vn4,$Vs5),o($Vn4,$Vt5),{19:$Vu5,21:$Vv5,22:1113,129:1112,204:$Vw5,219:1116,220:$Vx5},o($VU2,$VV2,{147:406,126:1119,130:1120,131:1121,132:1122,136:1123,137:1124,138:1125,144:1126,146:1127,148:$VX2,194:$Vy5}),o($Vk4,[2,180]),o($Vk4,[2,185]),o($Vn4,$Vz5),o($Vn4,$VA5),o($Vn4,$VB5),o($Vn4,$Vn),o($Vn4,$Vo),o($Vn4,$Vy),o($Vn4,$Vp),o($Vn4,$Vq),o($VU2,[2,166]),o($VU2,$VA5),o($VU2,$VB5),o($VU2,$Vn),o($VU2,$Vo),o($VU2,$Vy),o($VU2,$Vp),o($VU2,$Vq),o($VC5,$Vp2,{83:1129,84:1130,197:1131,195:[1,1132]}),o($VI,$VA2),o($VI,$Vw),o($VI,$Vx),o($VI,$Vn),o($VI,$Vo),o($VI,$Vy),o($VI,$Vp),o($VI,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1133,121:$VW2,148:$VX2,194:$VY2}),o($Vq4,[2,145]),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vu,$VT3),o($Vb3,$VI3),o($Vu,$VJ3,{31:1134,198:[1,1135]}),{19:$VK3,21:$VL3,22:643,129:1136,204:$VM3,219:646,220:$VN3},{121:[1,1137]},o($VG,$VE5),o($VE,$Vs3),o($VG,$VH,{58:1138}),o($VI,$VJ,{62:1139,64:1140,66:1141,67:1142,73:1145,75:1146,72:1147,44:1148,92:1149,94:1150,87:1152,88:1153,89:1154,78:1155,95:1162,22:1163,91:1165,118:1166,99:1167,219:1170,105:1171,107:1172,19:[1,1169],21:[1,1174],69:[1,1143],71:[1,1144],79:[1,1156],80:[1,1157],81:[1,1158],85:[1,1151],96:[1,1159],97:[1,1160],98:[1,1161],101:$VF5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1164],220:[1,1173]}),o($VG,$Vu3),o($VI,$VJ,{62:1175,64:1176,66:1177,67:1178,73:1181,75:1182,72:1183,44:1184,92:1185,94:1186,87:1188,88:1189,89:1190,78:1191,95:1198,22:1199,91:1201,118:1202,99:1203,219:1206,105:1207,107:1208,19:[1,1205],21:[1,1210],69:[1,1179],71:[1,1180],79:[1,1192],80:[1,1193],81:[1,1194],85:[1,1187],96:[1,1195],97:[1,1196],98:[1,1197],101:$VG5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1200],220:[1,1209]}),o($Vq2,$Vp2,{84:763,197:764,83:1211,195:$VC4}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1212,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:763,197:764,83:1213,195:$VC4}),o($Vt1,$Vs2,{99:467,95:1214,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:1215,198:[1,1216]}),{19:$VK3,21:$VL3,22:643,129:1217,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:1218,198:[1,1219]}),{19:$VK3,21:$VL3,22:643,129:1220,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,1221]},o($VA1,$VT1),{100:[1,1223],106:1222,108:[1,1224],109:[1,1225],110:1226,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1227]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:1228,198:[1,1229]}),{19:$VK3,21:$VL3,22:643,129:1230,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,1231]},{19:[1,1234],21:[1,1237],22:1233,87:1232,219:1235,220:[1,1236]},o($V8,$Vu4),o($V8,$Vv4),o($VG,$Vw4),o($VG,$Vx4),{70:[1,1238]},o($V8,$Vy4),o($VE,$Vz4),o($V8,$VA4,{50:445,51:$Vj3}),o($VG,$VB4),o($VG,$Vc2),o($Vr,$Vs,{54:1239,40:1240,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:1241}),o($VG,$VE1),o($VG,$VF1),{19:[1,1245],21:[1,1249],22:1243,33:1242,205:1244,219:1246,220:[1,1248],221:[1,1247]},{119:[1,1250],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:1251}),o($Vh2,$Vy1,{93:1252}),o($Vt1,$Vz1,{99:810,95:1253,101:$VE4,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,1254]},o($Vh2,$VT1),{70:[1,1255]},o($Vo2,$Vp2,{83:1256,84:1257,197:1258,195:[1,1259]}),o($Vq2,$Vp2,{83:1260,84:1261,197:1262,195:$VH5}),o($Vr1,$Vs2,{99:537,95:1264,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:1265,95:1266,91:1267,99:1268,105:1270,107:1271,101:$VI5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:1265,95:1266,91:1267,99:1268,105:1270,107:1271,101:$VI5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:1265,95:1266,91:1267,99:1268,105:1270,107:1271,101:$VI5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:1272,84:1273,197:1274,195:[1,1275]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1276],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1277,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,1278]},o($VN1,$Va3),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:1279}),o($VG,$VE1),o($VG,$VF1),{19:[1,1283],21:[1,1287],22:1281,33:1280,205:1282,219:1284,220:[1,1286],221:[1,1285]},{119:[1,1288],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:1289}),o($Vh2,$Vy1,{93:1290}),o($Vt1,$Vz1,{99:857,95:1291,101:$VF4,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,1292]},o($Vh2,$VT1),{70:[1,1293]},o($Vo2,$Vp2,{83:1294,84:1295,197:1296,195:[1,1297]}),o($Vq2,$Vp2,{83:1298,84:1299,197:1300,195:$VJ5}),o($Vr1,$Vs2,{99:573,95:1302,101:$Vv3,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:1303,95:1304,91:1305,99:1306,105:1308,107:1309,101:$VK5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:1303,95:1304,91:1305,99:1306,105:1308,107:1309,101:$VK5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:1303,95:1304,91:1305,99:1306,105:1308,107:1309,101:$VK5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:1310,84:1311,197:1312,195:[1,1313]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1314],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1315,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,1316]},o($VN1,$Va3),o($Vt1,$Vk5),o($VI4,$Vp2,{84:899,197:900,83:1317,195:$VJ4}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1318,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:899,197:900,83:1319,195:$VJ4}),o($VA3,$Vs2,{99:602,95:1320,101:$Vy3,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$VE5),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:1321,198:[1,1322]}),{19:$VK3,21:$VL3,22:643,129:1323,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:1324,198:[1,1325]}),{19:$VK3,21:$VL3,22:643,129:1326,204:$VM3,219:646,220:$VN3},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:1327,198:[1,1328]}),{19:$VK3,21:$VL3,22:643,129:1329,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,1330]},o($VD3,$VT1),{100:[1,1332],106:1331,108:[1,1333],109:[1,1334],110:1335,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1336]},{121:[1,1337]},o($VD3,$VU3),{19:[1,1340],21:[1,1343],22:1339,87:1338,219:1341,220:[1,1342]},o($VF3,$Vb2),o($VF3,$Vc1,{52:1344,53:[1,1345]}),o($Vx3,$Ve1),o($VI,$VJ,{65:1346,67:1347,72:1348,44:1349,78:1350,118:1354,51:$Vf1,53:$Vf1,70:$Vf1,79:[1,1351],80:[1,1352],81:[1,1353]}),o($Vx3,$Vj1),o($Vx3,$Vk1,{68:1355,64:1356,73:1357,92:1358,94:1359,95:1363,99:1364,96:[1,1360],97:[1,1361],98:[1,1362],101:$VN5,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1366,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Vq1),o($Vz3,$Vs1,{82:1367}),o($VA3,$Vs1,{82:1368}),o($VM5,$Vv1),o($VM5,$Vw1),o($VC3,$Vy1,{93:1369}),o($Vz3,$Vz1,{99:947,95:1370,101:$VM4,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:1371}),o($VD3,$VB1,{86:1372}),o($VD3,$VB1,{86:1373}),o($VA3,$VC1,{105:951,107:952,91:1374,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB3,$Vs1,{82:1375}),o($VM5,$VE1),o($VM5,$VF1),{19:[1,1379],21:[1,1383],22:1377,33:1376,205:1378,219:1380,220:[1,1382],221:[1,1381]},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:1384}),o($VE3,$VO1),{119:[1,1385],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1386]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,1388],106:1387,108:[1,1389],109:[1,1390],110:1391,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1392]},o($VD3,$Vp),o($VD3,$Vq),o($Vx3,$Ve1),o($VI,$VJ,{65:1393,67:1394,72:1395,44:1396,78:1397,118:1401,51:$Vf1,53:$Vf1,70:$Vf1,79:[1,1398],80:[1,1399],81:[1,1400]}),o($Vx3,$Vj1),o($Vx3,$Vk1,{68:1402,64:1403,73:1404,92:1405,94:1406,95:1410,99:1411,96:[1,1407],97:[1,1408],98:[1,1409],101:$VO5,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1413,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Vq1),o($Vz3,$Vs1,{82:1414}),o($VA3,$Vs1,{82:1415}),o($VM5,$Vv1),o($VM5,$Vw1),o($VC3,$Vy1,{93:1416}),o($Vz3,$Vz1,{99:983,95:1417,101:$VN4,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:1418}),o($VD3,$VB1,{86:1419}),o($VD3,$VB1,{86:1420}),o($VA3,$VC1,{105:987,107:988,91:1421,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB3,$Vs1,{82:1422}),o($VM5,$VE1),o($VM5,$VF1),{19:[1,1426],21:[1,1430],22:1424,33:1423,205:1425,219:1427,220:[1,1429],221:[1,1428]},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:1431}),o($VE3,$VO1),{119:[1,1432],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1433]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,1435],106:1434,108:[1,1436],109:[1,1437],110:1438,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1439]},o($VD3,$Vp),o($VD3,$Vq),{198:[1,1442],199:1440,200:[1,1441]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:1443,208:1444,111:[1,1445]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,1448],199:1446,200:[1,1447]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:1449,208:1450,111:[1,1451]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,1454],21:[1,1457],22:1453,87:1452,219:1455,220:[1,1456]},{198:[1,1460],199:1458,200:[1,1459]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:1461,208:1462,111:[1,1463]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($V05,[2,194]),{19:$V15,21:$V25,22:1076,219:1080,220:$Vh5},o($V05,[2,196]),{100:$V35,108:$V45,109:$V55,110:1087,186:1077,201:1081,202:1082,203:1083,206:1086,209:$V75,210:$V85,211:$V95,212:$Va5,213:$Vb5,214:$Vc5,215:$Vd5,216:$Ve5,217:$Vf5,218:$Vg5},o($V05,[2,198]),{190:$V65},o($V05,$VV5,{185:1464,183:$VW5}),o($V05,$VV5,{185:1466,183:$VW5}),o($V05,$VV5,{185:1467,183:$VW5}),o($VX5,$Vn),o($VX5,$Vo),o($VX5,$VX3),o($VX5,$VY3),o($VX5,$VZ3),o($VX5,$Vp),o($VX5,$Vq),o($VX5,$V_3),o($VX5,$V$3,{207:1468,208:1469,111:[1,1470]}),o($VX5,$V04),o($VX5,$V14),o($VX5,$V24),o($VX5,$V34),o($VX5,$V44),o($VX5,$V54),o($VX5,$V64),o($VX5,$V74),o($VX5,$V84),o($VY5,$V63),o($VY5,$V73),o($VY5,$V83),o($VY5,$V93),o($VL1,[2,205],{175:1471,184:$VZ4}),o($VL1,[2,214],{177:1472,184:$V_4}),o($VL1,[2,222],{179:1473,184:$V$4}),o($VW3,$VZ5),o($VW3,$VK1),o($Ve4,$V_5),o($Ve4,$V$5),o($Ve4,$V06),o($Vn4,$V16),o($Vn4,$V26),o($Vn4,$V36),o($Vr,$Vs,{46:1474,47:1475,55:1476,59:1477,40:1478,43:$Vt}),o($V46,$Vr4),o($V46,$Vs4),o($V46,$Vn),o($V46,$Vo),o($V46,$Vp),o($V46,$Vq),{70:[1,1479]},{70:$Va4},{70:$Vb4,133:1480,134:1481,135:$V56},{70:$Vd4},o($V66,$Vf4),o($V66,$Vg4),o($V66,$Vh4,{139:1483,142:1484,143:1487,140:$V76,141:$V86}),o($Vk4,$Vl4,{160:697,145:1488,150:1489,151:1490,159:1491,69:[1,1492],165:$Vm4}),o($V96,$Vo4),{19:[1,1496],21:[1,1500],22:1494,149:1493,205:1495,219:1497,220:[1,1499],221:[1,1498]},o($VI,$VT3),o($Vp4,$VI3),o($VI,$VJ3,{31:1501,198:[1,1502]}),{19:$VK3,21:$VL3,22:643,129:1503,204:$VM3,219:646,220:$VN3},{121:[1,1504]},o($Vt4,$VO4),{19:$Vi,21:$Vj,22:1505,219:45,220:$Vk},{19:$Va6,21:$Vb6,22:1507,100:[1,1518],108:[1,1519],109:[1,1520],110:1517,186:1508,196:1506,201:1511,202:1512,203:1513,206:1516,209:[1,1521],210:[1,1522],211:[1,1527],212:[1,1528],213:[1,1529],214:[1,1530],215:[1,1523],216:[1,1524],217:[1,1525],218:[1,1526],219:1510,220:$Vc6},o($Vb3,$Vk5),o($VE,$Vc1,{52:1531,53:[1,1532]}),o($VG,$Ve1),o($VG,$Vf1,{65:1533,67:1534,72:1535,44:1536,78:1537,118:1541,79:[1,1538],80:[1,1539],81:[1,1540],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:1542,64:1543,73:1544,92:1545,94:1546,95:1550,99:1551,96:[1,1547],97:[1,1548],98:[1,1549],101:$Vd6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1553,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:1554}),o($Vt1,$Vs1,{82:1555}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:1556}),o($Vr1,$Vz1,{99:1167,95:1557,101:$VF5,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:1558}),o($VA1,$VB1,{86:1559}),o($VA1,$VB1,{86:1560}),o($Vt1,$VC1,{105:1171,107:1172,91:1561,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:1562}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,1566],21:[1,1570],22:1564,33:1563,205:1565,219:1567,220:[1,1569],221:[1,1568]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:1571}),o($VN1,$VO1),{119:[1,1572],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1573]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,1575],106:1574,108:[1,1576],109:[1,1577],110:1578,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1579]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$Ve1),o($VG,$Vf1,{65:1580,67:1581,72:1582,44:1583,78:1584,118:1588,79:[1,1585],80:[1,1586],81:[1,1587],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:1589,64:1590,73:1591,92:1592,94:1593,95:1597,99:1598,96:[1,1594],97:[1,1595],98:[1,1596],101:$Ve6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1600,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:1601}),o($Vt1,$Vs1,{82:1602}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:1603}),o($Vr1,$Vz1,{99:1203,95:1604,101:$VG5,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:1605}),o($VA1,$VB1,{86:1606}),o($VA1,$VB1,{86:1607}),o($Vt1,$VC1,{105:1207,107:1208,91:1608,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:1609}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,1613],21:[1,1617],22:1611,33:1610,205:1612,219:1614,220:[1,1616],221:[1,1615]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:1618}),o($VN1,$VO1),{119:[1,1619],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1620]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,1622],106:1621,108:[1,1623],109:[1,1624],110:1625,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1626]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,1627]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:1628,219:45,220:$Vk},{19:$Vf6,21:$Vg6,22:1630,100:[1,1641],108:[1,1642],109:[1,1643],110:1640,186:1631,196:1629,201:1634,202:1635,203:1636,206:1639,209:[1,1644],210:[1,1645],211:[1,1650],212:[1,1651],213:[1,1652],214:[1,1653],215:[1,1646],216:[1,1647],217:[1,1648],218:[1,1649],219:1633,220:$Vh6},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:1654,219:45,220:$Vk},{19:$Vi6,21:$Vj6,22:1656,100:[1,1667],108:[1,1668],109:[1,1669],110:1666,186:1657,196:1655,201:1660,202:1661,203:1662,206:1665,209:[1,1670],210:[1,1671],211:[1,1676],212:[1,1677],213:[1,1678],214:[1,1679],215:[1,1672],216:[1,1673],217:[1,1674],218:[1,1675],219:1659,220:$Vk6},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,1680]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:1681,219:45,220:$Vk},{19:$Vl6,21:$Vm6,22:1683,100:[1,1694],108:[1,1695],109:[1,1696],110:1693,186:1684,196:1682,201:1687,202:1688,203:1689,206:1692,209:[1,1697],210:[1,1698],211:[1,1703],212:[1,1704],213:[1,1705],214:[1,1706],215:[1,1699],216:[1,1700],217:[1,1701],218:[1,1702],219:1686,220:$Vn6},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VE5),o($VG,$Vu3),o($VI,$VJ,{62:1707,64:1708,66:1709,67:1710,73:1713,75:1714,72:1715,44:1716,92:1717,94:1718,87:1720,88:1721,89:1722,78:1723,95:1730,22:1731,91:1733,118:1734,99:1735,219:1738,105:1739,107:1740,19:[1,1737],21:[1,1742],69:[1,1711],71:[1,1712],79:[1,1724],80:[1,1725],81:[1,1726],85:[1,1719],96:[1,1727],97:[1,1728],98:[1,1729],101:$Vo6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1732],220:[1,1741]}),o($Vq2,$Vp2,{84:1261,197:1262,83:1743,195:$VH5}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1744,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:1261,197:1262,83:1745,195:$VH5}),o($Vt1,$Vs2,{99:810,95:1746,101:$VE4,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:1747,198:[1,1748]}),{19:$VK3,21:$VL3,22:643,129:1749,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:1750,198:[1,1751]}),{19:$VK3,21:$VL3,22:643,129:1752,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,1753]},o($VA1,$VT1),{100:[1,1755],106:1754,108:[1,1756],109:[1,1757],110:1758,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1759]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:1760,198:[1,1761]}),{19:$VK3,21:$VL3,22:643,129:1762,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,1763]},{19:[1,1766],21:[1,1769],22:1765,87:1764,219:1767,220:[1,1768]},o($Vq2,$Vp2,{84:1299,197:1300,83:1770,195:$VJ5}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1771,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:1299,197:1300,83:1772,195:$VJ5}),o($Vt1,$Vs2,{99:857,95:1773,101:$VF4,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:1774,198:[1,1775]}),{19:$VK3,21:$VL3,22:643,129:1776,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:1777,198:[1,1778]}),{19:$VK3,21:$VL3,22:643,129:1779,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,1780]},o($VA1,$VT1),{100:[1,1782],106:1781,108:[1,1783],109:[1,1784],110:1785,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1786]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:1787,198:[1,1788]}),{19:$VK3,21:$VL3,22:643,129:1789,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,1790]},{19:[1,1793],21:[1,1796],22:1792,87:1791,219:1794,220:[1,1795]},o($Vx3,$VT3),{121:[1,1797]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:1798,219:45,220:$Vk},{19:$Vp6,21:$Vq6,22:1800,100:[1,1811],108:[1,1812],109:[1,1813],110:1810,186:1801,196:1799,201:1804,202:1805,203:1806,206:1809,209:[1,1814],210:[1,1815],211:[1,1820],212:[1,1821],213:[1,1822],214:[1,1823],215:[1,1816],216:[1,1817],217:[1,1818],218:[1,1819],219:1803,220:$Vr6},o($VI4,$VO4),{19:$Vi,21:$Vj,22:1824,219:45,220:$Vk},{19:$Vs6,21:$Vt6,22:1826,100:[1,1837],108:[1,1838],109:[1,1839],110:1836,186:1827,196:1825,201:1830,202:1831,203:1832,206:1835,209:[1,1840],210:[1,1841],211:[1,1846],212:[1,1847],213:[1,1848],214:[1,1849],215:[1,1842],216:[1,1843],217:[1,1844],218:[1,1845],219:1829,220:$Vu6},o($VK4,$VO4),{19:$Vi,21:$Vj,22:1850,219:45,220:$Vk},{19:$Vv6,21:$Vw6,22:1852,100:[1,1863],108:[1,1864],109:[1,1865],110:1862,186:1853,196:1851,201:1856,202:1857,203:1858,206:1861,209:[1,1866],210:[1,1867],211:[1,1872],212:[1,1873],213:[1,1874],214:[1,1875],215:[1,1868],216:[1,1869],217:[1,1870],218:[1,1871],219:1855,220:$Vx6},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,1876]},o($VD3,$Va3),o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vx3,$Vc2),o($Vr,$Vs,{54:1877,40:1878,43:$Vt}),o($Vx3,$Vd2),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:1879}),o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,1883],21:[1,1887],22:1881,33:1880,205:1882,219:1884,220:[1,1886],221:[1,1885]},{119:[1,1888],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vf2),o($Vx3,$Vg2),o($VA3,$Vs1,{82:1889}),o($VG4,$Vy1,{93:1890}),o($VA3,$Vz1,{99:1364,95:1891,101:$VN5,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,1892]},o($VG4,$VT1),{70:[1,1893]},o($VH4,$Vp2,{83:1894,84:1895,197:1896,195:[1,1897]}),o($VI4,$Vp2,{83:1898,84:1899,197:1900,195:$Vy6}),o($Vz3,$Vs2,{99:947,95:1902,101:$VM4,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:1903,95:1904,91:1905,99:1906,105:1908,107:1909,101:$Vz6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:1903,95:1904,91:1905,99:1906,105:1908,107:1909,101:$Vz6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:1903,95:1904,91:1905,99:1906,105:1908,107:1909,101:$Vz6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VK4,$Vp2,{83:1910,84:1911,197:1912,195:[1,1913]}),o($VM5,$VA2),o($VM5,$Vw),o($VM5,$Vx),o($VM5,$Vn),o($VM5,$Vo),o($VM5,$Vy),o($VM5,$Vp),o($VM5,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1914],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1915,121:$VW2,148:$VX2,194:$VY2}),o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,1916]},o($VE3,$Va3),o($Vx3,$Vd2),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:1917}),o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,1921],21:[1,1925],22:1919,33:1918,205:1920,219:1922,220:[1,1924],221:[1,1923]},{119:[1,1926],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vf2),o($Vx3,$Vg2),o($VA3,$Vs1,{82:1927}),o($VG4,$Vy1,{93:1928}),o($VA3,$Vz1,{99:1411,95:1929,101:$VO5,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,1930]},o($VG4,$VT1),{70:[1,1931]},o($VH4,$Vp2,{83:1932,84:1933,197:1934,195:[1,1935]}),o($VI4,$Vp2,{83:1936,84:1937,197:1938,195:$VA6}),o($Vz3,$Vs2,{99:983,95:1940,101:$VN4,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:1941,95:1942,91:1943,99:1944,105:1946,107:1947,101:$VB6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:1941,95:1942,91:1943,99:1944,105:1946,107:1947,101:$VB6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:1941,95:1942,91:1943,99:1944,105:1946,107:1947,101:$VB6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VK4,$Vp2,{83:1948,84:1949,197:1950,195:[1,1951]}),o($VM5,$VA2),o($VM5,$Vw),o($VM5,$Vx),o($VM5,$Vn),o($VM5,$Vo),o($VM5,$Vy),o($VM5,$Vp),o($VM5,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1952],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1953,121:$VW2,148:$VX2,194:$VY2}),o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,1954]},o($VE3,$Va3),o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VP4,21:$VQ4,22:1956,87:1955,219:996,220:$VR4},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$VT4,21:$VU4,22:1958,87:1957,219:1022,220:$VV4},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$VW4,21:$VX4,22:1960,87:1959,219:1049,220:$VY4},o($V05,[2,208]),o($V05,[2,210]),o($V05,[2,217]),o($V05,[2,225]),o($VX5,$Vi5),o($VX5,$Vj5),{19:$V15,21:$V25,22:1962,87:1961,219:1080,220:$Vh5},o($V05,[2,204]),o($V05,[2,213]),o($V05,[2,221]),o($VC6,$VD6,{152:1963,154:1964,161:$VE6,162:$VF6,163:$VG6,164:$VH6}),o($VI6,$VJ6),o($VK6,$VL6,{56:1969}),o($VM6,$VN6,{60:1970}),o($VI,$VJ,{63:1971,73:1972,75:1973,76:1974,92:1977,94:1978,87:1980,88:1981,89:1982,78:1983,44:1984,95:1988,22:1989,91:1991,118:1992,99:1996,219:1999,105:2000,107:2001,19:[1,1998],21:[1,2003],69:[1,1975],71:[1,1976],79:[1,1993],80:[1,1994],81:[1,1995],85:[1,1979],96:[1,1985],97:[1,1986],98:[1,1987],101:$VO6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1990],220:[1,2002]}),o($VC6,$VD6,{154:1964,152:2004,161:$VE6,162:$VF6,163:$VG6,164:$VH6}),{70:$Vl5,134:2005,135:$V56},o($V66,$Vm5),o($VU2,$VV2,{147:406,136:1123,137:1124,138:1125,144:1126,146:1127,131:2006,148:$VX2,194:$Vy5}),o($V66,$Vn5),o($V66,$Vh4,{139:2007,143:2008,140:$V76,141:$V86}),o($VU2,$VV2,{147:406,144:1126,146:1127,138:2009,70:$Vo5,135:$Vo5,148:$VX2,194:$Vy5}),o($VU2,$VV2,{147:406,144:1126,146:1127,138:2010,70:$Vp5,135:$Vp5,148:$VX2,194:$Vy5}),o($V96,$Vq5),o($V96,$Vr5),o($V96,$Vs5),o($V96,$Vt5),{19:$Vu5,21:$Vv5,22:1113,129:2011,204:$Vw5,219:1116,220:$Vx5},o($VU2,$VV2,{147:406,130:1120,131:1121,132:1122,136:1123,137:1124,138:1125,144:1126,146:1127,126:2012,148:$VX2,194:$Vy5}),o($V96,$Vz5),o($V96,$VA5),o($V96,$VB5),o($V96,$Vn),o($V96,$Vo),o($V96,$Vy),o($V96,$Vp),o($V96,$Vq),o($VC5,$VO4),{19:$Vi,21:$Vj,22:2013,219:45,220:$Vk},{19:$VP6,21:$VQ6,22:2015,100:[1,2026],108:[1,2027],109:[1,2028],110:2025,186:2016,196:2014,201:2019,202:2020,203:2021,206:2024,209:[1,2029],210:[1,2030],211:[1,2035],212:[1,2036],213:[1,2037],214:[1,2038],215:[1,2031],216:[1,2032],217:[1,2033],218:[1,2034],219:2018,220:$VR6},o($Vp4,$Vk5),{198:[1,2041],199:2039,200:[1,2040]},o($Vb3,$VP5),o($Vb3,$VQ5),o($Vb3,$VR5),o($Vb3,$Vn),o($Vb3,$Vo),o($Vb3,$VX3),o($Vb3,$VY3),o($Vb3,$VZ3),o($Vb3,$Vp),o($Vb3,$Vq),o($Vb3,$V_3),o($Vb3,$V$3,{207:2042,208:2043,111:[1,2044]}),o($Vb3,$V04),o($Vb3,$V14),o($Vb3,$V24),o($Vb3,$V34),o($Vb3,$V44),o($Vb3,$V54),o($Vb3,$V64),o($Vb3,$V74),o($Vb3,$V84),o($VS6,$V63),o($VS6,$V73),o($VS6,$V83),o($VS6,$V93),o($VG,$Vc2),o($Vr,$Vs,{54:2045,40:2046,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2047}),o($VG,$VE1),o($VG,$VF1),{19:[1,2051],21:[1,2055],22:2049,33:2048,205:2050,219:2052,220:[1,2054],221:[1,2053]},{119:[1,2056],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2057}),o($Vh2,$Vy1,{93:2058}),o($Vt1,$Vz1,{99:1551,95:2059,101:$Vd6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2060]},o($Vh2,$VT1),{70:[1,2061]},o($Vo2,$Vp2,{83:2062,84:2063,197:2064,195:[1,2065]}),o($Vq2,$Vp2,{83:2066,84:2067,197:2068,195:$VT6}),o($Vr1,$Vs2,{99:1167,95:2070,101:$VF5,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:2071,95:2072,91:2073,99:2074,105:2076,107:2077,101:$VU6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:2071,95:2072,91:2073,99:2074,105:2076,107:2077,101:$VU6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2071,95:2072,91:2073,99:2074,105:2076,107:2077,101:$VU6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:2078,84:2079,197:2080,195:[1,2081]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2082],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2083,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,2084]},o($VN1,$Va3),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2085}),o($VG,$VE1),o($VG,$VF1),{19:[1,2089],21:[1,2093],22:2087,33:2086,205:2088,219:2090,220:[1,2092],221:[1,2091]},{119:[1,2094],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2095}),o($Vh2,$Vy1,{93:2096}),o($Vt1,$Vz1,{99:1598,95:2097,101:$Ve6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2098]},o($Vh2,$VT1),{70:[1,2099]},o($Vo2,$Vp2,{83:2100,84:2101,197:2102,195:[1,2103]}),o($Vq2,$Vp2,{83:2104,84:2105,197:2106,195:$VV6}),o($Vr1,$Vs2,{99:1203,95:2108,101:$VG5,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:2109,95:2110,91:2111,99:2112,105:2114,107:2115,101:$VW6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:2109,95:2110,91:2111,99:2112,105:2114,107:2115,101:$VW6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2109,95:2110,91:2111,99:2112,105:2114,107:2115,101:$VW6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:2116,84:2117,197:2118,195:[1,2119]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2120],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2121,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,2122]},o($VN1,$Va3),o($Vt1,$Vk5),{198:[1,2125],199:2123,200:[1,2124]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:2126,208:2127,111:[1,2128]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,2131],199:2129,200:[1,2130]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:2132,208:2133,111:[1,2134]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,2137],21:[1,2140],22:2136,87:2135,219:2138,220:[1,2139]},{198:[1,2143],199:2141,200:[1,2142]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:2144,208:2145,111:[1,2146]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($VG,$Ve1),o($VG,$Vf1,{65:2147,67:2148,72:2149,44:2150,78:2151,118:2155,79:[1,2152],80:[1,2153],81:[1,2154],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:2156,64:2157,73:2158,92:2159,94:2160,95:2164,99:2165,96:[1,2161],97:[1,2162],98:[1,2163],101:$VX6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:2167,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:2168}),o($Vt1,$Vs1,{82:2169}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:2170}),o($Vr1,$Vz1,{99:1735,95:2171,101:$Vo6,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:2172}),o($VA1,$VB1,{86:2173}),o($VA1,$VB1,{86:2174}),o($Vt1,$VC1,{105:1739,107:1740,91:2175,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:2176}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,2180],21:[1,2184],22:2178,33:2177,205:2179,219:2181,220:[1,2183],221:[1,2182]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:2185}),o($VN1,$VO1),{119:[1,2186],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,2187]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,2189],106:2188,108:[1,2190],109:[1,2191],110:2192,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2193]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,2194]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:2195,219:45,220:$Vk},{19:$VY6,21:$VZ6,22:2197,100:[1,2208],108:[1,2209],109:[1,2210],110:2207,186:2198,196:2196,201:2201,202:2202,203:2203,206:2206,209:[1,2211],210:[1,2212],211:[1,2217],212:[1,2218],213:[1,2219],214:[1,2220],215:[1,2213],216:[1,2214],217:[1,2215],218:[1,2216],219:2200,220:$V_6},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:2221,219:45,220:$Vk},{19:$V$6,21:$V07,22:2223,100:[1,2234],108:[1,2235],109:[1,2236],110:2233,186:2224,196:2222,201:2227,202:2228,203:2229,206:2232,209:[1,2237],210:[1,2238],211:[1,2243],212:[1,2244],213:[1,2245],214:[1,2246],215:[1,2239],216:[1,2240],217:[1,2241],218:[1,2242],219:2226,220:$V17},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,2247]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:2248,219:45,220:$Vk},{19:$V27,21:$V37,22:2250,100:[1,2261],108:[1,2262],109:[1,2263],110:2260,186:2251,196:2249,201:2254,202:2255,203:2256,206:2259,209:[1,2264],210:[1,2265],211:[1,2270],212:[1,2271],213:[1,2272],214:[1,2273],215:[1,2266],216:[1,2267],217:[1,2268],218:[1,2269],219:2253,220:$V47},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VT3),{121:[1,2274]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:2275,219:45,220:$Vk},{19:$V57,21:$V67,22:2277,100:[1,2288],108:[1,2289],109:[1,2290],110:2287,186:2278,196:2276,201:2281,202:2282,203:2283,206:2286,209:[1,2291],210:[1,2292],211:[1,2297],212:[1,2298],213:[1,2299],214:[1,2300],215:[1,2293],216:[1,2294],217:[1,2295],218:[1,2296],219:2280,220:$V77},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:2301,219:45,220:$Vk},{19:$V87,21:$V97,22:2303,100:[1,2314],108:[1,2315],109:[1,2316],110:2313,186:2304,196:2302,201:2307,202:2308,203:2309,206:2312,209:[1,2317],210:[1,2318],211:[1,2323],212:[1,2324],213:[1,2325],214:[1,2326],215:[1,2319],216:[1,2320],217:[1,2321],218:[1,2322],219:2306,220:$Va7},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,2327]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:2328,219:45,220:$Vk},{19:$Vb7,21:$Vc7,22:2330,100:[1,2341],108:[1,2342],109:[1,2343],110:2340,186:2331,196:2329,201:2334,202:2335,203:2336,206:2339,209:[1,2344],210:[1,2345],211:[1,2350],212:[1,2351],213:[1,2352],214:[1,2353],215:[1,2346],216:[1,2347],217:[1,2348],218:[1,2349],219:2333,220:$Vd7},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VA3,$Vk5),{198:[1,2356],199:2354,200:[1,2355]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:2357,208:2358,111:[1,2359]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,2362],199:2360,200:[1,2361]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:2363,208:2364,111:[1,2365]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{198:[1,2368],199:2366,200:[1,2367]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:2369,208:2370,111:[1,2371]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),{19:[1,2374],21:[1,2377],22:2373,87:2372,219:2375,220:[1,2376]},o($Vx3,$Vu3),o($VI,$VJ,{62:2378,64:2379,66:2380,67:2381,73:2384,75:2385,72:2386,44:2387,92:2388,94:2389,87:2391,88:2392,89:2393,78:2394,95:2401,22:2402,91:2404,118:2405,99:2406,219:2409,105:2410,107:2411,19:[1,2408],21:[1,2413],69:[1,2382],71:[1,2383],79:[1,2395],80:[1,2396],81:[1,2397],85:[1,2390],96:[1,2398],97:[1,2399],98:[1,2400],101:$Vh7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,2403],220:[1,2412]}),o($VI4,$Vp2,{84:1899,197:1900,83:2414,195:$Vy6}),o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2415,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:1899,197:1900,83:2416,195:$Vy6}),o($VA3,$Vs2,{99:1364,95:2417,101:$VN5,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$Vw3),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:2418,198:[1,2419]}),{19:$VK3,21:$VL3,22:643,129:2420,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:2421,198:[1,2422]}),{19:$VK3,21:$VL3,22:643,129:2423,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,2424]},o($VD3,$VT1),{100:[1,2426],106:2425,108:[1,2427],109:[1,2428],110:2429,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2430]},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:2431,198:[1,2432]}),{19:$VK3,21:$VL3,22:643,129:2433,204:$VM3,219:646,220:$VN3},o($VD3,$VU3),{121:[1,2434]},{19:[1,2437],21:[1,2440],22:2436,87:2435,219:2438,220:[1,2439]},o($VI4,$Vp2,{84:1937,197:1938,83:2441,195:$VA6}),o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2442,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:1937,197:1938,83:2443,195:$VA6}),o($VA3,$Vs2,{99:1411,95:2444,101:$VO5,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$Vw3),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:2445,198:[1,2446]}),{19:$VK3,21:$VL3,22:643,129:2447,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:2448,198:[1,2449]}),{19:$VK3,21:$VL3,22:643,129:2450,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,2451]},o($VD3,$VT1),{100:[1,2453],106:2452,108:[1,2454],109:[1,2455],110:2456,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2457]},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:2458,198:[1,2459]}),{19:$VK3,21:$VL3,22:643,129:2460,204:$VM3,219:646,220:$VN3},o($VD3,$VU3),{121:[1,2461]},{19:[1,2464],21:[1,2467],22:2463,87:2462,219:2465,220:[1,2466]},o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($VX5,$VZ5),o($VX5,$VK1),o($Vi7,$Vj7,{153:2468,155:$Vk7}),o($VC6,$Vl7),o($VC6,$Vm7),o($VC6,$Vn7),o($VC6,$Vo7),o($VC6,$Vp7),o($VI6,$Vq7,{57:2470,51:[1,2471]}),o($VK6,$Vr7,{61:2472,53:[1,2473]}),o($VM6,$Vs7),o($VM6,$Vt7,{74:2474,76:2475,78:2476,44:2477,118:2478,79:[1,2479],80:[1,2480],81:[1,2481],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:2482,73:2483,92:2484,94:2485,95:2489,99:2490,96:[1,2486],97:[1,2487],98:[1,2488],101:$Vw7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:2492,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:2493}),o($Vz7,$Vz1,{99:1996,95:2494,101:$VO6,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:2495}),o($VA7,$VB1,{86:2496}),o($VA7,$VB1,{86:2497}),o($VM6,$VC1,{105:2000,107:2001,91:2498,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:2499}),o($VE7,$VO1),{119:[1,2500],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,2504],21:[1,2508],22:2502,33:2501,205:2503,219:2505,220:[1,2507],221:[1,2506]},{100:[1,2509]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,2511],106:2510,108:[1,2512],109:[1,2513],110:2514,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2515]},o($VA7,$Vp),o($VA7,$Vq),o($Vi7,$Vj7,{153:2516,155:$Vk7}),o($V66,$V_5),o($V66,$V$5),o($V66,$V06),o($V96,$V16),o($V96,$V26),o($V96,$V36),o($Vr,$Vs,{46:2517,47:2518,55:2519,59:2520,40:2521,43:$Vt}),{70:[1,2522]},{198:[1,2525],199:2523,200:[1,2524]},o($Vp4,$VP5),o($Vp4,$VQ5),o($Vp4,$VR5),o($Vp4,$Vn),o($Vp4,$Vo),o($Vp4,$VX3),o($Vp4,$VY3),o($Vp4,$VZ3),o($Vp4,$Vp),o($Vp4,$Vq),o($Vp4,$V_3),o($Vp4,$V$3,{207:2526,208:2527,111:[1,2528]}),o($Vp4,$V04),o($Vp4,$V14),o($Vp4,$V24),o($Vp4,$V34),o($Vp4,$V44),o($Vp4,$V54),o($Vp4,$V64),o($Vp4,$V74),o($Vp4,$V84),o($VF7,$V63),o($VF7,$V73),o($VF7,$V83),o($VF7,$V93),o($Vt4,$V71),o($Vt4,$V81),o($Vt4,$V91),o($Vb3,$Vi5),o($Vb3,$Vj5),{19:$Va6,21:$Vb6,22:2530,87:2529,219:1510,220:$Vc6},o($VG,$Vu3),o($VI,$VJ,{62:2531,64:2532,66:2533,67:2534,73:2537,75:2538,72:2539,44:2540,92:2541,94:2542,87:2544,88:2545,89:2546,78:2547,95:2554,22:2555,91:2557,118:2558,99:2559,219:2562,105:2563,107:2564,19:[1,2561],21:[1,2566],69:[1,2535],71:[1,2536],79:[1,2548],80:[1,2549],81:[1,2550],85:[1,2543],96:[1,2551],97:[1,2552],98:[1,2553],101:$VG7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,2556],220:[1,2565]}),o($Vq2,$Vp2,{84:2067,197:2068,83:2567,195:$VT6}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2568,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:2067,197:2068,83:2569,195:$VT6}),o($Vt1,$Vs2,{99:1551,95:2570,101:$Vd6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:2571,198:[1,2572]}),{19:$VK3,21:$VL3,22:643,129:2573,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:2574,198:[1,2575]}),{19:$VK3,21:$VL3,22:643,129:2576,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,2577]},o($VA1,$VT1),{100:[1,2579],106:2578,108:[1,2580],109:[1,2581],110:2582,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2583]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:2584,198:[1,2585]}),{19:$VK3,21:$VL3,22:643,129:2586,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,2587]},{19:[1,2590],21:[1,2593],22:2589,87:2588,219:2591,220:[1,2592]},o($Vq2,$Vp2,{84:2105,197:2106,83:2594,195:$VV6}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2595,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:2105,197:2106,83:2596,195:$VV6}),o($Vt1,$Vs2,{99:1598,95:2597,101:$Ve6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:2598,198:[1,2599]}),{19:$VK3,21:$VL3,22:643,129:2600,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:2601,198:[1,2602]}),{19:$VK3,21:$VL3,22:643,129:2603,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,2604]},o($VA1,$VT1),{100:[1,2606],106:2605,108:[1,2607],109:[1,2608],110:2609,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2610]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:2611,198:[1,2612]}),{19:$VK3,21:$VL3,22:643,129:2613,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,2614]},{19:[1,2617],21:[1,2620],22:2616,87:2615,219:2618,220:[1,2619]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$Vf6,21:$Vg6,22:2622,87:2621,219:1633,220:$Vh6},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$Vi6,21:$Vj6,22:2624,87:2623,219:1659,220:$Vk6},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vl6,21:$Vm6,22:2626,87:2625,219:1686,220:$Vn6},o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2627}),o($VG,$VE1),o($VG,$VF1),{19:[1,2631],21:[1,2635],22:2629,33:2628,205:2630,219:2632,220:[1,2634],221:[1,2633]},{119:[1,2636],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2637}),o($Vh2,$Vy1,{93:2638}),o($Vt1,$Vz1,{99:2165,95:2639,101:$VX6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2640]},o($Vh2,$VT1),{70:[1,2641]},o($Vo2,$Vp2,{83:2642,84:2643,197:2644,195:[1,2645]}),o($Vq2,$Vp2,{83:2646,84:2647,197:2648,195:$VH7}),o($Vr1,$Vs2,{99:1735,95:2650,101:$Vo6,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:2651,95:2652,91:2653,99:2654,105:2656,107:2657,101:$VI7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:2651,95:2652,91:2653,99:2654,105:2656,107:2657,101:$VI7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2651,95:2652,91:2653,99:2654,105:2656,107:2657,101:$VI7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:2658,84:2659,197:2660,195:[1,2661]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2662],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2663,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,2664]},o($VN1,$Va3),o($Vt1,$Vk5),{198:[1,2667],199:2665,200:[1,2666]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:2668,208:2669,111:[1,2670]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,2673],199:2671,200:[1,2672]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:2674,208:2675,111:[1,2676]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,2679],21:[1,2682],22:2678,87:2677,219:2680,220:[1,2681]},{198:[1,2685],199:2683,200:[1,2684]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:2686,208:2687,111:[1,2688]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vt1,$Vk5),{198:[1,2691],199:2689,200:[1,2690]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:2692,208:2693,111:[1,2694]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,2697],199:2695,200:[1,2696]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:2698,208:2699,111:[1,2700]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,2703],21:[1,2706],22:2702,87:2701,219:2704,220:[1,2705]},{198:[1,2709],199:2707,200:[1,2708]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:2710,208:2711,111:[1,2712]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$Vp6,21:$Vq6,22:2714,87:2713,219:1803,220:$Vr6},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$Vs6,21:$Vt6,22:2716,87:2715,219:1829,220:$Vu6},o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$Vv6,21:$Vw6,22:2718,87:2717,219:1855,220:$Vx6},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($Vx3,$Ve1),o($VI,$VJ,{65:2719,67:2720,72:2721,44:2722,78:2723,118:2727,51:$Vf1,53:$Vf1,70:$Vf1,79:[1,2724],80:[1,2725],81:[1,2726]}),o($Vx3,$Vj1),o($Vx3,$Vk1,{68:2728,64:2729,73:2730,92:2731,94:2732,95:2736,99:2737,96:[1,2733],97:[1,2734],98:[1,2735],101:$VJ7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:2739,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Vq1),o($Vz3,$Vs1,{82:2740}),o($VA3,$Vs1,{82:2741}),o($VM5,$Vv1),o($VM5,$Vw1),o($VC3,$Vy1,{93:2742}),o($Vz3,$Vz1,{99:2406,95:2743,101:$Vh7,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:2744}),o($VD3,$VB1,{86:2745}),o($VD3,$VB1,{86:2746}),o($VA3,$VC1,{105:2410,107:2411,91:2747,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB3,$Vs1,{82:2748}),o($VM5,$VE1),o($VM5,$VF1),{19:[1,2752],21:[1,2756],22:2750,33:2749,205:2751,219:2753,220:[1,2755],221:[1,2754]},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:2757}),o($VE3,$VO1),{119:[1,2758],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,2759]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,2761],106:2760,108:[1,2762],109:[1,2763],110:2764,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2765]},o($VD3,$Vp),o($VD3,$Vq),o($Vx3,$VT3),{121:[1,2766]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:2767,219:45,220:$Vk},{19:$VK7,21:$VL7,22:2769,100:[1,2780],108:[1,2781],109:[1,2782],110:2779,186:2770,196:2768,201:2773,202:2774,203:2775,206:2778,209:[1,2783],210:[1,2784],211:[1,2789],212:[1,2790],213:[1,2791],214:[1,2792],215:[1,2785],216:[1,2786],217:[1,2787],218:[1,2788],219:2772,220:$VM7},o($VI4,$VO4),{19:$Vi,21:$Vj,22:2793,219:45,220:$Vk},{19:$VN7,21:$VO7,22:2795,100:[1,2806],108:[1,2807],109:[1,2808],110:2805,186:2796,196:2794,201:2799,202:2800,203:2801,206:2804,209:[1,2809],210:[1,2810],211:[1,2815],212:[1,2816],213:[1,2817],214:[1,2818],215:[1,2811],216:[1,2812],217:[1,2813],218:[1,2814],219:2798,220:$VP7},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,2819]},o($VD3,$Va3),o($VK4,$VO4),{19:$Vi,21:$Vj,22:2820,219:45,220:$Vk},{19:$VQ7,21:$VR7,22:2822,100:[1,2833],108:[1,2834],109:[1,2835],110:2832,186:2823,196:2821,201:2826,202:2827,203:2828,206:2831,209:[1,2836],210:[1,2837],211:[1,2842],212:[1,2843],213:[1,2844],214:[1,2845],215:[1,2838],216:[1,2839],217:[1,2840],218:[1,2841],219:2825,220:$VS7},o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vx3,$VT3),{121:[1,2846]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:2847,219:45,220:$Vk},{19:$VT7,21:$VU7,22:2849,100:[1,2860],108:[1,2861],109:[1,2862],110:2859,186:2850,196:2848,201:2853,202:2854,203:2855,206:2858,209:[1,2863],210:[1,2864],211:[1,2869],212:[1,2870],213:[1,2871],214:[1,2872],215:[1,2865],216:[1,2866],217:[1,2867],218:[1,2868],219:2852,220:$VV7},o($VI4,$VO4),{19:$Vi,21:$Vj,22:2873,219:45,220:$Vk},{19:$VW7,21:$VX7,22:2875,100:[1,2886],108:[1,2887],109:[1,2888],110:2885,186:2876,196:2874,201:2879,202:2880,203:2881,206:2884,209:[1,2889],210:[1,2890],211:[1,2895],212:[1,2896],213:[1,2897],214:[1,2898],215:[1,2891],216:[1,2892],217:[1,2893],218:[1,2894],219:2878,220:$VY7},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,2899]},o($VD3,$Va3),o($VK4,$VO4),{19:$Vi,21:$Vj,22:2900,219:45,220:$Vk},{19:$VZ7,21:$V_7,22:2902,100:[1,2913],108:[1,2914],109:[1,2915],110:2912,186:2903,196:2901,201:2906,202:2907,203:2908,206:2911,209:[1,2916],210:[1,2917],211:[1,2922],212:[1,2923],213:[1,2924],214:[1,2925],215:[1,2918],216:[1,2919],217:[1,2920],218:[1,2921],219:2905,220:$V$7},o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vi7,$Vs1,{82:2926}),o($V46,$V08,{156:2927,157:$V18}),o($VK6,$V28),o($Vr,$Vs,{55:2929,59:2930,40:2931,43:$Vt}),o($VM6,$V38),o($Vr,$Vs,{59:2932,40:2933,43:$Vt}),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,2934],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,2938],21:[1,2942],22:2936,33:2935,205:2937,219:2939,220:[1,2941],221:[1,2940]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:2943}),o($VM6,$Vz1,{99:2490,95:2944,101:$Vw7,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,2945]},o($V88,$VT1),{70:[1,2946]},o($Vz7,$Vs2,{99:1996,95:2947,101:$VO6,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:2948,95:2949,91:2950,99:2951,105:2953,107:2954,101:$V98,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:2948,95:2949,91:2950,99:2951,105:2953,107:2954,101:$V98,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:2948,95:2949,91:2950,99:2951,105:2953,107:2954,101:$V98,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2955],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2956,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,2957]},o($VE7,$Va3),o($Vi7,$Vs1,{82:2958}),o($Va8,$VD6,{152:2959,154:2960,161:$Vb8,162:$Vc8,163:$Vd8,164:$Ve8}),o($Vf8,$VJ6),o($Vg8,$VL6,{56:2965}),o($Vh8,$VN6,{60:2966}),o($VI,$VJ,{63:2967,73:2968,75:2969,76:2970,92:2973,94:2974,87:2976,88:2977,89:2978,78:2979,44:2980,95:2984,22:2985,91:2987,118:2988,99:2992,219:2995,105:2996,107:2997,19:[1,2994],21:[1,2999],69:[1,2971],71:[1,2972],79:[1,2989],80:[1,2990],81:[1,2991],85:[1,2975],96:[1,2981],97:[1,2982],98:[1,2983],101:$Vi8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,2986],220:[1,2998]}),o($Va8,$VD6,{154:2960,152:3000,161:$Vb8,162:$Vc8,163:$Vd8,164:$Ve8}),o($VC5,$V71),o($VC5,$V81),o($VC5,$V91),o($Vp4,$Vi5),o($Vp4,$Vj5),{19:$VP6,21:$VQ6,22:3002,87:3001,219:2018,220:$VR6},o($Vb3,$VZ5),o($Vb3,$VK1),o($VG,$Ve1),o($VG,$Vf1,{65:3003,67:3004,72:3005,44:3006,78:3007,118:3011,79:[1,3008],80:[1,3009],81:[1,3010],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:3012,64:3013,73:3014,92:3015,94:3016,95:3020,99:3021,96:[1,3017],97:[1,3018],98:[1,3019],101:$Vj8,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3023,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:3024}),o($Vt1,$Vs1,{82:3025}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:3026}),o($Vr1,$Vz1,{99:2559,95:3027,101:$VG7,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:3028}),o($VA1,$VB1,{86:3029}),o($VA1,$VB1,{86:3030}),o($Vt1,$VC1,{105:2563,107:2564,91:3031,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:3032}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,3036],21:[1,3040],22:3034,33:3033,205:3035,219:3037,220:[1,3039],221:[1,3038]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:3041}),o($VN1,$VO1),{119:[1,3042],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,3043]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,3045],106:3044,108:[1,3046],109:[1,3047],110:3048,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3049]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,3050]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:3051,219:45,220:$Vk},{19:$Vk8,21:$Vl8,22:3053,100:[1,3064],108:[1,3065],109:[1,3066],110:3063,186:3054,196:3052,201:3057,202:3058,203:3059,206:3062,209:[1,3067],210:[1,3068],211:[1,3073],212:[1,3074],213:[1,3075],214:[1,3076],215:[1,3069],216:[1,3070],217:[1,3071],218:[1,3072],219:3056,220:$Vm8},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:3077,219:45,220:$Vk},{19:$Vn8,21:$Vo8,22:3079,100:[1,3090],108:[1,3091],109:[1,3092],110:3089,186:3080,196:3078,201:3083,202:3084,203:3085,206:3088,209:[1,3093],210:[1,3094],211:[1,3099],212:[1,3100],213:[1,3101],214:[1,3102],215:[1,3095],216:[1,3096],217:[1,3097],218:[1,3098],219:3082,220:$Vp8},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,3103]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:3104,219:45,220:$Vk},{19:$Vq8,21:$Vr8,22:3106,100:[1,3117],108:[1,3118],109:[1,3119],110:3116,186:3107,196:3105,201:3110,202:3111,203:3112,206:3115,209:[1,3120],210:[1,3121],211:[1,3126],212:[1,3127],213:[1,3128],214:[1,3129],215:[1,3122],216:[1,3123],217:[1,3124],218:[1,3125],219:3109,220:$Vs8},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VT3),{121:[1,3130]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:3131,219:45,220:$Vk},{19:$Vt8,21:$Vu8,22:3133,100:[1,3144],108:[1,3145],109:[1,3146],110:3143,186:3134,196:3132,201:3137,202:3138,203:3139,206:3142,209:[1,3147],210:[1,3148],211:[1,3153],212:[1,3154],213:[1,3155],214:[1,3156],215:[1,3149],216:[1,3150],217:[1,3151],218:[1,3152],219:3136,220:$Vv8},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:3157,219:45,220:$Vk},{19:$Vw8,21:$Vx8,22:3159,100:[1,3170],108:[1,3171],109:[1,3172],110:3169,186:3160,196:3158,201:3163,202:3164,203:3165,206:3168,209:[1,3173],210:[1,3174],211:[1,3179],212:[1,3180],213:[1,3181],214:[1,3182],215:[1,3175],216:[1,3176],217:[1,3177],218:[1,3178],219:3162,220:$Vy8},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,3183]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:3184,219:45,220:$Vk},{19:$Vz8,21:$VA8,22:3186,100:[1,3197],108:[1,3198],109:[1,3199],110:3196,186:3187,196:3185,201:3190,202:3191,203:3192,206:3195,209:[1,3200],210:[1,3201],211:[1,3206],212:[1,3207],213:[1,3208],214:[1,3209],215:[1,3202],216:[1,3203],217:[1,3204],218:[1,3205],219:3189,220:$VB8},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vq2,$Vp2,{84:2647,197:2648,83:3210,195:$VH7}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3211,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:2647,197:2648,83:3212,195:$VH7}),o($Vt1,$Vs2,{99:2165,95:3213,101:$VX6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:3214,198:[1,3215]}),{19:$VK3,21:$VL3,22:643,129:3216,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:3217,198:[1,3218]}),{19:$VK3,21:$VL3,22:643,129:3219,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,3220]},o($VA1,$VT1),{100:[1,3222],106:3221,108:[1,3223],109:[1,3224],110:3225,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3226]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:3227,198:[1,3228]}),{19:$VK3,21:$VL3,22:643,129:3229,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,3230]},{19:[1,3233],21:[1,3236],22:3232,87:3231,219:3234,220:[1,3235]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VY6,21:$VZ6,22:3238,87:3237,219:2200,220:$V_6},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$V$6,21:$V07,22:3240,87:3239,219:2226,220:$V17},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$V27,21:$V37,22:3242,87:3241,219:2253,220:$V47},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$V57,21:$V67,22:3244,87:3243,219:2280,220:$V77},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$V87,21:$V97,22:3246,87:3245,219:2306,220:$Va7},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vb7,21:$Vc7,22:3248,87:3247,219:2333,220:$Vd7},o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($Vx3,$Vd2),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:3249}),o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,3253],21:[1,3257],22:3251,33:3250,205:3252,219:3254,220:[1,3256],221:[1,3255]},{119:[1,3258],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vf2),o($Vx3,$Vg2),o($VA3,$Vs1,{82:3259}),o($VG4,$Vy1,{93:3260}),o($VA3,$Vz1,{99:2737,95:3261,101:$VJ7,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,3262]},o($VG4,$VT1),{70:[1,3263]},o($VH4,$Vp2,{83:3264,84:3265,197:3266,195:[1,3267]}),o($VI4,$Vp2,{83:3268,84:3269,197:3270,195:$VC8}),o($Vz3,$Vs2,{99:2406,95:3272,101:$Vh7,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:3273,95:3274,91:3275,99:3276,105:3278,107:3279,101:$VD8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:3273,95:3274,91:3275,99:3276,105:3278,107:3279,101:$VD8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:3273,95:3274,91:3275,99:3276,105:3278,107:3279,101:$VD8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VK4,$Vp2,{83:3280,84:3281,197:3282,195:[1,3283]}),o($VM5,$VA2),o($VM5,$Vw),o($VM5,$Vx),o($VM5,$Vn),o($VM5,$Vo),o($VM5,$Vy),o($VM5,$Vp),o($VM5,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,3284],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3285,121:$VW2,148:$VX2,194:$VY2}),o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,3286]},o($VE3,$Va3),o($VA3,$Vk5),{198:[1,3289],199:3287,200:[1,3288]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:3290,208:3291,111:[1,3292]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,3295],199:3293,200:[1,3294]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:3296,208:3297,111:[1,3298]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{19:[1,3301],21:[1,3304],22:3300,87:3299,219:3302,220:[1,3303]},{198:[1,3307],199:3305,200:[1,3306]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:3308,208:3309,111:[1,3310]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),o($VA3,$Vk5),{198:[1,3313],199:3311,200:[1,3312]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:3314,208:3315,111:[1,3316]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,3319],199:3317,200:[1,3318]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:3320,208:3321,111:[1,3322]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{19:[1,3325],21:[1,3328],22:3324,87:3323,219:3326,220:[1,3327]},{198:[1,3331],199:3329,200:[1,3330]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:3332,208:3333,111:[1,3334]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),o($VE8,$Vp2,{83:3335,84:3336,197:3337,195:$VF8}),o($Vr,$Vs,{46:3339,47:3340,55:3341,59:3342,40:3343,43:$Vt}),{158:[1,3344]},o($VK6,$VG8),o($VM6,$VN6,{60:3345}),o($VI,$VJ,{63:3346,73:3347,75:3348,76:3349,92:3352,94:3353,87:3355,88:3356,89:3357,78:3358,44:3359,95:3363,22:3364,91:3366,118:3367,99:3371,219:3374,105:3375,107:3376,19:[1,3373],21:[1,3378],69:[1,3350],71:[1,3351],79:[1,3368],80:[1,3369],81:[1,3370],85:[1,3354],96:[1,3360],97:[1,3361],98:[1,3362],101:$VH8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,3365],220:[1,3377]}),o($VM6,$VI8),o($VI,$VJ,{63:3379,73:3380,75:3381,76:3382,92:3385,94:3386,87:3388,88:3389,89:3390,78:3391,44:3392,95:3396,22:3397,91:3399,118:3400,99:3404,219:3407,105:3408,107:3409,19:[1,3406],21:[1,3411],69:[1,3383],71:[1,3384],79:[1,3401],80:[1,3402],81:[1,3403],85:[1,3387],96:[1,3393],97:[1,3394],98:[1,3395],101:$VJ8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,3398],220:[1,3410]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3412,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:2490,95:3413,101:$Vw7,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,3414]},o($VA7,$VT1),{100:[1,3416],106:3415,108:[1,3417],109:[1,3418],110:3419,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3420]},o($VA7,$VU3),{121:[1,3421]},{19:[1,3424],21:[1,3427],22:3423,87:3422,219:3425,220:[1,3426]},o($VE8,$Vp2,{84:3336,197:3337,83:3428,195:$VF8}),o($VL8,$Vj7,{153:3429,155:$VM8}),o($Va8,$Vl7),o($Va8,$Vm7),o($Va8,$Vn7),o($Va8,$Vo7),o($Va8,$Vp7),o($Vf8,$Vq7,{57:3431,51:[1,3432]}),o($Vg8,$Vr7,{61:3433,53:[1,3434]}),o($Vh8,$Vs7),o($Vh8,$Vt7,{74:3435,76:3436,78:3437,44:3438,118:3439,79:[1,3440],80:[1,3441],81:[1,3442],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:3443,73:3444,92:3445,94:3446,95:3450,99:3451,96:[1,3447],97:[1,3448],98:[1,3449],101:$VN8,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3453,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:3454}),o($VP8,$Vz1,{99:2992,95:3455,101:$Vi8,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:3456}),o($VQ8,$VB1,{86:3457}),o($VQ8,$VB1,{86:3458}),o($Vh8,$VC1,{105:2996,107:2997,91:3459,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:3460}),o($VS8,$VO1),{119:[1,3461],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,3465],21:[1,3469],22:3463,33:3462,205:3464,219:3466,220:[1,3468],221:[1,3467]},{100:[1,3470]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,3472],106:3471,108:[1,3473],109:[1,3474],110:3475,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3476]},o($VQ8,$Vp),o($VQ8,$Vq),o($VL8,$Vj7,{153:3477,155:$VM8}),o($Vp4,$VZ5),o($Vp4,$VK1),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:3478}),o($VG,$VE1),o($VG,$VF1),{19:[1,3482],21:[1,3486],22:3480,33:3479,205:3481,219:3483,220:[1,3485],221:[1,3484]},{119:[1,3487],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:3488}),o($Vh2,$Vy1,{93:3489}),o($Vt1,$Vz1,{99:3021,95:3490,101:$Vj8,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,3491]},o($Vh2,$VT1),{70:[1,3492]},o($Vo2,$Vp2,{83:3493,84:3494,197:3495,195:[1,3496]}),o($Vq2,$Vp2,{83:3497,84:3498,197:3499,195:$VT8}),o($Vr1,$Vs2,{99:2559,95:3501,101:$VG7,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:3502,95:3503,91:3504,99:3505,105:3507,107:3508,101:$VU8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:3502,95:3503,91:3504,99:3505,105:3507,107:3508,101:$VU8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:3502,95:3503,91:3504,99:3505,105:3507,107:3508,101:$VU8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:3509,84:3510,197:3511,195:[1,3512]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,3513],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3514,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,3515]},o($VN1,$Va3),o($Vt1,$Vk5),{198:[1,3518],199:3516,200:[1,3517]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:3519,208:3520,111:[1,3521]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,3524],199:3522,200:[1,3523]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:3525,208:3526,111:[1,3527]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,3530],21:[1,3533],22:3529,87:3528,219:3531,220:[1,3532]},{198:[1,3536],199:3534,200:[1,3535]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:3537,208:3538,111:[1,3539]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vt1,$Vk5),{198:[1,3542],199:3540,200:[1,3541]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:3543,208:3544,111:[1,3545]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,3548],199:3546,200:[1,3547]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:3549,208:3550,111:[1,3551]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,3554],21:[1,3557],22:3553,87:3552,219:3555,220:[1,3556]},{198:[1,3560],199:3558,200:[1,3559]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:3561,208:3562,111:[1,3563]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($VG,$VT3),{121:[1,3564]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:3565,219:45,220:$Vk},{19:$VV8,21:$VW8,22:3567,100:[1,3578],108:[1,3579],109:[1,3580],110:3577,186:3568,196:3566,201:3571,202:3572,203:3573,206:3576,209:[1,3581],210:[1,3582],211:[1,3587],212:[1,3588],213:[1,3589],214:[1,3590],215:[1,3583],216:[1,3584],217:[1,3585],218:[1,3586],219:3570,220:$VX8},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:3591,219:45,220:$Vk},{19:$VY8,21:$VZ8,22:3593,100:[1,3604],108:[1,3605],109:[1,3606],110:3603,186:3594,196:3592,201:3597,202:3598,203:3599,206:3602,209:[1,3607],210:[1,3608],211:[1,3613],212:[1,3614],213:[1,3615],214:[1,3616],215:[1,3609],216:[1,3610],217:[1,3611],218:[1,3612],219:3596,220:$V_8},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,3617]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:3618,219:45,220:$Vk},{19:$V$8,21:$V09,22:3620,100:[1,3631],108:[1,3632],109:[1,3633],110:3630,186:3621,196:3619,201:3624,202:3625,203:3626,206:3629,209:[1,3634],210:[1,3635],211:[1,3640],212:[1,3641],213:[1,3642],214:[1,3643],215:[1,3636],216:[1,3637],217:[1,3638],218:[1,3639],219:3623,220:$V19},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($VI4,$Vp2,{84:3269,197:3270,83:3644,195:$VC8}),o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3645,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:3269,197:3270,83:3646,195:$VC8}),o($VA3,$Vs2,{99:2737,95:3647,101:$VJ7,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$Vw3),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:3648,198:[1,3649]}),{19:$VK3,21:$VL3,22:643,129:3650,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:3651,198:[1,3652]}),{19:$VK3,21:$VL3,22:643,129:3653,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,3654]},o($VD3,$VT1),{100:[1,3656],106:3655,108:[1,3657],109:[1,3658],110:3659,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3660]},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:3661,198:[1,3662]}),{19:$VK3,21:$VL3,22:643,129:3663,204:$VM3,219:646,220:$VN3},o($VD3,$VU3),{121:[1,3664]},{19:[1,3667],21:[1,3670],22:3666,87:3665,219:3668,220:[1,3669]},o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$VK7,21:$VL7,22:3672,87:3671,219:2772,220:$VM7},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$VN7,21:$VO7,22:3674,87:3673,219:2798,220:$VP7},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$VQ7,21:$VR7,22:3676,87:3675,219:2825,220:$VS7},o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$VT7,21:$VU7,22:3678,87:3677,219:2852,220:$VV7},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$VW7,21:$VX7,22:3680,87:3679,219:2878,220:$VY7},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$VZ7,21:$V_7,22:3682,87:3681,219:2905,220:$V$7},o($Vn4,$V29),o($Vi7,$VI3),o($Vn4,$VJ3,{31:3683,198:[1,3684]}),{19:$VK3,21:$VL3,22:643,129:3685,204:$VM3,219:646,220:$VN3},o($Vi7,$V39),o($Vi7,$VJ6),o($V49,$VL6,{56:3686}),o($V59,$VN6,{60:3687}),o($VI,$VJ,{63:3688,73:3689,75:3690,76:3691,92:3694,94:3695,87:3697,88:3698,89:3699,78:3700,44:3701,95:3705,22:3706,91:3708,118:3709,99:3713,219:3716,105:3717,107:3718,19:[1,3715],21:[1,3720],69:[1,3692],71:[1,3693],79:[1,3710],80:[1,3711],81:[1,3712],85:[1,3696],96:[1,3702],97:[1,3703],98:[1,3704],101:$V69,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,3707],220:[1,3719]}),o($V46,[2,177]),o($VK6,$Vr7,{61:3721,53:[1,3722]}),o($VM6,$Vs7),o($VM6,$Vt7,{74:3723,76:3724,78:3725,44:3726,118:3727,79:[1,3728],80:[1,3729],81:[1,3730],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:3731,73:3732,92:3733,94:3734,95:3738,99:3739,96:[1,3735],97:[1,3736],98:[1,3737],101:$V79,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3741,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:3742}),o($Vz7,$Vz1,{99:3371,95:3743,101:$VH8,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:3744}),o($VA7,$VB1,{86:3745}),o($VA7,$VB1,{86:3746}),o($VM6,$VC1,{105:3375,107:3376,91:3747,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:3748}),o($VE7,$VO1),{119:[1,3749],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,3753],21:[1,3757],22:3751,33:3750,205:3752,219:3754,220:[1,3756],221:[1,3755]},{100:[1,3758]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,3760],106:3759,108:[1,3761],109:[1,3762],110:3763,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3764]},o($VA7,$Vp),o($VA7,$Vq),o($VM6,$Vs7),o($VM6,$Vt7,{74:3765,76:3766,78:3767,44:3768,118:3769,79:[1,3770],80:[1,3771],81:[1,3772],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:3773,73:3774,92:3775,94:3776,95:3780,99:3781,96:[1,3777],97:[1,3778],98:[1,3779],101:$V89,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3783,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:3784}),o($Vz7,$Vz1,{99:3404,95:3785,101:$VJ8,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:3786}),o($VA7,$VB1,{86:3787}),o($VA7,$VB1,{86:3788}),o($VM6,$VC1,{105:3408,107:3409,91:3789,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:3790}),o($VE7,$VO1),{119:[1,3791],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,3795],21:[1,3799],22:3793,33:3792,205:3794,219:3796,220:[1,3798],221:[1,3797]},{100:[1,3800]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,3802],106:3801,108:[1,3803],109:[1,3804],110:3805,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3806]},o($VA7,$Vp),o($VA7,$Vq),{121:[1,3807]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,3808]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),o($Vn4,$V99),o($VL8,$Vs1,{82:3809}),o($V46,$V08,{156:3810,157:$V18}),o($Vg8,$V28),o($Vr,$Vs,{55:3811,59:3812,40:3813,43:$Vt}),o($Vh8,$V38),o($Vr,$Vs,{59:3814,40:3815,43:$Vt}),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,3816],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,3820],21:[1,3824],22:3818,33:3817,205:3819,219:3821,220:[1,3823],221:[1,3822]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:3825}),o($Vh8,$Vz1,{99:3451,95:3826,101:$VN8,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,3827]},o($Va9,$VT1),{70:[1,3828]},o($VP8,$Vs2,{99:2992,95:3829,101:$Vi8,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:3830,95:3831,91:3832,99:3833,105:3835,107:3836,101:$Vb9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:3830,95:3831,91:3832,99:3833,105:3835,107:3836,101:$Vb9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:3830,95:3831,91:3832,99:3833,105:3835,107:3836,101:$Vb9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,3837],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3838,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,3839]},o($VS8,$Va3),o($VL8,$Vs1,{82:3840}),o($Vq2,$Vp2,{84:3498,197:3499,83:3841,195:$VT8}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3842,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:3498,197:3499,83:3843,195:$VT8}),o($Vt1,$Vs2,{99:3021,95:3844,101:$Vj8,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:3845,198:[1,3846]}),{19:$VK3,21:$VL3,22:643,129:3847,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:3848,198:[1,3849]}),{19:$VK3,21:$VL3,22:643,129:3850,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,3851]},o($VA1,$VT1),{100:[1,3853],106:3852,108:[1,3854],109:[1,3855],110:3856,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3857]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:3858,198:[1,3859]}),{19:$VK3,21:$VL3,22:643,129:3860,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,3861]},{19:[1,3864],21:[1,3867],22:3863,87:3862,219:3865,220:[1,3866]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$Vk8,21:$Vl8,22:3869,87:3868,219:3056,220:$Vm8},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$Vn8,21:$Vo8,22:3871,87:3870,219:3082,220:$Vp8},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vq8,21:$Vr8,22:3873,87:3872,219:3109,220:$Vs8},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$Vt8,21:$Vu8,22:3875,87:3874,219:3136,220:$Vv8},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$Vw8,21:$Vx8,22:3877,87:3876,219:3162,220:$Vy8},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vz8,21:$VA8,22:3879,87:3878,219:3189,220:$VB8},o($Vt1,$Vk5),{198:[1,3882],199:3880,200:[1,3881]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:3883,208:3884,111:[1,3885]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,3888],199:3886,200:[1,3887]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:3889,208:3890,111:[1,3891]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,3894],21:[1,3897],22:3893,87:3892,219:3895,220:[1,3896]},{198:[1,3900],199:3898,200:[1,3899]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:3901,208:3902,111:[1,3903]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vx3,$VT3),{121:[1,3904]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:3905,219:45,220:$Vk},{19:$Vc9,21:$Vd9,22:3907,100:[1,3918],108:[1,3919],109:[1,3920],110:3917,186:3908,196:3906,201:3911,202:3912,203:3913,206:3916,209:[1,3921],210:[1,3922],211:[1,3927],212:[1,3928],213:[1,3929],214:[1,3930],215:[1,3923],216:[1,3924],217:[1,3925],218:[1,3926],219:3910,220:$Ve9},o($VI4,$VO4),{19:$Vi,21:$Vj,22:3931,219:45,220:$Vk},{19:$Vf9,21:$Vg9,22:3933,100:[1,3944],108:[1,3945],109:[1,3946],110:3943,186:3934,196:3932,201:3937,202:3938,203:3939,206:3942,209:[1,3947],210:[1,3948],211:[1,3953],212:[1,3954],213:[1,3955],214:[1,3956],215:[1,3949],216:[1,3950],217:[1,3951],218:[1,3952],219:3936,220:$Vh9},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,3957]},o($VD3,$Va3),o($VK4,$VO4),{19:$Vi,21:$Vj,22:3958,219:45,220:$Vk},{19:$Vi9,21:$Vj9,22:3960,100:[1,3971],108:[1,3972],109:[1,3973],110:3970,186:3961,196:3959,201:3964,202:3965,203:3966,206:3969,209:[1,3974],210:[1,3975],211:[1,3980],212:[1,3981],213:[1,3982],214:[1,3983],215:[1,3976],216:[1,3977],217:[1,3978],218:[1,3979],219:3963,220:$Vk9},o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($VE8,$VO4),{19:$Vi,21:$Vj,22:3984,219:45,220:$Vk},{19:$Vl9,21:$Vm9,22:3986,100:[1,3997],108:[1,3998],109:[1,3999],110:3996,186:3987,196:3985,201:3990,202:3991,203:3992,206:3995,209:[1,4000],210:[1,4001],211:[1,4006],212:[1,4007],213:[1,4008],214:[1,4009],215:[1,4002],216:[1,4003],217:[1,4004],218:[1,4005],219:3989,220:$Vn9},o($Vi7,$Vq7,{57:4010,51:[1,4011]}),o($V49,$Vr7,{61:4012,53:[1,4013]}),o($V59,$Vs7),o($V59,$Vt7,{74:4014,76:4015,78:4016,44:4017,118:4018,79:[1,4019],80:[1,4020],81:[1,4021],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:4022,73:4023,92:4024,94:4025,95:4029,99:4030,96:[1,4026],97:[1,4027],98:[1,4028],101:$Vo9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4032,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:4033}),o($Vq9,$Vz1,{99:3713,95:4034,101:$V69,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:4035}),o($Vr9,$VB1,{86:4036}),o($Vr9,$VB1,{86:4037}),o($V59,$VC1,{105:3717,107:3718,91:4038,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:4039}),o($Vt9,$VO1),{119:[1,4040],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,4044],21:[1,4048],22:4042,33:4041,205:4043,219:4045,220:[1,4047],221:[1,4046]},{100:[1,4049]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,4051],106:4050,108:[1,4052],109:[1,4053],110:4054,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4055]},o($Vr9,$Vp),o($Vr9,$Vq),o($VM6,$V38),o($Vr,$Vs,{59:4056,40:4057,43:$Vt}),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,4058],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,4062],21:[1,4066],22:4060,33:4059,205:4061,219:4063,220:[1,4065],221:[1,4064]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:4067}),o($VM6,$Vz1,{99:3739,95:4068,101:$V79,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,4069]},o($V88,$VT1),{70:[1,4070]},o($Vz7,$Vs2,{99:3371,95:4071,101:$VH8,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:4072,95:4073,91:4074,99:4075,105:4077,107:4078,101:$Vu9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:4072,95:4073,91:4074,99:4075,105:4077,107:4078,101:$Vu9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:4072,95:4073,91:4074,99:4075,105:4077,107:4078,101:$Vu9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4079],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4080,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,4081]},o($VE7,$Va3),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,4082],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,4086],21:[1,4090],22:4084,33:4083,205:4085,219:4087,220:[1,4089],221:[1,4088]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:4091}),o($VM6,$Vz1,{99:3781,95:4092,101:$V89,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,4093]},o($V88,$VT1),{70:[1,4094]},o($Vz7,$Vs2,{99:3404,95:4095,101:$VJ8,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:4096,95:4097,91:4098,99:4099,105:4101,107:4102,101:$Vv9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:4096,95:4097,91:4098,99:4099,105:4101,107:4102,101:$Vv9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:4096,95:4097,91:4098,99:4099,105:4101,107:4102,101:$Vv9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4103],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4104,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,4105]},o($VE7,$Va3),o($VM6,$Vk5),{19:[1,4108],21:[1,4111],22:4107,87:4106,219:4109,220:[1,4110]},o($Vw9,$Vp2,{83:4112,84:4113,197:4114,195:$Vx9}),o($Vr,$Vs,{46:4116,47:4117,55:4118,59:4119,40:4120,43:$Vt}),o($Vg8,$VG8),o($Vh8,$VN6,{60:4121}),o($VI,$VJ,{63:4122,73:4123,75:4124,76:4125,92:4128,94:4129,87:4131,88:4132,89:4133,78:4134,44:4135,95:4139,22:4140,91:4142,118:4143,99:4147,219:4150,105:4151,107:4152,19:[1,4149],21:[1,4154],69:[1,4126],71:[1,4127],79:[1,4144],80:[1,4145],81:[1,4146],85:[1,4130],96:[1,4136],97:[1,4137],98:[1,4138],101:$Vy9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4141],220:[1,4153]}),o($Vh8,$VI8),o($VI,$VJ,{63:4155,73:4156,75:4157,76:4158,92:4161,94:4162,87:4164,88:4165,89:4166,78:4167,44:4168,95:4172,22:4173,91:4175,118:4176,99:4180,219:4183,105:4184,107:4185,19:[1,4182],21:[1,4187],69:[1,4159],71:[1,4160],79:[1,4177],80:[1,4178],81:[1,4179],85:[1,4163],96:[1,4169],97:[1,4170],98:[1,4171],101:$Vz9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4174],220:[1,4186]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4188,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:3451,95:4189,101:$VN8,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,4190]},o($VQ8,$VT1),{100:[1,4192],106:4191,108:[1,4193],109:[1,4194],110:4195,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4196]},o($VQ8,$VU3),{121:[1,4197]},{19:[1,4200],21:[1,4203],22:4199,87:4198,219:4201,220:[1,4202]},o($Vw9,$Vp2,{84:4113,197:4114,83:4204,195:$Vx9}),o($VG,$VT3),{121:[1,4205]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:4206,219:45,220:$Vk},{19:$VA9,21:$VB9,22:4208,100:[1,4219],108:[1,4220],109:[1,4221],110:4218,186:4209,196:4207,201:4212,202:4213,203:4214,206:4217,209:[1,4222],210:[1,4223],211:[1,4228],212:[1,4229],213:[1,4230],214:[1,4231],215:[1,4224],216:[1,4225],217:[1,4226],218:[1,4227],219:4211,220:$VC9},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:4232,219:45,220:$Vk},{19:$VD9,21:$VE9,22:4234,100:[1,4245],108:[1,4246],109:[1,4247],110:4244,186:4235,196:4233,201:4238,202:4239,203:4240,206:4243,209:[1,4248],210:[1,4249],211:[1,4254],212:[1,4255],213:[1,4256],214:[1,4257],215:[1,4250],216:[1,4251],217:[1,4252],218:[1,4253],219:4237,220:$VF9},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,4258]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:4259,219:45,220:$Vk},{19:$VG9,21:$VH9,22:4261,100:[1,4272],108:[1,4273],109:[1,4274],110:4271,186:4262,196:4260,201:4265,202:4266,203:4267,206:4270,209:[1,4275],210:[1,4276],211:[1,4281],212:[1,4282],213:[1,4283],214:[1,4284],215:[1,4277],216:[1,4278],217:[1,4279],218:[1,4280],219:4264,220:$VI9},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VV8,21:$VW8,22:4286,87:4285,219:3570,220:$VX8},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$VY8,21:$VZ8,22:4288,87:4287,219:3596,220:$V_8},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$V$8,21:$V09,22:4290,87:4289,219:3623,220:$V19},o($VA3,$Vk5),{198:[1,4293],199:4291,200:[1,4292]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:4294,208:4295,111:[1,4296]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,4299],199:4297,200:[1,4298]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:4300,208:4301,111:[1,4302]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{19:[1,4305],21:[1,4308],22:4304,87:4303,219:4306,220:[1,4307]},{198:[1,4311],199:4309,200:[1,4310]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:4312,208:4313,111:[1,4314]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),{198:[1,4317],199:4315,200:[1,4316]},o($Vi7,$VP5),o($Vi7,$VQ5),o($Vi7,$VR5),o($Vi7,$Vn),o($Vi7,$Vo),o($Vi7,$VX3),o($Vi7,$VY3),o($Vi7,$VZ3),o($Vi7,$Vp),o($Vi7,$Vq),o($Vi7,$V_3),o($Vi7,$V$3,{207:4318,208:4319,111:[1,4320]}),o($Vi7,$V04),o($Vi7,$V14),o($Vi7,$V24),o($Vi7,$V34),o($Vi7,$V44),o($Vi7,$V54),o($Vi7,$V64),o($Vi7,$V74),o($Vi7,$V84),o($VJ9,$V63),o($VJ9,$V73),o($VJ9,$V83),o($VJ9,$V93),o($V49,$V28),o($Vr,$Vs,{55:4321,59:4322,40:4323,43:$Vt}),o($V59,$V38),o($Vr,$Vs,{59:4324,40:4325,43:$Vt}),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,4326],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,4330],21:[1,4334],22:4328,33:4327,205:4329,219:4331,220:[1,4333],221:[1,4332]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:4335}),o($V59,$Vz1,{99:4030,95:4336,101:$Vo9,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,4337]},o($VK9,$VT1),{70:[1,4338]},o($Vq9,$Vs2,{99:3713,95:4339,101:$V69,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:4340,95:4341,91:4342,99:4343,105:4345,107:4346,101:$VL9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:4340,95:4341,91:4342,99:4343,105:4345,107:4346,101:$VL9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:4340,95:4341,91:4342,99:4343,105:4345,107:4346,101:$VL9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4347],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4348,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,4349]},o($Vt9,$Va3),o($VM6,$VI8),o($VI,$VJ,{63:4350,73:4351,75:4352,76:4353,92:4356,94:4357,87:4359,88:4360,89:4361,78:4362,44:4363,95:4367,22:4368,91:4370,118:4371,99:4375,219:4378,105:4379,107:4380,19:[1,4377],21:[1,4382],69:[1,4354],71:[1,4355],79:[1,4372],80:[1,4373],81:[1,4374],85:[1,4358],96:[1,4364],97:[1,4365],98:[1,4366],101:$VM9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4369],220:[1,4381]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4383,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:3739,95:4384,101:$V79,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,4385]},o($VA7,$VT1),{100:[1,4387],106:4386,108:[1,4388],109:[1,4389],110:4390,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4391]},o($VA7,$VU3),{121:[1,4392]},{19:[1,4395],21:[1,4398],22:4394,87:4393,219:4396,220:[1,4397]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4399,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:3781,95:4400,101:$V89,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,4401]},o($VA7,$VT1),{100:[1,4403],106:4402,108:[1,4404],109:[1,4405],110:4406,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4407]},o($VA7,$VU3),{121:[1,4408]},{19:[1,4411],21:[1,4414],22:4410,87:4409,219:4412,220:[1,4413]},o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($V96,$V29),o($VL8,$VI3),o($V96,$VJ3,{31:4415,198:[1,4416]}),{19:$VK3,21:$VL3,22:643,129:4417,204:$VM3,219:646,220:$VN3},o($VL8,$V39),o($VL8,$VJ6),o($VN9,$VL6,{56:4418}),o($VO9,$VN6,{60:4419}),o($VI,$VJ,{63:4420,73:4421,75:4422,76:4423,92:4426,94:4427,87:4429,88:4430,89:4431,78:4432,44:4433,95:4437,22:4438,91:4440,118:4441,99:4445,219:4448,105:4449,107:4450,19:[1,4447],21:[1,4452],69:[1,4424],71:[1,4425],79:[1,4442],80:[1,4443],81:[1,4444],85:[1,4428],96:[1,4434],97:[1,4435],98:[1,4436],101:$VP9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4439],220:[1,4451]}),o($Vg8,$Vr7,{61:4453,53:[1,4454]}),o($Vh8,$Vs7),o($Vh8,$Vt7,{74:4455,76:4456,78:4457,44:4458,118:4459,79:[1,4460],80:[1,4461],81:[1,4462],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:4463,73:4464,92:4465,94:4466,95:4470,99:4471,96:[1,4467],97:[1,4468],98:[1,4469],101:$VQ9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4473,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:4474}),o($VP8,$Vz1,{99:4147,95:4475,101:$Vy9,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:4476}),o($VQ8,$VB1,{86:4477}),o($VQ8,$VB1,{86:4478}),o($Vh8,$VC1,{105:4151,107:4152,91:4479,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:4480}),o($VS8,$VO1),{119:[1,4481],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,4485],21:[1,4489],22:4483,33:4482,205:4484,219:4486,220:[1,4488],221:[1,4487]},{100:[1,4490]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,4492],106:4491,108:[1,4493],109:[1,4494],110:4495,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4496]},o($VQ8,$Vp),o($VQ8,$Vq),o($Vh8,$Vs7),o($Vh8,$Vt7,{74:4497,76:4498,78:4499,44:4500,118:4501,79:[1,4502],80:[1,4503],81:[1,4504],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:4505,73:4506,92:4507,94:4508,95:4512,99:4513,96:[1,4509],97:[1,4510],98:[1,4511],101:$VR9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4515,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:4516}),o($VP8,$Vz1,{99:4180,95:4517,101:$Vz9,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:4518}),o($VQ8,$VB1,{86:4519}),o($VQ8,$VB1,{86:4520}),o($Vh8,$VC1,{105:4184,107:4185,91:4521,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:4522}),o($VS8,$VO1),{119:[1,4523],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,4527],21:[1,4531],22:4525,33:4524,205:4526,219:4528,220:[1,4530],221:[1,4529]},{100:[1,4532]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,4534],106:4533,108:[1,4535],109:[1,4536],110:4537,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4538]},o($VQ8,$Vp),o($VQ8,$Vq),{121:[1,4539]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,4540]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),o($V96,$V99),o($Vt1,$Vk5),{198:[1,4543],199:4541,200:[1,4542]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:4544,208:4545,111:[1,4546]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,4549],199:4547,200:[1,4548]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:4550,208:4551,111:[1,4552]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,4555],21:[1,4558],22:4554,87:4553,219:4556,220:[1,4557]},{198:[1,4561],199:4559,200:[1,4560]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:4562,208:4563,111:[1,4564]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$Vc9,21:$Vd9,22:4566,87:4565,219:3910,220:$Ve9},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$Vf9,21:$Vg9,22:4568,87:4567,219:3936,220:$Vh9},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$Vi9,21:$Vj9,22:4570,87:4569,219:3963,220:$Vk9},o($VE8,$V71),o($VE8,$V81),o($VE8,$V91),o($Vi7,$Vi5),o($Vi7,$Vj5),{19:$Vl9,21:$Vm9,22:4572,87:4571,219:3989,220:$Vn9},o($V49,$VG8),o($V59,$VN6,{60:4573}),o($VI,$VJ,{63:4574,73:4575,75:4576,76:4577,92:4580,94:4581,87:4583,88:4584,89:4585,78:4586,44:4587,95:4591,22:4592,91:4594,118:4595,99:4599,219:4602,105:4603,107:4604,19:[1,4601],21:[1,4606],69:[1,4578],71:[1,4579],79:[1,4596],80:[1,4597],81:[1,4598],85:[1,4582],96:[1,4588],97:[1,4589],98:[1,4590],101:$VS9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4593],220:[1,4605]}),o($V59,$VI8),o($VI,$VJ,{63:4607,73:4608,75:4609,76:4610,92:4613,94:4614,87:4616,88:4617,89:4618,78:4619,44:4620,95:4624,22:4625,91:4627,118:4628,99:4632,219:4635,105:4636,107:4637,19:[1,4634],21:[1,4639],69:[1,4611],71:[1,4612],79:[1,4629],80:[1,4630],81:[1,4631],85:[1,4615],96:[1,4621],97:[1,4622],98:[1,4623],101:$VT9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4626],220:[1,4638]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4640,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:4030,95:4641,101:$Vo9,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,4642]},o($Vr9,$VT1),{100:[1,4644],106:4643,108:[1,4645],109:[1,4646],110:4647,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4648]},o($Vr9,$VU3),{121:[1,4649]},{19:[1,4652],21:[1,4655],22:4651,87:4650,219:4653,220:[1,4654]},o($VM6,$Vs7),o($VM6,$Vt7,{74:4656,76:4657,78:4658,44:4659,118:4660,79:[1,4661],80:[1,4662],81:[1,4663],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:4664,73:4665,92:4666,94:4667,95:4671,99:4672,96:[1,4668],97:[1,4669],98:[1,4670],101:$VU9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4674,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:4675}),o($Vz7,$Vz1,{99:4375,95:4676,101:$VM9,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:4677}),o($VA7,$VB1,{86:4678}),o($VA7,$VB1,{86:4679}),o($VM6,$VC1,{105:4379,107:4380,91:4680,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:4681}),o($VE7,$VO1),{119:[1,4682],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,4686],21:[1,4690],22:4684,33:4683,205:4685,219:4687,220:[1,4689],221:[1,4688]},{100:[1,4691]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,4693],106:4692,108:[1,4694],109:[1,4695],110:4696,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4697]},o($VA7,$Vp),o($VA7,$Vq),{121:[1,4698]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,4699]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),{121:[1,4700]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,4701]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),o($Vw9,$VO4),{19:$Vi,21:$Vj,22:4702,219:45,220:$Vk},{19:$VV9,21:$VW9,22:4704,100:[1,4715],108:[1,4716],109:[1,4717],110:4714,186:4705,196:4703,201:4708,202:4709,203:4710,206:4713,209:[1,4718],210:[1,4719],211:[1,4724],212:[1,4725],213:[1,4726],214:[1,4727],215:[1,4720],216:[1,4721],217:[1,4722],218:[1,4723],219:4707,220:$VX9},o($VL8,$Vq7,{57:4728,51:[1,4729]}),o($VN9,$Vr7,{61:4730,53:[1,4731]}),o($VO9,$Vs7),o($VO9,$Vt7,{74:4732,76:4733,78:4734,44:4735,118:4736,79:[1,4737],80:[1,4738],81:[1,4739],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:4740,73:4741,92:4742,94:4743,95:4747,99:4748,96:[1,4744],97:[1,4745],98:[1,4746],101:$VY9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4750,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:4751}),o($V_9,$Vz1,{99:4445,95:4752,101:$VP9,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:4753}),o($V$9,$VB1,{86:4754}),o($V$9,$VB1,{86:4755}),o($VO9,$VC1,{105:4449,107:4450,91:4756,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:4757}),o($V1a,$VO1),{119:[1,4758],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,4762],21:[1,4766],22:4760,33:4759,205:4761,219:4763,220:[1,4765],221:[1,4764]},{100:[1,4767]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,4769],106:4768,108:[1,4770],109:[1,4771],110:4772,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4773]},o($V$9,$Vp),o($V$9,$Vq),o($Vh8,$V38),o($Vr,$Vs,{59:4774,40:4775,43:$Vt}),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,4776],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,4780],21:[1,4784],22:4778,33:4777,205:4779,219:4781,220:[1,4783],221:[1,4782]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:4785}),o($Vh8,$Vz1,{99:4471,95:4786,101:$VQ9,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,4787]},o($Va9,$VT1),{70:[1,4788]},o($VP8,$Vs2,{99:4147,95:4789,101:$Vy9,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:4790,95:4791,91:4792,99:4793,105:4795,107:4796,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:4790,95:4791,91:4792,99:4793,105:4795,107:4796,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:4790,95:4791,91:4792,99:4793,105:4795,107:4796,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4797],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4798,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,4799]},o($VS8,$Va3),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,4800],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,4804],21:[1,4808],22:4802,33:4801,205:4803,219:4805,220:[1,4807],221:[1,4806]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:4809}),o($Vh8,$Vz1,{99:4513,95:4810,101:$VR9,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,4811]},o($Va9,$VT1),{70:[1,4812]},o($VP8,$Vs2,{99:4180,95:4813,101:$Vz9,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:4814,95:4815,91:4816,99:4817,105:4819,107:4820,101:$V3a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:4814,95:4815,91:4816,99:4817,105:4819,107:4820,101:$V3a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:4814,95:4815,91:4816,99:4817,105:4819,107:4820,101:$V3a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4821],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4822,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,4823]},o($VS8,$Va3),o($Vh8,$Vk5),{19:[1,4826],21:[1,4829],22:4825,87:4824,219:4827,220:[1,4828]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VA9,21:$VB9,22:4831,87:4830,219:4211,220:$VC9},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$VD9,21:$VE9,22:4833,87:4832,219:4237,220:$VF9},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$VG9,21:$VH9,22:4835,87:4834,219:4264,220:$VI9},o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($Vi7,$VZ5),o($Vi7,$VK1),o($V49,$Vr7,{61:4836,53:[1,4837]}),o($V59,$Vs7),o($V59,$Vt7,{74:4838,76:4839,78:4840,44:4841,118:4842,79:[1,4843],80:[1,4844],81:[1,4845],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:4846,73:4847,92:4848,94:4849,95:4853,99:4854,96:[1,4850],97:[1,4851],98:[1,4852],101:$V4a,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4856,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:4857}),o($Vq9,$Vz1,{99:4599,95:4858,101:$VS9,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:4859}),o($Vr9,$VB1,{86:4860}),o($Vr9,$VB1,{86:4861}),o($V59,$VC1,{105:4603,107:4604,91:4862,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:4863}),o($Vt9,$VO1),{119:[1,4864],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,4868],21:[1,4872],22:4866,33:4865,205:4867,219:4869,220:[1,4871],221:[1,4870]},{100:[1,4873]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,4875],106:4874,108:[1,4876],109:[1,4877],110:4878,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4879]},o($Vr9,$Vp),o($Vr9,$Vq),o($V59,$Vs7),o($V59,$Vt7,{74:4880,76:4881,78:4882,44:4883,118:4884,79:[1,4885],80:[1,4886],81:[1,4887],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:4888,73:4889,92:4890,94:4891,95:4895,99:4896,96:[1,4892],97:[1,4893],98:[1,4894],101:$V5a,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4898,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:4899}),o($Vq9,$Vz1,{99:4632,95:4900,101:$VT9,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:4901}),o($Vr9,$VB1,{86:4902}),o($Vr9,$VB1,{86:4903}),o($V59,$VC1,{105:4636,107:4637,91:4904,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:4905}),o($Vt9,$VO1),{119:[1,4906],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,4910],21:[1,4914],22:4908,33:4907,205:4909,219:4911,220:[1,4913],221:[1,4912]},{100:[1,4915]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,4917],106:4916,108:[1,4918],109:[1,4919],110:4920,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4921]},o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,4922]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,4923]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,4924],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,4928],21:[1,4932],22:4926,33:4925,205:4927,219:4929,220:[1,4931],221:[1,4930]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:4933}),o($VM6,$Vz1,{99:4672,95:4934,101:$VU9,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,4935]},o($V88,$VT1),{70:[1,4936]},o($Vz7,$Vs2,{99:4375,95:4937,101:$VM9,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:4938,95:4939,91:4940,99:4941,105:4943,107:4944,101:$V6a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:4938,95:4939,91:4940,99:4941,105:4943,107:4944,101:$V6a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:4938,95:4939,91:4940,99:4941,105:4943,107:4944,101:$V6a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4945],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4946,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,4947]},o($VE7,$Va3),o($VM6,$Vk5),{19:[1,4950],21:[1,4953],22:4949,87:4948,219:4951,220:[1,4952]},o($VM6,$Vk5),{19:[1,4956],21:[1,4959],22:4955,87:4954,219:4957,220:[1,4958]},{198:[1,4962],199:4960,200:[1,4961]},o($VL8,$VP5),o($VL8,$VQ5),o($VL8,$VR5),o($VL8,$Vn),o($VL8,$Vo),o($VL8,$VX3),o($VL8,$VY3),o($VL8,$VZ3),o($VL8,$Vp),o($VL8,$Vq),o($VL8,$V_3),o($VL8,$V$3,{207:4963,208:4964,111:[1,4965]}),o($VL8,$V04),o($VL8,$V14),o($VL8,$V24),o($VL8,$V34),o($VL8,$V44),o($VL8,$V54),o($VL8,$V64),o($VL8,$V74),o($VL8,$V84),o($V7a,$V63),o($V7a,$V73),o($V7a,$V83),o($V7a,$V93),o($VN9,$V28),o($Vr,$Vs,{55:4966,59:4967,40:4968,43:$Vt}),o($VO9,$V38),o($Vr,$Vs,{59:4969,40:4970,43:$Vt}),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,4971],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,4975],21:[1,4979],22:4973,33:4972,205:4974,219:4976,220:[1,4978],221:[1,4977]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:4980}),o($VO9,$Vz1,{99:4748,95:4981,101:$VY9,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,4982]},o($V8a,$VT1),{70:[1,4983]},o($V_9,$Vs2,{99:4445,95:4984,101:$VP9,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:4985,95:4986,91:4987,99:4988,105:4990,107:4991,101:$V9a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:4985,95:4986,91:4987,99:4988,105:4990,107:4991,101:$V9a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:4985,95:4986,91:4987,99:4988,105:4990,107:4991,101:$V9a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4992],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4993,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,4994]},o($V1a,$Va3),o($Vh8,$VI8),o($VI,$VJ,{63:4995,73:4996,75:4997,76:4998,92:5001,94:5002,87:5004,88:5005,89:5006,78:5007,44:5008,95:5012,22:5013,91:5015,118:5016,99:5020,219:5023,105:5024,107:5025,19:[1,5022],21:[1,5027],69:[1,4999],71:[1,5000],79:[1,5017],80:[1,5018],81:[1,5019],85:[1,5003],96:[1,5009],97:[1,5010],98:[1,5011],101:$Vaa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5014],220:[1,5026]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5028,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:4471,95:5029,101:$VQ9,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,5030]},o($VQ8,$VT1),{100:[1,5032],106:5031,108:[1,5033],109:[1,5034],110:5035,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5036]},o($VQ8,$VU3),{121:[1,5037]},{19:[1,5040],21:[1,5043],22:5039,87:5038,219:5041,220:[1,5042]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5044,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:4513,95:5045,101:$VR9,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,5046]},o($VQ8,$VT1),{100:[1,5048],106:5047,108:[1,5049],109:[1,5050],110:5051,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5052]},o($VQ8,$VU3),{121:[1,5053]},{19:[1,5056],21:[1,5059],22:5055,87:5054,219:5057,220:[1,5058]},o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($V59,$V38),o($Vr,$Vs,{59:5060,40:5061,43:$Vt}),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,5062],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,5066],21:[1,5070],22:5064,33:5063,205:5065,219:5067,220:[1,5069],221:[1,5068]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:5071}),o($V59,$Vz1,{99:4854,95:5072,101:$V4a,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,5073]},o($VK9,$VT1),{70:[1,5074]},o($Vq9,$Vs2,{99:4599,95:5075,101:$VS9,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:5076,95:5077,91:5078,99:5079,105:5081,107:5082,101:$Vba,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:5076,95:5077,91:5078,99:5079,105:5081,107:5082,101:$Vba,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:5076,95:5077,91:5078,99:5079,105:5081,107:5082,101:$Vba,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5083],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5084,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,5085]},o($Vt9,$Va3),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,5086],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,5090],21:[1,5094],22:5088,33:5087,205:5089,219:5091,220:[1,5093],221:[1,5092]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:5095}),o($V59,$Vz1,{99:4896,95:5096,101:$V5a,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,5097]},o($VK9,$VT1),{70:[1,5098]},o($Vq9,$Vs2,{99:4632,95:5099,101:$VT9,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:5100,95:5101,91:5102,99:5103,105:5105,107:5106,101:$Vca,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:5100,95:5101,91:5102,99:5103,105:5105,107:5106,101:$Vca,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:5100,95:5101,91:5102,99:5103,105:5105,107:5106,101:$Vca,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5107],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5108,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,5109]},o($Vt9,$Va3),o($V59,$Vk5),{19:[1,5112],21:[1,5115],22:5111,87:5110,219:5113,220:[1,5114]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5116,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:4672,95:5117,101:$VU9,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,5118]},o($VA7,$VT1),{100:[1,5120],106:5119,108:[1,5121],109:[1,5122],110:5123,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5124]},o($VA7,$VU3),{121:[1,5125]},{19:[1,5128],21:[1,5131],22:5127,87:5126,219:5129,220:[1,5130]},o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($Vw9,$V71),o($Vw9,$V81),o($Vw9,$V91),o($VL8,$Vi5),o($VL8,$Vj5),{19:$VV9,21:$VW9,22:5133,87:5132,219:4707,220:$VX9},o($VN9,$VG8),o($VO9,$VN6,{60:5134}),o($VI,$VJ,{63:5135,73:5136,75:5137,76:5138,92:5141,94:5142,87:5144,88:5145,89:5146,78:5147,44:5148,95:5152,22:5153,91:5155,118:5156,99:5160,219:5163,105:5164,107:5165,19:[1,5162],21:[1,5167],69:[1,5139],71:[1,5140],79:[1,5157],80:[1,5158],81:[1,5159],85:[1,5143],96:[1,5149],97:[1,5150],98:[1,5151],101:$Vda,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5154],220:[1,5166]}),o($VO9,$VI8),o($VI,$VJ,{63:5168,73:5169,75:5170,76:5171,92:5174,94:5175,87:5177,88:5178,89:5179,78:5180,44:5181,95:5185,22:5186,91:5188,118:5189,99:5193,219:5196,105:5197,107:5198,19:[1,5195],21:[1,5200],69:[1,5172],71:[1,5173],79:[1,5190],80:[1,5191],81:[1,5192],85:[1,5176],96:[1,5182],97:[1,5183],98:[1,5184],101:$Vea,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5187],220:[1,5199]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5201,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:4748,95:5202,101:$VY9,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5203]},o($V$9,$VT1),{100:[1,5205],106:5204,108:[1,5206],109:[1,5207],110:5208,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5209]},o($V$9,$VU3),{121:[1,5210]},{19:[1,5213],21:[1,5216],22:5212,87:5211,219:5214,220:[1,5215]},o($Vh8,$Vs7),o($Vh8,$Vt7,{74:5217,76:5218,78:5219,44:5220,118:5221,79:[1,5222],80:[1,5223],81:[1,5224],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:5225,73:5226,92:5227,94:5228,95:5232,99:5233,96:[1,5229],97:[1,5230],98:[1,5231],101:$Vfa,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5235,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:5236}),o($VP8,$Vz1,{99:5020,95:5237,101:$Vaa,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:5238}),o($VQ8,$VB1,{86:5239}),o($VQ8,$VB1,{86:5240}),o($Vh8,$VC1,{105:5024,107:5025,91:5241,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:5242}),o($VS8,$VO1),{119:[1,5243],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,5247],21:[1,5251],22:5245,33:5244,205:5246,219:5248,220:[1,5250],221:[1,5249]},{100:[1,5252]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,5254],106:5253,108:[1,5255],109:[1,5256],110:5257,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5258]},o($VQ8,$Vp),o($VQ8,$Vq),{121:[1,5259]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,5260]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),{121:[1,5261]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,5262]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),o($V59,$VI8),o($VI,$VJ,{63:5263,73:5264,75:5265,76:5266,92:5269,94:5270,87:5272,88:5273,89:5274,78:5275,44:5276,95:5280,22:5281,91:5283,118:5284,99:5288,219:5291,105:5292,107:5293,19:[1,5290],21:[1,5295],69:[1,5267],71:[1,5268],79:[1,5285],80:[1,5286],81:[1,5287],85:[1,5271],96:[1,5277],97:[1,5278],98:[1,5279],101:$Vga,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5282],220:[1,5294]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5296,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:4854,95:5297,101:$V4a,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,5298]},o($Vr9,$VT1),{100:[1,5300],106:5299,108:[1,5301],109:[1,5302],110:5303,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5304]},o($Vr9,$VU3),{121:[1,5305]},{19:[1,5308],21:[1,5311],22:5307,87:5306,219:5309,220:[1,5310]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5312,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:4896,95:5313,101:$V5a,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,5314]},o($Vr9,$VT1),{100:[1,5316],106:5315,108:[1,5317],109:[1,5318],110:5319,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5320]},o($Vr9,$VU3),{121:[1,5321]},{19:[1,5324],21:[1,5327],22:5323,87:5322,219:5325,220:[1,5326]},o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,5328]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,5329]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),o($VL8,$VZ5),o($VL8,$VK1),o($VN9,$Vr7,{61:5330,53:[1,5331]}),o($VO9,$Vs7),o($VO9,$Vt7,{74:5332,76:5333,78:5334,44:5335,118:5336,79:[1,5337],80:[1,5338],81:[1,5339],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:5340,73:5341,92:5342,94:5343,95:5347,99:5348,96:[1,5344],97:[1,5345],98:[1,5346],101:$Vha,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5350,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:5351}),o($V_9,$Vz1,{99:5160,95:5352,101:$Vda,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:5353}),o($V$9,$VB1,{86:5354}),o($V$9,$VB1,{86:5355}),o($VO9,$VC1,{105:5164,107:5165,91:5356,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:5357}),o($V1a,$VO1),{119:[1,5358],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,5362],21:[1,5366],22:5360,33:5359,205:5361,219:5363,220:[1,5365],221:[1,5364]},{100:[1,5367]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,5369],106:5368,108:[1,5370],109:[1,5371],110:5372,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5373]},o($V$9,$Vp),o($V$9,$Vq),o($VO9,$Vs7),o($VO9,$Vt7,{74:5374,76:5375,78:5376,44:5377,118:5378,79:[1,5379],80:[1,5380],81:[1,5381],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:5382,73:5383,92:5384,94:5385,95:5389,99:5390,96:[1,5386],97:[1,5387],98:[1,5388],101:$Via,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5392,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:5393}),o($V_9,$Vz1,{99:5193,95:5394,101:$Vea,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:5395}),o($V$9,$VB1,{86:5396}),o($V$9,$VB1,{86:5397}),o($VO9,$VC1,{105:5197,107:5198,91:5398,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:5399}),o($V1a,$VO1),{119:[1,5400],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,5404],21:[1,5408],22:5402,33:5401,205:5403,219:5405,220:[1,5407],221:[1,5406]},{100:[1,5409]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,5411],106:5410,108:[1,5412],109:[1,5413],110:5414,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5415]},o($V$9,$Vp),o($V$9,$Vq),{121:[1,5416]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5417]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,5418],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,5422],21:[1,5426],22:5420,33:5419,205:5421,219:5423,220:[1,5425],221:[1,5424]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:5427}),o($Vh8,$Vz1,{99:5233,95:5428,101:$Vfa,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,5429]},o($Va9,$VT1),{70:[1,5430]},o($VP8,$Vs2,{99:5020,95:5431,101:$Vaa,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:5432,95:5433,91:5434,99:5435,105:5437,107:5438,101:$Vja,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:5432,95:5433,91:5434,99:5435,105:5437,107:5438,101:$Vja,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:5432,95:5433,91:5434,99:5435,105:5437,107:5438,101:$Vja,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5439],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5440,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,5441]},o($VS8,$Va3),o($Vh8,$Vk5),{19:[1,5444],21:[1,5447],22:5443,87:5442,219:5445,220:[1,5446]},o($Vh8,$Vk5),{19:[1,5450],21:[1,5453],22:5449,87:5448,219:5451,220:[1,5452]},o($V59,$Vs7),o($V59,$Vt7,{74:5454,76:5455,78:5456,44:5457,118:5458,79:[1,5459],80:[1,5460],81:[1,5461],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:5462,73:5463,92:5464,94:5465,95:5469,99:5470,96:[1,5466],97:[1,5467],98:[1,5468],101:$Vka,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5472,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:5473}),o($Vq9,$Vz1,{99:5288,95:5474,101:$Vga,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:5475}),o($Vr9,$VB1,{86:5476}),o($Vr9,$VB1,{86:5477}),o($V59,$VC1,{105:5292,107:5293,91:5478,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:5479}),o($Vt9,$VO1),{119:[1,5480],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,5484],21:[1,5488],22:5482,33:5481,205:5483,219:5485,220:[1,5487],221:[1,5486]},{100:[1,5489]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,5491],106:5490,108:[1,5492],109:[1,5493],110:5494,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5495]},o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,5496]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,5497]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),{121:[1,5498]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,5499]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),o($VM6,$Vk5),{19:[1,5502],21:[1,5505],22:5501,87:5500,219:5503,220:[1,5504]},o($VO9,$V38),o($Vr,$Vs,{59:5506,40:5507,43:$Vt}),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,5508],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,5512],21:[1,5516],22:5510,33:5509,205:5511,219:5513,220:[1,5515],221:[1,5514]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:5517}),o($VO9,$Vz1,{99:5348,95:5518,101:$Vha,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,5519]},o($V8a,$VT1),{70:[1,5520]},o($V_9,$Vs2,{99:5160,95:5521,101:$Vda,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:5522,95:5523,91:5524,99:5525,105:5527,107:5528,101:$Vla,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:5522,95:5523,91:5524,99:5525,105:5527,107:5528,101:$Vla,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:5522,95:5523,91:5524,99:5525,105:5527,107:5528,101:$Vla,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5529],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5530,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,5531]},o($V1a,$Va3),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,5532],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,5536],21:[1,5540],22:5534,33:5533,205:5535,219:5537,220:[1,5539],221:[1,5538]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:5541}),o($VO9,$Vz1,{99:5390,95:5542,101:$Via,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,5543]},o($V8a,$VT1),{70:[1,5544]},o($V_9,$Vs2,{99:5193,95:5545,101:$Vea,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:5546,95:5547,91:5548,99:5549,105:5551,107:5552,101:$Vma,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:5546,95:5547,91:5548,99:5549,105:5551,107:5552,101:$Vma,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:5546,95:5547,91:5548,99:5549,105:5551,107:5552,101:$Vma,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5553],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5554,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,5555]},o($V1a,$Va3),o($VO9,$Vk5),{19:[1,5558],21:[1,5561],22:5557,87:5556,219:5559,220:[1,5560]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5562,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:5233,95:5563,101:$Vfa,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,5564]},o($VQ8,$VT1),{100:[1,5566],106:5565,108:[1,5567],109:[1,5568],110:5569,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5570]},o($VQ8,$VU3),{121:[1,5571]},{19:[1,5574],21:[1,5577],22:5573,87:5572,219:5575,220:[1,5576]},o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,5578],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,5582],21:[1,5586],22:5580,33:5579,205:5581,219:5583,220:[1,5585],221:[1,5584]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:5587}),o($V59,$Vz1,{99:5470,95:5588,101:$Vka,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,5589]},o($VK9,$VT1),{70:[1,5590]},o($Vq9,$Vs2,{99:5288,95:5591,101:$Vga,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:5592,95:5593,91:5594,99:5595,105:5597,107:5598,101:$Vna,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:5592,95:5593,91:5594,99:5595,105:5597,107:5598,101:$Vna,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:5592,95:5593,91:5594,99:5595,105:5597,107:5598,101:$Vna,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5599],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5600,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,5601]},o($Vt9,$Va3),o($V59,$Vk5),{19:[1,5604],21:[1,5607],22:5603,87:5602,219:5605,220:[1,5606]},o($V59,$Vk5),{19:[1,5610],21:[1,5613],22:5609,87:5608,219:5611,220:[1,5612]},o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($VO9,$VI8),o($VI,$VJ,{63:5614,73:5615,75:5616,76:5617,92:5620,94:5621,87:5623,88:5624,89:5625,78:5626,44:5627,95:5631,22:5632,91:5634,118:5635,99:5639,219:5642,105:5643,107:5644,19:[1,5641],21:[1,5646],69:[1,5618],71:[1,5619],79:[1,5636],80:[1,5637],81:[1,5638],85:[1,5622],96:[1,5628],97:[1,5629],98:[1,5630],101:$Voa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5633],220:[1,5645]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5647,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:5348,95:5648,101:$Vha,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5649]},o($V$9,$VT1),{100:[1,5651],106:5650,108:[1,5652],109:[1,5653],110:5654,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5655]},o($V$9,$VU3),{121:[1,5656]},{19:[1,5659],21:[1,5662],22:5658,87:5657,219:5660,220:[1,5661]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5663,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:5390,95:5664,101:$Via,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5665]},o($V$9,$VT1),{100:[1,5667],106:5666,108:[1,5668],109:[1,5669],110:5670,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5671]},o($V$9,$VU3),{121:[1,5672]},{19:[1,5675],21:[1,5678],22:5674,87:5673,219:5676,220:[1,5677]},o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq),{121:[1,5679]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,5680]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5681,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:5470,95:5682,101:$Vka,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,5683]},o($Vr9,$VT1),{100:[1,5685],106:5684,108:[1,5686],109:[1,5687],110:5688,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5689]},o($Vr9,$VU3),{121:[1,5690]},{19:[1,5693],21:[1,5696],22:5692,87:5691,219:5694,220:[1,5695]},o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),o($VO9,$Vs7),o($VO9,$Vt7,{74:5697,76:5698,78:5699,44:5700,118:5701,79:[1,5702],80:[1,5703],81:[1,5704],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:5705,73:5706,92:5707,94:5708,95:5712,99:5713,96:[1,5709],97:[1,5710],98:[1,5711],101:$Vpa,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5715,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:5716}),o($V_9,$Vz1,{99:5639,95:5717,101:$Voa,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:5718}),o($V$9,$VB1,{86:5719}),o($V$9,$VB1,{86:5720}),o($VO9,$VC1,{105:5643,107:5644,91:5721,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:5722}),o($V1a,$VO1),{119:[1,5723],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,5727],21:[1,5731],22:5725,33:5724,205:5726,219:5728,220:[1,5730],221:[1,5729]},{100:[1,5732]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,5734],106:5733,108:[1,5735],109:[1,5736],110:5737,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5738]},o($V$9,$Vp),o($V$9,$Vq),{121:[1,5739]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5740]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),{121:[1,5741]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5742]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),o($Vh8,$Vk5),{19:[1,5745],21:[1,5748],22:5744,87:5743,219:5746,220:[1,5747]},{121:[1,5749]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,5750]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,5751],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,5755],21:[1,5759],22:5753,33:5752,205:5754,219:5756,220:[1,5758],221:[1,5757]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:5760}),o($VO9,$Vz1,{99:5713,95:5761,101:$Vpa,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,5762]},o($V8a,$VT1),{70:[1,5763]},o($V_9,$Vs2,{99:5639,95:5764,101:$Voa,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:5765,95:5766,91:5767,99:5768,105:5770,107:5771,101:$Vqa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:5765,95:5766,91:5767,99:5768,105:5770,107:5771,101:$Vqa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:5765,95:5766,91:5767,99:5768,105:5770,107:5771,101:$Vqa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5772],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5773,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,5774]},o($V1a,$Va3),o($VO9,$Vk5),{19:[1,5777],21:[1,5780],22:5776,87:5775,219:5778,220:[1,5779]},o($VO9,$Vk5),{19:[1,5783],21:[1,5786],22:5782,87:5781,219:5784,220:[1,5785]},o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($V59,$Vk5),{19:[1,5789],21:[1,5792],22:5788,87:5787,219:5790,220:[1,5791]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5793,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:5713,95:5794,101:$Vpa,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5795]},o($V$9,$VT1),{100:[1,5797],106:5796,108:[1,5798],109:[1,5799],110:5800,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5801]},o($V$9,$VU3),{121:[1,5802]},{19:[1,5805],21:[1,5808],22:5804,87:5803,219:5806,220:[1,5807]},o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq),o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq),o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,5809]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5810]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),o($VO9,$Vk5),{19:[1,5813],21:[1,5816],22:5812,87:5811,219:5814,220:[1,5815]},o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq)],
defaultActions: {6:[2,11],24:[2,1],115:[2,119],116:[2,120],117:[2,121],124:[2,132],125:[2,133],205:[2,256],206:[2,257],207:[2,258],208:[2,259],337:[2,35],397:[2,142],398:[2,146],400:[2,148],585:[2,33],586:[2,37],623:[2,34],1120:[2,146],1122:[2,148]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = __webpack_require__(1);

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:third_party/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:third_party/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (e, yy) {
    const hash = {
      text: yy.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: yy.lexer.yylineno,
      loc: yy.lexer.yylloc,
      // expected: expected
      pos: yy.lexer.showPosition()
    }
    e.hash = hash;
    if (Parser.recoverable) {
      Parser.recoverable(e)
    } else {
      throw e;
      Parser.reset();
    }
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix, yy) {
    if (!(prefix in Parser._prefixes))
      error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape, yy) {
    if (shape === EmptyShape)
      shape = { type: "Shape" };
    if (Parser.productions && label in Parser.productions)
      error(new Error("Structural error: "+label+" is a triple expression"), yy);
    if (!Parser.shapes)
      Parser.shapes = new Map();
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else {
      shape.id = label;
      Parser.shapes[label] = shape;
    }
  }

  // Add a production to the map
  function addProduction (label, production, yy) {
    if (Parser.shapes && label in Parser.shapes)
      error(new Error("Structural error: "+label+" is a shape expression"), yy);
    if (!Parser.productions)
      Parser.productions = new Map();
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else
      Parser.productions[label] = production;
  }

  function addSourceMap (obj, yy) {
    if (!Parser._sourceMap)
      Parser._sourceMap = new Map();
    let list = Parser._sourceMap.get(obj)
    if (!list)
      Parser._sourceMap.set(obj, list = []);
    list.push(yy.lexer.yylloc);
    return obj;
  }

  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a `nested` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits `nested` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.
  function shapeJunction (type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts) };
    }
  }

  // strip out .nested attribute
  function nonest (shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 79;
break;
case 2:return 80;
break;
case 3: yy_.yytext = yy_.yytext.substr(1); return 190;
break;
case 4:return 81;
break;
case 5:return 220;
break;
case 6:return 164;
break;
case 7:return 109;
break;
case 8:return 108;
break;
case 9:return 100;
break;
case 10:return 'ANON';
break;
case 11:return 19;
break;
case 12:return 21;
break;
case 13:return 204;
break;
case 14:return 101;
break;
case 15:return 221;
break;
case 16:return 200;
break;
case 17:return 216;
break;
case 18:return 218;
break;
case 19:return 215;
break;
case 20:return 217;
break;
case 21:return 212;
break;
case 22:return 214;
break;
case 23:return 211;
break;
case 24:return 213;
break;
case 25:return 18;
break;
case 26:return 20;
break;
case 27:return 23;
break;
case 28:return 26;
break;
case 29:return 39;
break;
case 30:return 36;
break;
case 31:return 225;
break;
case 32:return 223;
break;
case 33:return 125;
break;
case 34:return 127;
break;
case 35:return 85;
break;
case 36:return 97;
break;
case 37:return 96;
break;
case 38:return 98;
break;
case 39:return 53;
break;
case 40:return 51;
break;
case 41:return 43;
break;
case 42:return 155;
break;
case 43:return 157;
break;
case 44:return 158;
break;
case 45:return 112;
break;
case 46:return 113;
break;
case 47:return 114;
break;
case 48:return 115;
break;
case 49:return 102;
break;
case 50:return 103;
break;
case 51:return 104;
break;
case 52:return 116;
break;
case 53:return 117;
break;
case 54:return 27;
break;
case 55:return 195;
break;
case 56:return 119;
break;
case 57:return 121;
break;
case 58:return 194;
break;
case 59:return '||';
break;
case 60:return 135;
break;
case 61:return 140;
break;
case 62:return 69;
break;
case 63:return 70;
break;
case 64:return 166;
break;
case 65:return 168;
break;
case 66:return 148;
break;
case 67:return '!';
break;
case 68:return 111;
break;
case 69:return 165;
break;
case 70:return 71;
break;
case 71:return 183;
break;
case 72:return 141;
break;
case 73:return 161;
break;
case 74:return 162;
break;
case 75:return 163;
break;
case 76:return 184;
break;
case 77:return 198;
break;
case 78:return 209;
break;
case 79:return 210;
break;
case 80:return 7;
break;
case 81:return 'unexpected word "'+yy_.yytext+'"';
break;
case 82:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*|\/\*([^*]|\*([^\/]|\\\/))*\*\/))/,/^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*))))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([iI][mM][pP][oO][rR][tT]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Aa][Bb][Ss][Tt][Rr][Aa][Cc][Tt]))/,/^(?:([Rr][Ee][Ss][Tt][Rr][Ii][Cc][Tt][Ss]))/,/^(?:([Ee][Xx][Tt][Ee][Nn][Dd][Ss]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Oo][Nn]))/,/^(?:([Ss][Hh][Aa][Pp][Ee]))/,/^(?:([Ee][Xx][Pp][Rr][Ee][Ss][Ss][Ii][Oo][Nn]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:[a-zA-Z0-9_-]+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (true) {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = __webpack_require__(13).readFileSync(__webpack_require__(14).normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (  true && __webpack_require__.c[__webpack_require__.s] === module) {
  exports.main(process.argv.slice(1));
}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)(module)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(50);

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(107);

/***/ })
/******/ ]);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(2)))

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 106 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(109);

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);
var bind = __webpack_require__(51);
var Axios = __webpack_require__(110);
var mergeConfig = __webpack_require__(57);
var defaults = __webpack_require__(54);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(58);
axios.CancelToken = __webpack_require__(123);
axios.isCancel = __webpack_require__(53);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(124);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);
var buildURL = __webpack_require__(52);
var InterceptorManager = __webpack_require__(111);
var dispatchRequest = __webpack_require__(112);
var mergeConfig = __webpack_require__(57);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);
var transformData = __webpack_require__(113);
var isCancel = __webpack_require__(53);
var defaults = __webpack_require__(54);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(56);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(119);
var combineURLs = __webpack_require__(120);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(58);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2019 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
const canonize = __webpack_require__(32);
const util = __webpack_require__(5);
const ContextResolver = __webpack_require__(136);
const IdentifierIssuer = util.IdentifierIssuer;
const JsonLdError = __webpack_require__(7);
const LRU = __webpack_require__(65);
const NQuads = __webpack_require__(140);
const Rdfa = __webpack_require__(141);

const {expand: _expand} = __webpack_require__(143);
const {flatten: _flatten} = __webpack_require__(144);
const {fromRDF: _fromRDF} = __webpack_require__(145);
const {toRDF: _toRDF} = __webpack_require__(146);

const {
  frameMergedOrDefault: _frameMergedOrDefault,
  cleanupNull: _cleanupNull
} = __webpack_require__(148);

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString
} = __webpack_require__(6);

const {
  isSubjectReference: _isSubjectReference,
} = __webpack_require__(10);

const {
  expandIri: _expandIri,
  getInitialContext: _getInitialContext,
  process: _processContext,
  processingMode: _processingMode
} = __webpack_require__(14);

const {
  compact: _compact,
  compactIri: _compactIri
} = __webpack_require__(149);

const {
  createNodeMap: _createNodeMap,
  createMergedNodeMap: _createMergedNodeMap,
  mergeNodeMaps: _mergeNodeMaps
} = __webpack_require__(27);

// determine if in-browser or using Node.js
const _nodejs = (
  typeof process !== 'undefined' && process.versions && process.versions.node);
const _browser = !_nodejs &&
  (typeof window !== 'undefined' || typeof self !== 'undefined');

/* eslint-disable indent */
// attaches jsonld API to the given object
const wrapper = function(jsonld) {

/** Registered RDF dataset parsers hashed by content-type. */
const _rdfParsers = {};

// resolved context cache
// TODO: consider basing max on context size rather than number
const RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;
const _resolvedContextCache = new LRU({max: RESOLVED_CONTEXT_CACHE_MAX_SIZE});

/* Core API */

/**
 * Performs JSON-LD compaction.
 *
 * @param input the JSON-LD input to compact.
 * @param ctx the context to compact with.
 * @param [options] options to use:
 *          [base] the base IRI to use.
 *          [compactArrays] true to compact arrays to single values when
 *            appropriate, false not to (default: true).
 *          [compactToRelative] true to compact IRIs to be relative to document
 *            base, false to keep absolute (default: true)
 *          [graph] true to always output a top-level graph (default: false).
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [documentLoader(url, options)] the document loader.
 *          [expansionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [framing] true if compaction is occuring during a framing operation.
 *          [compactionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the compacted output.
 */
jsonld.compact = async function(input, ctx, options) {
  if(arguments.length < 2) {
    throw new TypeError('Could not compact, too few arguments.');
  }

  if(ctx === null) {
    throw new JsonLdError(
      'The compaction context must not be null.',
      'jsonld.CompactError', {code: 'invalid local context'});
  }

  // nothing to compact
  if(input === null) {
    return null;
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    compactArrays: true,
    compactToRelative: true,
    graph: false,
    skipExpansion: false,
    link: false,
    issuer: new IdentifierIssuer('_:b'),
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });
  if(options.link) {
    // force skip expansion when linking, "link" is not part of the public
    // API, it should only be called from framing
    options.skipExpansion = true;
  }
  if(!options.compactToRelative) {
    delete options.base;
  }

  // expand input
  let expanded;
  if(options.skipExpansion) {
    expanded = input;
  } else {
    expanded = await jsonld.expand(input, options);
  }

  // process context
  const activeCtx = await jsonld.processContext(
    _getInitialContext(options), ctx, options);

  // do compaction
  let compacted = await _compact({
    activeCtx,
    element: expanded,
    options,
    compactionMap: options.compactionMap
  });

  // perform clean up
  if(options.compactArrays && !options.graph && _isArray(compacted)) {
    if(compacted.length === 1) {
      // simplify to a single item
      compacted = compacted[0];
    } else if(compacted.length === 0) {
      // simplify to an empty object
      compacted = {};
    }
  } else if(options.graph && _isObject(compacted)) {
    // always use array if graph option is on
    compacted = [compacted];
  }

  // follow @context key
  if(_isObject(ctx) && '@context' in ctx) {
    ctx = ctx['@context'];
  }

  // build output context
  ctx = util.clone(ctx);
  if(!_isArray(ctx)) {
    ctx = [ctx];
  }
  // remove empty contexts
  const tmp = ctx;
  ctx = [];
  for(let i = 0; i < tmp.length; ++i) {
    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
      ctx.push(tmp[i]);
    }
  }

  // remove array if only one context
  const hasContext = (ctx.length > 0);
  if(ctx.length === 1) {
    ctx = ctx[0];
  }

  // add context and/or @graph
  if(_isArray(compacted)) {
    // use '@graph' keyword
    const graphAlias = _compactIri({
      activeCtx, iri: '@graph', relativeTo: {vocab: true}
    });
    const graph = compacted;
    compacted = {};
    if(hasContext) {
      compacted['@context'] = ctx;
    }
    compacted[graphAlias] = graph;
  } else if(_isObject(compacted) && hasContext) {
    // reorder keys so @context is first
    const graph = compacted;
    compacted = {'@context': ctx};
    for(const key in graph) {
      compacted[key] = graph[key];
    }
  }

  return compacted;
};

/**
 * Performs JSON-LD expansion.
 *
 * @param input the JSON-LD input to expand.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [keepFreeFloatingNodes] true to keep free-floating nodes,
 *            false not to, defaults to false.
 *          [documentLoader(url, options)] the document loader.
 *          [expansionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the expanded output.
 */
jsonld.expand = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not expand, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    keepFreeFloatingNodes: false,
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });
  if(options.expansionMap === false) {
    options.expansionMap = undefined;
  }

  // build set of objects that may have @contexts to resolve
  const toResolve = {};

  // build set of contexts to process prior to expansion
  const contextsToProcess = [];

  // if an `expandContext` has been given ensure it gets resolved
  if('expandContext' in options) {
    const expandContext = util.clone(options.expandContext);
    if(_isObject(expandContext) && '@context' in expandContext) {
      toResolve.expandContext = expandContext;
    } else {
      toResolve.expandContext = {'@context': expandContext};
    }
    contextsToProcess.push(toResolve.expandContext);
  }

  // if input is a string, attempt to dereference remote document
  let defaultBase;
  if(!_isString(input)) {
    // input is not a URL, do not need to retrieve it first
    toResolve.input = util.clone(input);
  } else {
    // load remote doc
    const remoteDoc = await jsonld.get(input, options);
    defaultBase = remoteDoc.documentUrl;
    toResolve.input = remoteDoc.document;
    if(remoteDoc.contextUrl) {
      // context included in HTTP link header and must be resolved
      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};
      contextsToProcess.push(toResolve.remoteContext);
    }
  }

  // set default base
  if(!('base' in options)) {
    options.base = defaultBase || '';
  }

  // process any additional contexts
  let activeCtx = _getInitialContext(options);
  for(const localCtx of contextsToProcess) {
    activeCtx = await _processContext({activeCtx, localCtx, options});
  }

  // expand resolved input
  let expanded = await _expand({
    activeCtx,
    element: toResolve.input,
    options,
    expansionMap: options.expansionMap
  });

  // optimize away @graph with no other properties
  if(_isObject(expanded) && ('@graph' in expanded) &&
    Object.keys(expanded).length === 1) {
    expanded = expanded['@graph'];
  } else if(expanded === null) {
    expanded = [];
  }

  // normalize to an array
  if(!_isArray(expanded)) {
    expanded = [expanded];
  }

  return expanded;
};

/**
 * Performs JSON-LD flattening.
 *
 * @param input the JSON-LD to flatten.
 * @param ctx the context to use to compact the flattened output, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the flattened output.
 */
jsonld.flatten = async function(input, ctx, options) {
  if(arguments.length < 1) {
    return new TypeError('Could not flatten, too few arguments.');
  }

  if(typeof ctx === 'function') {
    ctx = null;
  } else {
    ctx = ctx || null;
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // expand input
  const expanded = await jsonld.expand(input, options);

  // do flattening
  const flattened = _flatten(expanded);

  if(ctx === null) {
    // no compaction required
    return flattened;
  }

  // compact result (force @graph option to true, skip expansion)
  options.graph = true;
  options.skipExpansion = true;
  const compacted = await jsonld.compact(flattened, ctx, options);

  return compacted;
};

/**
 * Performs JSON-LD framing.
 *
 * @param input the JSON-LD input to frame.
 * @param frame the JSON-LD frame to use.
 * @param [options] the framing options.
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
 *            (default: '@last').
 *          [explicit] default @explicit flag (default: false).
 *          [requireAll] default @requireAll flag (default: true).
 *          [omitDefault] default @omitDefault flag (default: false).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the framed output.
 */
jsonld.frame = async function(input, frame, options) {
  if(arguments.length < 2) {
    throw new TypeError('Could not frame, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    embed: '@once',
    explicit: false,
    requireAll: false,
    omitDefault: false,
    bnodesToClear: [],
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // if frame is a string, attempt to dereference remote document
  if(_isString(frame)) {
    // load remote doc
    const remoteDoc = await jsonld.get(frame, options);
    frame = remoteDoc.document;

    if(remoteDoc.contextUrl) {
      // inject link header @context into frame
      let ctx = frame['@context'];
      if(!ctx) {
        ctx = remoteDoc.contextUrl;
      } else if(_isArray(ctx)) {
        ctx.push(remoteDoc.contextUrl);
      } else {
        ctx = [ctx, remoteDoc.contextUrl];
      }
      frame['@context'] = ctx;
    }
  }

  const frameContext = frame ? frame['@context'] || {} : {};

  // process context
  const activeCtx = await jsonld.processContext(
    _getInitialContext(options), frameContext, options);

  // mode specific defaults
  if(!options.hasOwnProperty('omitGraph')) {
    options.omitGraph = _processingMode(activeCtx, 1.1);
  }
  if(!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {
    options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);
  }

  // expand input
  const expanded = await jsonld.expand(input, options);

  // expand frame
  const opts = {...options};
  opts.isFrame = true;
  opts.keepFreeFloatingNodes = true;
  const expandedFrame = await jsonld.expand(frame, opts);

  // if the unexpanded frame includes a key expanding to @graph, frame the
  // default graph, otherwise, the merged graph
  const frameKeys = Object.keys(frame)
    .map(key => _expandIri(activeCtx, key, {vocab: true}));
  opts.merged = !frameKeys.includes('@graph');
  opts.is11 = _processingMode(activeCtx, 1.1);

  // do framing
  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);

  opts.graph = !options.omitGraph;
  opts.skipExpansion = true;
  opts.link = {};
  opts.framing = true;
  let compacted = await jsonld.compact(framed, frameContext, opts);

  // replace @null with null, compacting arrays
  opts.link = {};
  compacted = _cleanupNull(compacted, opts);

  return compacted;
};

/**
 * **Experimental**
 *
 * Links a JSON-LD document's nodes in memory.
 *
 * @param input the JSON-LD document to link.
 * @param [ctx] the JSON-LD context to apply.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the linked output.
 */
jsonld.link = async function(input, ctx, options) {
  // API matches running frame with a wildcard frame and embed: '@link'
  // get arguments
  const frame = {};
  if(ctx) {
    frame['@context'] = ctx;
  }
  frame['@embed'] = '@link';
  return jsonld.frame(input, frame, options);
};

/**
 * Performs RDF dataset normalization on the given input. The input is JSON-LD
 * unless the 'inputFormat' option is used. The output is an RDF dataset
 * unless the 'format' option is used.
 *
 * @param input the input to normalize as JSON-LD or as a format specified by
 *          the 'inputFormat' option.
 * @param [options] the options to use:
 *          [algorithm] the normalization algorithm to use, `URDNA2015` or
 *            `URGNA2012` (default: `URDNA2015`).
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [inputFormat] the format if input is not JSON-LD:
 *            'application/n-quads' for N-Quads.
 *          [format] the format if output is a string:
 *            'application/n-quads' for N-Quads.
 *          [documentLoader(url, options)] the document loader.
 *          [useNative] true to use a native canonize algorithm
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the normalized output.
 */
jsonld.normalize = jsonld.canonize = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not canonize, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    algorithm: 'URDNA2015',
    skipExpansion: false,
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });
  if('inputFormat' in options) {
    if(options.inputFormat !== 'application/n-quads' &&
      options.inputFormat !== 'application/nquads') {
      throw new JsonLdError(
        'Unknown canonicalization input format.',
        'jsonld.CanonizeError');
    }
    // TODO: `await` for async parsers
    const parsedInput = NQuads.parse(input);

    // do canonicalization
    return canonize.canonize(parsedInput, options);
  }

  // convert to RDF dataset then do normalization
  const opts = {...options};
  delete opts.format;
  opts.produceGeneralizedRdf = false;
  const dataset = await jsonld.toRDF(input, opts);

  // do canonicalization
  return canonize.canonize(dataset, options);
};

/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset a serialized string of RDF in a format specified by the
 *          format option or an RDF dataset to convert.
 * @param [options] the options to use:
 *          [format] the format if dataset param must first be parsed:
 *            'application/n-quads' for N-Quads (default).
 *          [rdfParser] a custom RDF-parser to use to parse the dataset.
 *          [useRdfType] true to use rdf:type, false to use @type
 *            (default: false).
 *          [useNativeTypes] true to convert XSD types into native types
 *            (boolean, integer, double), false not to (default: false).
 *
 * @return a Promise that resolves to the JSON-LD document.
 */
jsonld.fromRDF = async function(dataset, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not convert from RDF, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    format: _isString(dataset) ? 'application/n-quads' : undefined
  });

  const {format} = options;
  let {rdfParser} = options;

  // handle special format
  if(format) {
    // check supported formats
    rdfParser = rdfParser || _rdfParsers[format];
    if(!rdfParser) {
      throw new JsonLdError(
        'Unknown input format.',
        'jsonld.UnknownFormat', {format});
    }
  } else {
    // no-op parser, assume dataset already parsed
    rdfParser = () => dataset;
  }

  // rdfParser must be synchronous or return a promise, no callback support
  const parsedDataset = await rdfParser(dataset);
  return _fromRDF(parsedDataset, options);
};

/**
 * Outputs the RDF dataset found in the given JSON-LD object.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [format] the format to use to output a string:
 *            'application/n-quads' for N-Quads.
 *          [produceGeneralizedRdf] true to output generalized RDF, false
 *            to produce only standard RDF (default: false).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the RDF dataset.
 */
jsonld.toRDF = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not convert to RDF, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    skipExpansion: false,
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // TODO: support toRDF custom map?
  let expanded;
  if(options.skipExpansion) {
    expanded = input;
  } else {
    // expand input
    expanded = await jsonld.expand(input, options);
  }

  // output RDF dataset
  const dataset = _toRDF(expanded, options);
  if(options.format) {
    if(options.format === 'application/n-quads' ||
      options.format === 'application/nquads') {
      return await NQuads.serialize(dataset);
    }
    throw new JsonLdError(
      'Unknown output format.',
      'jsonld.UnknownFormat', {format: options.format});
  }

  return dataset;
};

/**
 * **Experimental**
 *
 * Recursively flattens the nodes in the given JSON-LD input into a merged
 * map of node ID => node. All graphs will be merged into the default graph.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the merged node map.
 */
jsonld.createNodeMap = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not create node map, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // expand input
  const expanded = await jsonld.expand(input, options);

  return _createMergedNodeMap(expanded, options);
};

/**
 * **Experimental**
 *
 * Merges two or more JSON-LD documents into a single flattened document.
 *
 * @param docs the JSON-LD documents to merge together.
 * @param ctx the context to use to compact the merged result, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [mergeNodes] true to merge properties for nodes with the same ID,
 *            false to ignore new properties for nodes with the same ID once
 *            the ID has been defined; note that this may not prevent merging
 *            new properties where a node is in the `object` position
 *            (default: true).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the merged output.
 */
jsonld.merge = async function(docs, ctx, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not merge, too few arguments.');
  }
  if(!_isArray(docs)) {
    throw new TypeError('Could not merge, "docs" must be an array.');
  }

  if(typeof ctx === 'function') {
    ctx = null;
  } else {
    ctx = ctx || null;
  }

  // set default options
  options = _setDefaults(options, {
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // expand all documents
  const expanded = await Promise.all(docs.map(doc => {
    const opts = {...options};
    return jsonld.expand(doc, opts);
  }));

  let mergeNodes = true;
  if('mergeNodes' in options) {
    mergeNodes = options.mergeNodes;
  }

  const issuer = options.issuer || new IdentifierIssuer('_:b');
  const graphs = {'@default': {}};

  for(let i = 0; i < expanded.length; ++i) {
    // uniquely relabel blank nodes
    const doc = util.relabelBlankNodes(expanded[i], {
      issuer: new IdentifierIssuer('_:b' + i + '-')
    });

    // add nodes to the shared node map graphs if merging nodes, to a
    // separate graph set if not
    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};
    _createNodeMap(doc, _graphs, '@default', issuer);

    if(_graphs !== graphs) {
      // merge document graphs but don't merge existing nodes
      for(const graphName in _graphs) {
        const _nodeMap = _graphs[graphName];
        if(!(graphName in graphs)) {
          graphs[graphName] = _nodeMap;
          continue;
        }
        const nodeMap = graphs[graphName];
        for(const key in _nodeMap) {
          if(!(key in nodeMap)) {
            nodeMap[key] = _nodeMap[key];
          }
        }
      }
    }
  }

  // add all non-default graphs to default graph
  const defaultGraph = _mergeNodeMaps(graphs);

  // produce flattened output
  const flattened = [];
  const keys = Object.keys(defaultGraph).sort();
  for(let ki = 0; ki < keys.length; ++ki) {
    const node = defaultGraph[keys[ki]];
    // only add full subjects to top-level
    if(!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }

  if(ctx === null) {
    return flattened;
  }

  // compact result (force @graph option to true, skip expansion)
  options.graph = true;
  options.skipExpansion = true;
  const compacted = await jsonld.compact(flattened, ctx, options);

  return compacted;
};

/**
 * The default document loader for external documents.
 *
 * @param url the URL to load.
 *
 * @return a promise that resolves to the remote document.
 */
Object.defineProperty(jsonld, 'documentLoader', {
  get: () => jsonld._documentLoader,
  set: v => jsonld._documentLoader = v
});
// default document loader not implemented
jsonld.documentLoader = async url => {
  throw new JsonLdError(
    'Could not retrieve a JSON-LD document from the URL. URL ' +
    'dereferencing not implemented.', 'jsonld.LoadDocumentError',
    {code: 'loading document failed', url});
};

/**
 * Gets a remote JSON-LD document using the default document loader or
 * one given in the passed options.
 *
 * @param url the URL to fetch.
 * @param [options] the options to use:
 *          [documentLoader] the document loader to use.
 *
 * @return a Promise that resolves to the retrieved remote document.
 */
jsonld.get = async function(url, options) {
  let load;
  if(typeof options.documentLoader === 'function') {
    load = options.documentLoader;
  } else {
    load = jsonld.documentLoader;
  }

  const remoteDoc = await load(url);

  try {
    if(!remoteDoc.document) {
      throw new JsonLdError(
        'No remote document found at the given URL.',
        'jsonld.NullRemoteDocument');
    }
    if(_isString(remoteDoc.document)) {
      remoteDoc.document = JSON.parse(remoteDoc.document);
    }
  } catch(e) {
    throw new JsonLdError(
      'Could not retrieve a JSON-LD document from the URL.',
      'jsonld.LoadDocumentError', {
        code: 'loading document failed',
        cause: e,
        remoteDoc
      });
  }

  return remoteDoc;
};

/**
 * Processes a local context, resolving any URLs as necessary, and returns a
 * new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param [options] the options to use:
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the new active context.
 */
jsonld.processContext = async function(
  activeCtx, localCtx, options) {
  // set default options
  options = _setDefaults(options, {
    base: '',
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // return initial context early for null context
  if(localCtx === null) {
    return _getInitialContext(options);
  }

  // get URLs in localCtx
  localCtx = util.clone(localCtx);
  if(!(_isObject(localCtx) && '@context' in localCtx)) {
    localCtx = {'@context': localCtx};
  }

  return _processContext({activeCtx, localCtx, options});
};

// backwards compatibility
jsonld.getContextValue = __webpack_require__(14).getContextValue;

/**
 * Document loaders.
 */
jsonld.documentLoaders = {};
jsonld.documentLoaders.node = __webpack_require__(150);
jsonld.documentLoaders.xhr = __webpack_require__(153);

/**
 * Assigns the default document loader for external document URLs to a built-in
 * default. Supported types currently include: 'xhr' and 'node'.
 *
 * @param type the type to set.
 * @param [params] the parameters required to use the document loader.
 */
jsonld.useDocumentLoader = function(type) {
  if(!(type in jsonld.documentLoaders)) {
    throw new JsonLdError(
      'Unknown document loader type: "' + type + '"',
      'jsonld.UnknownDocumentLoader',
      {type});
  }

  // set document loader
  jsonld.documentLoader = jsonld.documentLoaders[type].apply(
    jsonld, Array.prototype.slice.call(arguments, 1));
};

/**
 * Registers an RDF dataset parser by content-type, for use with
 * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,
 * a string of input. An RDF dataset parser can be synchronous or
 * asynchronous (by returning a promise).
 *
 * @param contentType the content-type for the parser.
 * @param parser(input) the parser function (takes a string as a parameter
 *          and either returns an RDF dataset or a Promise that resolves to one.
 */
jsonld.registerRDFParser = function(contentType, parser) {
  _rdfParsers[contentType] = parser;
};

/**
 * Unregisters an RDF dataset parser by content-type.
 *
 * @param contentType the content-type for the parser.
 */
jsonld.unregisterRDFParser = function(contentType) {
  delete _rdfParsers[contentType];
};

// register the N-Quads RDF parser
jsonld.registerRDFParser('application/n-quads', NQuads.parse);
jsonld.registerRDFParser('application/nquads', NQuads.parse);

// register the RDFa API RDF parser
jsonld.registerRDFParser('rdfa-api', Rdfa.parse);

/* URL API */
jsonld.url = __webpack_require__(11);

/* Utility API */
jsonld.util = util;
// backwards compatibility
Object.assign(jsonld, util);

// reexpose API as jsonld.promises for backwards compatability
jsonld.promises = jsonld;

// backwards compatibility
jsonld.RequestQueue = __webpack_require__(37);

/* WebIDL API */
jsonld.JsonLdProcessor = __webpack_require__(154)(jsonld);

// setup browser global JsonLdProcessor
if(_browser && typeof global.JsonLdProcessor === 'undefined') {
  Object.defineProperty(global, 'JsonLdProcessor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: jsonld.JsonLdProcessor
  });
}

// set platform-specific defaults/APIs
if(_nodejs) {
  // use node document loader by default
  jsonld.useDocumentLoader('node');
} else if(typeof XMLHttpRequest !== 'undefined') {
  // use xhr document loader by default
  jsonld.useDocumentLoader('xhr');
}

function _setDefaults(options, {
  documentLoader = jsonld.documentLoader,
  ...defaults
}) {
  return Object.assign({}, {documentLoader}, defaults, options);
}

// end of jsonld API `wrapper` factory
return jsonld;
};

// external APIs:

// used to generate a new jsonld API instance
const factory = function() {
  return wrapper(function() {
    return factory();
  });
};

// wrap the main jsonld API instance
wrapper(factory);
// export API
module.exports = factory;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(3)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(2)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const util = __webpack_require__(13);

module.exports = class AsyncAlgorithm {
  constructor({
    maxCallStackDepth = 500,
    maxTotalCallStackDepth = 0xFFFFFFFF,
    // milliseconds
    timeSlice = 10
  } = {}) {
    this.schedule = {};
    this.schedule.MAX_DEPTH = maxCallStackDepth;
    this.schedule.MAX_TOTAL_DEPTH = maxTotalCallStackDepth;
    this.schedule.depth = 0;
    this.schedule.totalDepth = 0;
    this.schedule.timeSlice = timeSlice;
  }

  // do some work in a time slice, but in serial
  doWork(fn, callback) {
    const schedule = this.schedule;

    if(schedule.totalDepth >= schedule.MAX_TOTAL_DEPTH) {
      return callback(new Error(
        'Maximum total call stack depth exceeded; canonicalization aborting.'));
    }

    (function work() {
      if(schedule.depth === schedule.MAX_DEPTH) {
        // stack too deep, run on next tick
        schedule.depth = 0;
        schedule.running = false;
        return util.nextTick(work);
      }

      // if not yet running, force run
      const now = Date.now();
      if(!schedule.running) {
        schedule.start = Date.now();
        schedule.deadline = schedule.start + schedule.timeSlice;
      }

      // TODO: should also include an estimate of expectedWorkTime
      if(now < schedule.deadline) {
        schedule.running = true;
        schedule.depth++;
        schedule.totalDepth++;
        return fn((err, result) => {
          schedule.depth--;
          schedule.totalDepth--;
          callback(err, result);
        });
      }

      // not enough time left in this slice, run after letting browser
      // do some other things
      schedule.depth = 0;
      schedule.running = false;
      util.setImmediate(work);
    })();
  }

  // asynchronously loop
  forEach(iterable, fn, callback) {
    const self = this;
    let iterator;
    let idx = 0;
    let length;
    if(Array.isArray(iterable)) {
      length = iterable.length;
      iterator = () => {
        if(idx === length) {
          return false;
        }
        iterator.value = iterable[idx++];
        iterator.key = idx;
        return true;
      };
    } else {
      const keys = Object.keys(iterable);
      length = keys.length;
      iterator = () => {
        if(idx === length) {
          return false;
        }
        iterator.key = keys[idx++];
        iterator.value = iterable[iterator.key];
        return true;
      };
    }

    (function iterate(err) {
      if(err) {
        return callback(err);
      }
      if(iterator()) {
        return self.doWork(() => fn(iterator.value, iterator.key, iterate));
      }
      callback();
    })();
  }

  // asynchronous waterfall
  waterfall(fns, callback) {
    const self = this;
    self.forEach(
      fns, (fn, idx, callback) => self.doWork(fn, callback), callback);
  }

  // asynchronous while
  whilst(condition, fn, callback) {
    const self = this;
    (function loop(err) {
      if(err) {
        return callback(err);
      }
      if(!condition()) {
        return callback();
      }
      self.doWork(fn, loop);
    })();
  }
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(22);
__webpack_require__(35);
__webpack_require__(61);

var sha1 = module.exports = forge.sha1 = forge.sha1 || {};
forge.md.sha1 = forge.md.algorithms.sha1 = sha1;

/**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */
sha1.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // SHA-1 state contains five 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(80);

  // message digest object
  var md = {
    algorithm: 'sha1',
    blockLength: 64,
    digestLength: 20,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476,
      h4: 0xC3D2E1F0
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    return rval;
  };

  return md;
};

// sha-1 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, e, f, i;
  var len = bytes.length();
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 80 32-bit words according to SHA-1 algorithm
    // and for 32-79 using Max Locktyukhin's optimization

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;

    // round 1
    for(i = 0; i < 16; ++i) {
      t = bytes.getInt32();
      w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    for(; i < 20; ++i) {
      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
      t = (t << 1) | (t >>> 31);
      w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 2
    for(; i < 32; ++i) {
      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
      t = (t << 1) | (t >>> 31);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    for(; i < 40; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 3
    for(; i < 60; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = (b & c) | (d & (b ^ c));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 4
    for(; i < 80; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;

    len -= 64;
  }
}


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 130 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var api = {};
module.exports = api;

// baseN alphabet indexes
var _reverseAlphabets = {};

/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */
api.encode = function(input, alphabet, maxline) {
  if(typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }
  if(maxline !== undefined && typeof maxline !== 'number') {
    throw new TypeError('"maxline" must be a number.');
  }

  var output = '';

  if(!(input instanceof Uint8Array)) {
    // assume forge byte buffer
    output = _encodeWithByteBuffer(input, alphabet);
  } else {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [0];
    for(i = 0; i < input.length; ++i) {
      for(var j = 0, carry = input[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % base;
        carry = (carry / base) | 0;
      }

      while(carry > 0) {
        digits.push(carry % base);
        carry = (carry / base) | 0;
      }
    }

    // deal with leading zeros
    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {
      output += first;
    }
    // convert digits to a string
    for(i = digits.length - 1; i >= 0; --i) {
      output += alphabet[digits[i]];
    }
  }

  if(maxline) {
    var regex = new RegExp('.{1,' + maxline + '}', 'g');
    output = output.match(regex).join('\r\n');
  }

  return output;
};

/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */
api.decode = function(input, alphabet) {
  if(typeof input !== 'string') {
    throw new TypeError('"input" must be a string.');
  }
  if(typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  var table = _reverseAlphabets[alphabet];
  if(!table) {
    // compute reverse alphabet
    table = _reverseAlphabets[alphabet] = [];
    for(var i = 0; i < alphabet.length; ++i) {
      table[alphabet.charCodeAt(i)] = i;
    }
  }

  // remove whitespace characters
  input = input.replace(/\s/g, '');

  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var bytes = [0];
  for(var i = 0; i < input.length; i++) {
    var value = table[input.charCodeAt(i)];
    if(value === undefined) {
      return;
    }

    for(var j = 0, carry = value; j < bytes.length; ++j) {
      carry += bytes[j] * base;
      bytes[j] = carry & 0xff;
      carry >>= 8;
    }

    while(carry > 0) {
      bytes.push(carry & 0xff);
      carry >>= 8;
    }
  }

  // deal with leading zeros
  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {
    bytes.push(0);
  }

  if(typeof Buffer !== 'undefined') {
    return Buffer.from(bytes.reverse());
  }

  return new Uint8Array(bytes.reverse());
};

function _encodeWithByteBuffer(input, alphabet) {
  var i = 0;
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var digits = [0];
  for(i = 0; i < input.length(); ++i) {
    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {
      carry += digits[j] << 8;
      digits[j] = carry % base;
      carry = (carry / base) | 0;
    }

    while(carry > 0) {
      digits.push(carry % base);
      carry = (carry / base) | 0;
    }
  }

  var output = '';

  // deal with leading zeros
  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
    output += first;
  }
  // convert digits to a string
  for(i = digits.length - 1; i >= 0; --i) {
    output += alphabet[digits[i]];
  }

  return output;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9).Buffer))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(22);
__webpack_require__(35);
__webpack_require__(61);

var sha256 = module.exports = forge.sha256 = forge.sha256 || {};
forge.md.sha256 = forge.md.algorithms.sha256 = sha256;

/**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */
sha256.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // SHA-256 state contains eight 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(64);

  // message digest object
  var md = {
    algorithm: 'sha256',
    blockLength: 64,
    digestLength: 32,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x6A09E667,
      h1: 0xBB67AE85,
      h2: 0x3C6EF372,
      h3: 0xA54FF53A,
      h4: 0x510E527F,
      h5: 0x9B05688C,
      h6: 0x1F83D9AB,
      h7: 0x5BE0CD19
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4,
      h5: _state.h5,
      h6: _state.h6,
      h7: _state.h7
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    rval.putInt32(s2.h5);
    rval.putInt32(s2.h6);
    rval.putInt32(s2.h7);
    return rval;
  };

  return md;
};

// sha-256 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

// table of constants
var _k = null;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // create K table for SHA-256
  _k = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
  var len = bytes.length();
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 64 32-bit words according to SHA-256
    for(i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32();
    }
    for(; i < 64; ++i) {
      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
      t1 = w[i - 2];
      t1 =
        ((t1 >>> 17) | (t1 << 15)) ^
        ((t1 >>> 19) | (t1 << 13)) ^
        (t1 >>> 10);
      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
      t2 = w[i - 15];
      t2 =
        ((t2 >>> 7) | (t2 << 25)) ^
        ((t2 >>> 18) | (t2 << 14)) ^
        (t2 >>> 3);
      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
    }

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;
    f = s.h5;
    g = s.h6;
    h = s.h7;

    // round function
    for(i = 0; i < 64; ++i) {
      // Sum1(e)
      s1 =
        ((e >>> 6) | (e << 26)) ^
        ((e >>> 11) | (e << 21)) ^
        ((e >>> 25) | (e << 7));
      // Ch(e, f, g) (optimized the same way as SHA-1)
      ch = g ^ (e & (f ^ g));
      // Sum0(a)
      s0 =
        ((a >>> 2) | (a << 30)) ^
        ((a >>> 13) | (a << 19)) ^
        ((a >>> 22) | (a << 10));
      // Maj(a, b, c) (optimized the same way as SHA-1)
      maj = (a & b) | (c & (a ^ b));

      // main algorithm
      t1 = h + s1 + ch + _k[i] + w[i];
      t2 = s0 + maj;
      h = g;
      g = f;
      f = e;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`
      e = (d + t1) >>> 0;
      d = c;
      c = b;
      b = a;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`
      a = (t1 + t2) >>> 0;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;
    s.h5 = (s.h5 + f) | 0;
    s.h6 = (s.h6 + g) | 0;
    s.h7 = (s.h7 + h) | 0;
    len -= 64;
  }
}


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const URDNA2015 = __webpack_require__(59);
const util = __webpack_require__(13);

module.exports = class URDNA2012 extends URDNA2015 {
  constructor(options) {
    super(options);
    this.name = 'URGNA2012';
    this.hashAlgorithm = 'sha1';
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component, key) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    if(key === 'name') {
      component.value = '_:g';
    } else {
      component.value = (component.value === id ? '_:a' : '_:z');
    }
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return quad.predicate.value;
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer, callback) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    self.forEach(quads, (quad, idx, callback) => {
      // 3.1) If the quad's subject is a blank node that does not match
      // identifier, set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for subject as related,
      // quad, path identifier issuer as issuer, and p as position.
      let position;
      let related;
      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
        related = quad.subject.value;
        position = 'p';
      } else if(
        quad.object.termType === 'BlankNode' && quad.object.value !== id) {
        // 3.2) Otherwise, if quad's object is a blank node that does not match
        // identifier, to the result of the Hash Related Blank Node algorithm,
        // passing the blank node identifier for object as related, quad, path
        // identifier issuer as issuer, and r as position.
        related = quad.object.value;
        position = 'r';
      } else {
        // 3.3) Otherwise, continue to the next quad.
        return callback();
      }
      // 3.4) Add a mapping of hash to the blank node identifier for the
      // component that matched (subject or object) to hash to related blank
      // nodes map, adding an entry as necessary.
      self.hashRelatedBlankNode(
        related, quad, issuer, position, (err, hash) => {
        if(err) {
          return callback(err);
        }
        if(hash in hashToRelated) {
          hashToRelated[hash].push(related);
        } else {
          hashToRelated[hash] = [related];
        }
        callback();
      });
    }, err => callback(err, hashToRelated));
  }
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.
 */


const URDNA2015Sync = __webpack_require__(64);
const util = __webpack_require__(13);

module.exports = class URDNA2012Sync extends URDNA2015Sync {
  constructor() {
    super();
    this.name = 'URGNA2012';
    this.hashAlgorithm = 'sha1';
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component, key) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    if(key === 'name') {
      component.value = '_:g';
    } else {
      component.value = (component.value === id ? '_:a' : '_:z');
    }
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return quad.predicate.value;
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    for(let i = 0; i < quads.length; ++i) {
      // 3.1) If the quad's subject is a blank node that does not match
      // identifier, set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for subject as related,
      // quad, path identifier issuer as issuer, and p as position.
      const quad = quads[i];
      let position;
      let related;
      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
        related = quad.subject.value;
        position = 'p';
      } else if(
        quad.object.termType === 'BlankNode' && quad.object.value !== id) {
        // 3.2) Otherwise, if quad's object is a blank node that does not match
        // identifier, to the result of the Hash Related Blank Node algorithm,
        // passing the blank node identifier for object as related, quad, path
        // identifier issuer as issuer, and r as position.
        related = quad.object.value;
        position = 'r';
      } else {
        // 3.3) Otherwise, continue to the next quad.
        continue;
      }
      // 3.4) Add a mapping of hash to the blank node identifier for the
      // component that matched (subject or object) to hash to related blank
      // nodes map, adding an entry as necessary.
      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);
      if(hash in hashToRelated) {
        hashToRelated[hash].push(related);
      } else {
        hashToRelated[hash] = [related];
      }
    }

    return hashToRelated;
  }
};


/***/ }),
/* 135 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */


const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
} = __webpack_require__(6);
const {
  asArray: _asArray
} = __webpack_require__(5);
const {prependBase} = __webpack_require__(11);
const JsonLdError = __webpack_require__(7);
const ResolvedContext = __webpack_require__(137);

const MAX_CONTEXT_URLS = 10;

module.exports = class ContextResolver {
  /**
   * Creates a ContextResolver.
   *
   * @param sharedCache a shared LRU cache with `get` and `set` APIs.
   */
  constructor({sharedCache}) {
    this.perOpCache = new Map();
    this.sharedCache = sharedCache;
  }

  async resolve({
    activeCtx, context, documentLoader, base, cycles = new Set()
  }) {
    // process `@context`
    if(context && _isObject(context) && context['@context']) {
      context = context['@context'];
    }

    // context is one or more contexts
    context = _asArray(context);

    // resolve each context in the array
    const allResolved = [];
    for(const ctx of context) {
      if(_isString(ctx)) {
        // see if `ctx` has been resolved before...
        let resolved = this._get(ctx);
        if(!resolved) {
          // not resolved yet, resolve
          resolved = await this._resolveRemoteContext(
            {activeCtx, url: ctx, documentLoader, base, cycles});
        }

        // add to output and continue
        if(_isArray(resolved)) {
          allResolved.push(...resolved);
        } else {
          allResolved.push(resolved);
        }
        continue;
      }
      if(ctx === null) {
        // handle `null` context, nothing to cache
        allResolved.push(new ResolvedContext({document: null}));
        continue;
      }
      if(!_isObject(ctx)) {
        _throwInvalidLocalContext(context);
      }
      // context is an object, get/create `ResolvedContext` for it
      const key = JSON.stringify(ctx);
      let resolved = this._get(key);
      if(!resolved) {
        // create a new static `ResolvedContext` and cache it
        resolved = new ResolvedContext({document: ctx});
        this._cacheResolvedContext({key, resolved, tag: 'static'});
      }
      allResolved.push(resolved);
    }

    return allResolved;
  }

  _get(key) {
    // get key from per operation cache; no `tag` is used with this cache so
    // any retrieved context will always be the same during a single operation
    let resolved = this.perOpCache.get(key);
    if(!resolved) {
      // see if the shared cache has a `static` entry for this URL
      const tagMap = this.sharedCache.get(key);
      if(tagMap) {
        resolved = tagMap.get('static');
        if(resolved) {
          this.perOpCache.set(key, resolved);
        }
      }
    }
    return resolved;
  }

  _cacheResolvedContext({key, resolved, tag}) {
    this.perOpCache.set(key, resolved);
    if(tag !== undefined) {
      let tagMap = this.sharedCache.get(key);
      if(!tagMap) {
        tagMap = new Map();
        this.sharedCache.set(key, tagMap);
      }
      tagMap.set(tag, resolved);
    }
    return resolved;
  }

  async _resolveRemoteContext({activeCtx, url, documentLoader, base, cycles}) {
    // resolve relative URL and fetch context
    url = prependBase(base, url);
    const {context, remoteDoc} = await this._fetchContext(
      {activeCtx, url, documentLoader, cycles});

    // update base according to remote document and resolve any relative URLs
    base = remoteDoc.documentUrl || url;
    _resolveContextUrls({context, base});

    // resolve, cache, and return context
    const resolved = await this.resolve(
      {activeCtx, context, documentLoader, base, cycles});
    this._cacheResolvedContext({key: url, resolved, tag: remoteDoc.tag});
    return resolved;
  }

  async _fetchContext({activeCtx, url, documentLoader, cycles}) {
    // check for max context URLs fetched during a resolve operation
    if(cycles.size > MAX_CONTEXT_URLS) {
      throw new JsonLdError(
        'Maximum number of @context URLs exceeded.',
        'jsonld.ContextUrlError',
        {
          code: activeCtx.processingMode === 'json-ld-1.0' ?
            'loading remote context failed' :
            'context overflow',
          max: MAX_CONTEXT_URLS
        });
    }

    // check for context URL cycle
    // shortcut to avoid extra work that would eventually hit the max above
    if(cycles.has(url)) {
      throw new JsonLdError(
        'Cyclical @context URLs detected.',
        'jsonld.ContextUrlError',
        {
          code: activeCtx.processingMode === 'json-ld-1.0' ?
            'recursive context inclusion' :
            'context overflow',
          url
        });
    }

    // track cycles
    cycles.add(url);

    let context;
    let remoteDoc;

    try {
      remoteDoc = await documentLoader(url);
      context = remoteDoc.document || null;
      // parse string context as JSON
      if(_isString(context)) {
        context = JSON.parse(context);
      }
    } catch(e) {
      throw new JsonLdError(
        'Dereferencing a URL did not result in a valid JSON-LD object. ' +
        'Possible causes are an inaccessible URL perhaps due to ' +
        'a same-origin policy (ensure the server uses CORS if you are ' +
        'using client-side JavaScript), too many redirects, a ' +
        'non-JSON response, or more than one HTTP Link Header was ' +
        'provided for a remote context.',
        'jsonld.InvalidUrl',
        {code: 'loading remote context failed', url, cause: e});
    }

    // ensure ctx is an object
    if(!_isObject(context)) {
      throw new JsonLdError(
        'Dereferencing a URL did not result in a JSON object. The ' +
        'response was valid JSON, but it was not a JSON object.',
        'jsonld.InvalidUrl', {code: 'invalid remote context', url});
    }

    // use empty context if no @context key is present
    if(!('@context' in context)) {
      context = {'@context': {}};
    } else {
      context = {'@context': context['@context']};
    }

    // append @context URL to context if given
    if(remoteDoc.contextUrl) {
      if(!_isArray(context['@context'])) {
        context['@context'] = [context['@context']];
      }
      context['@context'].push(remoteDoc.contextUrl);
    }

    return {context, remoteDoc};
  }
};

function _throwInvalidLocalContext(ctx) {
  throw new JsonLdError(
    'Invalid JSON-LD syntax; @context must be an object.',
    'jsonld.SyntaxError', {
      code: 'invalid local context', context: ctx
    });
}

/**
 * Resolve all relative `@context` URLs in the given context by inline
 * replacing them with absolute URLs.
 *
 * @param context the context.
 * @param base the base IRI to use to resolve relative IRIs.
 */
function _resolveContextUrls({context, base}) {
  if(!context) {
    return;
  }

  const ctx = context['@context'];

  if(_isString(ctx)) {
    context['@context'] = prependBase(base, ctx);
    return;
  }

  if(_isArray(ctx)) {
    for(let i = 0; i < ctx.length; ++i) {
      const element = ctx[i];
      if(_isString(element)) {
        ctx[i] = prependBase(base, element);
        continue;
      }
      if(_isObject(element)) {
        _resolveContextUrls({context: {'@context': element}, base});
      }
    }
    return;
  }

  if(!_isObject(ctx)) {
    // no @context URLs can be found in non-object
    return;
  }

  // ctx is an object, resolve any context URLs in terms
  for(const term in ctx) {
    _resolveContextUrls({context: ctx[term], base});
  }
}


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */


const LRU = __webpack_require__(65);

const MAX_ACTIVE_CONTEXTS = 10;

module.exports = class ResolvedContext {
  /**
   * Creates a ResolvedContext.
   *
   * @param document the context document.
   */
  constructor({document}) {
    this.document = document;
    // TODO: enable customization of processed context cache
    // TODO: limit based on size of processed contexts vs. number of them
    this.cache = new LRU({max: MAX_ACTIVE_CONTEXTS});
  }

  getProcessed(activeCtx) {
    return this.cache.get(activeCtx);
  }

  setProcessed(activeCtx, processedCtx) {
    this.cache.set(activeCtx, processedCtx);
  }
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) {
  var self = this
  if (!(self instanceof Yallist)) {
    self = new Yallist()
  }

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item)
    })
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i])
    }
  }

  return self
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next
  var prev = node.prev

  if (next) {
    next.prev = prev
  }

  if (prev) {
    prev.next = next
  }

  if (node === this.head) {
    this.head = next
  }
  if (node === this.tail) {
    this.tail = prev
  }

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null

  return next
}

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var head = this.head
  node.list = this
  node.next = head
  if (head) {
    head.prev = node
  }

  this.head = node
  if (!this.tail) {
    this.tail = node
  }
  this.length++
}

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) {
    tail.next = node
  }

  this.tail = node
  if (!this.head) {
    this.head = node
  }
  this.length++
}

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) {
    this.tail.next = null
  } else {
    this.head = null
  }
  this.length--
  return res
}

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value
  this.head = this.head.next
  if (this.head) {
    this.head.prev = null
  } else {
    this.tail = null
  }
  this.length--
  return res
}

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  }
}

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  }
}

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  }
  return res
}

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  }
  return res
}

Yallist.prototype.reduce = function (fn, initial) {
  var acc
  var walker = this.head
  if (arguments.length > 1) {
    acc = initial
  } else if (this.head) {
    walker = this.head.next
    acc = this.head.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i)
    walker = walker.next
  }

  return acc
}

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc
  var walker = this.tail
  if (arguments.length > 1) {
    acc = initial
  } else if (this.tail) {
    walker = this.tail.prev
    acc = this.tail.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  }

  return acc
}

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.next
  }
  return arr
}

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.prev
  }
  return arr
}

Yallist.prototype.slice = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.splice = function (start, deleteCount /*, ...nodes */) {
  if (start > this.length) {
    start = this.length - 1
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next
  }

  var ret = []
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value)
    walker = this.removeNode(walker)
  }
  if (walker === null) {
    walker = this.tail
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev
  }

  for (var i = 2; i < arguments.length; i++) {
    walker = insert(this, walker, arguments[i])
  }
  return ret;
}

Yallist.prototype.reverse = function () {
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  }
  this.head = tail
  this.tail = head
  return this
}

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self)

  if (inserted.next === null) {
    self.tail = inserted
  }
  if (inserted.prev === null) {
    self.head = inserted
  }

  self.length++

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) {
    self.head = self.tail
  }
  self.length++
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) {
    self.tail = self.head
  }
  self.length++
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list
  this.value = value

  if (prev) {
    prev.next = this
    this.prev = prev
  } else {
    this.prev = null
  }

  if (next) {
    next.prev = this
    this.next = next
  } else {
    this.next = null
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(139)(Yallist)
} catch (er) {}


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = function* () {
    for (let walker = this.head; walker; walker = walker.next) {
      yield walker.value
    }
  }
}


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


// TODO: move `NQuads` to its own package
module.exports = __webpack_require__(32).NQuads;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
/* global Node, XMLSerializer */


const {
  RDF_LANGSTRING,
  RDF_PLAIN_LITERAL,
  RDF_OBJECT,
  RDF_XML_LITERAL,
  XSD_STRING,
} = __webpack_require__(23);

let _Node;
if(typeof Node !== 'undefined') {
  _Node = Node;
} else {
  _Node = {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  };
}

module.exports = class Rdfa {
  /**
   * Parses the RDF dataset found via the data object from the RDFa API.
   *
   * @param data the RDFa API data object.
   *
   * @return the RDF dataset.
   */
  parse(data) {
    const dataset = {};
    dataset['@default'] = [];

    const subjects = data.getSubjects();
    for(let si = 0; si < subjects.length; ++si) {
      const subject = subjects[si];
      if(subject === null) {
        continue;
      }

      // get all related triples
      const triples = data.getSubjectTriples(subject);
      if(triples === null) {
        continue;
      }
      const predicates = triples.predicates;
      for(const predicate in predicates) {
        // iterate over objects
        const objects = predicates[predicate].objects;
        for(let oi = 0; oi < objects.length; ++oi) {
          const object = objects[oi];

          // create RDF triple
          const triple = {};

          // add subject
          if(subject.indexOf('_:') === 0) {
            triple.subject = {type: 'blank node', value: subject};
          } else {
            triple.subject = {type: 'IRI', value: subject};
          }

          // add predicate
          if(predicate.indexOf('_:') === 0) {
            triple.predicate = {type: 'blank node', value: predicate};
          } else {
            triple.predicate = {type: 'IRI', value: predicate};
          }

          // serialize XML literal
          let value = object.value;
          if(object.type === RDF_XML_LITERAL) {
            // initialize XMLSerializer
            const XMLSerializer = getXMLSerializerClass();
            const serializer = new XMLSerializer();
            value = '';
            for(let x = 0; x < object.value.length; x++) {
              if(object.value[x].nodeType === _Node.ELEMENT_NODE) {
                value += serializer.serializeToString(object.value[x]);
              } else if(object.value[x].nodeType === _Node.TEXT_NODE) {
                value += object.value[x].nodeValue;
              }
            }
          }

          // add object
          triple.object = {};

          // object is an IRI
          if(object.type === RDF_OBJECT) {
            if(object.value.indexOf('_:') === 0) {
              triple.object.type = 'blank node';
            } else {
              triple.object.type = 'IRI';
            }
          } else {
            // object is a literal
            triple.object.type = 'literal';
            if(object.type === RDF_PLAIN_LITERAL) {
              if(object.language) {
                triple.object.datatype = RDF_LANGSTRING;
                triple.object.language = object.language;
              } else {
                triple.object.datatype = XSD_STRING;
              }
            } else {
              triple.object.datatype = object.type;
            }
          }
          triple.object.value = value;

          // add triple to dataset in default graph
          dataset['@default'].push(triple);
        }
      }
    }

    return dataset;
  }
};

function getXMLSerializerClass() {
  if(typeof XMLSerializer === 'undefined') {
    return __webpack_require__(142).XMLSerializer;
  }
  return XMLSerializer;
}


/***/ }),
/* 142 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const JsonLdError = __webpack_require__(7);

const {
  isArray: _isArray,
  isObject: _isObject,
  isEmptyObject: _isEmptyObject,
  isString: _isString,
  isUndefined: _isUndefined
} = __webpack_require__(6);

const {
  isList: _isList,
  isValue: _isValue,
  isGraph: _isGraph,
  isSubject: _isSubject
} = __webpack_require__(10);

const {
  expandIri: _expandIri,
  getContextValue: _getContextValue,
  isKeyword: _isKeyword,
  process: _processContext,
  processingMode: _processingMode
} = __webpack_require__(14);

const {
  isAbsolute: _isAbsoluteIri
} = __webpack_require__(11);

const {
  addValue: _addValue,
  asArray: _asArray,
  getValues: _getValues,
  validateTypeValue: _validateTypeValue
} = __webpack_require__(5);

const api = {};
module.exports = api;
const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;

/**
 * Recursively expands an element using the given context. Any context in
 * the element will be removed. All context URLs must have been retrieved
 * before calling this method.
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element, null for none.
 * @param element the element to expand.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param insideIndex true if the element is inside an index container,
 *          false if not.
 * @param typeScopedContext an optional type-scoped active context for
 *          expanding values of nodes that were expressed according to
 *          a type-scoped context.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 *
 * @return a Promise that resolves to the expanded value.
 */
api.expand = async ({
  activeCtx,
  activeProperty = null,
  element,
  options = {},
  insideList = false,
  insideIndex = false,
  typeScopedContext = null,
  expansionMap = () => undefined
}) => {
  // nothing to expand
  if(element === null || element === undefined) {
    return null;
  }

  // disable framing if activeProperty is @default
  if(activeProperty === '@default') {
    options = Object.assign({}, options, {isFrame: false});
  }

  if(!_isArray(element) && !_isObject(element)) {
    // drop free-floating scalars that are not in lists unless custom mapped
    if(!insideList && (activeProperty === null ||
      _expandIri(activeCtx, activeProperty, {vocab: true},
        options) === '@graph')) {
      const mapped = await expansionMap({
        unmappedValue: element,
        activeCtx,
        activeProperty,
        options,
        insideList
      });
      if(mapped === undefined) {
        return null;
      }
      return mapped;
    }

    // expand element according to value expansion rules
    return _expandValue({activeCtx, activeProperty, value: element, options});
  }

  // recursively expand array
  if(_isArray(element)) {
    let rval = [];
    const container = _getContextValue(
      activeCtx, activeProperty, '@container') || [];
    insideList = insideList || container.includes('@list');
    for(let i = 0; i < element.length; ++i) {
      // expand element
      let e = await api.expand({
        activeCtx,
        activeProperty,
        element: element[i],
        options,
        expansionMap,
        insideIndex,
        typeScopedContext
      });
      if(insideList && _isArray(e)) {
        e = {'@list': e};
      }

      if(e === null) {
        e = await expansionMap({
          unmappedValue: element[i],
          activeCtx,
          activeProperty,
          parent: element,
          index: i,
          options,
          expandedParent: rval,
          insideList
        });
        if(e === undefined) {
          continue;
        }
      }

      if(_isArray(e)) {
        rval = rval.concat(e);
      } else {
        rval.push(e);
      }
    }
    return rval;
  }

  // recursively expand object:

  // first, expand the active property
  const expandedActiveProperty = _expandIri(
    activeCtx, activeProperty, {vocab: true}, options);

  // Get any property-scoped context for activeProperty
  const propertyScopedCtx =
    _getContextValue(activeCtx, activeProperty, '@context');

  // second, determine if any type-scoped context should be reverted; it
  // should only be reverted when the following are all true:
  // 1. `element` is not a value or subject reference
  // 2. `insideIndex` is false
  typeScopedContext = typeScopedContext ||
    (activeCtx.previousContext ? activeCtx : null);
  let keys = Object.keys(element).sort();
  let mustRevert = !insideIndex;
  if(mustRevert && typeScopedContext && keys.length <= 2 &&
    !keys.includes('@context')) {
    for(const key of keys) {
      const expandedProperty = _expandIri(
        typeScopedContext, key, {vocab: true}, options);
      if(expandedProperty === '@value') {
        // value found, ensure type-scoped context is used to expand it
        mustRevert = false;
        activeCtx = typeScopedContext;
        break;
      }
      if(expandedProperty === '@id' && keys.length === 1) {
        // subject reference found, do not revert
        mustRevert = false;
        break;
      }
    }
  }

  if(mustRevert) {
    // revert type scoped context
    activeCtx = activeCtx.revertToPreviousContext();
  }

  // apply property-scoped context after reverting term-scoped context
  if(!_isUndefined(propertyScopedCtx)) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: propertyScopedCtx,
      propagate: true,
      overrideProtected: true,
      options
    });
  }

  // if element has a context, process it
  if('@context' in element) {
    activeCtx = await _processContext(
      {activeCtx, localCtx: element['@context'], options});
  }

  // set the type-scoped context to the context on input, for use later
  typeScopedContext = activeCtx;

  // Remember the first key found expanding to @type
  let typeKey = null;

  // look for scoped contexts on `@type`
  for(const key of keys) {
    const expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);
    if(expandedProperty === '@type') {
      // set scoped contexts from @type
      // avoid sorting if possible
      typeKey = typeKey || key;
      const value = element[key];
      const types =
        Array.isArray(value) ?
          (value.length > 1 ? value.slice().sort() : value) : [value];
      for(const type of types) {
        const ctx = _getContextValue(typeScopedContext, type, '@context');
        if(!_isUndefined(ctx)) {
          activeCtx = await _processContext({
            activeCtx,
            localCtx: ctx,
            options,
            propagate: false
          });
        }
      }
    }
  }

  // process each key and value in element, ignoring @nest content
  let rval = {};
  await _expandObject({
    activeCtx,
    activeProperty,
    expandedActiveProperty,
    element,
    expandedParent: rval,
    options,
    insideList,
    typeKey,
    typeScopedContext,
    expansionMap});

  // get property count on expanded output
  keys = Object.keys(rval);
  let count = keys.length;

  if('@value' in rval) {
    // @value must only have @language or @type
    if('@type' in rval && ('@language' in rval || '@direction' in rval)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" may not ' +
        'contain both "@type" and either "@language" or "@direction".',
        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
    }
    let validCount = count - 1;
    if('@type' in rval) {
      validCount -= 1;
    }
    if('@index' in rval) {
      validCount -= 1;
    }
    if('@language' in rval) {
      validCount -= 1;
    }
    if('@direction' in rval) {
      validCount -= 1;
    }
    if(validCount !== 0) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" may only ' +
        'have an "@index" property and either "@type" ' +
        'or either or both "@language" or "@direction".',
        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
    }
    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);
    const types = _getValues(rval, '@type');

    // drop null @values unless custom mapped
    if(_processingMode(activeCtx, 1.1) && types.includes('@json') &&
      types.length === 1) {
      // Any value of @value is okay if @type: @json
    } else if(values.length === 0) {
      const mapped = await expansionMap({
        unmappedValue: rval,
        activeCtx,
        activeProperty,
        element,
        options,
        insideList
      });
      if(mapped !== undefined) {
        rval = mapped;
      } else {
        rval = null;
      }
    } else if(!values.every(v => (_isString(v) || _isEmptyObject(v))) &&
      '@language' in rval) {
      // if @language is present, @value must be a string
      throw new JsonLdError(
        'Invalid JSON-LD syntax; only strings may be language-tagged.',
        'jsonld.SyntaxError',
        {code: 'invalid language-tagged value', element: rval});
    } else if(!types.every(t =>
      (_isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) ||
      _isEmptyObject(t)))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" and "@type" ' +
        'must have an absolute IRI for the value of "@type".',
        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});
    }
  } else if('@type' in rval && !_isArray(rval['@type'])) {
    // convert @type to an array
    rval['@type'] = [rval['@type']];
  } else if('@set' in rval || '@list' in rval) {
    // handle @set and @list
    if(count > 1 && !(count === 2 && '@index' in rval)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; if an element has the property "@set" ' +
        'or "@list", then it can have at most one other property that is ' +
        '"@index".', 'jsonld.SyntaxError',
        {code: 'invalid set or list object', element: rval});
    }
    // optimize away @set
    if('@set' in rval) {
      rval = rval['@set'];
      keys = Object.keys(rval);
      count = keys.length;
    }
  } else if(count === 1 && '@language' in rval) {
    // drop objects with only @language unless custom mapped
    const mapped = await expansionMap(rval, {
      unmappedValue: rval,
      activeCtx,
      activeProperty,
      element,
      options,
      insideList
    });
    if(mapped !== undefined) {
      rval = mapped;
    } else {
      rval = null;
    }
  }

  // drop certain top-level objects that do not occur in lists, unless custom
  // mapped
  if(_isObject(rval) &&
    !options.keepFreeFloatingNodes && !insideList &&
    (activeProperty === null || expandedActiveProperty === '@graph')) {
    // drop empty object, top-level @value/@list, or object with only @id
    if(count === 0 || '@value' in rval || '@list' in rval ||
      (count === 1 && '@id' in rval)) {
      const mapped = await expansionMap({
        unmappedValue: rval,
        activeCtx,
        activeProperty,
        element,
        options,
        insideList
      });
      if(mapped !== undefined) {
        rval = mapped;
      } else {
        rval = null;
      }
    }
  }

  return rval;
};

/**
 * Expand each key and value of element adding to result
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element.
 * @param expandedActiveProperty the expansion of activeProperty
 * @param element the element to expand.
 * @param expandedParent the expanded result into which to add values.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param typeKey first key found expanding to @type.
 * @param typeScopedContext the context before reverting.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 */
async function _expandObject({
  activeCtx,
  activeProperty,
  expandedActiveProperty,
  element,
  expandedParent,
  options = {},
  insideList,
  typeKey,
  typeScopedContext,
  expansionMap
}) {
  const keys = Object.keys(element).sort();
  const nests = [];
  let unexpandedValue;

  // Figure out if this is the type for a JSON literal
  const isJsonType = element[typeKey] &&
    _expandIri(activeCtx,
      (_isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey]),
      {vocab: true}, options) === '@json';

  for(const key of keys) {
    let value = element[key];
    let expandedValue;

    // skip @context
    if(key === '@context') {
      continue;
    }

    // expand property
    let expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);

    // drop non-absolute IRI keys that aren't keywords unless custom mapped
    if(expandedProperty === null ||
      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
      // TODO: use `await` to support async
      expandedProperty = expansionMap({
        unmappedProperty: key,
        activeCtx,
        activeProperty,
        parent: element,
        options,
        insideList,
        value,
        expandedParent
      });
      if(expandedProperty === undefined) {
        continue;
      }
    }

    if(_isKeyword(expandedProperty)) {
      if(expandedActiveProperty === '@reverse') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +
          'property.', 'jsonld.SyntaxError',
          {code: 'invalid reverse property map', value});
      }
      if(expandedProperty in expandedParent &&
         expandedProperty !== '@included' &&
         expandedProperty !== '@type') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; colliding keywords detected.',
          'jsonld.SyntaxError',
          {code: 'colliding keywords', keyword: expandedProperty});
      }
    }

    // syntax error if @id is not a string
    if(expandedProperty === '@id') {
      if(!_isString(value)) {
        if(!options.isFrame) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@id" value must a string.',
            'jsonld.SyntaxError', {code: 'invalid @id value', value});
        }
        if(_isObject(value)) {
          // empty object is a wildcard
          if(!_isEmptyObject(value)) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
              'of strings, if framing',
              'jsonld.SyntaxError', {code: 'invalid @id value', value});
          }
        } else if(_isArray(value)) {
          if(!value.every(v => _isString(v))) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
              'of strings, if framing',
              'jsonld.SyntaxError', {code: 'invalid @id value', value});
          }
        } else {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
            'of strings, if framing',
            'jsonld.SyntaxError', {code: 'invalid @id value', value});
        }
      }

      _addValue(
        expandedParent, '@id',
        _asArray(value).map(v =>
          _isString(v) ? _expandIri(activeCtx, v, {base: true}, options) : v),
        {propertyIsArray: options.isFrame});
      continue;
    }

    if(expandedProperty === '@type') {
      // if framing, can be a default object, but need to expand
      // key to determine that
      if(_isObject(value)) {
        value = Object.fromEntries(Object.entries(value).map(([k, v]) => [
          _expandIri(typeScopedContext, k, {vocab: true}),
          _asArray(v).map(vv =>
            _expandIri(typeScopedContext, vv, {base: true, vocab: true})
          )
        ]));
      }
      _validateTypeValue(value, options.isFrame);
      _addValue(
        expandedParent, '@type',
        _asArray(value).map(v =>
          _isString(v) ?
            _expandIri(typeScopedContext, v,
              {base: true, vocab: true}, options) : v),
        {propertyIsArray: options.isFrame});
      continue;
    }

    // Included blocks are treated as an array of separate object nodes sharing
    // the same referencing active_property.
    // For 1.0, it is skipped as are other unknown keywords
    if(expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {
      const includedResult = _asArray(await api.expand({
        activeCtx,
        activeProperty,
        element: value,
        options,
        expansionMap
      }));

      // Expanded values must be node objects
      if(!includedResult.every(v => _isSubject(v))) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; ' +
          'values of @included must expand to node objects.',
          'jsonld.SyntaxError', {code: 'invalid @included value', value});
      }

      _addValue(
        expandedParent, '@included', includedResult, {propertyIsArray: true});
      continue;
    }

    // @graph must be an array or an object
    if(expandedProperty === '@graph' &&
      !(_isObject(value) || _isArray(value))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; "@graph" value must not be an ' +
        'object or an array.',
        'jsonld.SyntaxError', {code: 'invalid @graph value', value});
    }

    if(expandedProperty === '@value') {
      // capture value for later
      // "colliding keywords" check prevents this from being set twice
      unexpandedValue = value;
      if(isJsonType && _processingMode(activeCtx, 1.1)) {
        // no coercion to array, and retain all values
        expandedParent['@value'] = value;
      } else {
        _addValue(
          expandedParent, '@value', value, {propertyIsArray: options.isFrame});
      }
      continue;
    }

    // @language must be a string
    // it should match BCP47
    if(expandedProperty === '@language') {
      if(value === null) {
        // drop null @language values, they expand as if they didn't exist
        continue;
      }
      if(!_isString(value) && !options.isFrame) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@language" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid language-tagged string', value});
      }
      // ensure language value is lowercase
      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v);

      // ensure language tag matches BCP47
      for(const lang of value) {
        if(_isString(lang) && !lang.match(REGEX_BCP47)) {
          console.warn(`@language must be valid BCP47: ${lang}`);
        }
      }

      _addValue(
        expandedParent, '@language', value, {propertyIsArray: options.isFrame});
      continue;
    }

    // @direction must be "ltr" or "rtl"
    if(expandedProperty === '@direction') {
      if(!_isString(value) && !options.isFrame) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@direction" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid base direction', value});
      }

      value = _asArray(value);

      // ensure direction is "ltr" or "rtl"
      for(const dir of value) {
        if(_isString(dir) && dir !== 'ltr' && dir !== 'rtl') {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".',
            'jsonld.SyntaxError',
            {code: 'invalid base direction', value});
        }
      }

      _addValue(
        expandedParent, '@direction', value,
        {propertyIsArray: options.isFrame});
      continue;
    }

    // @index must be a string
    if(expandedProperty === '@index') {
      if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@index" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid @index value', value});
      }
      _addValue(expandedParent, '@index', value);
      continue;
    }

    // @reverse must be an object
    if(expandedProperty === '@reverse') {
      if(!_isObject(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@reverse" value must be an object.',
          'jsonld.SyntaxError', {code: 'invalid @reverse value', value});
      }

      expandedValue = await api.expand({
        activeCtx,
        activeProperty:
        '@reverse',
        element: value,
        options,
        expansionMap
      });
      // properties double-reversed
      if('@reverse' in expandedValue) {
        for(const property in expandedValue['@reverse']) {
          _addValue(
            expandedParent, property, expandedValue['@reverse'][property],
            {propertyIsArray: true});
        }
      }

      // FIXME: can this be merged with code below to simplify?
      // merge in all reversed properties
      let reverseMap = expandedParent['@reverse'] || null;
      for(const property in expandedValue) {
        if(property === '@reverse') {
          continue;
        }
        if(reverseMap === null) {
          reverseMap = expandedParent['@reverse'] = {};
        }
        _addValue(reverseMap, property, [], {propertyIsArray: true});
        const items = expandedValue[property];
        for(let ii = 0; ii < items.length; ++ii) {
          const item = items[ii];
          if(_isValue(item) || _isList(item)) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
              '@value or an @list.', 'jsonld.SyntaxError',
              {code: 'invalid reverse property value', value: expandedValue});
          }
          _addValue(reverseMap, property, item, {propertyIsArray: true});
        }
      }

      continue;
    }

    // nested keys
    if(expandedProperty === '@nest') {
      nests.push(key);
      continue;
    }

    // use potential scoped context for key
    let termCtx = activeCtx;
    const ctx = _getContextValue(activeCtx, key, '@context');
    if(!_isUndefined(ctx)) {
      termCtx = await _processContext({
        activeCtx,
        localCtx: ctx,
        propagate: true,
        overrideProtected: true,
        options
      });
    }

    const container = _getContextValue(termCtx, key, '@container') || [];

    if(container.includes('@language') && _isObject(value)) {
      const direction = _getContextValue(termCtx, key, '@direction');
      // handle language map container (skip if value is not an object)
      expandedValue = _expandLanguageMap(termCtx, value, direction, options);
    } else if(container.includes('@index') && _isObject(value)) {
      // handle index container (skip if value is not an object)
      const asGraph = container.includes('@graph');
      const indexKey = _getContextValue(termCtx, key, '@index') || '@index';
      const propertyIndex = indexKey !== '@index' &&
        _expandIri(activeCtx, indexKey, {vocab: true}, options);

      expandedValue = await _expandIndexMap({
        activeCtx: termCtx,
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph,
        indexKey,
        propertyIndex
      });
    } else if(container.includes('@id') && _isObject(value)) {
      // handle id container (skip if value is not an object)
      const asGraph = container.includes('@graph');
      expandedValue = await _expandIndexMap({
        activeCtx: termCtx,
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph,
        indexKey: '@id'
      });
    } else if(container.includes('@type') && _isObject(value)) {
      // handle type container (skip if value is not an object)
      expandedValue = await _expandIndexMap({
        // since container is `@type`, revert type scoped context when expanding
        activeCtx: termCtx.revertToPreviousContext(),
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph: false,
        indexKey: '@type'
      });
    } else {
      // recurse into @list or @set
      const isList = (expandedProperty === '@list');
      if(isList || expandedProperty === '@set') {
        let nextActiveProperty = activeProperty;
        if(isList && expandedActiveProperty === '@graph') {
          nextActiveProperty = null;
        }
        expandedValue = await api.expand({
          activeCtx: termCtx,
          activeProperty: nextActiveProperty,
          element: value,
          options,
          insideList: isList,
          expansionMap
        });
      } else if(
        _getContextValue(activeCtx, key, '@type') === '@json') {
        expandedValue = {
          '@type': '@json',
          '@value': value
        };
      } else {
        // recursively expand value with key as new active property
        expandedValue = await api.expand({
          activeCtx: termCtx,
          activeProperty: key,
          element: value,
          options,
          insideList: false,
          expansionMap
        });
      }
    }

    // drop null values if property is not @value
    if(expandedValue === null && expandedProperty !== '@value') {
      // TODO: use `await` to support async
      expandedValue = expansionMap({
        unmappedValue: value,
        expandedProperty,
        activeCtx: termCtx,
        activeProperty,
        parent: element,
        options,
        insideList,
        key,
        expandedParent
      });
      if(expandedValue === undefined) {
        continue;
      }
    }

    // convert expanded value to @list if container specifies it
    if(expandedProperty !== '@list' && !_isList(expandedValue) &&
      container.includes('@list')) {
      // ensure expanded value in @list is an array
      expandedValue = {'@list': _asArray(expandedValue)};
    }

    // convert expanded value to @graph if container specifies it
    // and value is not, itself, a graph
    // index cases handled above
    if(container.includes('@graph') &&
      !container.some(key => key === '@id' || key === '@index')) {
      // ensure expanded values are arrays
      expandedValue = _asArray(expandedValue)
        .map(v => ({'@graph': _asArray(v)}));
    }

    // FIXME: can this be merged with code above to simplify?
    // merge in reverse properties
    if(termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {
      const reverseMap =
        expandedParent['@reverse'] = expandedParent['@reverse'] || {};
      expandedValue = _asArray(expandedValue);
      for(let ii = 0; ii < expandedValue.length; ++ii) {
        const item = expandedValue[ii];
        if(_isValue(item) || _isList(item)) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
            '@value or an @list.', 'jsonld.SyntaxError',
            {code: 'invalid reverse property value', value: expandedValue});
        }
        _addValue(reverseMap, expandedProperty, item, {propertyIsArray: true});
      }
      continue;
    }

    // add value for property
    // special keywords handled above
    _addValue(expandedParent, expandedProperty, expandedValue, {
      propertyIsArray: true
    });
  }

  // @value must not be an object or an array (unless framing) or if @type is
  // @json
  if('@value' in expandedParent) {
    if(expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) {
      // allow any value, to be verified when the object is fully expanded and
      // the @type is @json.
    } else if((_isObject(unexpandedValue) || _isArray(unexpandedValue)) &&
      !options.isFrame) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; "@value" value must not be an ' +
        'object or an array.',
        'jsonld.SyntaxError',
        {code: 'invalid value object value', value: unexpandedValue});
    }
  }

  // expand each nested key
  for(const key of nests) {
    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];
    for(const nv of nestedValues) {
      if(!_isObject(nv) || Object.keys(nv).some(k =>
        _expandIri(activeCtx, k, {vocab: true}, options) === '@value')) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; nested value must be a node object.',
          'jsonld.SyntaxError',
          {code: 'invalid @nest value', value: nv});
      }
      await _expandObject({
        activeCtx,
        activeProperty,
        expandedActiveProperty,
        element: nv,
        expandedParent,
        options,
        insideList,
        typeScopedContext,
        typeKey,
        expansionMap});
    }
  }
}

/**
 * Expands the given value by using the coercion and keyword rules in the
 * given context.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the active property the value is associated with.
 * @param value the value to expand.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */
function _expandValue({activeCtx, activeProperty, value, options}) {
  // nothing to expand
  if(value === null || value === undefined) {
    return null;
  }

  // special-case expand @id and @type (skips '@id' expansion)
  const expandedProperty = _expandIri(
    activeCtx, activeProperty, {vocab: true}, options);
  if(expandedProperty === '@id') {
    return _expandIri(activeCtx, value, {base: true}, options);
  } else if(expandedProperty === '@type') {
    return _expandIri(activeCtx, value, {vocab: true, base: true}, options);
  }

  // get type definition from context
  const type = _getContextValue(activeCtx, activeProperty, '@type');

  // do @id expansion (automatic for @graph)
  if((type === '@id' || expandedProperty === '@graph') && _isString(value)) {
    return {'@id': _expandIri(activeCtx, value, {base: true}, options)};
  }
  // do @id expansion w/vocab
  if(type === '@vocab' && _isString(value)) {
    return {
      '@id': _expandIri(activeCtx, value, {vocab: true, base: true}, options)
    };
  }

  // do not expand keyword values
  if(_isKeyword(expandedProperty)) {
    return value;
  }

  const rval = {};

  if(type && !['@id', '@vocab', '@none'].includes(type)) {
    // other type
    rval['@type'] = type;
  } else if(_isString(value)) {
    // check for language tagging for strings
    const language = _getContextValue(activeCtx, activeProperty, '@language');
    if(language !== null) {
      rval['@language'] = language;
    }
    const direction = _getContextValue(activeCtx, activeProperty, '@direction');
    if(direction !== null) {
      rval['@direction'] = direction;
    }
  }
  // do conversion of values that aren't basic JSON types to strings
  if(!['boolean', 'number', 'string'].includes(typeof value)) {
    value = value.toString();
  }
  rval['@value'] = value;

  return rval;
}

/**
 * Expands a language map.
 *
 * @param activeCtx the active context to use.
 * @param languageMap the language map to expand.
 * @param direction the direction to apply to values.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded language map.
 */
function _expandLanguageMap(activeCtx, languageMap, direction, options) {
  const rval = [];
  const keys = Object.keys(languageMap).sort();
  for(const key of keys) {
    const expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);
    let val = languageMap[key];
    if(!_isArray(val)) {
      val = [val];
    }
    for(const item of val) {
      if(item === null) {
        // null values are allowed (8.5) but ignored (3.1)
        continue;
      }
      if(!_isString(item)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; language map values must be strings.',
          'jsonld.SyntaxError',
          {code: 'invalid language map value', languageMap});
      }
      const val = {'@value': item};
      if(expandedKey !== '@none') {
        val['@language'] = key.toLowerCase();
      }
      if(direction) {
        val['@direction'] = direction;
      }
      rval.push(val);
    }
  }
  return rval;
}

async function _expandIndexMap(
  {activeCtx, options, activeProperty, value, expansionMap, asGraph,
    indexKey, propertyIndex}) {
  const rval = [];
  const keys = Object.keys(value).sort();
  const isTypeIndex = indexKey === '@type';
  for(let key of keys) {
    // if indexKey is @type, there may be a context defined for it
    if(isTypeIndex) {
      const ctx = _getContextValue(activeCtx, key, '@context');
      if(!_isUndefined(ctx)) {
        activeCtx = await _processContext({
          activeCtx,
          localCtx: ctx,
          propagate: false,
          options
        });
      }
    }

    let val = value[key];
    if(!_isArray(val)) {
      val = [val];
    }

    val = await api.expand({
      activeCtx,
      activeProperty,
      element: val,
      options,
      insideList: false,
      insideIndex: true,
      expansionMap
    });

    // expand for @type, but also for @none
    let expandedKey;
    if(propertyIndex) {
      if(key === '@none') {
        expandedKey = '@none';
      } else {
        expandedKey = _expandValue(
          {activeCtx, activeProperty: indexKey, value: key, options});
      }
    } else {
      expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);
    }

    if(indexKey === '@id') {
      // expand document relative
      key = _expandIri(activeCtx, key, {base: true}, options);
    } else if(isTypeIndex) {
      key = expandedKey;
    }

    for(let item of val) {
      // If this is also a @graph container, turn items into graphs
      if(asGraph && !_isGraph(item)) {
        item = {'@graph': [item]};
      }
      if(indexKey === '@type') {
        if(expandedKey === '@none') {
          // ignore @none
        } else if(item['@type']) {
          item['@type'] = [key].concat(item['@type']);
        } else {
          item['@type'] = [key];
        }
      } else if(_isValue(item) &&
        !['@language', '@type', '@index'].includes(indexKey)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; Attempt to add illegal key to value ' +
          `object: "${indexKey}".`,
          'jsonld.SyntaxError',
          {code: 'invalid value object', value: item});
      } else if(propertyIndex) {
        // index is a property to be expanded, and values interpreted for that
        // property
        if(expandedKey !== '@none') {
          // expand key as a value
          _addValue(item, propertyIndex, expandedKey, {
            propertyIsArray: true,
            prependValue: true
          });
        }
      } else if(expandedKey !== '@none' && !(indexKey in item)) {
        item[indexKey] = key;
      }
      rval.push(item);
    }
  }
  return rval;
}


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {
  isSubjectReference: _isSubjectReference
} = __webpack_require__(10);

const {
  createMergedNodeMap: _createMergedNodeMap
} = __webpack_require__(27);

const api = {};
module.exports = api;

/**
 * Performs JSON-LD flattening.
 *
 * @param input the expanded JSON-LD to flatten.
 *
 * @return the flattened output.
 */
api.flatten = input => {
  const defaultGraph = _createMergedNodeMap(input);

  // produce flattened output
  const flattened = [];
  const keys = Object.keys(defaultGraph).sort();
  for(let ki = 0; ki < keys.length; ++ki) {
    const node = defaultGraph[keys[ki]];
    // only add full subjects to top-level
    if(!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }
  return flattened;
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const JsonLdError = __webpack_require__(7);
const graphTypes = __webpack_require__(10);
const types = __webpack_require__(6);
const util = __webpack_require__(5);

// constants
const {
  // RDF,
  RDF_LIST,
  RDF_FIRST,
  RDF_REST,
  RDF_NIL,
  RDF_TYPE,
  // RDF_PLAIN_LITERAL,
  // RDF_XML_LITERAL,
  RDF_JSON_LITERAL,
  // RDF_OBJECT,
  // RDF_LANGSTRING,

  // XSD,
  XSD_BOOLEAN,
  XSD_DOUBLE,
  XSD_INTEGER,
  XSD_STRING,
} = __webpack_require__(23);

const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;

const api = {};
module.exports = api;

/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset the RDF dataset.
 * @param options the RDF serialization options.
 *
 * @return a Promise that resolves to the JSON-LD output.
 */
api.fromRDF = async (
  dataset,
  {
    useRdfType = false,
    useNativeTypes = false,
    rdfDirection = null
  }
) => {
  const defaultGraph = {};
  const graphMap = {'@default': defaultGraph};
  const referencedOnce = {};

  for(const quad of dataset) {
    // TODO: change 'name' to 'graph'
    const name = (quad.graph.termType === 'DefaultGraph') ?
      '@default' : quad.graph.value;
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }

    const nodeMap = graphMap[name];

    // get subject, predicate, object
    const s = quad.subject.value;
    const p = quad.predicate.value;
    const o = quad.object;

    if(!(s in nodeMap)) {
      nodeMap[s] = {'@id': s};
    }
    const node = nodeMap[s];

    const objectIsNode = o.termType.endsWith('Node');
    if(objectIsNode && !(o.value in nodeMap)) {
      nodeMap[o.value] = {'@id': o.value};
    }

    if(p === RDF_TYPE && !useRdfType && objectIsNode) {
      util.addValue(node, '@type', o.value, {propertyIsArray: true});
      continue;
    }

    const value = _RDFToObject(o, useNativeTypes, rdfDirection);
    util.addValue(node, p, value, {propertyIsArray: true});

    // object may be an RDF list/partial list node but we can't know easily
    // until all triples are read
    if(objectIsNode) {
      if(o.value === RDF_NIL) {
        // track rdf:nil uniquely per graph
        const object = nodeMap[o.value];
        if(!('usages' in object)) {
          object.usages = [];
        }
        object.usages.push({
          node,
          property: p,
          value
        });
      } else if(o.value in referencedOnce) {
        // object referenced more than once
        referencedOnce[o.value] = false;
      } else {
        // keep track of single reference
        referencedOnce[o.value] = {
          node,
          property: p,
          value
        };
      }
    }
  }

  /*
  for(let name in dataset) {
    const graph = dataset[name];
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }
    const nodeMap = graphMap[name];
    for(let ti = 0; ti < graph.length; ++ti) {
      const triple = graph[ti];

      // get subject, predicate, object
      const s = triple.subject.value;
      const p = triple.predicate.value;
      const o = triple.object;

      if(!(s in nodeMap)) {
        nodeMap[s] = {'@id': s};
      }
      const node = nodeMap[s];

      const objectIsId = (o.type === 'IRI' || o.type === 'blank node');
      if(objectIsId && !(o.value in nodeMap)) {
        nodeMap[o.value] = {'@id': o.value};
      }

      if(p === RDF_TYPE && !useRdfType && objectIsId) {
        util.addValue(node, '@type', o.value, {propertyIsArray: true});
        continue;
      }

      const value = _RDFToObject(o, useNativeTypes);
      util.addValue(node, p, value, {propertyIsArray: true});

      // object may be an RDF list/partial list node but we can't know easily
      // until all triples are read
      if(objectIsId) {
        if(o.value === RDF_NIL) {
          // track rdf:nil uniquely per graph
          const object = nodeMap[o.value];
          if(!('usages' in object)) {
            object.usages = [];
          }
          object.usages.push({
            node: node,
            property: p,
            value: value
          });
        } else if(o.value in referencedOnce) {
          // object referenced more than once
          referencedOnce[o.value] = false;
        } else {
          // keep track of single reference
          referencedOnce[o.value] = {
            node: node,
            property: p,
            value: value
          };
        }
      }
    }
  }*/

  // convert linked lists to @list arrays
  for(const name in graphMap) {
    const graphObject = graphMap[name];

    // no @lists to be converted, continue
    if(!(RDF_NIL in graphObject)) {
      continue;
    }

    // iterate backwards through each RDF list
    const nil = graphObject[RDF_NIL];
    if(!nil.usages) {
      continue;
    }
    for(let usage of nil.usages) {
      let node = usage.node;
      let property = usage.property;
      let head = usage.value;
      const list = [];
      const listNodes = [];

      // ensure node is a well-formed list node; it must:
      // 1. Be referenced only once.
      // 2. Have an array for rdf:first that has 1 item.
      // 3. Have an array for rdf:rest that has 1 item.
      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
      //   optionally, @type where the value is rdf:List.
      let nodeKeyCount = Object.keys(node).length;
      while(property === RDF_REST &&
        types.isObject(referencedOnce[node['@id']]) &&
        types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 &&
        types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 &&
        (nodeKeyCount === 3 ||
          (nodeKeyCount === 4 && types.isArray(node['@type']) &&
          node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {
        list.push(node[RDF_FIRST][0]);
        listNodes.push(node['@id']);

        // get next node, moving backwards through list
        usage = referencedOnce[node['@id']];
        node = usage.node;
        property = usage.property;
        head = usage.value;
        nodeKeyCount = Object.keys(node).length;

        // if node is not a blank node, then list head found
        if(!graphTypes.isBlankNode(node)) {
          break;
        }
      }

      // transform list into @list object
      delete head['@id'];
      head['@list'] = list.reverse();
      for(const listNode of listNodes) {
        delete graphObject[listNode];
      }
    }

    delete nil.usages;
  }

  const result = [];
  const subjects = Object.keys(defaultGraph).sort();
  for(const subject of subjects) {
    const node = defaultGraph[subject];
    if(subject in graphMap) {
      const graph = node['@graph'] = [];
      const graphObject = graphMap[subject];
      const graphSubjects = Object.keys(graphObject).sort();
      for(const graphSubject of graphSubjects) {
        const node = graphObject[graphSubject];
        // only add full subjects to top-level
        if(!graphTypes.isSubjectReference(node)) {
          graph.push(node);
        }
      }
    }
    // only add full subjects to top-level
    if(!graphTypes.isSubjectReference(node)) {
      result.push(node);
    }
  }

  return result;
};

/**
 * Converts an RDF triple object to a JSON-LD object.
 *
 * @param o the RDF triple object to convert.
 * @param useNativeTypes true to output native types, false not to.
 *
 * @return the JSON-LD object.
 */
function _RDFToObject(o, useNativeTypes, rdfDirection) {
  // convert NamedNode/BlankNode object to JSON-LD
  if(o.termType.endsWith('Node')) {
    return {'@id': o.value};
  }

  // convert literal to JSON-LD
  const rval = {'@value': o.value};

  // add language
  if(o.language) {
    rval['@language'] = o.language;
  } else {
    let type = o.datatype.value;
    if(!type) {
      type = XSD_STRING;
    }
    if(type === RDF_JSON_LITERAL) {
      type = '@json';
      try {
        rval['@value'] = JSON.parse(rval['@value']);
      } catch(e) {
        throw new JsonLdError(
          'JSON literal could not be parsed.',
          'jsonld.InvalidJsonLiteral',
          {code: 'invalid JSON literal', value: rval['@value'], cause: e});
      }
    }
    // use native types for certain xsd types
    if(useNativeTypes) {
      if(type === XSD_BOOLEAN) {
        if(rval['@value'] === 'true') {
          rval['@value'] = true;
        } else if(rval['@value'] === 'false') {
          rval['@value'] = false;
        }
      } else if(types.isNumeric(rval['@value'])) {
        if(type === XSD_INTEGER) {
          const i = parseInt(rval['@value'], 10);
          if(i.toFixed(0) === rval['@value']) {
            rval['@value'] = i;
          }
        } else if(type === XSD_DOUBLE) {
          rval['@value'] = parseFloat(rval['@value']);
        }
      }
      // do not add native type
      if(![XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING].includes(type)) {
        rval['@type'] = type;
      }
    } else if(rdfDirection === 'i18n-datatype' &&
      type.startsWith('https://www.w3.org/ns/i18n#')) {
      const [, language, direction] = type.split(/[#_]/);
      if(language.length > 0) {
        rval['@language'] = language;
        if(!language.match(REGEX_BCP47)) {
          console.warn(`@language must be valid BCP47: ${language}`);
        }
      }
      rval['@direction'] = direction;
    } else if(type !== XSD_STRING) {
      rval['@type'] = type;
    }
  }

  return rval;
}


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {createNodeMap} = __webpack_require__(27);
const {isKeyword} = __webpack_require__(14);
const graphTypes = __webpack_require__(10);
const jsonCanonicalize = __webpack_require__(147);
const types = __webpack_require__(6);
const util = __webpack_require__(5);

const {
  // RDF,
  // RDF_LIST,
  RDF_FIRST,
  RDF_REST,
  RDF_NIL,
  RDF_TYPE,
  // RDF_PLAIN_LITERAL,
  // RDF_XML_LITERAL,
  RDF_JSON_LITERAL,
  // RDF_OBJECT,
  RDF_LANGSTRING,

  // XSD,
  XSD_BOOLEAN,
  XSD_DOUBLE,
  XSD_INTEGER,
  XSD_STRING,
} = __webpack_require__(23);

const {
  isAbsolute: _isAbsoluteIri
} = __webpack_require__(11);

const api = {};
module.exports = api;

/**
 * Outputs an RDF dataset for the expanded JSON-LD input.
 *
 * @param input the expanded JSON-LD input.
 * @param options the RDF serialization options.
 *
 * @return the RDF dataset.
 */
api.toRDF = (input, options) => {
  // create node map for default graph (and any named graphs)
  const issuer = new util.IdentifierIssuer('_:b');
  const nodeMap = {'@default': {}};
  createNodeMap(input, nodeMap, '@default', issuer);

  const dataset = [];
  const graphNames = Object.keys(nodeMap).sort();
  for(const graphName of graphNames) {
    let graphTerm;
    if(graphName === '@default') {
      graphTerm = {termType: 'DefaultGraph', value: ''};
    } else if(_isAbsoluteIri(graphName)) {
      if(graphName.startsWith('_:')) {
        graphTerm = {termType: 'BlankNode'};
      } else {
        graphTerm = {termType: 'NamedNode'};
      }
      graphTerm.value = graphName;
    } else {
      // skip relative IRIs (not valid RDF)
      continue;
    }
    _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);
  }

  return dataset;
};

/**
 * Adds RDF quads for a particular graph to the given dataset.
 *
 * @param dataset the dataset to append RDF quads to.
 * @param graph the graph to create RDF quads for.
 * @param graphTerm the graph term for each quad.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param options the RDF serialization options.
 *
 * @return the array of RDF triples for the given graph.
 */
function _graphToRDF(dataset, graph, graphTerm, issuer, options) {
  const ids = Object.keys(graph).sort();
  for(const id of ids) {
    const node = graph[id];
    const properties = Object.keys(node).sort();
    for(let property of properties) {
      const items = node[property];
      if(property === '@type') {
        property = RDF_TYPE;
      } else if(isKeyword(property)) {
        continue;
      }

      for(const item of items) {
        // RDF subject
        const subject = {
          termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',
          value: id
        };

        // skip relative IRI subjects (not valid RDF)
        if(!_isAbsoluteIri(id)) {
          continue;
        }

        // RDF predicate
        const predicate = {
          termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',
          value: property
        };

        // skip relative IRI predicates (not valid RDF)
        if(!_isAbsoluteIri(property)) {
          continue;
        }

        // skip blank node predicates unless producing generalized RDF
        if(predicate.termType === 'BlankNode' &&
          !options.produceGeneralizedRdf) {
          continue;
        }

        // convert list, value or node object to triple
        const object =
          _objectToRDF(item, issuer, dataset, graphTerm, options.rdfDirection);
        // skip null objects (they are relative IRIs)
        if(object) {
          dataset.push({
            subject,
            predicate,
            object,
            graph: graphTerm
          });
        }
      }
    }
  }
}

/**
 * Converts a @list value into linked list of blank node RDF quads
 * (an RDF collection).
 *
 * @param list the @list value.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the array of quads to append to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the head of the list.
 */
function _listToRDF(list, issuer, dataset, graphTerm, rdfDirection) {
  const first = {termType: 'NamedNode', value: RDF_FIRST};
  const rest = {termType: 'NamedNode', value: RDF_REST};
  const nil = {termType: 'NamedNode', value: RDF_NIL};

  const last = list.pop();
  // Result is the head of the list
  const result = last ? {termType: 'BlankNode', value: issuer.getId()} : nil;
  let subject = result;

  for(const item of list) {
    const object = _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection);
    const next = {termType: 'BlankNode', value: issuer.getId()};
    dataset.push({
      subject,
      predicate: first,
      object,
      graph: graphTerm
    });
    dataset.push({
      subject,
      predicate: rest,
      object: next,
      graph: graphTerm
    });
    subject = next;
  }

  // Tail of list
  if(last) {
    const object = _objectToRDF(last, issuer, dataset, graphTerm, rdfDirection);
    dataset.push({
      subject,
      predicate: first,
      object,
      graph: graphTerm
    });
    dataset.push({
      subject,
      predicate: rest,
      object: nil,
      graph: graphTerm
    });
  }

  return result;
}

/**
 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,
 * node object to an RDF resource, or adds a list.
 *
 * @param item the JSON-LD value or node object.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the dataset to append RDF quads to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the RDF literal or RDF resource.
 */
function _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection) {
  const object = {};

  // convert value object to RDF
  if(graphTypes.isValue(item)) {
    object.termType = 'Literal';
    object.value = undefined;
    object.datatype = {
      termType: 'NamedNode'
    };
    let value = item['@value'];
    const datatype = item['@type'] || null;

    // convert to XSD/JSON datatypes as appropriate
    if(datatype === '@json') {
      object.value = jsonCanonicalize(value);
      object.datatype.value = RDF_JSON_LITERAL;
    } else if(types.isBoolean(value)) {
      object.value = value.toString();
      object.datatype.value = datatype || XSD_BOOLEAN;
    } else if(types.isDouble(value) || datatype === XSD_DOUBLE) {
      if(!types.isDouble(value)) {
        value = parseFloat(value);
      }
      // canonical double representation
      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
      object.datatype.value = datatype || XSD_DOUBLE;
    } else if(types.isNumber(value)) {
      object.value = value.toFixed(0);
      object.datatype.value = datatype || XSD_INTEGER;
    } else if(rdfDirection === 'i18n-datatype' &&
      '@direction' in item) {
      const datatype = 'https://www.w3.org/ns/i18n#' +
        (item['@language'] || '') +
        `_${item['@direction']}`;
      object.datatype.value = datatype;
      object.value = value;
    } else if('@language' in item) {
      object.value = value;
      object.datatype.value = datatype || RDF_LANGSTRING;
      object.language = item['@language'];
    } else {
      object.value = value;
      object.datatype.value = datatype || XSD_STRING;
    }
  } else if(graphTypes.isList(item)) {
    const _list =
      _listToRDF(item['@list'], issuer, dataset, graphTerm, rdfDirection);
    object.termType = _list.termType;
    object.value = _list.value;
  } else {
    // convert string/node object to RDF
    const id = types.isObject(item) ? item['@id'] : item;
    object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';
    object.value = id;
  }

  // skip relative IRIs, not valid RDF
  if(object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) {
    return null;
  }

  return object;
}


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* jshint esversion: 6 */
/* jslint node: true */


module.exports = function (object) {
  return serialize(object);

  function serialize (object) {
    if (object === null || typeof object !== 'object' || object.toJSON != null) {
      return JSON.stringify(object);
    }
    if (Array.isArray(object) && object.length === 0) {
      return '[]';
    }
    if (Array.isArray(object) && object.length === 1) {
      return '[' + serialize(object[0]) + ']';
    }
    if (Array.isArray(object)) {
      return '[' + object.reduce((t, cv, ci) => {
        t = (ci === 1 ? serialize(t) : t);
        return t + ',' + serialize(cv);
      }) + ']';
    }
    const keys = Object.keys(object);
    if (keys.length === 0) {
      return '{}';
    }
    if (keys.length === 1) {
      return '{' + serialize(keys[0]) + ':' + serialize(object[keys[0]]) + '}';
    }
    return '{' + keys.sort().reduce((t, cv, ci) => {
      t = (ci === 1 ? serialize(t) + ':' + serialize(object[t]) : t);
      return t + ',' + serialize(cv) + ':' + serialize(object[cv]);
    }) + '}';
  }
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {isKeyword} = __webpack_require__(14);
const graphTypes = __webpack_require__(10);
const types = __webpack_require__(6);
const util = __webpack_require__(5);
const url = __webpack_require__(11);
const JsonLdError = __webpack_require__(7);
const {
  createNodeMap: _createNodeMap,
  mergeNodeMapGraphs: _mergeNodeMapGraphs
} = __webpack_require__(27);

const api = {};
module.exports = api;

/**
 * Performs JSON-LD `merged` framing.
 *
 * @param input the expanded JSON-LD to frame.
 * @param frame the expanded JSON-LD frame to use.
 * @param options the framing options.
 *
 * @return the framed output.
 */
api.frameMergedOrDefault = (input, frame, options) => {
  // create framing state
  const state = {
    options,
    embedded: false,
    graph: '@default',
    graphMap: {'@default': {}},
    subjectStack: [],
    link: {},
    bnodeMap: {}
  };

  // produce a map of all graphs and name each bnode
  // FIXME: currently uses subjects from @merged graph only
  const issuer = new util.IdentifierIssuer('_:b');
  _createNodeMap(input, state.graphMap, '@default', issuer);
  if(options.merged) {
    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);
    state.graph = '@merged';
  }
  state.subjects = state.graphMap[state.graph];

  // frame the subjects
  const framed = [];
  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);

  // If pruning blank nodes, find those to prune
  if(options.pruneBlankNodeIdentifiers) {
    // remove all blank nodes appearing only once, done in compaction
    options.bnodesToClear =
      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);
  }

  // remove @preserve from results
  options.link = {};
  return _cleanupPreserve(framed, options);
};

/**
 * Frames subjects according to the given frame.
 *
 * @param state the current framing state.
 * @param subjects the subjects to filter.
 * @param frame the frame.
 * @param parent the parent subject or top-level array.
 * @param property the parent property, initialized to null.
 */
api.frame = (state, subjects, frame, parent, property = null) => {
  // validate the frame
  _validateFrame(frame);
  frame = frame[0];

  // get flags for current frame
  const options = state.options;
  const flags = {
    embed: _getFrameFlag(frame, options, 'embed'),
    explicit: _getFrameFlag(frame, options, 'explicit'),
    requireAll: _getFrameFlag(frame, options, 'requireAll')
  };

  // get link for current graph
  if(!state.link.hasOwnProperty(state.graph)) {
    state.link[state.graph] = {};
  }
  const link = state.link[state.graph];

  // filter out subjects that match the frame
  const matches = _filterSubjects(state, subjects, frame, flags);

  // add matches to output
  const ids = Object.keys(matches).sort();
  for(const id of ids) {
    const subject = matches[id];

    /* Note: In order to treat each top-level match as a compartmentalized
    result, clear the unique embedded subjects map when the property is null,
    which only occurs at the top-level. */
    if(property === null) {
      state.uniqueEmbeds = {[state.graph]: {}};
    } else {
      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};
    }

    if(flags.embed === '@link' && id in link) {
      // TODO: may want to also match an existing linked subject against
      // the current frame ... so different frames could produce different
      // subjects that are only shared in-memory when the frames are the same

      // add existing linked subject
      _addFrameOutput(parent, property, link[id]);
      continue;
    }

    // start output for subject
    const output = {'@id': id};
    if(id.indexOf('_:') === 0) {
      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});
    }
    link[id] = output;

    // validate @embed
    if((flags.embed === '@first' || flags.embed === '@last') && state.is11) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; invalid value of @embed.',
        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});
    }

    if(!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
      // skip adding this node object to the top level, as it was
      // already included in another node object
      continue;
    }

    // if embed is @never or if a circular reference would be created by an
    // embed, the subject cannot be embedded, just add the reference;
    // note that a circular reference won't occur when the embed flag is
    // `@link` as the above check will short-circuit before reaching this point
    if(state.embedded &&
      (flags.embed === '@never' ||
      _createsCircularReference(subject, state.graph, state.subjectStack))) {
      _addFrameOutput(parent, property, output);
      continue;
    }

    // if only the first (or once) should be embedded
    if(state.embedded &&
       (flags.embed == '@first' || flags.embed == '@once') &&
       state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
      _addFrameOutput(parent, property, output);
      continue;
    }

    // if only the last match should be embedded
    if(flags.embed === '@last') {
      // remove any existing embed
      if(id in state.uniqueEmbeds[state.graph]) {
        _removeEmbed(state, id);
      }
    }

    state.uniqueEmbeds[state.graph][id] = {parent, property};

    // push matching subject onto stack to enable circular embed checks
    state.subjectStack.push({subject, graph: state.graph});

    // subject is also the name of a graph
    if(id in state.graphMap) {
      let recurse = false;
      let subframe = null;
      if(!('@graph' in frame)) {
        recurse = state.graph !== '@merged';
        subframe = {};
      } else {
        subframe = frame['@graph'][0];
        recurse = !(id === '@merged' || id === '@default');
        if(!types.isObject(subframe)) {
          subframe = {};
        }
      }

      if(recurse) {
        // recurse into graph
        api.frame(
          {...state, graph: id, embedded: false},
          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');
      }
    }

    // if frame has @included, recurse over its sub-frame
    if('@included' in frame) {
      api.frame(
        {...state, embedded: false},
        subjects, frame['@included'], output, '@included');
    }

    // iterate over subject properties
    for(const prop of Object.keys(subject).sort()) {
      // copy keywords to output
      if(isKeyword(prop)) {
        output[prop] = util.clone(subject[prop]);

        if(prop === '@type') {
          // count bnode values of @type
          for(const type of subject['@type']) {
            if(type.indexOf('_:') === 0) {
              util.addValue(
                state.bnodeMap, type, output, {propertyIsArray: true});
            }
          }
        }
        continue;
      }

      // explicit is on and property isn't in the frame, skip processing
      if(flags.explicit && !(prop in frame)) {
        continue;
      }

      // add objects
      for(const o of subject[prop]) {
        const subframe = (prop in frame ?
          frame[prop] : _createImplicitFrame(flags));

        // recurse into list
        if(graphTypes.isList(o)) {
          const subframe =
            (frame[prop] && frame[prop][0] && frame[prop][0]['@list']) ?
              frame[prop][0]['@list'] :
              _createImplicitFrame(flags);

          // add empty list
          const list = {'@list': []};
          _addFrameOutput(output, prop, list);

          // add list objects
          const src = o['@list'];
          for(const oo of src) {
            if(graphTypes.isSubjectReference(oo)) {
              // recurse into subject reference
              api.frame(
                {...state, embedded: true},
                [oo['@id']], subframe, list, '@list');
            } else {
              // include other values automatically
              _addFrameOutput(list, '@list', util.clone(oo));
            }
          }
        } else if(graphTypes.isSubjectReference(o)) {
          // recurse into subject reference
          api.frame(
            {...state, embedded: true},
            [o['@id']], subframe, output, prop);
        } else if(_valueMatch(subframe[0], o)) {
          // include other values, if they match
          _addFrameOutput(output, prop, util.clone(o));
        }
      }
    }

    // handle defaults
    for(const prop of Object.keys(frame).sort()) {
      // skip keywords
      if(prop === '@type') {
        if(!types.isObject(frame[prop][0]) ||
           !('@default' in frame[prop][0])) {
          continue;
        }
        // allow through default types
      } else if(isKeyword(prop)) {
        continue;
      }

      // if omit default is off, then include default values for properties
      // that appear in the next frame but are not in the matching subject
      const next = frame[prop][0] || {};
      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');
      if(!omitDefaultOn && !(prop in output)) {
        let preserve = '@null';
        if('@default' in next) {
          preserve = util.clone(next['@default']);
        }
        if(!types.isArray(preserve)) {
          preserve = [preserve];
        }
        output[prop] = [{'@preserve': preserve}];
      }
    }

    // if embed reverse values by finding nodes having this subject as a value
    // of the associated property
    for(const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {
      const subframe = frame['@reverse'][reverseProp];
      for(const subject of Object.keys(state.subjects)) {
        const nodeValues =
          util.getValues(state.subjects[subject], reverseProp);
        if(nodeValues.some(v => v['@id'] === id)) {
          // node has property referencing this subject, recurse
          output['@reverse'] = output['@reverse'] || {};
          util.addValue(
            output['@reverse'], reverseProp, [], {propertyIsArray: true});
          api.frame(
            {...state, embedded: true},
            [subject], subframe, output['@reverse'][reverseProp],
            property);
        }
      }
    }

    // add output to parent
    _addFrameOutput(parent, property, output);

    // pop matching subject from circular ref-checking stack
    state.subjectStack.pop();
  }
};

/**
 * Replace `@null` with `null`, removing it from arrays.
 *
 * @param input the framed, compacted output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */
api.cleanupNull = (input, options) => {
  // recurse through arrays
  if(types.isArray(input)) {
    const noNulls = input.map(v => api.cleanupNull(v, options));
    return noNulls.filter(v => v); // removes nulls from array
  }

  if(input === '@null') {
    return null;
  }

  if(types.isObject(input)) {
    // handle in-memory linked nodes
    if('@id' in input) {
      const id = input['@id'];
      if(options.link.hasOwnProperty(id)) {
        const idx = options.link[id].indexOf(input);
        if(idx !== -1) {
          // already visited
          return options.link[id][idx];
        }
        // prevent circular visitation
        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    for(const key in input) {
      input[key] = api.cleanupNull(input[key], options);
    }
  }
  return input;
};

/**
 * Creates an implicit frame when recursing through subject matches. If
 * a frame doesn't have an explicit frame for a particular property, then
 * a wildcard child frame will be created that uses the same flags that the
 * parent frame used.
 *
 * @param flags the current framing flags.
 *
 * @return the implicit frame.
 */
function _createImplicitFrame(flags) {
  const frame = {};
  for(const key in flags) {
    if(flags[key] !== undefined) {
      frame['@' + key] = [flags[key]];
    }
  }
  return [frame];
}

/**
 * Checks the current subject stack to see if embedding the given subject
 * would cause a circular reference.
 *
 * @param subjectToEmbed the subject to embed.
 * @param graph the graph the subject to embed is in.
 * @param subjectStack the current stack of subjects.
 *
 * @return true if a circular reference would be created, false if not.
 */
function _createsCircularReference(subjectToEmbed, graph, subjectStack) {
  for(let i = subjectStack.length - 1; i >= 0; --i) {
    const subject = subjectStack[i];
    if(subject.graph === graph &&
      subject.subject['@id'] === subjectToEmbed['@id']) {
      return true;
    }
  }
  return false;
}

/**
 * Gets the frame flag value for the given flag name.
 *
 * @param frame the frame.
 * @param options the framing options.
 * @param name the flag name.
 *
 * @return the flag value.
 */
function _getFrameFlag(frame, options, name) {
  const flag = '@' + name;
  let rval = (flag in frame ? frame[flag][0] : options[name]);
  if(name === 'embed') {
    // default is "@last"
    // backwards-compatibility support for "embed" maps:
    // true => "@last"
    // false => "@never"
    if(rval === true) {
      rval = '@once';
    } else if(rval === false) {
      rval = '@never';
    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link' &&
      rval !== '@first' && rval !== '@last' && rval !== '@once') {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; invalid value of @embed.',
        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});
    }
  }
  return rval;
}

/**
 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
 *
 * @param frame the frame to validate.
 */
function _validateFrame(frame) {
  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',
      'jsonld.SyntaxError', {frame});
  }

  if('@id' in frame[0]) {
    for(const id of util.asArray(frame[0]['@id'])) {
      // @id must be wildcard or an IRI
      if(!(types.isObject(id) || url.isAbsolute(id)) ||
        (types.isString(id) && id.indexOf('_:') === 0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; invalid @id in frame.',
          'jsonld.SyntaxError', {code: 'invalid frame', frame});
      }
    }
  }

  if('@type' in frame[0]) {
    for(const type of util.asArray(frame[0]['@type'])) {
      // @id must be wildcard or an IRI
      if(!(types.isObject(type) || url.isAbsolute(type)) ||
        (types.isString(type) && type.indexOf('_:') === 0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; invalid @type in frame.',
          'jsonld.SyntaxError', {code: 'invalid frame', frame});
      }
    }
  }
}

/**
 * Returns a map of all of the subjects that match a parsed frame.
 *
 * @param state the current framing state.
 * @param subjects the set of subjects to filter.
 * @param frame the parsed frame.
 * @param flags the frame flags.
 *
 * @return all of the matched subjects.
 */
function _filterSubjects(state, subjects, frame, flags) {
  // filter subjects in @id order
  const rval = {};
  for(const id of subjects) {
    const subject = state.graphMap[state.graph][id];
    if(_filterSubject(state, subject, frame, flags)) {
      rval[id] = subject;
    }
  }
  return rval;
}

/**
 * Returns true if the given subject matches the given frame.
 *
 * Matches either based on explicit type inclusion where the node has any
 * type listed in the frame. If the frame has empty types defined matches
 * nodes not having a @type. If the frame has a type of {} defined matches
 * nodes having any type defined.
 *
 * Otherwise, does duck typing, where the node must have all of the
 * properties defined in the frame.
 *
 * @param state the current framing state.
 * @param subject the subject to check.
 * @param frame the frame to check.
 * @param flags the frame flags.
 *
 * @return true if the subject matches, false if not.
 */
function _filterSubject(state, subject, frame, flags) {
  // check ducktype
  let wildcard = true;
  let matchesSome = false;

  for(const key in frame) {
    let matchThis = false;
    const nodeValues = util.getValues(subject, key);
    const isEmpty = util.getValues(frame, key).length === 0;

    if(key === '@id') {
      // match on no @id or any matching @id, including wildcard
      if(types.isEmptyObject(frame['@id'][0] || {})) {
        matchThis = true;
      } else if(frame['@id'].length >= 0) {
        matchThis = frame['@id'].includes(nodeValues[0]);
      }
      if(!flags.requireAll) {
        return matchThis;
      }
    } else if(key === '@type') {
      // check @type (object value means 'any' type,
      // fall through to ducktyping)
      wildcard = false;
      if(isEmpty) {
        if(nodeValues.length > 0) {
          // don't match on no @type
          return false;
        }
        matchThis = true;
      } else if(frame['@type'].length === 1 &&
        types.isEmptyObject(frame['@type'][0])) {
        // match on wildcard @type if there is a type
        matchThis = nodeValues.length > 0;
      } else {
        // match on a specific @type
        for(const type of frame['@type']) {
          if(types.isObject(type) && '@default' in type) {
            // match on default object
            matchThis = true;
          } else {
            matchThis = matchThis || nodeValues.some(tt => tt === type);
          }
        }
      }
      if(!flags.requireAll) {
        return matchThis;
      }
    } else if(isKeyword(key)) {
      continue;
    } else {
      // Force a copy of this frame entry so it can be manipulated
      const thisFrame = util.getValues(frame, key)[0];
      let hasDefault = false;
      if(thisFrame) {
        _validateFrame([thisFrame]);
        hasDefault = '@default' in thisFrame;
      }

      // no longer a wildcard pattern if frame has any non-keyword properties
      wildcard = false;

      // skip, but allow match if node has no value for property, and frame has
      // a default value
      if(nodeValues.length === 0 && hasDefault) {
        continue;
      }

      // if frame value is empty, don't match if subject has any value
      if(nodeValues.length > 0 && isEmpty) {
        return false;
      }

      if(thisFrame === undefined) {
        // node does not match if values is not empty and the value of property
        // in frame is match none.
        if(nodeValues.length > 0) {
          return false;
        }
        matchThis = true;
      } else {
        if(graphTypes.isList(thisFrame)) {
          const listValue = thisFrame['@list'][0];
          if(graphTypes.isList(nodeValues[0])) {
            const nodeListValues = nodeValues[0]['@list'];

            if(graphTypes.isValue(listValue)) {
              // match on any matching value
              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));
            } else if(graphTypes.isSubject(listValue) ||
              graphTypes.isSubjectReference(listValue)) {
              matchThis = nodeListValues.some(lv => _nodeMatch(
                state, listValue, lv, flags));
            }
          }
        } else if(graphTypes.isValue(thisFrame)) {
          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));
        } else if(graphTypes.isSubjectReference(thisFrame)) {
          matchThis =
            nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));
        } else if(types.isObject(thisFrame)) {
          matchThis = nodeValues.length > 0;
        } else {
          matchThis = false;
        }
      }
    }

    // all non-defaulted values must match if requireAll is set
    if(!matchThis && flags.requireAll) {
      return false;
    }

    matchesSome = matchesSome || matchThis;
  }

  // return true if wildcard or subject matches some properties
  return wildcard || matchesSome;
}

/**
 * Removes an existing embed.
 *
 * @param state the current framing state.
 * @param id the @id of the embed to remove.
 */
function _removeEmbed(state, id) {
  // get existing embed
  const embeds = state.uniqueEmbeds[state.graph];
  const embed = embeds[id];
  const parent = embed.parent;
  const property = embed.property;

  // create reference to replace embed
  const subject = {'@id': id};

  // remove existing embed
  if(types.isArray(parent)) {
    // replace subject with reference
    for(let i = 0; i < parent.length; ++i) {
      if(util.compareValues(parent[i], subject)) {
        parent[i] = subject;
        break;
      }
    }
  } else {
    // replace subject with reference
    const useArray = types.isArray(parent[property]);
    util.removeValue(parent, property, subject, {propertyIsArray: useArray});
    util.addValue(parent, property, subject, {propertyIsArray: useArray});
  }

  // recursively remove dependent dangling embeds
  const removeDependents = id => {
    // get embed keys as a separate array to enable deleting keys in map
    const ids = Object.keys(embeds);
    for(const next of ids) {
      if(next in embeds && types.isObject(embeds[next].parent) &&
        embeds[next].parent['@id'] === id) {
        delete embeds[next];
        removeDependents(next);
      }
    }
  };
  removeDependents(id);
}

/**
 * Removes the @preserve keywords from expanded result of framing.
 *
 * @param input the framed, framed output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */
function _cleanupPreserve(input, options) {
  // recurse through arrays
  if(types.isArray(input)) {
    return input.map(value => _cleanupPreserve(value, options));
  }

  if(types.isObject(input)) {
    // remove @preserve
    if('@preserve' in input) {
      return input['@preserve'][0];
    }

    // skip @values
    if(graphTypes.isValue(input)) {
      return input;
    }

    // recurse through @lists
    if(graphTypes.isList(input)) {
      input['@list'] = _cleanupPreserve(input['@list'], options);
      return input;
    }

    // handle in-memory linked nodes
    if('@id' in input) {
      const id = input['@id'];
      if(options.link.hasOwnProperty(id)) {
        const idx = options.link[id].indexOf(input);
        if(idx !== -1) {
          // already visited
          return options.link[id][idx];
        }
        // prevent circular visitation
        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    // recurse through properties
    for(const prop in input) {
      // potentially remove the id, if it is an unreference bnode
      if(prop === '@id' && options.bnodesToClear.includes(input[prop])) {
        delete input['@id'];
        continue;
      }

      input[prop] = _cleanupPreserve(input[prop], options);
    }
  }
  return input;
}

/**
 * Adds framing output to the given parent.
 *
 * @param parent the parent to add to.
 * @param property the parent property.
 * @param output the output to add.
 */
function _addFrameOutput(parent, property, output) {
  if(types.isObject(parent)) {
    util.addValue(parent, property, output, {propertyIsArray: true});
  } else {
    parent.push(output);
  }
}

/**
 * Node matches if it is a node, and matches the pattern as a frame.
 *
 * @param state the current framing state.
 * @param pattern used to match value
 * @param value to check
 * @param flags the frame flags.
 */
function _nodeMatch(state, pattern, value, flags) {
  if(!('@id' in value)) {
    return false;
  }
  const nodeObject = state.subjects[value['@id']];
  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);
}

/**
 * Value matches if it is a value and matches the value pattern
 *
 * * `pattern` is empty
 * * @values are the same, or `pattern[@value]` is a wildcard, and
 * * @types are the same or `value[@type]` is not null
 *   and `pattern[@type]` is `{}`, or `value[@type]` is null
 *   and `pattern[@type]` is null or `[]`, and
 * * @languages are the same or `value[@language]` is not null
 *   and `pattern[@language]` is `{}`, or `value[@language]` is null
 *   and `pattern[@language]` is null or `[]`.
 *
 * @param pattern used to match value
 * @param value to check
 */
function _valueMatch(pattern, value) {
  const v1 = value['@value'];
  const t1 = value['@type'];
  const l1 = value['@language'];
  const v2 = pattern['@value'] ?
    (types.isArray(pattern['@value']) ?
      pattern['@value'] : [pattern['@value']]) :
    [];
  const t2 = pattern['@type'] ?
    (types.isArray(pattern['@type']) ?
      pattern['@type'] : [pattern['@type']]) :
    [];
  const l2 = pattern['@language'] ?
    (types.isArray(pattern['@language']) ?
      pattern['@language'] : [pattern['@language']]) :
    [];

  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {
    return true;
  }
  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {
    return false;
  }
  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&
    types.isEmptyObject(t2[0]))) {
    return false;
  }
  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&
    types.isEmptyObject(l2[0]))) {
    return false;
  }
  return true;
}


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const JsonLdError = __webpack_require__(7);

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
  isUndefined: _isUndefined
} = __webpack_require__(6);

const {
  isList: _isList,
  isValue: _isValue,
  isGraph: _isGraph,
  isSimpleGraph: _isSimpleGraph,
  isSubjectReference: _isSubjectReference
} = __webpack_require__(10);

const {
  expandIri: _expandIri,
  getContextValue: _getContextValue,
  isKeyword: _isKeyword,
  process: _processContext,
  processingMode: _processingMode
} = __webpack_require__(14);

const {
  removeBase: _removeBase,
  prependBase: _prependBase
} = __webpack_require__(11);

const {
  addValue: _addValue,
  asArray: _asArray,
  compareShortestLeast: _compareShortestLeast
} = __webpack_require__(5);

const api = {};
module.exports = api;

/**
 * Recursively compacts an element using the given active context. All values
 * must be in expanded form before this method is called.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the compacted property associated with the element
 *          to compact, null for none.
 * @param element the element to compact.
 * @param options the compaction options.
 * @param compactionMap the compaction map to use.
 *
 * @return a promise that resolves to the compacted value.
 */
api.compact = async ({
  activeCtx,
  activeProperty = null,
  element,
  options = {},
  compactionMap = () => undefined
}) => {
  // recursively compact array
  if(_isArray(element)) {
    let rval = [];
    for(let i = 0; i < element.length; ++i) {
      // compact, dropping any null values unless custom mapped
      let compacted = await api.compact({
        activeCtx,
        activeProperty,
        element: element[i],
        options,
        compactionMap
      });
      if(compacted === null) {
        compacted = await compactionMap({
          unmappedValue: element[i],
          activeCtx,
          activeProperty,
          parent: element,
          index: i,
          options
        });
        if(compacted === undefined) {
          continue;
        }
      }
      rval.push(compacted);
    }
    if(options.compactArrays && rval.length === 1) {
      // use single element if no container is specified
      const container = _getContextValue(
        activeCtx, activeProperty, '@container') || [];
      if(container.length === 0) {
        rval = rval[0];
      }
    }
    return rval;
  }

  // use any scoped context on activeProperty
  const ctx = _getContextValue(activeCtx, activeProperty, '@context');
  if(!_isUndefined(ctx)) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: ctx,
      propagate: true,
      overrideProtected: true,
      options
    });
  }

  // recursively compact object
  if(_isObject(element)) {
    if(options.link && '@id' in element &&
      options.link.hasOwnProperty(element['@id'])) {
      // check for a linked element to reuse
      const linked = options.link[element['@id']];
      for(let i = 0; i < linked.length; ++i) {
        if(linked[i].expanded === element) {
          return linked[i].compacted;
        }
      }
    }

    // do value compaction on @values and subject references
    if(_isValue(element) || _isSubjectReference(element)) {
      const rval =
        api.compactValue({activeCtx, activeProperty, value: element, options});
      if(options.link && _isSubjectReference(element)) {
        // store linked element
        if(!(options.link.hasOwnProperty(element['@id']))) {
          options.link[element['@id']] = [];
        }
        options.link[element['@id']].push({expanded: element, compacted: rval});
      }
      return rval;
    }

    // if expanded property is @list and we're contained within a list
    // container, recursively compact this item to an array
    if(_isList(element)) {
      const container = _getContextValue(
        activeCtx, activeProperty, '@container') || [];
      if(container.includes('@list')) {
        return api.compact({
          activeCtx,
          activeProperty,
          element: element['@list'],
          options,
          compactionMap
        });
      }
    }

    // FIXME: avoid misuse of active property as an expanded property?
    const insideReverse = (activeProperty === '@reverse');

    const rval = {};

    // original context before applying property-scoped and local contexts
    const inputCtx = activeCtx;

    // revert to previous context, if there is one,
    // and element is not a value object or a node reference
    if(!_isValue(element) && !_isSubjectReference(element)) {
      activeCtx = activeCtx.revertToPreviousContext();
    }

    // apply property-scoped context after reverting term-scoped context
    const propertyScopedCtx =
      _getContextValue(inputCtx, activeProperty, '@context');
    if(!_isUndefined(propertyScopedCtx)) {
      activeCtx = await _processContext({
        activeCtx,
        localCtx: propertyScopedCtx,
        propagate: true,
        overrideProtected: true,
        options
      });
    }

    if(options.link && '@id' in element) {
      // store linked element
      if(!options.link.hasOwnProperty(element['@id'])) {
        options.link[element['@id']] = [];
      }
      options.link[element['@id']].push({expanded: element, compacted: rval});
    }

    // apply any context defined on an alias of @type
    // if key is @type and any compacted value is a term having a local
    // context, overlay that context
    let types = element['@type'] || [];
    if(types.length > 1) {
      types = Array.from(types).sort();
    }
    // find all type-scoped contexts based on current context, prior to
    // updating it
    const typeContext = activeCtx;
    for(const type of types) {
      const compactedType = api.compactIri(
        {activeCtx: typeContext, iri: type, relativeTo: {vocab: true}});

      // Use any type-scoped context defined on this value
      const ctx = _getContextValue(inputCtx, compactedType, '@context');
      if(!_isUndefined(ctx)) {
        activeCtx = await _processContext({
          activeCtx,
          localCtx: ctx,
          options,
          propagate: false
        });
      }
    }

    // process element keys in order
    const keys = Object.keys(element).sort();
    for(const expandedProperty of keys) {
      const expandedValue = element[expandedProperty];

      // compact @id
      if(expandedProperty === '@id') {
        let compactedValue = _asArray(expandedValue).map(
          expandedIri => api.compactIri({
            activeCtx,
            iri: expandedIri,
            relativeTo: {vocab: false},
            base: options.base
          }));
        if(compactedValue.length === 1) {
          compactedValue = compactedValue[0];
        }

        // use keyword alias and add value
        const alias = api.compactIri(
          {activeCtx, iri: '@id', relativeTo: {vocab: true}});

        rval[alias] = compactedValue;
        continue;
      }

      // compact @type(s)
      if(expandedProperty === '@type') {
        // resolve type values against previous context
        let compactedValue = _asArray(expandedValue).map(
          expandedIri => api.compactIri({
            activeCtx: inputCtx,
            iri: expandedIri,
            relativeTo: {vocab: true}
          }));
        if(compactedValue.length === 1) {
          compactedValue = compactedValue[0];
        }

        // use keyword alias and add value
        const alias = api.compactIri(
          {activeCtx, iri: '@type', relativeTo: {vocab: true}});
        const container = _getContextValue(
          activeCtx, alias, '@container') || [];

        // treat as array for @type if @container includes @set
        const typeAsSet =
          container.includes('@set') &&
          _processingMode(activeCtx, 1.1);
        const isArray =
          typeAsSet || (_isArray(compactedValue) && expandedValue.length === 0);
        _addValue(rval, alias, compactedValue, {propertyIsArray: isArray});
        continue;
      }

      // handle @reverse
      if(expandedProperty === '@reverse') {
        // recursively compact expanded value
        const compactedValue = await api.compact({
          activeCtx,
          activeProperty: '@reverse',
          element: expandedValue,
          options,
          compactionMap
        });

        // handle double-reversed properties
        for(const compactedProperty in compactedValue) {
          if(activeCtx.mappings.has(compactedProperty) &&
            activeCtx.mappings.get(compactedProperty).reverse) {
            const value = compactedValue[compactedProperty];
            const container = _getContextValue(
              activeCtx, compactedProperty, '@container') || [];
            const useArray = (
              container.includes('@set') || !options.compactArrays);
            _addValue(
              rval, compactedProperty, value, {propertyIsArray: useArray});
            delete compactedValue[compactedProperty];
          }
        }

        if(Object.keys(compactedValue).length > 0) {
          // use keyword alias and add value
          const alias = api.compactIri({
            activeCtx,
            iri: expandedProperty,
            relativeTo: {vocab: true}
          });
          _addValue(rval, alias, compactedValue);
        }

        continue;
      }

      if(expandedProperty === '@preserve') {
        // compact using activeProperty
        const compactedValue = await api.compact({
          activeCtx,
          activeProperty,
          element: expandedValue,
          options,
          compactionMap
        });

        if(!(_isArray(compactedValue) && compactedValue.length === 0)) {
          _addValue(rval, expandedProperty, compactedValue);
        }
        continue;
      }

      // handle @index property
      if(expandedProperty === '@index') {
        // drop @index if inside an @index container
        const container = _getContextValue(
          activeCtx, activeProperty, '@container') || [];
        if(container.includes('@index')) {
          continue;
        }

        // use keyword alias and add value
        const alias = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          relativeTo: {vocab: true}
        });
        _addValue(rval, alias, expandedValue);
        continue;
      }

      // skip array processing for keywords that aren't
      // @graph, @list, or @included
      if(expandedProperty !== '@graph' && expandedProperty !== '@list' &&
        expandedProperty !== '@included' &&
        _isKeyword(expandedProperty)) {
        // use keyword alias and add value as is
        const alias = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          relativeTo: {vocab: true}
        });
        _addValue(rval, alias, expandedValue);
        continue;
      }

      // Note: expanded value must be an array due to expansion algorithm.
      if(!_isArray(expandedValue)) {
        throw new JsonLdError(
          'JSON-LD expansion error; expanded value must be an array.',
          'jsonld.SyntaxError');
      }

      // preserve empty arrays
      if(expandedValue.length === 0) {
        const itemActiveProperty = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          value: expandedValue,
          relativeTo: {vocab: true},
          reverse: insideReverse
        });
        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?
          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
        let nestResult = rval;
        if(nestProperty) {
          _checkNestProperty(activeCtx, nestProperty, options);
          if(!_isObject(rval[nestProperty])) {
            rval[nestProperty] = {};
          }
          nestResult = rval[nestProperty];
        }
        _addValue(
          nestResult, itemActiveProperty, expandedValue, {
            propertyIsArray: true
          });
      }

      // recusively process array values
      for(const expandedItem of expandedValue) {
        // compact property and get container type
        const itemActiveProperty = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          value: expandedItem,
          relativeTo: {vocab: true},
          reverse: insideReverse
        });

        // if itemActiveProperty is a @nest property, add values to nestResult,
        // otherwise rval
        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?
          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
        let nestResult = rval;
        if(nestProperty) {
          _checkNestProperty(activeCtx, nestProperty, options);
          if(!_isObject(rval[nestProperty])) {
            rval[nestProperty] = {};
          }
          nestResult = rval[nestProperty];
        }

        const container = _getContextValue(
          activeCtx, itemActiveProperty, '@container') || [];

        // get simple @graph or @list value if appropriate
        const isGraph = _isGraph(expandedItem);
        const isList = _isList(expandedItem);
        let inner;
        if(isList) {
          inner = expandedItem['@list'];
        } else if(isGraph) {
          inner = expandedItem['@graph'];
        }

        // recursively compact expanded item
        let compactedItem = await api.compact({
          activeCtx,
          activeProperty: itemActiveProperty,
          element: (isList || isGraph) ? inner : expandedItem,
          options,
          compactionMap
        });

        // handle @list
        if(isList) {
          // ensure @list value is an array
          if(!_isArray(compactedItem)) {
            compactedItem = [compactedItem];
          }

          if(!container.includes('@list')) {
            // wrap using @list alias
            compactedItem = {
              [api.compactIri({
                activeCtx,
                iri: '@list',
                relativeTo: {vocab: true}
              })]: compactedItem
            };

            // include @index from expanded @list, if any
            if('@index' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@index',
                relativeTo: {vocab: true}
              })] = expandedItem['@index'];
            }
          } else {
            _addValue(nestResult, itemActiveProperty, compactedItem, {
              valueIsArray: true,
              allowDuplicate: true
            });
            continue;
          }
        }

        // Graph object compaction cases
        if(isGraph) {
          if(container.includes('@graph') && (container.includes('@id') ||
            container.includes('@index') && _isSimpleGraph(expandedItem))) {
            // get or create the map object
            let mapObject;
            if(nestResult.hasOwnProperty(itemActiveProperty)) {
              mapObject = nestResult[itemActiveProperty];
            } else {
              nestResult[itemActiveProperty] = mapObject = {};
            }

            // index on @id or @index or alias of @none
            const key = (container.includes('@id') ?
              expandedItem['@id'] : expandedItem['@index']) ||
              api.compactIri({activeCtx, iri: '@none',
                relativeTo: {vocab: true}});
            // add compactedItem to map, using value of `@id` or a new blank
            // node identifier

            _addValue(
              mapObject, key, compactedItem, {
                propertyIsArray:
                  (!options.compactArrays || container.includes('@set'))
              });
          } else if(container.includes('@graph') &&
            _isSimpleGraph(expandedItem)) {
            // container includes @graph but not @id or @index and value is a
            // simple graph object add compact value
            // if compactedItem contains multiple values, it is wrapped in
            // `@included`
            if(_isArray(compactedItem) && compactedItem.length > 1) {
              compactedItem = {'@included': compactedItem};
            }
            _addValue(
              nestResult, itemActiveProperty, compactedItem, {
                propertyIsArray:
                  (!options.compactArrays || container.includes('@set'))
              });
          } else {
            // wrap using @graph alias, remove array if only one item and
            // compactArrays not set
            if(_isArray(compactedItem) && compactedItem.length === 1 &&
              options.compactArrays) {
              compactedItem = compactedItem[0];
            }
            compactedItem = {
              [api.compactIri({
                activeCtx,
                iri: '@graph',
                relativeTo: {vocab: true}
              })]: compactedItem
            };

            // include @id from expanded graph, if any
            if('@id' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@id',
                relativeTo: {vocab: true}
              })] = expandedItem['@id'];
            }

            // include @index from expanded graph, if any
            if('@index' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@index',
                relativeTo: {vocab: true}
              })] = expandedItem['@index'];
            }
            _addValue(
              nestResult, itemActiveProperty, compactedItem, {
                propertyIsArray:
                  (!options.compactArrays || container.includes('@set'))
              });
          }
        } else if(container.includes('@language') ||
          container.includes('@index') || container.includes('@id') ||
          container.includes('@type')) {
          // handle language and index maps
          // get or create the map object
          let mapObject;
          if(nestResult.hasOwnProperty(itemActiveProperty)) {
            mapObject = nestResult[itemActiveProperty];
          } else {
            nestResult[itemActiveProperty] = mapObject = {};
          }

          let key;
          if(container.includes('@language')) {
          // if container is a language map, simplify compacted value to
          // a simple string
            if(_isValue(compactedItem)) {
              compactedItem = compactedItem['@value'];
            }
            key = expandedItem['@language'];
          } else if(container.includes('@index')) {
            const indexKey = _getContextValue(
              activeCtx, itemActiveProperty, '@index') || '@index';
            const containerKey = api.compactIri(
              {activeCtx, iri: indexKey, relativeTo: {vocab: true}});
            if(indexKey === '@index') {
              key = expandedItem['@index'];
              delete compactedItem[containerKey];
            } else {
              let others;
              [key, ...others] = _asArray(compactedItem[indexKey] || []);
              if(!_isString(key)) {
                // Will use @none if it isn't a string.
                key = null;
              } else {
                switch(others.length) {
                  case 0:
                    delete compactedItem[indexKey];
                    break;
                  case 1:
                    compactedItem[indexKey] = others[0];
                    break;
                  default:
                    compactedItem[indexKey] = others;
                    break;
                }
              }
            }
          } else if(container.includes('@id')) {
            const idKey = api.compactIri({activeCtx, iri: '@id',
              relativeTo: {vocab: true}});
            key = compactedItem[idKey];
            delete compactedItem[idKey];
          } else if(container.includes('@type')) {
            const typeKey = api.compactIri({
              activeCtx,
              iri: '@type',
              relativeTo: {vocab: true}
            });
            let types;
            [key, ...types] = _asArray(compactedItem[typeKey] || []);
            switch(types.length) {
              case 0:
                delete compactedItem[typeKey];
                break;
              case 1:
                compactedItem[typeKey] = types[0];
                break;
              default:
                compactedItem[typeKey] = types;
                break;
            }

            // If compactedItem contains a single entry
            // whose key maps to @id, recompact without @type
            if(Object.keys(compactedItem).length === 1 &&
              '@id' in expandedItem) {
              compactedItem = await api.compact({
                activeCtx,
                activeProperty: itemActiveProperty,
                element: {'@id': expandedItem['@id']},
                options,
                compactionMap
              });
            }
          }

          // if compacting this value which has no key, index on @none
          if(!key) {
            key = api.compactIri({activeCtx, iri: '@none',
              relativeTo: {vocab: true}});
          }
          // add compact value to map object using key from expanded value
          // based on the container type
          _addValue(
            mapObject, key, compactedItem, {
              propertyIsArray: container.includes('@set')
            });
        } else {
          // use an array if: compactArrays flag is false,
          // @container is @set or @list , value is an empty
          // array, or key is @graph
          const isArray = (!options.compactArrays ||
            container.includes('@set') || container.includes('@list') ||
            (_isArray(compactedItem) && compactedItem.length === 0) ||
            expandedProperty === '@list' || expandedProperty === '@graph');

          // add compact value
          _addValue(
            nestResult, itemActiveProperty, compactedItem,
            {propertyIsArray: isArray});
        }
      }
    }

    return rval;
  }

  // only primitives remain which are already compact
  return element;
};

/**
 * Compacts an IRI or keyword into a term or prefix if it can be. If the
 * IRI has an associated value it may be passed.
 *
 * @param activeCtx the active context to use.
 * @param iri the IRI to compact.
 * @param value the value to check or null.
 * @param relativeTo options for how to compact IRIs:
 *          vocab: true to split after @vocab, false not to.
 * @param reverse true if a reverse property is being compacted, false if not.
 * @param base the absolute URL to use for compacting document-relative IRIs.
 *
 * @return the compacted term, prefix, keyword alias, or the original IRI.
 */
api.compactIri = ({
  activeCtx,
  iri,
  value = null,
  relativeTo = {vocab: false},
  reverse = false,
  base = null
}) => {
  // can't compact null
  if(iri === null) {
    return iri;
  }

  // if context is from a property term scoped context composed with a
  // type-scoped context, then use the previous context instead
  if(activeCtx.isPropertyTermScoped && activeCtx.previousContext) {
    activeCtx = activeCtx.previousContext;
  }

  const inverseCtx = activeCtx.getInverse();

  // if term is a keyword, it may be compacted to a simple alias
  if(_isKeyword(iri) &&
    iri in inverseCtx &&
    '@none' in inverseCtx[iri] &&
    '@type' in inverseCtx[iri]['@none'] &&
    '@none' in inverseCtx[iri]['@none']['@type']) {
    return inverseCtx[iri]['@none']['@type']['@none'];
  }

  // use inverse context to pick a term if iri is relative to vocab
  if(relativeTo.vocab && iri in inverseCtx) {
    const defaultLanguage = activeCtx['@language'] || '@none';

    // prefer @index if available in value
    const containers = [];
    if(_isObject(value) && '@index' in value && !('@graph' in value)) {
      containers.push('@index', '@index@set');
    }

    // if value is a preserve object, use its value
    if(_isObject(value) && '@preserve' in value) {
      value = value['@preserve'][0];
    }

    // prefer most specific container including @graph, prefering @set
    // variations
    if(_isGraph(value)) {
      // favor indexmap if the graph is indexed
      if('@index' in value) {
        containers.push(
          '@graph@index', '@graph@index@set', '@index', '@index@set');
      }
      // favor idmap if the graph is has an @id
      if('@id' in value) {
        containers.push(
          '@graph@id', '@graph@id@set');
      }
      containers.push('@graph', '@graph@set', '@set');
      // allow indexmap if the graph is not indexed
      if(!('@index' in value)) {
        containers.push(
          '@graph@index', '@graph@index@set', '@index', '@index@set');
      }
      // allow idmap if the graph does not have an @id
      if(!('@id' in value)) {
        containers.push('@graph@id', '@graph@id@set');
      }
    } else if(_isObject(value) && !_isValue(value)) {
      containers.push('@id', '@id@set', '@type', '@set@type');
    }

    // defaults for term selection based on type/language
    let typeOrLanguage = '@language';
    let typeOrLanguageValue = '@null';

    if(reverse) {
      typeOrLanguage = '@type';
      typeOrLanguageValue = '@reverse';
      containers.push('@set');
    } else if(_isList(value)) {
      // choose the most specific term that works for all elements in @list
      // only select @list containers if @index is NOT in value
      if(!('@index' in value)) {
        containers.push('@list');
      }
      const list = value['@list'];
      if(list.length === 0) {
        // any empty list can be matched against any term that uses the
        // @list container regardless of @type or @language
        typeOrLanguage = '@any';
        typeOrLanguageValue = '@none';
      } else {
        let commonLanguage = (list.length === 0) ? defaultLanguage : null;
        let commonType = null;
        for(let i = 0; i < list.length; ++i) {
          const item = list[i];
          let itemLanguage = '@none';
          let itemType = '@none';
          if(_isValue(item)) {
            if('@direction' in item) {
              const lang = (item['@language'] || '').toLowerCase();
              const dir = item['@direction'];
              itemLanguage = `${lang}_${dir}`;
            } else if('@language' in item) {
              itemLanguage = item['@language'].toLowerCase();
            } else if('@type' in item) {
              itemType = item['@type'];
            } else {
              // plain literal
              itemLanguage = '@null';
            }
          } else {
            itemType = '@id';
          }
          if(commonLanguage === null) {
            commonLanguage = itemLanguage;
          } else if(itemLanguage !== commonLanguage && _isValue(item)) {
            commonLanguage = '@none';
          }
          if(commonType === null) {
            commonType = itemType;
          } else if(itemType !== commonType) {
            commonType = '@none';
          }
          // there are different languages and types in the list, so choose
          // the most generic term, no need to keep iterating the list
          if(commonLanguage === '@none' && commonType === '@none') {
            break;
          }
        }
        commonLanguage = commonLanguage || '@none';
        commonType = commonType || '@none';
        if(commonType !== '@none') {
          typeOrLanguage = '@type';
          typeOrLanguageValue = commonType;
        } else {
          typeOrLanguageValue = commonLanguage;
        }
      }
    } else {
      if(_isValue(value)) {
        if('@language' in value && !('@index' in value)) {
          containers.push('@language', '@language@set');
          typeOrLanguageValue = value['@language'];
          const dir = value['@direction'];
          if(dir) {
            typeOrLanguageValue = `${typeOrLanguageValue}_${dir}`;
          }
        } else if('@direction' in value && !('@index' in value)) {
          typeOrLanguageValue = `_${value['@direction']}`;
        } else if('@type' in value) {
          typeOrLanguage = '@type';
          typeOrLanguageValue = value['@type'];
        }
      } else {
        typeOrLanguage = '@type';
        typeOrLanguageValue = '@id';
      }
      containers.push('@set');
    }

    // do term selection
    containers.push('@none');

    // an index map can be used to index values using @none, so add as a low
    // priority
    if(_isObject(value) && !('@index' in value)) {
      // allow indexing even if no @index present
      containers.push('@index', '@index@set');
    }

    // values without type or language can use @language map
    if(_isValue(value) && Object.keys(value).length === 1) {
      // allow indexing even if no @index present
      containers.push('@language', '@language@set');
    }

    const term = _selectTerm(
      activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);
    if(term !== null) {
      return term;
    }
  }

  // no term match, use @vocab if available
  if(relativeTo.vocab) {
    if('@vocab' in activeCtx) {
      // determine if vocab is a prefix of the iri
      const vocab = activeCtx['@vocab'];
      if(iri.indexOf(vocab) === 0 && iri !== vocab) {
        // use suffix as relative iri if it is not a term in the active context
        const suffix = iri.substr(vocab.length);
        if(!activeCtx.mappings.has(suffix)) {
          return suffix;
        }
      }
    }
  }

  // no term or @vocab match, check for possible CURIEs
  let choice = null;
  // TODO: make FastCurieMap a class with a method to do this lookup
  const partialMatches = [];
  let iriMap = activeCtx.fastCurieMap;
  // check for partial matches of against `iri`, which means look until
  // iri.length - 1, not full length
  const maxPartialLength = iri.length - 1;
  for(let i = 0; i < maxPartialLength && iri[i] in iriMap; ++i) {
    iriMap = iriMap[iri[i]];
    if('' in iriMap) {
      partialMatches.push(iriMap[''][0]);
    }
  }
  // check partial matches in reverse order to prefer longest ones first
  for(let i = partialMatches.length - 1; i >= 0; --i) {
    const entry = partialMatches[i];
    const terms = entry.terms;
    for(const term of terms) {
      // a CURIE is usable if:
      // 1. it has no mapping, OR
      // 2. value is null, which means we're not compacting an @value, AND
      //   the mapping matches the IRI
      const curie = term + ':' + iri.substr(entry.iri.length);
      const isUsableCurie = (activeCtx.mappings.get(term)._prefix &&
        (!activeCtx.mappings.has(curie) ||
        (value === null && activeCtx.mappings.get(curie)['@id'] === iri)));

      // select curie if it is shorter or the same length but lexicographically
      // less than the current choice
      if(isUsableCurie && (choice === null ||
        _compareShortestLeast(curie, choice) < 0)) {
        choice = curie;
      }
    }
  }

  // return chosen curie
  if(choice !== null) {
    return choice;
  }

  // If iri could be confused with a compact IRI using a term in this context,
  // signal an error
  for(const [term, td] of activeCtx.mappings) {
    if(td && td._prefix && iri.startsWith(term + ':')) {
      throw new JsonLdError(
        `Absolute IRI "${iri}" confused with prefix "${term}".`,
        'jsonld.SyntaxError',
        {code: 'IRI confused with prefix', context: activeCtx});
    }
  }

  // compact IRI relative to base
  if(!relativeTo.vocab) {
    if('@base' in activeCtx) {
      if(!activeCtx['@base']) {
        // The None case preserves rval as potentially relative
        return iri;
      } else {
        return _removeBase(_prependBase(base, activeCtx['@base']), iri);
      }
    } else {
      return _removeBase(base, iri);
    }
  }

  // return IRI as is
  return iri;
};

/**
 * Performs value compaction on an object with '@value' or '@id' as the only
 * property.
 *
 * @param activeCtx the active context.
 * @param activeProperty the active property that points to the value.
 * @param value the value to compact.
 * @param {Object} [options] - processing options.
 *
 * @return the compaction result.
 */
api.compactValue = ({activeCtx, activeProperty, value, options}) => {
  // value is a @value
  if(_isValue(value)) {
    // get context rules
    const type = _getContextValue(activeCtx, activeProperty, '@type');
    const language = _getContextValue(activeCtx, activeProperty, '@language');
    const direction = _getContextValue(activeCtx, activeProperty, '@direction');
    const container =
      _getContextValue(activeCtx, activeProperty, '@container') || [];

    // whether or not the value has an @index that must be preserved
    const preserveIndex = '@index' in value && !container.includes('@index');

    // if there's no @index to preserve ...
    if(!preserveIndex && type !== '@none') {
      // matching @type or @language specified in context, compact value
      if(value['@type'] === type) {
        return value['@value'];
      }
      if('@language' in value && value['@language'] === language &&
         '@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }
      if('@language' in value && value['@language'] === language) {
        return value['@value'];
      }
      if('@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }
    }

    // return just the value of @value if all are true:
    // 1. @value is the only key or @index isn't being preserved
    // 2. there is no default language or @value is not a string or
    //   the key has a mapping with a null @language
    const keyCount = Object.keys(value).length;
    const isValueOnlyKey = (keyCount === 1 ||
      (keyCount === 2 && '@index' in value && !preserveIndex));
    const hasDefaultLanguage = ('@language' in activeCtx);
    const isValueString = _isString(value['@value']);
    const hasNullMapping = (activeCtx.mappings.has(activeProperty) &&
      activeCtx.mappings.get(activeProperty)['@language'] === null);
    if(isValueOnlyKey &&
      type !== '@none' &&
      (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
      return value['@value'];
    }

    const rval = {};

    // preserve @index
    if(preserveIndex) {
      rval[api.compactIri({
        activeCtx,
        iri: '@index',
        relativeTo: {vocab: true}
      })] = value['@index'];
    }

    if('@type' in value) {
      // compact @type IRI
      rval[api.compactIri({
        activeCtx,
        iri: '@type',
        relativeTo: {vocab: true}
      })] = api.compactIri(
        {activeCtx, iri: value['@type'], relativeTo: {vocab: true}});
    } else if('@language' in value) {
      // alias @language
      rval[api.compactIri({
        activeCtx,
        iri: '@language',
        relativeTo: {vocab: true}
      })] = value['@language'];
    }

    if('@direction' in value) {
      // alias @direction
      rval[api.compactIri({
        activeCtx,
        iri: '@direction',
        relativeTo: {vocab: true}
      })] = value['@direction'];
    }

    // alias @value
    rval[api.compactIri({
      activeCtx,
      iri: '@value',
      relativeTo: {vocab: true}
    })] = value['@value'];

    return rval;
  }

  // value is a subject reference
  const expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true},
    options);
  const type = _getContextValue(activeCtx, activeProperty, '@type');
  const compacted = api.compactIri({
    activeCtx,
    iri: value['@id'],
    relativeTo: {vocab: type === '@vocab'},
    base: options.base});

  // compact to scalar
  if(type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
    return compacted;
  }

  return {
    [api.compactIri({
      activeCtx,
      iri: '@id',
      relativeTo: {vocab: true}
    })]: compacted
  };
};

/**
 * Picks the preferred compaction term from the given inverse context entry.
 *
 * @param activeCtx the active context.
 * @param iri the IRI to pick the term for.
 * @param value the value to pick the term for.
 * @param containers the preferred containers.
 * @param typeOrLanguage either '@type' or '@language'.
 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
 *
 * @return the preferred term.
 */
function _selectTerm(
  activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
  if(typeOrLanguageValue === null) {
    typeOrLanguageValue = '@null';
  }

  // preferences for the value of @type or @language
  const prefs = [];

  // determine prefs for @id based on whether or not value compacts to a term
  if((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') &&
    _isObject(value) && '@id' in value) {
    // prefer @reverse first
    if(typeOrLanguageValue === '@reverse') {
      prefs.push('@reverse');
    }
    // try to compact value to a term
    const term = api.compactIri(
      {activeCtx, iri: value['@id'], relativeTo: {vocab: true}});
    if(activeCtx.mappings.has(term) &&
      activeCtx.mappings.get(term) &&
      activeCtx.mappings.get(term)['@id'] === value['@id']) {
      // prefer @vocab
      prefs.push.apply(prefs, ['@vocab', '@id']);
    } else {
      // prefer @id
      prefs.push.apply(prefs, ['@id', '@vocab']);
    }
  } else {
    prefs.push(typeOrLanguageValue);

    // consider direction only
    const langDir = prefs.find(el => el.includes('_'));
    if(langDir) {
      // consider _dir portion
      prefs.push(langDir.replace(/^[^_]+_/, '_'));
    }
  }
  prefs.push('@none');

  const containerMap = activeCtx.inverse[iri];
  for(const container of containers) {
    // if container not available in the map, continue
    if(!(container in containerMap)) {
      continue;
    }

    const typeOrLanguageValueMap = containerMap[container][typeOrLanguage];
    for(const pref of prefs) {
      // if type/language option not available in the map, continue
      if(!(pref in typeOrLanguageValueMap)) {
        continue;
      }

      // select term
      return typeOrLanguageValueMap[pref];
    }
  }

  return null;
}

/**
 * The value of `@nest` in the term definition must either be `@nest`, or a term
 * which resolves to `@nest`.
 *
 * @param activeCtx the active context.
 * @param nestProperty a term in the active context or `@nest`.
 * @param {Object} [options] - processing options.
 */
function _checkNestProperty(activeCtx, nestProperty, options) {
  if(_expandIri(activeCtx, nestProperty, {vocab: true}, options) !== '@nest') {
    throw new JsonLdError(
      'JSON-LD compact error; nested property must have an @nest value ' +
      'resolving to @nest.',
      'jsonld.SyntaxError', {code: 'invalid @nest value'});
  }
}


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {parseLinkHeader, buildHeaders} = __webpack_require__(5);
const {LINK_HEADER_CONTEXT} = __webpack_require__(23);
const JsonLdError = __webpack_require__(7);
const RequestQueue = __webpack_require__(37);
const {prependBase} = __webpack_require__(11);

/**
 * Creates a built-in node document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          strictSSL: true to require SSL certificates to be valid,
 *            false not to (default: true).
 *          maxRedirects: the maximum number of redirects to permit, none by
 *            default.
 *          request: the object which will make the request, default is
 *            provided by `https://www.npmjs.com/package/request`.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *
 * @return the node document loader.
 */
module.exports = ({
  secure,
  strictSSL = true,
  maxRedirects = -1,
  request,
  headers = {}
} = {strictSSL: true, maxRedirects: -1, headers: {}}) => {
  headers = buildHeaders(headers);
  // TODO: use `axios`
  request = request || __webpack_require__(151);
  const http = __webpack_require__(152);

  const queue = new RequestQueue();
  return queue.wrapLoader(function(url) {
    return loadDocument(url, []);
  });

  async function loadDocument(url, redirects) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }
    if(secure && url.indexOf('https') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }
    // TODO: disable cache until HTTP caching implemented
    let doc = null;//cache.get(url);
    if(doc !== null) {
      return doc;
    }

    let result;
    let alternate = null;
    try {
      result = await _request(request, {
        url,
        headers,
        strictSSL,
        followRedirect: false
      });
    } catch(e) {
      throw new JsonLdError(
        'URL could not be dereferenced, an error occurred.',
        'jsonld.LoadDocumentError',
        {code: 'loading document failed', url, cause: e});
    }

    const {res, body} = result;

    doc = {contextUrl: null, documentUrl: url, document: body || null};

    // handle error
    const statusText = http.STATUS_CODES[res.statusCode];
    if(res.statusCode >= 400) {
      throw new JsonLdError(
        `URL "${url}" could not be dereferenced: ${statusText}`,
        'jsonld.InvalidUrl', {
          code: 'loading document failed',
          url,
          httpStatusCode: res.statusCode
        });
    }

    // handle Link Header
    if(res.headers.link &&
      res.headers['content-type'] !== 'application/ld+json') {
      // only 1 related link header permitted
      const linkHeaders = parseLinkHeader(res.headers.link);
      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];
      if(Array.isArray(linkedContext)) {
        throw new JsonLdError(
          'URL could not be dereferenced, it has more than one associated ' +
          'HTTP Link Header.',
          'jsonld.InvalidUrl',
          {code: 'multiple context link headers', url});
      }
      if(linkedContext) {
        doc.contextUrl = linkedContext.target;
      }

      // "alternate" link header is a redirect
      alternate = linkHeaders['alternate'];
      if(alternate &&
        alternate.type == 'application/ld+json' &&
        !(res.headers['content-type'] || '')
          .match(/^application\/(\w*\+)?json$/)) {
        res.headers.location = prependBase(url, alternate.target);
      }
    }

    // handle redirect
    if((alternate ||
      res.statusCode >= 300 && res.statusCode < 400) && res.headers.location) {
      if(redirects.length === maxRedirects) {
        throw new JsonLdError(
          'URL could not be dereferenced; there were too many redirects.',
          'jsonld.TooManyRedirects', {
            code: 'loading document failed',
            url,
            httpStatusCode: res.statusCode,
            redirects
          });
      }
      if(redirects.indexOf(url) !== -1) {
        throw new JsonLdError(
          'URL could not be dereferenced; infinite redirection was detected.',
          'jsonld.InfiniteRedirectDetected', {
            code: 'recursive context inclusion',
            url,
            httpStatusCode: res.statusCode,
            redirects
          });
      }
      redirects.push(url);
      return loadDocument(res.headers.location, redirects);
    }

    // cache for each redirected URL
    redirects.push(url);
    // TODO: disable cache until HTTP caching implemented
    /*
    for(let i = 0; i < redirects.length; ++i) {
      cache.set(
        redirects[i],
        {contextUrl: null, documentUrl: redirects[i], document: body});
    }
    */

    return doc;
  }
};

function _request(request, options) {
  return new Promise((resolve, reject) => {
    request(options, (err, res, body) => {
      if(err) {
        reject(err);
      } else {
        resolve({res, body});
      }
    });
  });
}


/***/ }),
/* 151 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 152 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {parseLinkHeader, buildHeaders} = __webpack_require__(5);
const {LINK_HEADER_CONTEXT} = __webpack_require__(23);
const JsonLdError = __webpack_require__(7);
const RequestQueue = __webpack_require__(37);
const {prependBase} = __webpack_require__(11);

const REGEX_LINK_HEADER = /(^|(\r\n))link:/i;

/**
 * Creates a built-in XMLHttpRequest document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *          [xhr]: the XMLHttpRequest API to use.
 *
 * @return the XMLHttpRequest document loader.
 */
module.exports = ({
  secure,
  headers = {},
  xhr
} = {headers: {}}) => {
  headers = buildHeaders(headers);
  const queue = new RequestQueue();
  return queue.wrapLoader(loader);

  async function loader(url) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }
    if(secure && url.indexOf('https') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }

    let req;
    try {
      req = await _get(xhr, url, headers);
    } catch(e) {
      throw new JsonLdError(
        'URL could not be dereferenced, an error occurred.',
        'jsonld.LoadDocumentError',
        {code: 'loading document failed', url, cause: e});
    }

    if(req.status >= 400) {
      throw new JsonLdError(
        'URL could not be dereferenced: ' + req.statusText,
        'jsonld.LoadDocumentError', {
          code: 'loading document failed',
          url,
          httpStatusCode: req.status
        });
    }

    let doc = {contextUrl: null, documentUrl: url, document: req.response};
    let alternate = null;

    // handle Link Header (avoid unsafe header warning by existence testing)
    const contentType = req.getResponseHeader('Content-Type');
    let linkHeader;
    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {
      linkHeader = req.getResponseHeader('Link');
    }
    if(linkHeader && contentType !== 'application/ld+json') {
      // only 1 related link header permitted
      const linkHeaders = parseLinkHeader(linkHeader);
      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];
      if(Array.isArray(linkedContext)) {
        throw new JsonLdError(
          'URL could not be dereferenced, it has more than one ' +
          'associated HTTP Link Header.',
          'jsonld.InvalidUrl',
          {code: 'multiple context link headers', url});
      }
      if(linkedContext) {
        doc.contextUrl = linkedContext.target;
      }

      // "alternate" link header is a redirect
      alternate = linkHeaders['alternate'];
      if(alternate &&
        alternate.type == 'application/ld+json' &&
        !(contentType || '').match(/^application\/(\w*\+)?json$/)) {
        doc = await loader(prependBase(url, alternate.target));
      }
    }

    return doc;
  }
};

function _get(xhr, url, headers) {
  xhr = xhr || XMLHttpRequest;
  const req = new xhr();
  return new Promise((resolve, reject) => {
    req.onload = () => resolve(req);
    req.onerror = err => reject(err);
    req.open('GET', url, true);
    for(const k in headers) {
      req.setRequestHeader(k, headers[k]);
    }
    req.send();
  });
}


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


module.exports = jsonld => {
  class JsonLdProcessor {
    toString() {
      return '[object JsonLdProcessor]';
    }
  }
  Object.defineProperty(JsonLdProcessor, 'prototype', {
    writable: false,
    enumerable: false
  });
  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: JsonLdProcessor
  });

  // The Web IDL test harness will check the number of parameters defined in
  // the functions below. The number of parameters must exactly match the
  // required (non-optional) parameters of the JsonLdProcessor interface as
  // defined here:
  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface

  JsonLdProcessor.compact = function(input, ctx) {
    if(arguments.length < 2) {
      return Promise.reject(
        new TypeError('Could not compact, too few arguments.'));
    }
    return jsonld.compact(input, ctx);
  };
  JsonLdProcessor.expand = function(input) {
    if(arguments.length < 1) {
      return Promise.reject(
        new TypeError('Could not expand, too few arguments.'));
    }
    return jsonld.expand(input);
  };
  JsonLdProcessor.flatten = function(input) {
    if(arguments.length < 1) {
      return Promise.reject(
        new TypeError('Could not flatten, too few arguments.'));
    }
    return jsonld.flatten(input);
  };

  return JsonLdProcessor;
};


/***/ }),
/* 155 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(9),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(157),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),
/* 157 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(9)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(38);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(72);

__webpack_require__(8)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(18).codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(38);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

const Readable = __webpack_require__(39).Readable;
const util     = __webpack_require__(31);

function Streamify(str, options) {

  if (! (this instanceof Streamify)) {
    return new Streamify(str, options);
  }

  Readable.call(this, options);
  this.str = str;
}

util.inherits(Streamify, Readable);

Streamify.prototype._read = function (size) {

  var chunk = this.str.slice(0, size);

  if (chunk) {
    this.str = this.str.slice(size);
    this.push(chunk);
  }

  else {
    this.push(null);
  }

};

module.exports = Streamify;


/***/ }),
/* 164 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(41).Buffer;
var util = __webpack_require__(166);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 166 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(76);

/*<replacement>*/
var util = Object.create(__webpack_require__(25));
util.inherits = __webpack_require__(8);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(42);


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(16);


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(40).Transform


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(40).PassThrough


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(173));
__export(__webpack_require__(46));
__export(__webpack_require__(87));
//# sourceMappingURL=index.js.map

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const htmlparser2_1 = __webpack_require__(174);
const stream_1 = __webpack_require__(39);
const INITIAL_CONTEXT_XHTML = __webpack_require__(188);
const INITIAL_CONTEXT = __webpack_require__(189);
const RdfaProfile_1 = __webpack_require__(46);
const Util_1 = __webpack_require__(87);
/**
 * A stream transformer that parses RDFa (text) streams to an {@link RDF.Stream}.
 */
class RdfaParser extends stream_1.Transform {
    constructor(options) {
        super({ readableObjectMode: true });
        this.activeTagStack = [];
        options = options || {};
        this.options = options;
        this.util = new Util_1.Util(options.dataFactory, options.baseIRI);
        this.defaultGraph = options.defaultGraph || this.util.dataFactory.defaultGraph();
        const profile = options.contentType ? Util_1.Util.contentTypeToProfile(options.contentType) : options.profile || '';
        this.features = options.features || RdfaProfile_1.RDFA_FEATURES[profile];
        this.htmlParseListener = options.htmlParseListener;
        this.rdfaPatterns = this.features.copyRdfaPatterns ? {} : null;
        this.pendingRdfaPatternCopies = this.features.copyRdfaPatterns ? {} : null;
        this.parser = this.initializeParser(profile === 'xml');
        this.activeTagStack.push({
            incompleteTriples: [],
            inlist: false,
            language: options.language,
            listMapping: {},
            listMappingLocal: {},
            name: '',
            prefixesAll: Object.assign(Object.assign({}, INITIAL_CONTEXT['@context']), this.features.xhtmlInitialContext ? INITIAL_CONTEXT_XHTML['@context'] : {}),
            prefixesCustom: {},
            skipElement: false,
            vocab: options.vocab,
        });
    }
    /**
     * Parses the given text stream into a quad stream.
     * @param {NodeJS.EventEmitter} stream A text stream.
     * @return {RDF.Stream} A quad stream.
     */
    import(stream) {
        const output = new stream_1.PassThrough({ readableObjectMode: true });
        stream.on('error', (error) => parsed.emit('error', error));
        stream.on('data', (data) => output.write(data));
        stream.on('end', () => output.emit('end'));
        const parsed = output.pipe(new RdfaParser(this.options));
        return parsed;
    }
    _transform(chunk, encoding, callback) {
        this.parser.write(chunk);
        callback();
    }
    _flush(callback) {
        this.parser.end();
        callback();
    }
    onTagOpen(name, attributes) {
        // Determine the parent tag (ignore skipped tags)
        let parentTagI = this.activeTagStack.length - 1;
        while (parentTagI > 0 && this.activeTagStack[parentTagI].skipElement) {
            parentTagI--;
        }
        let parentTag = this.activeTagStack[parentTagI];
        // If we skipped a tag, make sure we DO use the lang, prefixes and vocab of the skipped tag
        if (parentTagI !== this.activeTagStack.length - 1) {
            parentTag = Object.assign(Object.assign({}, parentTag), { language: this.activeTagStack[this.activeTagStack.length - 1].language, prefixesAll: this.activeTagStack[this.activeTagStack.length - 1].prefixesAll, prefixesCustom: this.activeTagStack[this.activeTagStack.length - 1].prefixesCustom, vocab: this.activeTagStack[this.activeTagStack.length - 1].vocab });
        }
        // Create a new active tag and inherit language scope and baseIRI from parent
        const activeTag = {
            collectChildTags: parentTag.collectChildTags,
            incompleteTriples: [],
            inlist: 'inlist' in attributes,
            listMapping: [],
            listMappingLocal: parentTag.listMapping,
            localBaseIRI: parentTag.localBaseIRI,
            name,
            prefixesAll: null,
            prefixesCustom: null,
            skipElement: false,
        };
        this.activeTagStack.push(activeTag);
        // Save the tag contents if needed
        if (activeTag.collectChildTags) {
            // Add explicitly defined xmlns, xmlns:* and prefixes to attributes, as required by the spec (Step 11, note)
            // Sort prefixes alphabetically for deterministic namespace declaration order
            for (const prefix of Object.keys(parentTag.prefixesCustom).sort()) {
                const suffix = parentTag.prefixesCustom[prefix];
                const attributeKey = prefix === '' ? 'xmlns' : 'xmlns:' + prefix;
                if (!(attributeKey in attributes)) {
                    attributes[attributeKey] = suffix;
                }
            }
            const attributesSerialized = Object.keys(attributes).map((key) => `${key}="${attributes[key]}"`).join(' ');
            activeTag.text = [`<${name}${attributesSerialized ? ' ' + attributesSerialized : ''}>`];
            if (this.features.skipHandlingXmlLiteralChildren) {
                return;
            }
        }
        let allowTermsInRelPredicates = true;
        let allowTermsInRevPredicates = true;
        if (this.features.onlyAllowUriRelRevIfProperty) {
            // Ignore illegal rel/rev values when property is present
            if ('property' in attributes && 'rel' in attributes) {
                allowTermsInRelPredicates = false;
                if (attributes.rel.indexOf(':') < 0) {
                    delete attributes.rel;
                }
            }
            if ('property' in attributes && 'rev' in attributes) {
                allowTermsInRevPredicates = false;
                if (attributes.rev.indexOf(':') < 0) {
                    delete attributes.rev;
                }
            }
        }
        if (this.features.copyRdfaPatterns) {
            // Save the tag if needed
            if (parentTag.collectedPatternTag) {
                const patternTag = {
                    attributes,
                    children: [],
                    name,
                    referenced: false,
                    rootPattern: false,
                    text: [],
                };
                parentTag.collectedPatternTag.children.push(patternTag);
                activeTag.collectedPatternTag = patternTag;
                return;
            }
            // Store tags with type rdfa:Pattern as patterns
            if (attributes.typeof === 'rdfa:Pattern') {
                activeTag.collectedPatternTag = {
                    attributes,
                    children: [],
                    name,
                    parentTag,
                    referenced: false,
                    rootPattern: true,
                    text: [],
                };
                return;
            }
            // Instantiate patterns on rdfa:copy
            if (attributes.property === 'rdfa:copy') {
                const copyTargetPatternId = attributes.resource || attributes.href || attributes.src;
                if (this.rdfaPatterns[copyTargetPatternId]) {
                    this.emitPatternCopy(parentTag, this.rdfaPatterns[copyTargetPatternId], copyTargetPatternId);
                }
                else {
                    if (!this.pendingRdfaPatternCopies[copyTargetPatternId]) {
                        this.pendingRdfaPatternCopies[copyTargetPatternId] = [];
                    }
                    this.pendingRdfaPatternCopies[copyTargetPatternId].push(parentTag);
                }
                return;
            }
        }
        // <base> tags override the baseIRI of the whole document
        if (this.features.baseTag && name === 'base' && attributes.href) {
            this.util.baseIRI = this.util.getBaseIRI(attributes.href);
        }
        // xml:base attributes override the baseIRI of the current tag and children
        if (this.features.xmlBase && attributes['xml:base']) {
            activeTag.localBaseIRI = this.util.getBaseIRI(attributes['xml:base']);
        }
        // <time> tags set an initial datatype
        if (this.features.timeTag && name === 'time' && !attributes.datatype) {
            activeTag.interpretObjectAsTime = true;
        }
        // Processing based on https://www.w3.org/TR/rdfa-core/#s_rdfaindetail
        // 1: initialize values
        let newSubject;
        let currentObjectResource;
        let typedResource;
        // 2: handle vocab attribute to set active vocabulary
        // Vocab sets the active vocabulary
        if ('vocab' in attributes) {
            if (attributes.vocab) {
                activeTag.vocab = attributes.vocab;
                this.emitTriple(this.util.getBaseIriTerm(activeTag), this.util.dataFactory.namedNode(Util_1.Util.RDFA + 'usesVocabulary'), this.util.dataFactory.namedNode(activeTag.vocab));
            }
            else {
                // If vocab is set to '', then we fallback to the root vocab as defined via the parser constructor
                activeTag.vocab = this.activeTagStack[0].vocab;
            }
        }
        else {
            activeTag.vocab = parentTag.vocab;
        }
        // 3: handle prefixes
        activeTag.prefixesCustom = Util_1.Util.parsePrefixes(attributes, parentTag.prefixesCustom, this.features.xmlnsPrefixMappings);
        activeTag.prefixesAll = Object.keys(activeTag.prefixesCustom).length > 0
            ? Object.assign(Object.assign({}, parentTag.prefixesAll), activeTag.prefixesCustom) : parentTag.prefixesAll;
        // Handle role attribute
        if (this.features.roleAttribute && attributes.role) {
            const roleSubject = attributes.id
                ? this.util.createIri('#' + attributes.id, activeTag, false, false, false)
                : this.util.createBlankNode();
            // Temporarily override vocab
            const vocabOld = activeTag.vocab;
            activeTag.vocab = 'http://www.w3.org/1999/xhtml/vocab#';
            for (const role of this.util.createVocabIris(attributes.role, activeTag, true, false)) {
                this.emitTriple(roleSubject, this.util.dataFactory.namedNode('http://www.w3.org/1999/xhtml/vocab#role'), role);
            }
            activeTag.vocab = vocabOld;
        }
        // 4: handle language
        // Save language attribute value in active tag
        if ('xml:lang' in attributes || (this.features.langAttribute && 'lang' in attributes)) {
            activeTag.language = attributes['xml:lang'] || attributes.lang;
        }
        else {
            activeTag.language = parentTag.language;
        }
        const isRootTag = this.activeTagStack.length === 2;
        if (!('rel' in attributes) && !('rev' in attributes)) {
            // 5: Determine the new subject when rel and rev are not present
            if ('property' in attributes && !('content' in attributes) && !('datatype' in attributes)) {
                // 5.1: property is present, but not content and datatype
                // Determine new subject
                if ('about' in attributes) {
                    newSubject = this.util.createIri(attributes.about, activeTag, false, true, true);
                    activeTag.explicitNewSubject = !!newSubject;
                }
                else if (isRootTag) {
                    newSubject = true;
                }
                else if (parentTag.object) {
                    newSubject = parentTag.object;
                }
                // Determine type
                if ('typeof' in attributes) {
                    if ('about' in attributes) {
                        typedResource = this.util.createIri(attributes.about, activeTag, false, true, true);
                    }
                    if (!typedResource && isRootTag) {
                        typedResource = true;
                    }
                    if (!typedResource && 'resource' in attributes) {
                        typedResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
                    }
                    if (!typedResource && ('href' in attributes || 'src' in attributes)) {
                        typedResource = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
                    }
                    if (!typedResource && this.isInheritSubjectInHeadBody(name)) {
                        typedResource = newSubject;
                    }
                    if (!typedResource) {
                        typedResource = this.util.createBlankNode();
                    }
                    currentObjectResource = typedResource;
                }
            }
            else {
                // 5.2
                if ('about' in attributes || 'resource' in attributes) {
                    newSubject = this.util.createIri(attributes.about || attributes.resource, activeTag, false, true, true);
                    activeTag.explicitNewSubject = !!newSubject;
                }
                if (!newSubject && ('href' in attributes || 'src' in attributes)) {
                    newSubject = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
                    activeTag.explicitNewSubject = !!newSubject;
                }
                if (!newSubject) {
                    if (isRootTag) {
                        newSubject = true;
                    }
                    else if (this.isInheritSubjectInHeadBody(name)) {
                        newSubject = parentTag.object;
                    }
                    else if ('typeof' in attributes) {
                        newSubject = this.util.createBlankNode();
                        activeTag.explicitNewSubject = true;
                    }
                    else if (parentTag.object) {
                        newSubject = parentTag.object;
                        if (!('property' in attributes)) {
                            activeTag.skipElement = true;
                        }
                    }
                }
                // Determine type
                if ('typeof' in attributes) {
                    typedResource = newSubject;
                }
            }
        }
        else { // either rel or rev is present
            // 6: Determine the new subject when rel or rev are present
            // Define new subject
            if ('about' in attributes) {
                newSubject = this.util.createIri(attributes.about, activeTag, false, true, true);
                activeTag.explicitNewSubject = !!newSubject;
                if ('typeof' in attributes) {
                    typedResource = newSubject;
                }
            }
            else if (isRootTag) {
                newSubject = true;
            }
            else if (parentTag.object) {
                newSubject = parentTag.object;
            }
            // Define object
            if ('resource' in attributes) {
                currentObjectResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
            }
            if (!currentObjectResource) {
                if ('href' in attributes || 'src' in attributes) {
                    currentObjectResource = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
                }
                else if ('typeof' in attributes && !('about' in attributes) && !this.isInheritSubjectInHeadBody(name)) {
                    currentObjectResource = this.util.createBlankNode();
                }
            }
            // Set typed resource
            if ('typeof' in attributes && !('about' in attributes)) {
                if (this.isInheritSubjectInHeadBody(name)) {
                    typedResource = newSubject;
                }
                else {
                    typedResource = currentObjectResource;
                }
            }
        }
        // 7: If a typed resource was defined, emit it as a triple
        if (typedResource) {
            for (const type of this.util.createVocabIris(attributes.typeof, activeTag, true, true)) {
                this.emitTriple(this.util.getResourceOrBaseIri(typedResource, activeTag), this.util.dataFactory.namedNode(Util_1.Util.RDF + 'type'), type);
            }
        }
        // 8: Reset list mapping if we have a new subject
        if (newSubject) {
            activeTag.listMapping = {};
        }
        // 9: If an object was defined, emit triples for it
        if (currentObjectResource) {
            // Handle list mapping
            if ('rel' in attributes && 'inlist' in attributes) {
                for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                    this.addListMapping(activeTag, newSubject, predicate, currentObjectResource);
                }
            }
            // Determine predicates using rel or rev (unless rel and inlist are present)
            if (!('rel' in attributes && 'inlist' in attributes)) {
                if ('rel' in attributes) {
                    for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                        this.emitTriple(this.util.getResourceOrBaseIri(newSubject, activeTag), predicate, this.util.getResourceOrBaseIri(currentObjectResource, activeTag));
                    }
                }
                if ('rev' in attributes) {
                    for (const predicate of this.util.createVocabIris(attributes.rev, activeTag, allowTermsInRevPredicates, false)) {
                        this.emitTriple(this.util.getResourceOrBaseIri(currentObjectResource, activeTag), predicate, this.util.getResourceOrBaseIri(newSubject, activeTag));
                    }
                }
            }
        }
        // 10: Store incomplete triples if we don't have an object, but we do have predicates
        if (!currentObjectResource) {
            if ('rel' in attributes) {
                if ('inlist' in attributes) {
                    for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                        this.addListMapping(activeTag, newSubject, predicate, null);
                        activeTag.incompleteTriples.push({ predicate, reverse: false, list: true });
                    }
                }
                else {
                    for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                        activeTag.incompleteTriples.push({ predicate, reverse: false });
                    }
                }
            }
            if ('rev' in attributes) {
                for (const predicate of this.util.createVocabIris(attributes.rev, activeTag, allowTermsInRevPredicates, false)) {
                    activeTag.incompleteTriples.push({ predicate, reverse: true });
                }
            }
            // Set a blank node object, so the children can make use of this when completing the triples
            if (activeTag.incompleteTriples.length > 0) {
                currentObjectResource = this.util.createBlankNode();
            }
        }
        // 11: Determine current property value
        if ('property' in attributes) {
            // Create predicates
            activeTag.predicates = this.util.createVocabIris(attributes.property, activeTag, true, false);
            // Save datatype attribute value in active tag
            let localObjectResource;
            if ('datatype' in attributes) {
                activeTag.datatype = this.util.createIri(attributes.datatype, activeTag, true, true, false);
                if (activeTag.datatype
                    && (activeTag.datatype.value === Util_1.Util.RDF + 'XMLLiteral'
                        || (this.features.htmlDatatype && activeTag.datatype.value === Util_1.Util.RDF + 'HTML'))) {
                    activeTag.collectChildTags = true;
                }
            }
            else {
                // Try to determine resource
                if (!('rev' in attributes) && !('rel' in attributes) && !('content' in attributes)) {
                    if ('resource' in attributes) {
                        localObjectResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
                    }
                    if (!localObjectResource && 'href' in attributes) {
                        localObjectResource = this.util.createIri(attributes.href, activeTag, false, false, true);
                    }
                    if (!localObjectResource && 'src' in attributes) {
                        localObjectResource = this.util.createIri(attributes.src, activeTag, false, false, true);
                    }
                }
                if ('typeof' in attributes && !('about' in attributes)) {
                    localObjectResource = typedResource;
                }
            }
            if ('content' in attributes) {
                // Emit triples based on content attribute has preference over text content
                const object = this.util.createLiteral(attributes.content, activeTag);
                if ('inlist' in attributes) {
                    for (const predicate of activeTag.predicates) {
                        this.addListMapping(activeTag, newSubject, predicate, object);
                    }
                }
                else {
                    const subject = this.util.getResourceOrBaseIri(newSubject, activeTag);
                    for (const predicate of activeTag.predicates) {
                        this.emitTriple(subject, predicate, object);
                    }
                }
                // Unset predicate to avoid text contents to produce new triples
                activeTag.predicates = null;
            }
            else if (this.features.datetimeAttribute && 'datetime' in attributes) {
                activeTag.interpretObjectAsTime = true;
                // Datetime attribute on time tag has preference over text content
                const object = this.util.createLiteral(attributes.datetime, activeTag);
                if ('inlist' in attributes) {
                    for (const predicate of activeTag.predicates) {
                        this.addListMapping(activeTag, newSubject, predicate, object);
                    }
                }
                else {
                    const subject = this.util.getResourceOrBaseIri(newSubject, activeTag);
                    for (const predicate of activeTag.predicates) {
                        this.emitTriple(subject, predicate, object);
                    }
                }
                // Unset predicate to avoid text contents to produce new triples
                activeTag.predicates = null;
            }
            else if (localObjectResource) {
                // Emit triples for all resource objects
                const object = this.util.getResourceOrBaseIri(localObjectResource, activeTag);
                if ('inlist' in attributes) {
                    for (const predicate of activeTag.predicates) {
                        this.addListMapping(activeTag, newSubject, predicate, object);
                    }
                }
                else {
                    const subject = this.util.getResourceOrBaseIri(newSubject, activeTag);
                    for (const predicate of activeTag.predicates) {
                        this.emitTriple(subject, predicate, object);
                    }
                }
                // Unset predicate to avoid text contents to produce new triples
                activeTag.predicates = null;
            }
        }
        // 12: Complete incomplete triples
        let incompleteTriplesCompleted = false;
        if (!activeTag.skipElement && newSubject && parentTag.incompleteTriples.length > 0) {
            incompleteTriplesCompleted = true;
            const subject = this.util.getResourceOrBaseIri(parentTag.subject, activeTag);
            const object = this.util.getResourceOrBaseIri(newSubject, activeTag);
            for (const incompleteTriple of parentTag.incompleteTriples) {
                if (!incompleteTriple.reverse) {
                    if (incompleteTriple.list) {
                        // Find the active tag that defined the list by going up the stack
                        let firstInListTag = null;
                        for (let i = this.activeTagStack.length - 1; i >= 0; i--) {
                            if (this.activeTagStack[i].inlist) {
                                firstInListTag = this.activeTagStack[i];
                                break;
                            }
                        }
                        // firstInListTag is guaranteed to be non-null
                        this.addListMapping(firstInListTag, newSubject, incompleteTriple.predicate, object);
                    }
                    else {
                        this.emitTriple(subject, incompleteTriple.predicate, object);
                    }
                }
                else {
                    this.emitTriple(object, incompleteTriple.predicate, subject);
                }
            }
        }
        if (!incompleteTriplesCompleted && parentTag.incompleteTriples.length > 0) {
            activeTag.incompleteTriples = activeTag.incompleteTriples.concat(parentTag.incompleteTriples);
        }
        // 13: Save evaluation context into active tag
        activeTag.subject = newSubject || parentTag.subject;
        activeTag.object = currentObjectResource || newSubject;
    }
    onText(data) {
        const activeTag = this.activeTagStack[this.activeTagStack.length - 1];
        // Collect text in pattern tag if needed
        if (this.features.copyRdfaPatterns && activeTag.collectedPatternTag) {
            activeTag.collectedPatternTag.text.push(data);
            return;
        }
        // Save the text inside the active tag
        if (!activeTag.text) {
            activeTag.text = [];
        }
        activeTag.text.push(data);
    }
    onTagClose() {
        // Get the active tag
        const activeTag = this.activeTagStack[this.activeTagStack.length - 1];
        const parentTag = this.activeTagStack[this.activeTagStack.length - 2];
        if (!(activeTag.collectChildTags && parentTag.collectChildTags && this.features.skipHandlingXmlLiteralChildren)) {
            // If we detect a finalized rdfa:Pattern tag, store it
            if (this.features.copyRdfaPatterns && activeTag.collectedPatternTag
                && activeTag.collectedPatternTag.rootPattern) {
                const patternId = activeTag.collectedPatternTag.attributes.resource;
                // Remove resource and typeof attributes to avoid it being seen as a new pattern
                delete activeTag.collectedPatternTag.attributes.resource;
                delete activeTag.collectedPatternTag.attributes.typeof;
                // Store the pattern
                this.rdfaPatterns[patternId] = activeTag.collectedPatternTag;
                // Apply all pending copies for this pattern
                if (this.pendingRdfaPatternCopies[patternId]) {
                    for (const tag of this.pendingRdfaPatternCopies[patternId]) {
                        this.emitPatternCopy(tag, activeTag.collectedPatternTag, patternId);
                    }
                    delete this.pendingRdfaPatternCopies[patternId];
                }
                // Remove the active tag from the stack
                this.activeTagStack.pop();
                return;
            }
            // Emit all triples that were determined in the active tag
            if (activeTag.predicates) {
                const subject = this.util.getResourceOrBaseIri(activeTag.subject, activeTag);
                let textSegments = activeTag.text || [];
                if (activeTag.collectChildTags && parentTag.collectChildTags) {
                    // If we are inside an XMLLiteral child that also has RDFa content, ignore the tag name that was collected.
                    textSegments = textSegments.slice(1);
                }
                const object = this.util.createLiteral(textSegments.join(''), activeTag);
                if (activeTag.inlist) {
                    for (const predicate of activeTag.predicates) {
                        this.addListMapping(activeTag, subject, predicate, object);
                    }
                }
                else {
                    for (const predicate of activeTag.predicates) {
                        this.emitTriple(subject, predicate, object);
                    }
                }
                // Reset text, unless the parent is also collecting text
                if (!parentTag.predicates) {
                    activeTag.text = null;
                }
            }
            // 14: Handle local list mapping
            if (activeTag.object && Object.keys(activeTag.listMapping).length > 0) {
                const subject = this.util.getResourceOrBaseIri(activeTag.object, activeTag);
                for (const predicateValue in activeTag.listMapping) {
                    const predicate = this.util.dataFactory.namedNode(predicateValue);
                    const values = activeTag.listMapping[predicateValue];
                    if (values.length > 0) {
                        // Non-empty list, emit linked list of rdf:first and rdf:rest chains
                        const bnodes = values.map(() => this.util.createBlankNode());
                        for (let i = 0; i < values.length; i++) {
                            const object = this.util.getResourceOrBaseIri(values[i], activeTag);
                            this.emitTriple(bnodes[i], this.util.dataFactory.namedNode(Util_1.Util.RDF + 'first'), object);
                            this.emitTriple(bnodes[i], this.util.dataFactory.namedNode(Util_1.Util.RDF + 'rest'), (i < values.length - 1) ? bnodes[i + 1] : this.util.dataFactory.namedNode(Util_1.Util.RDF + 'nil'));
                        }
                        // Emit triple for the first linked list chain
                        this.emitTriple(subject, predicate, bnodes[0]);
                    }
                    else {
                        // Empty list, just emit rdf:nil
                        this.emitTriple(subject, predicate, this.util.dataFactory.namedNode(Util_1.Util.RDF + 'nil'));
                    }
                }
            }
        }
        // Remove the active tag from the stack
        this.activeTagStack.pop();
        // Save the tag contents if needed
        if (activeTag.collectChildTags && activeTag.text) {
            activeTag.text.push(`</${activeTag.name}>`);
        }
        // If we still have text contents, try to append it to the parent tag
        if (activeTag.text && parentTag) {
            if (!parentTag.text) {
                parentTag.text = activeTag.text;
            }
            else {
                parentTag.text = parentTag.text.concat(activeTag.text);
            }
        }
    }
    onEnd() {
        if (this.features.copyRdfaPatterns) {
            this.features.copyRdfaPatterns = false;
            // Emit all unreferenced patterns
            for (const patternId in this.rdfaPatterns) {
                const pattern = this.rdfaPatterns[patternId];
                if (!pattern.referenced) {
                    pattern.attributes.typeof = 'rdfa:Pattern';
                    pattern.attributes.resource = patternId;
                    this.emitPatternCopy(pattern.parentTag, pattern, patternId);
                    pattern.referenced = false;
                    delete pattern.attributes.typeof;
                    delete pattern.attributes.resource;
                }
            }
            // Emit all unreferenced copy links
            for (const patternId in this.pendingRdfaPatternCopies) {
                for (const parentTag of this.pendingRdfaPatternCopies[patternId]) {
                    this.activeTagStack.push(parentTag);
                    this.onTagOpen('link', { property: 'rdfa:copy', href: patternId });
                    this.onTagClose();
                    this.activeTagStack.pop();
                }
            }
            this.features.copyRdfaPatterns = true;
        }
    }
    /**
     * If the new subject can be inherited from the parent object
     * if the resource defines no new subject.
     * @param {string} name The current tag name.
     * @returns {boolean} If the subject can be inherited.
     */
    isInheritSubjectInHeadBody(name) {
        return this.features.inheritSubjectInHeadBody && (name === 'head' || name === 'body');
    }
    /**
     * Add a list mapping for the given predicate and object in the active tag.
     * @param {IActiveTag} activeTag The active tag.
     * @param {Term | boolean} subject A subject term, this will only be used to create a separate list
     *                                 if activeTag.explicitNewSubject is true.
     * @param {Term} predicate A predicate term.
     * @param {Term | boolean} currentObjectResource The current object resource.
     */
    addListMapping(activeTag, subject, predicate, currentObjectResource) {
        if (activeTag.explicitNewSubject) {
            const bNode = this.util.createBlankNode();
            this.emitTriple(this.util.getResourceOrBaseIri(subject, activeTag), predicate, bNode);
            this.emitTriple(bNode, this.util.dataFactory.namedNode(Util_1.Util.RDF + 'first'), this.util.getResourceOrBaseIri(currentObjectResource, activeTag));
            this.emitTriple(bNode, this.util.dataFactory.namedNode(Util_1.Util.RDF + 'rest'), this.util.dataFactory.namedNode(Util_1.Util.RDF + 'nil'));
        }
        else {
            let predicateList = activeTag.listMappingLocal[predicate.value];
            if (!predicateList) {
                activeTag.listMappingLocal[predicate.value] = predicateList = [];
            }
            if (currentObjectResource) {
                predicateList.push(currentObjectResource);
            }
        }
    }
    /**
     * Emit the given triple to the stream.
     * @param {Term} subject A subject term.
     * @param {Term} predicate A predicate term.
     * @param {Term} object An object term.
     */
    emitTriple(subject, predicate, object) {
        // Validate IRIs
        if ((subject.termType === 'NamedNode' && subject.value.indexOf(':') < 0)
            || (predicate.termType === 'NamedNode' && predicate.value.indexOf(':') < 0)
            || (object.termType === 'NamedNode' && object.value.indexOf(':') < 0)) {
            return;
        }
        this.push(this.util.dataFactory.quad(subject, predicate, object, this.defaultGraph));
    }
    /**
     * Emit an instantiation of the given pattern with the given parent tag.
     * @param {IActiveTag} parentTag The parent tag to instantiate in.
     * @param {IRdfaPattern} pattern The pattern to instantiate.
     * @param {string} rootPatternId The pattern id.
     */
    emitPatternCopy(parentTag, pattern, rootPatternId) {
        this.activeTagStack.push(parentTag);
        pattern.referenced = true;
        // Ensure that blank nodes within patterns are instantiated only once.
        // All next pattern copies will reuse the instantiated blank nodes from the first pattern.
        if (!pattern.constructedBlankNodes) {
            pattern.constructedBlankNodes = [];
            this.util.blankNodeFactory = () => {
                const bNode = this.util.dataFactory.blankNode();
                pattern.constructedBlankNodes.push(bNode);
                return bNode;
            };
        }
        else {
            let blankNodeIndex = 0;
            this.util.blankNodeFactory = () => pattern.constructedBlankNodes[blankNodeIndex++];
        }
        // Apply everything within the pattern
        this.emitPatternCopyAbsolute(pattern, true, rootPatternId);
        this.util.blankNodeFactory = null;
        this.activeTagStack.pop();
    }
    /**
     * Emit an instantiation of the given pattern with the given parent tag.
     *
     * This should probably not be called directly,
     * call {@link emitPatternCopy} instead.
     *
     * @param {IRdfaPattern} pattern The pattern to instantiate.
     * @param {boolean} root If this is the root call for the given pattern.
     * @param {string} rootPatternId The pattern id.
     */
    emitPatternCopyAbsolute(pattern, root, rootPatternId) {
        // Stop on detection of cyclic patterns
        if (!root && pattern.attributes.property === 'rdfa:copy' && pattern.attributes.href === rootPatternId) {
            return;
        }
        this.onTagOpen(pattern.name, pattern.attributes);
        for (const text of pattern.text) {
            this.onText(text);
        }
        for (const child of pattern.children) {
            this.emitPatternCopyAbsolute(child, false, rootPatternId);
        }
        this.onTagClose();
    }
    initializeParser(xmlMode) {
        return new htmlparser2_1.Parser({
            onclosetag: () => {
                try {
                    this.onTagClose();
                    if (this.htmlParseListener) {
                        this.htmlParseListener.onTagClose();
                    }
                }
                catch (e) {
                    this.emit('error', e);
                }
            },
            onend: () => {
                try {
                    this.onEnd();
                    if (this.htmlParseListener) {
                        this.htmlParseListener.onEnd();
                    }
                }
                catch (e) {
                    this.emit('error', e);
                }
            },
            onopentag: (name, attributes) => {
                try {
                    this.onTagOpen(name, attributes);
                    if (this.htmlParseListener) {
                        this.htmlParseListener.onTagOpen(name, attributes);
                    }
                }
                catch (e) {
                    this.emit('error', e);
                }
            },
            ontext: (data) => {
                try {
                    this.onText(data);
                    if (this.htmlParseListener) {
                        this.htmlParseListener.onText(data);
                    }
                }
                catch (e) {
                    this.emit('error', e);
                }
            },
        }, {
            decodeEntities: true,
            recognizeSelfClosing: true,
            xmlMode,
        });
    }
}
exports.RdfaParser = RdfaParser;
//# sourceMappingURL=RdfaParser.js.map

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Parser_1 = __webpack_require__(77);
exports.Parser = Parser_1.Parser;
var domhandler_1 = __webpack_require__(81);
exports.DomHandler = domhandler_1.DomHandler;
exports.DefaultHandler = domhandler_1.DomHandler;
// Helper methods
/**
 * Parses data, returns the resulting DOM.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 */
function parseDOM(data, options) {
    var handler = new domhandler_1.DomHandler(void 0, options);
    new Parser_1.Parser(handler, options).end(data);
    return handler.dom;
}
exports.parseDOM = parseDOM;
/**
 * Creates a parser instance, with an attached DOM handler.
 *
 * @param cb A callback that will be called once parsing has been completed.
 * @param options Optional options for the parser and DOM builder.
 * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
 */
function createDomStream(cb, options, elementCb) {
    var handler = new domhandler_1.DomHandler(cb, options, elementCb);
    return new Parser_1.Parser(handler, options);
}
exports.createDomStream = createDomStream;
var Tokenizer_1 = __webpack_require__(78);
exports.Tokenizer = Tokenizer_1.default;
var ElementType = __importStar(__webpack_require__(45));
exports.ElementType = ElementType;
/**
 * List of all events that the parser emits.
 *
 * Format: eventname: number of arguments.
 */
exports.EVENTS = {
    attribute: 2,
    cdatastart: 0,
    cdataend: 0,
    text: 1,
    processinginstruction: 2,
    comment: 1,
    commentend: 0,
    closetag: 1,
    opentag: 2,
    opentagname: 1,
    error: 1,
    end: 0
};
/*
    All of the following exports exist for backwards-compatibility.
    They should probably be removed eventually.
*/
__export(__webpack_require__(82));
__export(__webpack_require__(185));
__export(__webpack_require__(186));
var DomUtils = __importStar(__webpack_require__(83));
exports.DomUtils = DomUtils;
var FeedHandler_1 = __webpack_require__(82);
exports.RssHandler = FeedHandler_1.FeedHandler;


/***/ }),
/* 175 */
/***/ (function(module) {

module.exports = JSON.parse("{\"0\":65533,\"128\":8364,\"130\":8218,\"131\":402,\"132\":8222,\"133\":8230,\"134\":8224,\"135\":8225,\"136\":710,\"137\":8240,\"138\":352,\"139\":8249,\"140\":338,\"142\":381,\"145\":8216,\"146\":8217,\"147\":8220,\"148\":8221,\"149\":8226,\"150\":8211,\"151\":8212,\"152\":732,\"153\":8482,\"154\":353,\"155\":8250,\"156\":339,\"158\":382,\"159\":376}");

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var nodeTypes = new Map([
    ["tag" /* Tag */, 1],
    ["script" /* Script */, 1],
    ["style" /* Style */, 1],
    ["directive" /* Directive */, 1],
    ["text" /* Text */, 3],
    ["cdata" /* CDATA */, 4],
    ["comment" /* Comment */, 8]
]);
// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var Node = /** @class */ (function () {
    /**
     *
     * @param type The type of the node.
     */
    function Node(type) {
        this.type = type;
        /** Parent of the node */
        this.parent = null;
        /** Previous sibling */
        this.prev = null;
        /** Next sibling */
        this.next = null;
        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
        this.startIndex = null;
        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
        this.endIndex = null;
    }
    Object.defineProperty(Node.prototype, "nodeType", {
        // Read-only aliases
        get: function () {
            return nodeTypes.get(this.type) || 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "parentNode", {
        // Read-write aliases for properties
        get: function () {
            return this.parent || null;
        },
        set: function (parent) {
            this.parent = parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "previousSibling", {
        get: function () {
            return this.prev || null;
        },
        set: function (prev) {
            this.prev = prev;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "nextSibling", {
        get: function () {
            return this.next || null;
        },
        set: function (next) {
            this.next = next;
        },
        enumerable: true,
        configurable: true
    });
    return Node;
}());
exports.Node = Node;
var DataNode = /** @class */ (function (_super) {
    __extends(DataNode, _super);
    /**
     *
     * @param type The type of the node
     * @param data The content of the data node
     */
    function DataNode(type, data) {
        var _this = _super.call(this, type) || this;
        _this.data = data;
        return _this;
    }
    Object.defineProperty(DataNode.prototype, "nodeValue", {
        get: function () {
            return this.data;
        },
        set: function (data) {
            this.data = data;
        },
        enumerable: true,
        configurable: true
    });
    return DataNode;
}(Node));
exports.DataNode = DataNode;
var ProcessingInstruction = /** @class */ (function (_super) {
    __extends(ProcessingInstruction, _super);
    function ProcessingInstruction(name, data) {
        var _this = _super.call(this, "directive" /* Directive */, data) || this;
        _this.name = name;
        return _this;
    }
    return ProcessingInstruction;
}(DataNode));
exports.ProcessingInstruction = ProcessingInstruction;
var NodeWithChildren = /** @class */ (function (_super) {
    __extends(NodeWithChildren, _super);
    /**
     *
     * @param type Type of the node.
     * @param children Children of the node. Only certain node types can have children.
     */
    function NodeWithChildren(type, children) {
        var _this = _super.call(this, type) || this;
        _this.children = children;
        return _this;
    }
    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
        // Aliases
        get: function () {
            return this.children[0] || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
        get: function () {
            return this.children[this.children.length - 1] || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
        get: function () {
            return this.children;
        },
        set: function (children) {
            this.children = children;
        },
        enumerable: true,
        configurable: true
    });
    return NodeWithChildren;
}(Node));
exports.NodeWithChildren = NodeWithChildren;
var Element = /** @class */ (function (_super) {
    __extends(Element, _super);
    /**
     *
     * @param name Name of the tag, eg. `div`, `span`
     * @param attribs Object mapping attribute names to attribute values
     */
    function Element(name, attribs) {
        var _this = _super.call(this, name === "script"
            ? "script" /* Script */
            : name === "style"
                ? "style" /* Style */
                : "tag" /* Tag */, []) || this;
        _this.name = name;
        _this.attribs = attribs;
        _this.attribs = attribs;
        return _this;
    }
    Object.defineProperty(Element.prototype, "tagName", {
        // DOM Level 1 aliases
        get: function () {
            return this.name;
        },
        set: function (name) {
            this.name = name;
        },
        enumerable: true,
        configurable: true
    });
    return Element;
}(NodeWithChildren));
exports.Element = Element;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
var tagtypes_1 = __webpack_require__(26);
var dom_serializer_1 = __importDefault(__webpack_require__(178));
function getOuterHTML(node, options) {
    return dom_serializer_1.default(node, options);
}
exports.getOuterHTML = getOuterHTML;
function getInnerHTML(node, options) {
    return tagtypes_1.hasChildren(node)
        ? node.children.map(function (node) { return getOuterHTML(node, options); }).join("")
        : "";
}
exports.getInnerHTML = getInnerHTML;
function getText(node) {
    if (Array.isArray(node))
        return node.map(getText).join("");
    if (tagtypes_1.isTag(node))
        return node.name === "br" ? "\n" : getText(node.children);
    if (tagtypes_1.isCDATA(node))
        return getText(node.children);
    if (tagtypes_1.isText(node))
        return node.data;
    return "";
}
exports.getText = getText;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
  Module dependencies
*/
var ElementType = __importStar(__webpack_require__(45));
var entities = __importStar(__webpack_require__(179));
/* mixed-case SVG and MathML tags & attributes
   recognized by the HTML parser, see
   https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
*/
var foreignNames_1 = __webpack_require__(180);
var unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript",
]);
/*
  Format attributes
*/
function formatAttributes(attributes, opts) {
    if (!attributes)
        return;
    return Object.keys(attributes)
        .map(function (key) {
        var _a;
        var value = attributes[key];
        if (opts.xmlMode === "foreign") {
            /* fix up mixed-case attribute names */
            key = (_a = foreignNames_1.attributeNames.get(key)) !== null && _a !== void 0 ? _a : key;
        }
        if (!opts.emptyAttrs &&
            !opts.xmlMode &&
            (value === null || value === "")) {
            return key;
        }
        return key + "=\"" + (opts.decodeEntities
            ? entities.encodeXML(value)
            : value.replace(/"/g, "&quot;")) + "\"";
    })
        .join(" ");
}
/*
  Self-enclosing tags
*/
var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
]);
/**
 * Renders a DOM node or an array of DOM nodes to a string.
 *
 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
 *
 * @param node Node to be rendered.
 * @param options Changes serialization behavior
 */
function render(node, options) {
    if (options === void 0) { options = {}; }
    // TODO: This is a bit hacky.
    var nodes = Array.isArray(node) || node.cheerio ? node : [node];
    var output = "";
    for (var i = 0; i < nodes.length; i++) {
        output += renderNode(nodes[i], options);
    }
    return output;
}
exports.default = render;
function renderNode(node, options) {
    switch (node.type) {
        case "root":
            return render(node.children, options);
        case ElementType.Directive:
            return renderDirective(node);
        case ElementType.Comment:
            return renderComment(node);
        case ElementType.CDATA:
            return renderCdata(node);
        default:
            return ElementType.isTag(node)
                ? renderTag(node, options)
                : renderText(node, options);
    }
}
var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title",
]);
var foreignElements = new Set(["svg", "math"]);
function renderTag(elem, opts) {
    var _a;
    // Handle SVG / MathML in HTML
    if (opts.xmlMode === "foreign") {
        /* fix up mixed-case element names */
        elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        /* exit foreign mode at integration points */
        if (elem.parent &&
            foreignModeIntegrationPoints.has(elem.parent.name))
            opts = __assign(__assign({}, opts), { xmlMode: false });
    }
    if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
    }
    var tag = "<" + elem.name;
    var attribs = formatAttributes(elem.attribs, opts);
    if (attribs) {
        tag += " " + attribs;
    }
    if ((!elem.children || elem.children.length === 0) &&
        (opts.xmlMode
            ? // in XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
                opts.selfClosingTags !== false
            : // user explicitly asked for self-closing tags, even in HTML mode
                opts.selfClosingTags && singleTag.has(elem.name))) {
        if (!opts.xmlMode)
            tag += " ";
        tag += "/>";
    }
    else {
        tag += ">";
        if (elem.children) {
            tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</" + elem.name + ">";
        }
    }
    return tag;
}
function renderDirective(elem) {
    return "<" + elem.data + ">";
}
function renderText(elem, opts) {
    var data = elem.data || "";
    // if entities weren't decoded, no need to encode them back
    if (opts.decodeEntities &&
        !(elem.parent && unencodedElements.has(elem.parent.name))) {
        data = entities.encodeXML(data);
    }
    return data;
}
function renderCdata(elem) {
    return "<![CDATA[" + elem.children[0].data + "]]>";
}
function renderComment(elem) {
    return "<!--" + elem.data + "-->";
}


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = exports.decodeStrict = exports.decode = void 0;
var decode_1 = __webpack_require__(84);
var encode_1 = __webpack_require__(85);
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 */
function decode(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
}
exports.decode = decode;
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 */
function decodeStrict(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
}
exports.decodeStrict = decodeStrict;
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
 */
function encode(data, level) {
    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
}
exports.encode = encode;
var encode_2 = __webpack_require__(85);
Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
// Legacy aliases
Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
var decode_2 = __webpack_require__(84);
Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
// Legacy aliases
Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } });


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.elementNames = new Map([
    ["altglyph", "altGlyph"],
    ["altglyphdef", "altGlyphDef"],
    ["altglyphitem", "altGlyphItem"],
    ["animatecolor", "animateColor"],
    ["animatemotion", "animateMotion"],
    ["animatetransform", "animateTransform"],
    ["clippath", "clipPath"],
    ["feblend", "feBlend"],
    ["fecolormatrix", "feColorMatrix"],
    ["fecomponenttransfer", "feComponentTransfer"],
    ["fecomposite", "feComposite"],
    ["feconvolvematrix", "feConvolveMatrix"],
    ["fediffuselighting", "feDiffuseLighting"],
    ["fedisplacementmap", "feDisplacementMap"],
    ["fedistantlight", "feDistantLight"],
    ["fedropshadow", "feDropShadow"],
    ["feflood", "feFlood"],
    ["fefunca", "feFuncA"],
    ["fefuncb", "feFuncB"],
    ["fefuncg", "feFuncG"],
    ["fefuncr", "feFuncR"],
    ["fegaussianblur", "feGaussianBlur"],
    ["feimage", "feImage"],
    ["femerge", "feMerge"],
    ["femergenode", "feMergeNode"],
    ["femorphology", "feMorphology"],
    ["feoffset", "feOffset"],
    ["fepointlight", "fePointLight"],
    ["fespecularlighting", "feSpecularLighting"],
    ["fespotlight", "feSpotLight"],
    ["fetile", "feTile"],
    ["feturbulence", "feTurbulence"],
    ["foreignobject", "foreignObject"],
    ["glyphref", "glyphRef"],
    ["lineargradient", "linearGradient"],
    ["radialgradient", "radialGradient"],
    ["textpath", "textPath"],
]);
exports.attributeNames = new Map([
    ["definitionurl", "definitionURL"],
    ["attributename", "attributeName"],
    ["attributetype", "attributeType"],
    ["basefrequency", "baseFrequency"],
    ["baseprofile", "baseProfile"],
    ["calcmode", "calcMode"],
    ["clippathunits", "clipPathUnits"],
    ["diffuseconstant", "diffuseConstant"],
    ["edgemode", "edgeMode"],
    ["filterunits", "filterUnits"],
    ["glyphref", "glyphRef"],
    ["gradienttransform", "gradientTransform"],
    ["gradientunits", "gradientUnits"],
    ["kernelmatrix", "kernelMatrix"],
    ["kernelunitlength", "kernelUnitLength"],
    ["keypoints", "keyPoints"],
    ["keysplines", "keySplines"],
    ["keytimes", "keyTimes"],
    ["lengthadjust", "lengthAdjust"],
    ["limitingconeangle", "limitingConeAngle"],
    ["markerheight", "markerHeight"],
    ["markerunits", "markerUnits"],
    ["markerwidth", "markerWidth"],
    ["maskcontentunits", "maskContentUnits"],
    ["maskunits", "maskUnits"],
    ["numoctaves", "numOctaves"],
    ["pathlength", "pathLength"],
    ["patterncontentunits", "patternContentUnits"],
    ["patterntransform", "patternTransform"],
    ["patternunits", "patternUnits"],
    ["pointsatx", "pointsAtX"],
    ["pointsaty", "pointsAtY"],
    ["pointsatz", "pointsAtZ"],
    ["preservealpha", "preserveAlpha"],
    ["preserveaspectratio", "preserveAspectRatio"],
    ["primitiveunits", "primitiveUnits"],
    ["refx", "refX"],
    ["refy", "refY"],
    ["repeatcount", "repeatCount"],
    ["repeatdur", "repeatDur"],
    ["requiredextensions", "requiredExtensions"],
    ["requiredfeatures", "requiredFeatures"],
    ["specularconstant", "specularConstant"],
    ["specularexponent", "specularExponent"],
    ["spreadmethod", "spreadMethod"],
    ["startoffset", "startOffset"],
    ["stddeviation", "stdDeviation"],
    ["stitchtiles", "stitchTiles"],
    ["surfacescale", "surfaceScale"],
    ["systemlanguage", "systemLanguage"],
    ["tablevalues", "tableValues"],
    ["targetx", "targetX"],
    ["targety", "targetY"],
    ["textlength", "textLength"],
    ["viewbox", "viewBox"],
    ["viewtarget", "viewTarget"],
    ["xchannelselector", "xChannelSelector"],
    ["ychannelselector", "yChannelSelector"],
    ["zoomandpan", "zoomAndPan"],
]);


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
function getChildren(elem) {
    return elem.children || null;
}
exports.getChildren = getChildren;
function getParent(elem) {
    return elem.parent || null;
}
exports.getParent = getParent;
function getSiblings(elem) {
    var parent = getParent(elem);
    return parent ? getChildren(parent) : [elem];
}
exports.getSiblings = getSiblings;
function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
exports.getAttributeValue = getAttributeValue;
function hasAttrib(elem, name) {
    return (!!elem.attribs &&
        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&
        elem.attribs[name] != null);
}
exports.hasAttrib = hasAttrib;
/***
 * Returns the name property of an element
 *
 * @param elem The element to get the name for
 */
function getName(elem) {
    return elem.name;
}
exports.getName = getName;
function nextElementSibling(elem) {
    var node = elem.next;
    while (node !== null && node.type !== "tag")
        node = node.next;
    return node;
}
exports.nextElementSibling = nextElementSibling;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.prepend = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
/***
 * Remove an element from the dom
 *
 * @param elem The element to be removed
 */
function removeElement(elem) {
    if (elem.prev)
        elem.prev.next = elem.next;
    if (elem.next)
        elem.next.prev = elem.prev;
    if (elem.parent) {
        var childs = elem.parent.children;
        childs.splice(childs.lastIndexOf(elem), 1);
    }
}
exports.removeElement = removeElement;
/***
 * Replace an element in the dom
 *
 * @param elem The element to be replaced
 * @param replacement The element to be added
 */
function replaceElement(elem, replacement) {
    var prev = (replacement.prev = elem.prev);
    if (prev) {
        prev.next = replacement;
    }
    var next = (replacement.next = elem.next);
    if (next) {
        next.prev = replacement;
    }
    var parent = (replacement.parent = elem.parent);
    if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
    }
}
exports.replaceElement = replaceElement;
/***
 * Append a child to an element
 *
 * @param elem The element to append to
 * @param child The element to be added as a child
 */
function appendChild(elem, child) {
    removeElement(child);
    child.parent = elem;
    if (elem.children.push(child) !== 1) {
        var sibling = elem.children[elem.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
        child.next = null;
    }
}
exports.appendChild = appendChild;
/***
 * Append an element after another
 *
 * @param elem The element to append to
 * @param next The element be added
 */
function append(elem, next) {
    removeElement(next);
    var parent = elem.parent;
    var currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    }
    else if (parent) {
        parent.children.push(next);
    }
}
exports.append = append;
/***
 * Prepend an element before another
 *
 * @param elem The element to append to
 * @param prev The element be added
 */
function prepend(elem, prev) {
    var parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs.splice(childs.lastIndexOf(elem), 0, prev);
    }
    if (elem.prev) {
        elem.prev.next = prev;
    }
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
}
exports.prepend = prepend;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
var querying_1 = __webpack_require__(86);
var tagtypes_1 = __webpack_require__(26);
function isTextNode(node) {
    return node.type === "text" /* Text */;
}
/* eslint-disable @typescript-eslint/camelcase */
var Checks = {
    tag_name: function (name) {
        if (typeof name === "function") {
            return function (elem) { return tagtypes_1.isTag(elem) && name(elem.name); };
        }
        else if (name === "*") {
            return tagtypes_1.isTag;
        }
        else {
            return function (elem) { return tagtypes_1.isTag(elem) && elem.name === name; };
        }
    },
    tag_type: function (type) {
        if (typeof type === "function") {
            return function (elem) { return type(elem.type); };
        }
        else {
            return function (elem) { return elem.type === type; };
        }
    },
    tag_contains: function (data) {
        if (typeof data === "function") {
            return function (elem) { return isTextNode(elem) && data(elem.data); };
        }
        else {
            return function (elem) { return isTextNode(elem) && elem.data === data; };
        }
    },
};
/* eslint-enable @typescript-eslint/camelcase */
function getAttribCheck(attrib, value) {
    if (typeof value === "function") {
        return function (elem) { return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]); };
    }
    else {
        return function (elem) { return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value; };
    }
}
function combineFuncs(a, b) {
    return function (elem) { return a(elem) || b(elem); };
}
function compileTest(options) {
    var funcs = Object.keys(options).map(function (key) {
        var value = options[key];
        return key in Checks
            ? Checks[key](value)
            : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options, element) {
    var test = compileTest(options);
    return test ? test(element) : true;
}
exports.testElement = testElement;
function getElements(options, element, recurse, limit) {
    if (limit === void 0) { limit = Infinity; }
    var test = compileTest(options);
    return test ? querying_1.filter(test, element, recurse, limit) : [];
}
exports.getElements = getElements;
function getElementById(id, element, recurse) {
    if (recurse === void 0) { recurse = true; }
    if (!Array.isArray(element))
        element = [element];
    return querying_1.findOne(getAttribCheck("id", id), element, recurse);
}
exports.getElementById = getElementById;
function getElementsByTagName(name, element, recurse, limit) {
    if (limit === void 0) { limit = Infinity; }
    return querying_1.filter(Checks.tag_name(name), element, recurse, limit);
}
exports.getElementsByTagName = getElementsByTagName;
function getElementsByTagType(type, element, recurse, limit) {
    if (recurse === void 0) { recurse = true; }
    if (limit === void 0) { limit = Infinity; }
    return querying_1.filter(Checks.tag_type(type), element, recurse, limit);
}
exports.getElementsByTagType = getElementsByTagType;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
var tagtypes_1 = __webpack_require__(26);
/**
 * Given an array of nodes, remove any member that is contained by another.
 *
 * @param nodes Nodes to filter.
 */
function removeSubsets(nodes) {
    var idx = nodes.length;
    // Check if each node (or one of its ancestors) is already contained in the
    // array.
    while (--idx >= 0) {
        var node = nodes[idx];
        // Remove the node if it is not unique.
        // We are going through the array from the end, so we only
        // have to check nodes that preceed the node under consideration in the array.
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.indexOf(ancestor) > -1) {
                nodes.splice(idx, 1);
                break;
            }
        }
    }
    return nodes;
}
exports.removeSubsets = removeSubsets;
/***
 * Compare the position of one node against another node in any other document.
 * The return value is a bitmask with the following values:
 *
 * document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent./
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 * @param nodaA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 *
 * @return A bitmask describing the input nodes' relative position.
 *
 *        See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 *        a description of these values.
 */
function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) {
        return 0;
    }
    var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent;
    while (current) {
        aParents.unshift(current);
        current = current.parent;
    }
    current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent;
    while (current) {
        bParents.unshift(current);
        current = current.parent;
    }
    var idx = 0;
    while (aParents[idx] === bParents[idx]) {
        idx++;
    }
    if (idx === 0) {
        return 1 /* DISCONNECTED */;
    }
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
            return 4 /* FOLLOWING */ | 16 /* CONTAINED_BY */;
        }
        return 4 /* FOLLOWING */;
    }
    else {
        if (sharedParent === nodeA) {
            return 2 /* PRECEDING */ | 8 /* CONTAINS */;
        }
        return 2 /* PRECEDING */;
    }
}
exports.compareDocumentPosition = compareDocumentPosition;
/***
 * Sort an array of nodes based on their relative position in the document and
 * remove any duplicate nodes. If the array contains nodes that do not belong
 * to the same document, sort order is unspecified.
 *
 * @param nodes Array of DOM nodes
 * @returns collection of unique nodes, sorted in document order
 */
function uniqueSort(nodes) {
    nodes = nodes.filter(function (node, i, arr) { return !arr.includes(node, i + 1); });
    nodes.sort(function (a, b) {
        var relative = compareDocumentPosition(a, b);
        if (relative & 2 /* PRECEDING */) {
            return -1;
        }
        else if (relative & 4 /* FOLLOWING */) {
            return 1;
        }
        return 0;
    });
    return nodes;
}
exports.uniqueSort = uniqueSort;


/***/ }),
/* 185 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var MultiplexHandler_1 = __importDefault(__webpack_require__(187));
var CollectingHandler = /** @class */ (function (_super) {
    __extends(CollectingHandler, _super);
    function CollectingHandler(cbs) {
        if (cbs === void 0) { cbs = {}; }
        var _this = _super.call(this, function (name) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            _this.events.push([name].concat(args));
            // @ts-ignore
            if (_this._cbs[name])
                (_a = _this._cbs)[name].apply(_a, args);
        }) || this;
        _this._cbs = cbs;
        _this.events = [];
        return _this;
    }
    CollectingHandler.prototype.onreset = function () {
        this.events = [];
        if (this._cbs.onreset)
            this._cbs.onreset();
    };
    CollectingHandler.prototype.restart = function () {
        var _a;
        if (this._cbs.onreset)
            this._cbs.onreset();
        for (var i = 0; i < this.events.length; i++) {
            var _b = this.events[i], name_1 = _b[0], args = _b.slice(1);
            if (!this._cbs[name_1]) {
                continue;
            }
            // @ts-ignore
            (_a = this._cbs)[name_1].apply(_a, args);
        }
    };
    return CollectingHandler;
}(MultiplexHandler_1.default));
exports.CollectingHandler = CollectingHandler;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Calls a specific handler function for all events that are encountered.
 *
 * @param func — The function to multiplex all events to.
 */
var MultiplexHandler = /** @class */ (function () {
    function MultiplexHandler(func) {
        this._func = func;
    }
    /* Format: eventname: number of arguments */
    MultiplexHandler.prototype.onattribute = function (name, value) {
        this._func("onattribute", name, value);
    };
    MultiplexHandler.prototype.oncdatastart = function () {
        this._func("oncdatastart");
    };
    MultiplexHandler.prototype.oncdataend = function () {
        this._func("oncdataend");
    };
    MultiplexHandler.prototype.ontext = function (text) {
        this._func("ontext", text);
    };
    MultiplexHandler.prototype.onprocessinginstruction = function (name, value) {
        this._func("onprocessinginstruction", name, value);
    };
    MultiplexHandler.prototype.oncomment = function (comment) {
        this._func("oncomment", comment);
    };
    MultiplexHandler.prototype.oncommentend = function () {
        this._func("oncommentend");
    };
    MultiplexHandler.prototype.onclosetag = function (name) {
        this._func("onclosetag", name);
    };
    MultiplexHandler.prototype.onopentag = function (name, attribs) {
        this._func("onopentag", name, attribs);
    };
    MultiplexHandler.prototype.onopentagname = function (name) {
        this._func("onopentagname", name);
    };
    MultiplexHandler.prototype.onerror = function (error) {
        this._func("onerror", error);
    };
    MultiplexHandler.prototype.onend = function () {
        this._func("onend");
    };
    MultiplexHandler.prototype.onparserinit = function (parser) {
        this._func("onparserinit", parser);
    };
    MultiplexHandler.prototype.onreset = function () {
        this._func("onreset");
    };
    return MultiplexHandler;
}());
exports.default = MultiplexHandler;


/***/ }),
/* 188 */
/***/ (function(module) {

module.exports = JSON.parse("{\"@context\":{\"alternate\":\"http://www.w3.org/1999/xhtml/vocab#alternate\",\"appendix\":\"http://www.w3.org/1999/xhtml/vocab#appendix\",\"cite\":\"http://www.w3.org/1999/xhtml/vocab#cite\",\"bookmark\":\"http://www.w3.org/1999/xhtml/vocab#bookmark\",\"contents\":\"http://www.w3.org/1999/xhtml/vocab#contents\",\"chapter\":\"http://www.w3.org/1999/xhtml/vocab#chapter\",\"copyright\":\"http://www.w3.org/1999/xhtml/vocab#copyright\",\"first\":\"http://www.w3.org/1999/xhtml/vocab#first\",\"glossary\":\"http://www.w3.org/1999/xhtml/vocab#glossary\",\"help\":\"http://www.w3.org/1999/xhtml/vocab#help\",\"icon\":\"http://www.w3.org/1999/xhtml/vocab#icon\",\"index\":\"http://www.w3.org/1999/xhtml/vocab#index\",\"last\":\"http://www.w3.org/1999/xhtml/vocab#last\",\"license\":\"http://www.w3.org/1999/xhtml/vocab#license\",\"meta\":\"http://www.w3.org/1999/xhtml/vocab#meta\",\"next\":\"http://www.w3.org/1999/xhtml/vocab#next\",\"prev\":\"http://www.w3.org/1999/xhtml/vocab#prev\",\"previous\":\"http://www.w3.org/1999/xhtml/vocab#previous\",\"section\":\"http://www.w3.org/1999/xhtml/vocab#section\",\"start\":\"http://www.w3.org/1999/xhtml/vocab#start\",\"stylesheet\":\"http://www.w3.org/1999/xhtml/vocab#stylesheet\",\"subsection\":\"http://www.w3.org/1999/xhtml/vocab#subsection\",\"top\":\"http://www.w3.org/1999/xhtml/vocab#top\",\"up\":\"http://www.w3.org/1999/xhtml/vocab#up\",\"p3pv1\":\"http://www.w3.org/1999/xhtml/vocab#p3pv1\"}}");

/***/ }),
/* 189 */
/***/ (function(module) {

module.exports = JSON.parse("{\"@context\":{\"as\":\"https://www.w3.org/ns/activitystreams#\",\"cat\":\"http://www.w3.org/ns/dcat#\",\"cc\":\"http://creativecommons.org/ns#\",\"cnt\":\"http://www.w3.org/2008/content#\",\"csvw\":\"http://www.w3.org/ns/csvw#\",\"ctag\":\"http://commontag.org/ns#\",\"dc\":\"http://purl.org/dc/terms/\",\"dc11\":\"http://purl.org/dc/elements/1.1/\",\"dcat\":\"http://www.w3.org/ns/dcat#\",\"dcterms\":\"http://purl.org/dc/terms/\",\"dqv\":\"http://www.w3.org/ns/dqv#\",\"duv\":\"https://www.w3.org/TR/vocab-duv#\",\"earl\":\"http://www.w3.org/ns/earl#\",\"foaf\":\"http://xmlns.com/foaf/0.1/\",\"gldp\":\"http://www.w3.org/ns/people#\",\"gr\":\"http://purl.org/goodrelations/v1#\",\"grddl\":\"http://www.w3.org/2003/g/data-view#\",\"ht\":\"http://www.w3.org/2006/http#\",\"ical\":\"http://www.w3.org/2002/12/cal/icaltzd#\",\"ldp\":\"http://www.w3.org/ns/ldp#\",\"ma\":\"http://www.w3.org/ns/ma-ont#\",\"oa\":\"http://www.w3.org/ns/oa#\",\"odrl\":\"http://www.w3.org/ns/odrl/2/\",\"og\":\"http://ogp.me/ns#\",\"org\":\"http://www.w3.org/ns/org#\",\"owl\":\"http://www.w3.org/2002/07/owl#\",\"prov\":\"http://www.w3.org/ns/prov#\",\"ptr\":\"http://www.w3.org/2009/pointers#\",\"qb\":\"http://purl.org/linked-data/cube#\",\"rev\":\"http://purl.org/stuff/rev#\",\"rdf\":\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\"rdfa\":\"http://www.w3.org/ns/rdfa#\",\"rdfs\":\"http://www.w3.org/2000/01/rdf-schema#\",\"rif\":\"http://www.w3.org/2007/rif#\",\"rr\":\"http://www.w3.org/ns/r2rml#\",\"schema\":\"http://schema.org/\",\"sd\":\"http://www.w3.org/ns/sparql-service-description#\",\"sioc\":\"http://rdfs.org/sioc/ns#\",\"skos\":\"http://www.w3.org/2004/02/skos/core#\",\"skosxl\":\"http://www.w3.org/2008/05/skos-xl#\",\"ssn\":\"http://www.w3.org/ns/ssn/\",\"sosa\":\"http://www.w3.org/ns/sosa/\",\"time\":\"http://www.w3.org/2006/time#\",\"v\":\"http://rdf.data-vocabulary.org/#\",\"vcard\":\"http://www.w3.org/2006/vcard/ns#\",\"void\":\"http://rdfs.org/ns/void#\",\"wdr\":\"http://www.w3.org/2007/05/powder#\",\"wdrs\":\"http://www.w3.org/2007/05/powder-s#\",\"xhv\":\"http://www.w3.org/1999/xhtml/vocab#\",\"xml\":\"http://www.w3.org/XML/1998/namespace\",\"xsd\":\"http://www.w3.org/2001/XMLSchema#\",\"describedby\":\"http://www.w3.org/2007/05/powder-s#describedby\",\"license\":\"http://www.w3.org/1999/xhtml/vocab#license\",\"role\":\"http://www.w3.org/1999/xhtml/vocab#role\"}}");

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(191));
//# sourceMappingURL=index.js.map

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Convert the given relative IRI to an absolute IRI
 * by taking into account the given optional baseIRI.
 *
 * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.
 * @param {string} baseIRI The optional base IRI.
 * @return {string} an absolute IRI.
 */
function resolve(relativeIRI, baseIRI) {
    baseIRI = baseIRI || '';
    const baseFragmentPos = baseIRI.indexOf('#');
    // Ignore any fragments in the base IRI
    if (baseFragmentPos > 0) {
        baseIRI = baseIRI.substr(0, baseFragmentPos);
    }
    // Convert empty value directly to base IRI
    if (!relativeIRI.length) {
        // At this point, the baseIRI MUST be absolute, otherwise we error
        if (baseIRI.indexOf(':') < 0) {
            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);
        }
        return baseIRI;
    }
    // If the value starts with a query character, concat directly (but strip the existing query)
    if (relativeIRI.startsWith('?')) {
        const baseQueryPos = baseIRI.indexOf('?');
        if (baseQueryPos > 0) {
            baseIRI = baseIRI.substr(0, baseQueryPos);
        }
        return baseIRI + relativeIRI;
    }
    // If the value starts with a fragment character, concat directly
    if (relativeIRI.startsWith('#')) {
        return baseIRI + relativeIRI;
    }
    // Ignore baseIRI if it is empty
    if (!baseIRI.length) {
        const relativeColonPos = relativeIRI.indexOf(':');
        if (relativeColonPos < 0) {
            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);
        }
        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);
    }
    // Ignore baseIRI if the value is absolute
    const valueColonPos = relativeIRI.indexOf(':');
    if (valueColonPos >= 0) {
        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);
    }
    // At this point, the baseIRI MUST be absolute, otherwise we error
    const baseColonPos = baseIRI.indexOf(':');
    if (baseColonPos < 0) {
        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);
    }
    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);
    // Inherit the baseIRI scheme if the value starts with '//'
    if (relativeIRI.indexOf('//') === 0) {
        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
    }
    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.
    let baseSlashAfterColonPos;
    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {
        // If there is no additional '/' after the '//'.
        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);
        if (baseSlashAfterColonPos < 0) {
            // If something other than a '/' follows the '://', append the value after a '/',
            // otherwise, prefix the value with only the baseIRI scheme.
            if (baseIRI.length > baseColonPos + 3) {
                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
            }
            else {
                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
            }
        }
    }
    else {
        // If there is not even a single '/' after the ':'
        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);
        if (baseSlashAfterColonPos < 0) {
            // If we don't have a '/' after the ':',
            // prefix the value with only the baseIRI scheme.
            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
        }
    }
    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.
    if (relativeIRI.indexOf('/') === 0) {
        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);
    }
    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);
    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');
    // Ignore everything after the last '/' in the baseIRI path
    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {
        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);
        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')
        // This change is only allowed if there is something else following the path
        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {
            relativeIRI = relativeIRI.substr(1);
        }
    }
    // Prefix the value with the baseIRI path where
    relativeIRI = baseIRIPath + relativeIRI;
    // Remove dot segment from the IRI
    relativeIRI = removeDotSegments(relativeIRI);
    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.
    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;
}
exports.resolve = resolve;
/**
 * Remove dot segments from the given path,
 * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).
 * @param {string} path An IRI path.
 * @return {string} A path, will always start with a '/'.
 */
function removeDotSegments(path) {
    // Prepare a buffer with segments between each '/.
    // Each segment represents an array of characters.
    const segmentBuffers = [];
    let i = 0;
    while (i < path.length) {
        // Remove '/.' or '/..'
        switch (path[i]) {
            case '/':
                if (path[i + 1] === '.') {
                    if (path[i + 2] === '.') {
                        // Start a new segment if we find an invalid character after the '.'
                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {
                            segmentBuffers.push([]);
                            i++;
                            break;
                        }
                        // Go to parent directory,
                        // so we remove a parent segment
                        segmentBuffers.pop();
                        // Ensure that we end with a slash if there is a trailing '/..'
                        if (!path[i + 3]) {
                            segmentBuffers.push([]);
                        }
                        i += 3;
                    }
                    else {
                        // Start a new segment if we find an invalid character after the '.'
                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {
                            segmentBuffers.push([]);
                            i++;
                            break;
                        }
                        // Ensure that we end with a slash if there is a trailing '/.'
                        if (!path[i + 2]) {
                            segmentBuffers.push([]);
                        }
                        // Go to the current directory,
                        // so we do nothing
                        i += 2;
                    }
                }
                else {
                    // Start a new segment
                    segmentBuffers.push([]);
                    i++;
                }
                break;
            case '#':
            case '?':
                // Query and fragment string should be appended unchanged
                if (!segmentBuffers.length) {
                    segmentBuffers.push([]);
                }
                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));
                // Break the while loop
                i = path.length;
                break;
            default:
                // Not a special character, just append it to our buffer
                if (!segmentBuffers.length) {
                    segmentBuffers.push([]);
                }
                segmentBuffers[segmentBuffers.length - 1].push(path[i]);
                i++;
                break;
        }
    }
    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');
}
exports.removeDotSegments = removeDotSegments;
/**
 * Removes dot segments of the given IRI.
 * @param {string} iri An IRI (or part of IRI).
 * @param {number} colonPosition The position of the first ':' in the IRI.
 * @return {string} The IRI where dot segments were removed.
 */
function removeDotSegmentsOfPath(iri, colonPosition) {
    // Determine where we should start looking for the first '/' that indicates the start of the path
    let searchOffset = colonPosition + 1;
    if (colonPosition >= 0) {
        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {
            searchOffset = colonPosition + 3;
        }
    }
    else {
        if (iri[0] === '/' && iri[1] === '/') {
            searchOffset = 2;
        }
    }
    // Determine the path
    const pathSeparator = iri.indexOf('/', searchOffset);
    if (pathSeparator < 0) {
        return iri;
    }
    const base = iri.substr(0, pathSeparator);
    const path = iri.substr(pathSeparator);
    // Remove dot segments from the path
    return base + removeDotSegments(path);
}
exports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;
function isCharacterAllowedAfterRelativePathSegment(character) {
    return !character || character === '#' || character === '?' || character === '/';
}
//# sourceMappingURL=Resolve.js.map

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var BlankNode = __webpack_require__(193)
var DefaultGraph = __webpack_require__(88)
var Literal = __webpack_require__(194)
var NamedNode = __webpack_require__(89)
var Quad = __webpack_require__(195)
var Variable = __webpack_require__(196)

function DataFactory () {}

DataFactory.namedNode = function (value) {
  return new NamedNode(value)
}

DataFactory.blankNode = function (value) {
  return new BlankNode(value)
}

DataFactory.literal = function (value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new Literal(value, languageOrDatatype)
    }

    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))
  }

  return new Literal(value, null, languageOrDatatype)
}

DataFactory.defaultGraph = function () {
  return DataFactory.defaultGraphInstance
}

DataFactory.variable = function (value) {
  return new Variable(value)
}

DataFactory.triple = function (subject, predicate, object) {
  return DataFactory.quad(subject, predicate, object)
}

DataFactory.quad = function (subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)
}

DataFactory.defaultGraphInstance = new DefaultGraph()

module.exports = DataFactory


/***/ }),
/* 193 */
/***/ (function(module, exports) {

function BlankNode (id) {
  this.value = id || ('b' + (++BlankNode.nextId))
}

BlankNode.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value
}

BlankNode.prototype.termType = 'BlankNode'

BlankNode.nextId = 0

module.exports = BlankNode


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var NamedNode = __webpack_require__(89)

function Literal (value, language, datatype) {
  this.value = value
  this.datatype = Literal.stringDatatype
  this.language = ''

  if (language) {
    this.language = language
    this.datatype = Literal.langStringDatatype
  } else if (datatype) {
    this.datatype = datatype
  }
}

Literal.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value &&
    other.language === this.language && other.datatype.equals(this.datatype)
}

Literal.prototype.termType = 'Literal'
Literal.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')
Literal.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')

module.exports = Literal


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var DefaultGraph = __webpack_require__(88)

function Quad (subject, predicate, object, graph) {
  this.subject = subject
  this.predicate = predicate
  this.object = object

  if (graph) {
    this.graph = graph
  } else {
    this.graph = new DefaultGraph()
  }
}

Quad.prototype.equals = function (other) {
  // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
  return !!other && (other.termType === 'Quad' || !other.termType) &&
    other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&
    other.object.equals(this.object) && other.graph.equals(this.graph)
}

Quad.prototype.termType = 'Quad'
Quad.prototype.value = ''

module.exports = Quad


/***/ }),
/* 196 */
/***/ (function(module, exports) {

function Variable (name) {
  this.value = name
}

Variable.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value
}

Variable.prototype.termType = 'Variable'

module.exports = Variable


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {!function(t,e){if(true)module.exports=e();else { var n, r; }}(global,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=17)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6);e.isTag=function(t){return n.isTag(t)},e.isCDATA=function(t){return"cdata"===t.type},e.isText=function(t){return"text"===t.type},e.isComment=function(t){return"comment"===t.type},e.hasChildren=function(t){return Object.prototype.hasOwnProperty.call(t,"children")}},function(t,e,r){const n=r(18),i=r(16),s=r(35),o=r(2);t.exports=function(t,e){const r=e.registry,a=s(n.parseDOM(t,{decodeEntities:!0}),e);let c=0;function u(t,r){if(i(t))return t;const n=encodeURIComponent(t);return r.currentType?r.currentVocab&&/[#/]$/.test(r.currentVocab)?r.currentVocab+n:r.currentVocab+"#"+n:e.base+"#"+n}const l=[];function p(t,e){if(!e.currentVocab)return[];if(!r[e.currentVocab])return[];const n=r[e.currentVocab].properties;if(!n)return[];const i=n[t];if(!i)return[];let s=[];return i.subPropertyOf&&(s=s.concat(i.subPropertyOf)),i.equivalentProperty&&(s=s.concat(i.equivalentProperty)),s}function h(t,n){const i=n.memory.get(t)||a.getItemId(t)||function(){const t="_:"+c;return c+=1,t}();if(n.memory.set(t,i),n.ancestors.indexOf(t)>=0){if(e.strict)throw new Error("Cyclic structure");return i}const s=a.getItemType(t);for(const t of s)l.push({subject:i,predicate:o.RDF__TYPE,object:{id:t}});const d=s[0]||n.currentType||null;n.currentVocab=function(t){return t?Object.keys(r).find(e=>t.startsWith(e))||t.replace(/[^#/]*$/,""):null}(d);const f={ancestors:n.ancestors.concat([t]),memory:n.memory,currentType:d,currentVocab:n.currentVocab};for(const e of a.getProperties(t))for(const t of a.getPropertyNames(e)){const r=u(t,f);let s=null;if(s=a.isItem(e)?{id:h(e,f)}:a.getItemValue(e),null!==s){l.push({subject:i,predicate:r,object:s});for(const e of p(t,n))l.push({subject:i,predicate:e,object:s})}}return i}const d={ancestors:[],memory:new Map,currentType:null,currentVocab:null};for(const t of a.getItems())h(t,d);return l},t.exports.isNamedNode=function(t){return void 0!==t.id},t.exports.isLiteralNode=function(t){return void 0===t.id}},function(t,e){e.RDF__TYPE="http://www.w3.org/1999/02/22-rdf-syntax-ns#type",e.RDF__NIL="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil",e.RDF__FIRST="http://www.w3.org/1999/02/22-rdf-syntax-ns#first",e.RDF__REST="http://www.w3.org/1999/02/22-rdf-syntax-ns#rest",e.RDF__LIST="http://www.w3.org/1999/02/22-rdf-syntax-ns#List",e.XSD__DOUBLE="http://www.w3.org/2001/XMLSchema#double",e.XSD__INTEGER="http://www.w3.org/2001/XMLSchema#integer",e.XSD__BOOLEAN="http://www.w3.org/2001/XMLSchema#boolean",e.XSD__STRING="http://www.w3.org/2001/XMLSchema#string",e.XSD__DATE="http://www.w3.org/2001/XMLSchema#date",e.XSD__TIME="http://www.w3.org/2001/XMLSchema#time",e.XSD__DATE_TIME="http://www.w3.org/2001/XMLSchema#dateTime",e.XSD__G_YEAR_MONTH="http://www.w3.org/2001/XMLSchema#gYearMonth",e.XSD__G_YEAR="http://www.w3.org/2001/XMLSchema#gYear",e.XSD__DURATION="http://www.w3.org/2001/XMLSchema#duration"},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=s(r(8)),a=r(20),c=new Set(["input","option","optgroup","select","button","datalist","textarea"]),u=new Set(["p"]),l={tr:new Set(["tr","th","td"]),th:new Set(["th"]),td:new Set(["thead","th","td"]),body:new Set(["head","link","script"]),li:new Set(["li"]),p:u,h1:u,h2:u,h3:u,h4:u,h5:u,h6:u,select:c,input:c,output:c,button:c,datalist:c,textarea:c,option:new Set(["option"]),optgroup:new Set(["optgroup","option"]),dd:new Set(["dt","dd"]),dt:new Set(["dt","dd"]),address:u,article:u,aside:u,blockquote:u,details:u,div:u,dl:u,fieldset:u,figcaption:u,figure:u,footer:u,form:u,header:u,hr:u,main:u,nav:u,ol:u,pre:u,section:u,table:u,ul:u,rt:new Set(["rt","rp"]),rp:new Set(["rt","rp"]),tbody:new Set(["thead","tbody"]),tfoot:new Set(["thead","tbody"])},p=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),h=new Set(["math","svg"]),d=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),f=/\s|\//,_=function(t){function e(r,n){var i=t.call(this)||this;return i._tagname="",i._attribname="",i._attribvalue="",i._attribs=null,i._stack=[],i._foreignContext=[],i.startIndex=0,i.endIndex=null,i.parseChunk=e.prototype.write,i.done=e.prototype.end,i._options=n||{},i._cbs=r||{},i._tagname="",i._attribname="",i._attribvalue="",i._attribs=null,i._stack=[],i._foreignContext=[],i.startIndex=0,i.endIndex=null,i._lowerCaseTagNames="lowerCaseTags"in i._options?!!i._options.lowerCaseTags:!i._options.xmlMode,i._lowerCaseAttributeNames="lowerCaseAttributeNames"in i._options?!!i._options.lowerCaseAttributeNames:!i._options.xmlMode,i._tokenizer=new(i._options.Tokenizer||o.default)(i._options,i),i._cbs.onparserinit&&i._cbs.onparserinit(i),i}return i(e,t),e.prototype._updatePosition=function(t){null===this.endIndex?this._tokenizer._sectionStart<=t?this.startIndex=0:this.startIndex=this._tokenizer._sectionStart-t:this.startIndex=this.endIndex+1,this.endIndex=this._tokenizer.getAbsoluteIndex()},e.prototype.ontext=function(t){this._updatePosition(1),this.endIndex--,this._cbs.ontext&&this._cbs.ontext(t)},e.prototype.onopentagname=function(t){if(this._lowerCaseTagNames&&(t=t.toLowerCase()),this._tagname=t,!this._options.xmlMode&&Object.prototype.hasOwnProperty.call(l,t))for(var e=void 0;l[t].has(e=this._stack[this._stack.length-1]);this.onclosetag(e));!this._options.xmlMode&&p.has(t)||(this._stack.push(t),h.has(t)?this._foreignContext.push(!0):d.has(t)&&this._foreignContext.push(!1)),this._cbs.onopentagname&&this._cbs.onopentagname(t),this._cbs.onopentag&&(this._attribs={})},e.prototype.onopentagend=function(){this._updatePosition(1),this._attribs&&(this._cbs.onopentag&&this._cbs.onopentag(this._tagname,this._attribs),this._attribs=null),!this._options.xmlMode&&this._cbs.onclosetag&&p.has(this._tagname)&&this._cbs.onclosetag(this._tagname),this._tagname=""},e.prototype.onclosetag=function(t){if(this._updatePosition(1),this._lowerCaseTagNames&&(t=t.toLowerCase()),(h.has(t)||d.has(t))&&this._foreignContext.pop(),!this._stack.length||!this._options.xmlMode&&p.has(t))this._options.xmlMode||"br"!==t&&"p"!==t||(this.onopentagname(t),this._closeCurrentTag());else{var e=this._stack.lastIndexOf(t);if(-1!==e)if(this._cbs.onclosetag)for(e=this._stack.length-e;e--;)this._cbs.onclosetag(this._stack.pop());else this._stack.length=e;else"p"!==t||this._options.xmlMode||(this.onopentagname(t),this._closeCurrentTag())}},e.prototype.onselfclosingtag=function(){this._options.xmlMode||this._options.recognizeSelfClosing||this._foreignContext[this._foreignContext.length-1]?this._closeCurrentTag():this.onopentagend()},e.prototype._closeCurrentTag=function(){var t=this._tagname;this.onopentagend(),this._stack[this._stack.length-1]===t&&(this._cbs.onclosetag&&this._cbs.onclosetag(t),this._stack.pop())},e.prototype.onattribname=function(t){this._lowerCaseAttributeNames&&(t=t.toLowerCase()),this._attribname=t},e.prototype.onattribdata=function(t){this._attribvalue+=t},e.prototype.onattribend=function(){this._cbs.onattribute&&this._cbs.onattribute(this._attribname,this._attribvalue),this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)&&(this._attribs[this._attribname]=this._attribvalue),this._attribname="",this._attribvalue=""},e.prototype._getInstructionName=function(t){var e=t.search(f),r=e<0?t:t.substr(0,e);return this._lowerCaseTagNames&&(r=r.toLowerCase()),r},e.prototype.ondeclaration=function(t){if(this._cbs.onprocessinginstruction){var e=this._getInstructionName(t);this._cbs.onprocessinginstruction("!"+e,"!"+t)}},e.prototype.onprocessinginstruction=function(t){if(this._cbs.onprocessinginstruction){var e=this._getInstructionName(t);this._cbs.onprocessinginstruction("?"+e,"?"+t)}},e.prototype.oncomment=function(t){this._updatePosition(4),this._cbs.oncomment&&this._cbs.oncomment(t),this._cbs.oncommentend&&this._cbs.oncommentend()},e.prototype.oncdata=function(t){this._updatePosition(1),this._options.xmlMode||this._options.recognizeCDATA?(this._cbs.oncdatastart&&this._cbs.oncdatastart(),this._cbs.ontext&&this._cbs.ontext(t),this._cbs.oncdataend&&this._cbs.oncdataend()):this.oncomment("[CDATA["+t+"]]")},e.prototype.onerror=function(t){this._cbs.onerror&&this._cbs.onerror(t)},e.prototype.onend=function(){if(this._cbs.onclosetag)for(var t=this._stack.length;t>0;this._cbs.onclosetag(this._stack[--t]));this._cbs.onend&&this._cbs.onend()},e.prototype.reset=function(){this._cbs.onreset&&this._cbs.onreset(),this._tokenizer.reset(),this._tagname="",this._attribname="",this._attribs=null,this._stack=[],this._cbs.onparserinit&&this._cbs.onparserinit(this)},e.prototype.parseComplete=function(t){this.reset(),this.end(t)},e.prototype.write=function(t){this._tokenizer.write(t)},e.prototype.end=function(t){this._tokenizer.end(t)},e.prototype.pause=function(){this._tokenizer.pause()},e.prototype.resume=function(){this._tokenizer.resume()},e}(a.EventEmitter);e.Parser=_},function(t){t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(t){t.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isTag=function(t){return"tag"===t.type||"script"===t.type||"style"===t.type},e.Text="text",e.Directive="directive",e.Comment="comment",e.Script="script",e.Style="style",e.Tag="tag",e.CDATA="cdata",e.Doctype="doctype"},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(22)),n(r(26)),n(r(27)),n(r(15)),n(r(28)),n(r(29)),n(r(0))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(9)),s=n(r(4)),o=n(r(10)),a=n(r(5));function c(t){return" "===t||"\n"===t||"\t"===t||"\f"===t||"\r"===t}function u(t,e,r){var n=t.toLowerCase();return t===n?function(t,i){i===n?t._state=e:(t._state=r,t._index--)}:function(i,s){s===n||s===t?i._state=e:(i._state=r,i._index--)}}function l(t,e){var r=t.toLowerCase();return function(n,i){i===r||i===t?n._state=e:(n._state=3,n._index--)}}var p=u("C",23,16),h=u("D",24,16),d=u("A",25,16),f=u("T",26,16),_=u("A",27,16),g=l("R",34),m=l("I",35),b=l("P",36),y=l("T",37),v=u("R",39,1),x=u("I",40,1),w=u("P",41,1),S=u("T",42,1),T=l("Y",44),q=l("L",45),D=l("E",46),A=u("Y",48,1),E=u("L",49,1),N=u("E",50,1),k=u("#",52,53),L=u("X",55,54),O=function(){function t(t,e){this._state=1,this._buffer="",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=1,this._special=1,this._running=!0,this._ended=!1,this._cbs=e,this._xmlMode=!(!t||!t.xmlMode),this._decodeEntities=!(!t||!t.decodeEntities)}return t.prototype.reset=function(){this._state=1,this._buffer="",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=1,this._special=1,this._running=!0,this._ended=!1},t.prototype._stateText=function(t){"<"===t?(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._state=2,this._sectionStart=this._index):this._decodeEntities&&1===this._special&&"&"===t&&(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._baseState=1,this._state=51,this._sectionStart=this._index)},t.prototype._stateBeforeTagName=function(t){"/"===t?this._state=5:"<"===t?(this._cbs.ontext(this._getSection()),this._sectionStart=this._index):">"===t||1!==this._special||c(t)?this._state=1:"!"===t?(this._state=15,this._sectionStart=this._index+1):"?"===t?(this._state=17,this._sectionStart=this._index+1):(this._state=this._xmlMode||"s"!==t&&"S"!==t?3:31,this._sectionStart=this._index)},t.prototype._stateInTagName=function(t){("/"===t||">"===t||c(t))&&(this._emitToken("onopentagname"),this._state=8,this._index--)},t.prototype._stateBeforeClosingTagName=function(t){c(t)||(">"===t?this._state=1:1!==this._special?"s"===t||"S"===t?this._state=32:(this._state=1,this._index--):(this._state=6,this._sectionStart=this._index))},t.prototype._stateInClosingTagName=function(t){(">"===t||c(t))&&(this._emitToken("onclosetag"),this._state=7,this._index--)},t.prototype._stateAfterClosingTagName=function(t){">"===t&&(this._state=1,this._sectionStart=this._index+1)},t.prototype._stateBeforeAttributeName=function(t){">"===t?(this._cbs.onopentagend(),this._state=1,this._sectionStart=this._index+1):"/"===t?this._state=4:c(t)||(this._state=9,this._sectionStart=this._index)},t.prototype._stateInSelfClosingTag=function(t){">"===t?(this._cbs.onselfclosingtag(),this._state=1,this._sectionStart=this._index+1):c(t)||(this._state=8,this._index--)},t.prototype._stateInAttributeName=function(t){("="===t||"/"===t||">"===t||c(t))&&(this._cbs.onattribname(this._getSection()),this._sectionStart=-1,this._state=10,this._index--)},t.prototype._stateAfterAttributeName=function(t){"="===t?this._state=11:"/"===t||">"===t?(this._cbs.onattribend(),this._state=8,this._index--):c(t)||(this._cbs.onattribend(),this._state=9,this._sectionStart=this._index)},t.prototype._stateBeforeAttributeValue=function(t){'"'===t?(this._state=12,this._sectionStart=this._index+1):"'"===t?(this._state=13,this._sectionStart=this._index+1):c(t)||(this._state=14,this._sectionStart=this._index,this._index--)},t.prototype._stateInAttributeValueDoubleQuotes=function(t){'"'===t?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=8):this._decodeEntities&&"&"===t&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=51,this._sectionStart=this._index)},t.prototype._stateInAttributeValueSingleQuotes=function(t){"'"===t?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=8):this._decodeEntities&&"&"===t&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=51,this._sectionStart=this._index)},t.prototype._stateInAttributeValueNoQuotes=function(t){c(t)||">"===t?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=8,this._index--):this._decodeEntities&&"&"===t&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=51,this._sectionStart=this._index)},t.prototype._stateBeforeDeclaration=function(t){this._state="["===t?22:"-"===t?18:16},t.prototype._stateInDeclaration=function(t){">"===t&&(this._cbs.ondeclaration(this._getSection()),this._state=1,this._sectionStart=this._index+1)},t.prototype._stateInProcessingInstruction=function(t){">"===t&&(this._cbs.onprocessinginstruction(this._getSection()),this._state=1,this._sectionStart=this._index+1)},t.prototype._stateBeforeComment=function(t){"-"===t?(this._state=19,this._sectionStart=this._index+1):this._state=16},t.prototype._stateInComment=function(t){"-"===t&&(this._state=20)},t.prototype._stateAfterComment1=function(t){this._state="-"===t?21:19},t.prototype._stateAfterComment2=function(t){">"===t?(this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2)),this._state=1,this._sectionStart=this._index+1):"-"!==t&&(this._state=19)},t.prototype._stateBeforeCdata6=function(t){"["===t?(this._state=28,this._sectionStart=this._index+1):(this._state=16,this._index--)},t.prototype._stateInCdata=function(t){"]"===t&&(this._state=29)},t.prototype._stateAfterCdata1=function(t){this._state="]"===t?30:28},t.prototype._stateAfterCdata2=function(t){">"===t?(this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2)),this._state=1,this._sectionStart=this._index+1):"]"!==t&&(this._state=28)},t.prototype._stateBeforeSpecial=function(t){"c"===t||"C"===t?this._state=33:"t"===t||"T"===t?this._state=43:(this._state=3,this._index--)},t.prototype._stateBeforeSpecialEnd=function(t){2!==this._special||"c"!==t&&"C"!==t?3!==this._special||"t"!==t&&"T"!==t?this._state=1:this._state=47:this._state=38},t.prototype._stateBeforeScript5=function(t){("/"===t||">"===t||c(t))&&(this._special=2),this._state=3,this._index--},t.prototype._stateAfterScript5=function(t){">"===t||c(t)?(this._special=1,this._state=6,this._sectionStart=this._index-6,this._index--):this._state=1},t.prototype._stateBeforeStyle4=function(t){("/"===t||">"===t||c(t))&&(this._special=3),this._state=3,this._index--},t.prototype._stateAfterStyle4=function(t){">"===t||c(t)?(this._special=1,this._state=6,this._sectionStart=this._index-5,this._index--):this._state=1},t.prototype._parseNamedEntityStrict=function(){if(this._sectionStart+1<this._index){var t=this._buffer.substring(this._sectionStart+1,this._index),e=this._xmlMode?a.default:s.default;Object.prototype.hasOwnProperty.call(e,t)&&(this._emitPartial(e[t]),this._sectionStart=this._index+1)}},t.prototype._parseLegacyEntity=function(){var t=this._sectionStart+1,e=this._index-t;for(e>6&&(e=6);e>=2;){var r=this._buffer.substr(t,e);if(Object.prototype.hasOwnProperty.call(o.default,r))return this._emitPartial(o.default[r]),void(this._sectionStart+=e+1);e--}},t.prototype._stateInNamedEntity=function(t){";"===t?(this._parseNamedEntityStrict(),this._sectionStart+1<this._index&&!this._xmlMode&&this._parseLegacyEntity(),this._state=this._baseState):(t<"a"||t>"z")&&(t<"A"||t>"Z")&&(t<"0"||t>"9")&&(this._xmlMode||this._sectionStart+1===this._index||(1!==this._baseState?"="!==t&&this._parseNamedEntityStrict():this._parseLegacyEntity()),this._state=this._baseState,this._index--)},t.prototype._decodeNumericEntity=function(t,e){var r=this._sectionStart+t;if(r!==this._index){var n=this._buffer.substring(r,this._index),s=parseInt(n,e);this._emitPartial(i.default(s)),this._sectionStart=this._index}else this._sectionStart--;this._state=this._baseState},t.prototype._stateInNumericEntity=function(t){";"===t?(this._decodeNumericEntity(2,10),this._sectionStart++):(t<"0"||t>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(2,10),this._index--)},t.prototype._stateInHexEntity=function(t){";"===t?(this._decodeNumericEntity(3,16),this._sectionStart++):(t<"a"||t>"f")&&(t<"A"||t>"F")&&(t<"0"||t>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(3,16),this._index--)},t.prototype._cleanup=function(){this._sectionStart<0?(this._buffer="",this._bufferOffset+=this._index,this._index=0):this._running&&(1===this._state?(this._sectionStart!==this._index&&this._cbs.ontext(this._buffer.substr(this._sectionStart)),this._buffer="",this._bufferOffset+=this._index,this._index=0):this._sectionStart===this._index?(this._buffer="",this._bufferOffset+=this._index,this._index=0):(this._buffer=this._buffer.substr(this._sectionStart),this._index-=this._sectionStart,this._bufferOffset+=this._sectionStart),this._sectionStart=0)},t.prototype.write=function(t){this._ended&&this._cbs.onerror(Error(".write() after done!")),this._buffer+=t,this._parse()},t.prototype._parse=function(){for(;this._index<this._buffer.length&&this._running;){var t=this._buffer.charAt(this._index);1===this._state?this._stateText(t):12===this._state?this._stateInAttributeValueDoubleQuotes(t):9===this._state?this._stateInAttributeName(t):19===this._state?this._stateInComment(t):8===this._state?this._stateBeforeAttributeName(t):3===this._state?this._stateInTagName(t):6===this._state?this._stateInClosingTagName(t):2===this._state?this._stateBeforeTagName(t):10===this._state?this._stateAfterAttributeName(t):13===this._state?this._stateInAttributeValueSingleQuotes(t):11===this._state?this._stateBeforeAttributeValue(t):5===this._state?this._stateBeforeClosingTagName(t):7===this._state?this._stateAfterClosingTagName(t):31===this._state?this._stateBeforeSpecial(t):20===this._state?this._stateAfterComment1(t):14===this._state?this._stateInAttributeValueNoQuotes(t):4===this._state?this._stateInSelfClosingTag(t):16===this._state?this._stateInDeclaration(t):15===this._state?this._stateBeforeDeclaration(t):21===this._state?this._stateAfterComment2(t):18===this._state?this._stateBeforeComment(t):32===this._state?this._stateBeforeSpecialEnd(t):38===this._state?v(this,t):39===this._state?x(this,t):40===this._state?w(this,t):33===this._state?g(this,t):34===this._state?m(this,t):35===this._state?b(this,t):36===this._state?y(this,t):37===this._state?this._stateBeforeScript5(t):41===this._state?S(this,t):42===this._state?this._stateAfterScript5(t):43===this._state?T(this,t):28===this._state?this._stateInCdata(t):44===this._state?q(this,t):45===this._state?D(this,t):46===this._state?this._stateBeforeStyle4(t):47===this._state?A(this,t):48===this._state?E(this,t):49===this._state?N(this,t):50===this._state?this._stateAfterStyle4(t):17===this._state?this._stateInProcessingInstruction(t):53===this._state?this._stateInNamedEntity(t):22===this._state?p(this,t):51===this._state?k(this,t):23===this._state?h(this,t):24===this._state?d(this,t):29===this._state?this._stateAfterCdata1(t):30===this._state?this._stateAfterCdata2(t):25===this._state?f(this,t):26===this._state?_(this,t):27===this._state?this._stateBeforeCdata6(t):55===this._state?this._stateInHexEntity(t):54===this._state?this._stateInNumericEntity(t):52===this._state?L(this,t):this._cbs.onerror(Error("unknown _state"),this._state),this._index++}this._cleanup()},t.prototype.pause=function(){this._running=!1},t.prototype.resume=function(){this._running=!0,this._index<this._buffer.length&&this._parse(),this._ended&&this._finish()},t.prototype.end=function(t){this._ended&&this._cbs.onerror(Error(".end() after done!")),t&&this.write(t),this._ended=!0,this._running&&this._finish()},t.prototype._finish=function(){this._sectionStart<this._index&&this._handleTrailingData(),this._cbs.onend()},t.prototype._handleTrailingData=function(){var t=this._buffer.substr(this._sectionStart);28===this._state||29===this._state||30===this._state?this._cbs.oncdata(t):19===this._state||20===this._state||21===this._state?this._cbs.oncomment(t):53!==this._state||this._xmlMode?54!==this._state||this._xmlMode?55!==this._state||this._xmlMode?3!==this._state&&8!==this._state&&11!==this._state&&10!==this._state&&9!==this._state&&13!==this._state&&12!==this._state&&14!==this._state&&6!==this._state&&this._cbs.ontext(t):(this._decodeNumericEntity(3,16),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._decodeNumericEntity(2,10),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._parseLegacyEntity(),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData()))},t.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index},t.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index)},t.prototype._emitToken=function(t){this._cbs[t](this._getSection()),this._sectionStart=-1},t.prototype._emitPartial=function(t){1!==this._baseState?this._cbs.onattribdata(t):this._cbs.ontext(t)},t}();e.default=O},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(19));e.default=function(t){if(t>=55296&&t<=57343||t>1114111)return"�";t in i.default&&(t=i.default[t]);var e="";return t>65535&&(t-=65536,e+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e+=String.fromCharCode(t)}},function(t){t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(21);e.Node=n.Node,e.Element=n.Element,e.DataNode=n.DataNode,e.NodeWithChildren=n.NodeWithChildren;var i=/\s+/g,s={normalizeWhitespace:!1,withStartIndices:!1,withEndIndices:!1},o=function(){function t(t,e,r){this.dom=[],this._done=!1,this._tagStack=[],this._lastNode=null,this._parser=null,"function"==typeof e&&(r=e,e=s),"object"==typeof t&&(e=t,t=void 0),this._callback=t||null,this._options=e||s,this._elementCB=r||null}return t.prototype.onparserinit=function(t){this._parser=t},t.prototype.onreset=function(){this.dom=[],this._done=!1,this._tagStack=[],this._lastNode=null,this._parser=this._parser||null},t.prototype.onend=function(){this._done||(this._done=!0,this._parser=null,this.handleCallback(null))},t.prototype.onerror=function(t){this.handleCallback(t)},t.prototype.onclosetag=function(){this._lastNode=null;var t=this._tagStack.pop();t&&this._parser&&(this._options.withEndIndices&&(t.endIndex=this._parser.endIndex),this._elementCB&&this._elementCB(t))},t.prototype.onopentag=function(t,e){var r=new n.Element(t,e);this.addNode(r),this._tagStack.push(r)},t.prototype.ontext=function(t){var e=this._options.normalizeWhitespace,r=this._lastNode;if(r&&"text"===r.type)e?r.data=(r.data+t).replace(i," "):r.data+=t;else{e&&(t=t.replace(i," "));var s=new n.DataNode("text",t);this.addNode(s),this._lastNode=s}},t.prototype.oncomment=function(t){if(this._lastNode&&"comment"===this._lastNode.type)this._lastNode.data+=t;else{var e=new n.DataNode("comment",t);this.addNode(e),this._lastNode=e}},t.prototype.oncommentend=function(){this._lastNode=null},t.prototype.oncdatastart=function(){var t=new n.DataNode("text",""),e=new n.NodeWithChildren("cdata",[t]);this.addNode(e),t.parent=e,this._lastNode=t},t.prototype.oncdataend=function(){this._lastNode=null},t.prototype.onprocessinginstruction=function(t,e){var r=new n.ProcessingInstruction(t,e);this.addNode(r)},t.prototype.handleCallback=function(t){if("function"==typeof this._callback)this._callback(t,this.dom);else if(t)throw t},t.prototype.addNode=function(t){var e=this._tagStack[this._tagStack.length-1],r=e?e.children:this.dom,n=r[r.length-1];this._parser&&(this._options.withStartIndices&&(t.startIndex=this._parser.startIndex),this._options.withEndIndices&&(t.endIndex=this._parser.endIndex)),r.push(t),n&&(t.prev=n,n.next=t),e&&(t.parent=e),this._lastNode=null},t.prototype.addDataNode=function(t){this.addNode(t),this._lastNode=t},t}();e.DomHandler=o,e.default=o},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var a=s(r(11)),c=o(r(7)),u=r(3),l=function(t){function e(e,r){return"object"==typeof e&&null!==e&&(r=e=void 0),t.call(this,e,r)||this}return i(e,t),e.prototype.onend=function(){var t={},e=h(g,this.dom);if(e)if("feed"===e.name){var r=e.children;t.type="atom",_(t,"id","id",r),_(t,"title","title",r);var n=f("href",h("link",r));n&&(t.link=n),_(t,"description","subtitle",r),(i=d("updated",r))&&(t.updated=new Date(i)),_(t,"author","email",r,!0),t.items=p("entry",r).map((function(t){var e={},r=t.children;_(e,"id","id",r),_(e,"title","title",r);var n=f("href",h("link",r));n&&(e.link=n);var i=d("summary",r)||d("content",r);i&&(e.description=i);var s=d("updated",r);return s&&(e.pubDate=new Date(s)),e}))}else{var i;r=h("channel",e.children).children;t.type=e.name.substr(0,3),t.id="",_(t,"title","title",r),_(t,"link","link",r),_(t,"description","description",r),(i=d("lastBuildDate",r))&&(t.updated=new Date(i)),_(t,"author","managingEditor",r,!0),t.items=p("item",e.children).map((function(t){var e={},r=t.children;_(e,"id","guid",r),_(e,"title","title",r),_(e,"link","link",r),_(e,"description","description",r);var n=d("pubDate",r);return n&&(e.pubDate=new Date(n)),e}))}this.feed=t,this.handleCallback(e?null:Error("couldn't find root of feed"))},e}(a.default);function p(t,e){return c.getElementsByTagName(t,e,!0)}function h(t,e){return c.getElementsByTagName(t,e,!0,1)[0]}function d(t,e,r){return void 0===r&&(r=!1),c.getText(c.getElementsByTagName(t,e,r,1)).trim()}function f(t,e){return e?e.attribs[t]:null}function _(t,e,r,n,i){void 0===i&&(i=!1);var s=d(r,n,i);s&&(t[e]=s)}function g(t){return"rss"===t||"feed"===t||"rdf:RDF"===t}e.FeedHandler=l;var m={xmlMode:!0};e.parseFeed=function(t,e){void 0===e&&(e=m);var r=new l(e);return new u.Parser(r,e).end(t),r.feed}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(4)),s=n(r(10)),o=n(r(5)),a=n(r(9));function c(t){var e=Object.keys(t).join("|"),r=l(t),n=new RegExp("&(?:"+(e+="|#[xX][\\da-fA-F]+|#\\d+")+");","g");return function(t){return String(t).replace(n,r)}}e.decodeXML=c(o.default),e.decodeHTMLStrict=c(i.default);var u=function(t,e){return t<e?1:-1};function l(t){return function(e){return"#"===e.charAt(1)?"X"===e.charAt(2)||"x"===e.charAt(2)?a.default(parseInt(e.substr(3),16)):a.default(parseInt(e.substr(2),10)):t[e.slice(1,-1)]}}e.decodeHTML=function(){for(var t=Object.keys(s.default).sort(u),e=Object.keys(i.default).sort(u),r=0,n=0;r<e.length;r++)t[n]===e[r]?(e[r]+=";?",n++):e[r]+=";";var o=new RegExp("&(?:"+e.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),a=l(i.default);function c(t){return";"!==t.substr(-1)&&(t+=";"),a(t)}return function(t){return String(t).replace(o,c)}}()},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=c(n(r(5)).default),s=u(i);e.encodeXML=f(i,s);var o=c(n(r(4)).default),a=u(o);function c(t){return Object.keys(t).sort().reduce((function(e,r){return e[t[r]]="&"+r+";",e}),{})}function u(t){var e=[],r=[];return Object.keys(t).forEach((function(t){return 1===t.length?e.push("\\"+t):r.push(t)})),r.unshift("["+e.join("")+"]"),new RegExp(r.join("|"),"g")}e.encodeHTML=f(o,a);var l=/[^\0-\x7F]/g,p=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function h(t){return"&#x"+t.charCodeAt(0).toString(16).toUpperCase()+";"}function d(t,e){return"&#x"+(1024*(t.charCodeAt(0)-55296)+t.charCodeAt(1)-56320+65536).toString(16).toUpperCase()+";"}function f(t,e){return function(r){return r.replace(e,(function(e){return t[e]})).replace(p,d).replace(l,h)}}var _=u(i);e.escape=function(t){return t.replace(_,h).replace(p,d).replace(l,h)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0);function i(t,e,r,s){for(var o=[],a=0,c=e;a<c.length;a++){var u=c[a];if(t(u)&&(o.push(u),--s<=0))break;if(r&&n.hasChildren(u)&&u.children.length>0){var l=i(t,u.children,r,s);if(o.push.apply(o,l),(s-=l.length)<=0)break}}return o}e.filter=function(t,e,r,n){return void 0===r&&(r=!0),void 0===n&&(n=1/0),Array.isArray(e)||(e=[e]),i(t,e,r,n)},e.find=i,e.findOneChild=function(t,e){return e.find(t)},e.findOne=function t(e,r,i){void 0===i&&(i=!0);for(var s=null,o=0;o<r.length&&!s;o++){var a=r[o];n.isTag(a)&&(e(a)?s=a:i&&a.children.length>0&&(s=t(e,a.children)))}return s},e.existsOne=function t(e,r){return r.some((function(r){return n.isTag(r)&&(e(r)||r.children.length>0&&t(e,r.children))}))},e.findAll=function(t,e){for(var r,i,s=[],o=e.filter(n.isTag);i=o.shift();){var a=null===(r=i.children)||void 0===r?void 0:r.filter(n.isTag);a&&a.length>0&&o.unshift.apply(o,a),t(i)&&s.push(i)}return s}},function(t,e,r){"use strict";t.exports=t=>{if("string"!=typeof t)throw new TypeError(`Expected a \`string\`, got \`${typeof t}\``);return!/^[a-zA-Z]:\\/.test(t)&&/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(t)}},function(t,e,r){const n=r(1),i=r(39),s=r(40),o=r(41);function a({base:t="",registry:e={},strict:r=!1,useRdfType:n=!1,useNativeTypes:i=!0}={}){return{base:(s=t||"",s.replace(/#[^#/?]$/,"")),registry:e,strict:r,useRdfType:n,useNativeTypes:i};var s}e.toJsonld=function(t,e){return e=a(e),i(n(t,e),e)},e.toJson=function(t,e){return e=a(e),s(n(t,e),e)},e.toRdf=function(t,e){return e=a(e),o(n(t,e))}},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}var i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var s=r(3);e.Parser=s.Parser;var o=r(11);e.DomHandler=o.DomHandler,e.DefaultHandler=o.DomHandler,e.parseDOM=function(t,e){var r=new o.DomHandler(void 0,e);return new s.Parser(r,e).end(t),r.dom},e.createDomStream=function(t,e,r){var n=new o.DomHandler(t,e,r);return new s.Parser(n,e)};var a=r(8);e.Tokenizer=a.default;var c=i(r(6));e.ElementType=c,e.EVENTS={attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0},n(r(12)),n(r(30)),n(r(33));var u=i(r(7));e.DomUtils=u;var l=r(12);e.RssHandler=l.FeedHandler},function(t){t.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(t,e){t.exports=__webpack_require__(15)},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=new Map([["tag",1],["script",1],["style",1],["directive",1],["text",3],["cdata",4],["comment",8]]),o=function(){function t(t){this.type=t,this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return s.get(this.type)||1},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentNode",{get:function(){return this.parent||null},set:function(t){this.parent=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"previousSibling",{get:function(){return this.prev||null},set:function(t){this.prev=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nextSibling",{get:function(){return this.next||null},set:function(t){this.next=t},enumerable:!0,configurable:!0}),t}();e.Node=o;var a=function(t){function e(e,r){var n=t.call(this,e)||this;return n.data=r,n}return i(e,t),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.data},set:function(t){this.data=t},enumerable:!0,configurable:!0}),e}(o);e.DataNode=a;var c=function(t){function e(e,r){var n=t.call(this,"directive",r)||this;return n.name=e,n}return i(e,t),e}(a);e.ProcessingInstruction=c;var u=function(t){function e(e,r){var n=t.call(this,e)||this;return n.children=r,n}return i(e,t),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.children},set:function(t){this.children=t},enumerable:!0,configurable:!0}),e}(o);e.NodeWithChildren=u;var l=function(t){function e(e,r){var n=t.call(this,"script"===e?"script":"style"===e?"style":"tag",[])||this;return n.name=e,n.attribs=r,n.attribs=r,n}return i(e,t),Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name},set:function(t){this.name=t},enumerable:!0,configurable:!0}),e}(u);e.Element=l},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),s=n(r(23));function o(t,e){return s.default(t,e)}e.getOuterHTML=o,e.getInnerHTML=function(t,e){return i.hasChildren(t)?t.children.map((function(t){return o(t,e)})).join(""):""},e.getText=function t(e){return Array.isArray(e)?e.map(t).join(""):i.isTag(e)?"br"===e.name?"\n":t(e.children):i.isCDATA(e)?t(e.children):i.isText(e)?e.data:""}},function(t,e,r){var n=r(6),i=r(24),s=r(25);s.elementNames.__proto__=null,s.attributeNames.__proto__=null;var o={__proto__:null,style:!0,script:!0,xmp:!0,iframe:!0,noembed:!0,noframes:!0,plaintext:!0,noscript:!0};var a={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},c=t.exports=function(t,e){Array.isArray(t)||t.cheerio||(t=[t]),e=e||{};for(var r="",i=0;i<t.length;i++){var s=t[i];"root"===s.type?r+=c(s.children,e):n.isTag(s)?r+=l(s,e):s.type===n.Directive?r+=p(s):s.type===n.Comment?r+=f(s):s.type===n.CDATA?r+=d(s):r+=h(s,e)}return r},u=["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"];function l(t,e){"foreign"===e.xmlMode&&(t.name=s.elementNames[t.name]||t.name,t.parent&&u.indexOf(t.parent.name)>=0&&(e=Object.assign({},e,{xmlMode:!1}))),!e.xmlMode&&["svg","math"].indexOf(t.name)>=0&&(e=Object.assign({},e,{xmlMode:"foreign"}));var r="<"+t.name,n=function(t,e){if(t){var r,n="";for(var o in t)r=t[o],n&&(n+=" "),"foreign"===e.xmlMode&&(o=s.attributeNames[o]||o),n+=o,(null!==r&&""!==r||e.xmlMode)&&(n+='="'+(e.decodeEntities?i.encodeXML(r):r.replace(/\"/g,"&quot;"))+'"');return n}}(t.attribs,e);return n&&(r+=" "+n),!e.xmlMode||t.children&&0!==t.children.length?(r+=">",t.children&&(r+=c(t.children,e)),a[t.name]&&!e.xmlMode||(r+="</"+t.name+">")):r+="/>",r}function p(t){return"<"+t.data+">"}function h(t,e){var r=t.data||"";return!e.decodeEntities||t.parent&&t.parent.name in o||(r=i.encodeXML(r)),r}function d(t){return"<![CDATA["+t.children[0].data+"]]>"}function f(t){return"\x3c!--"+t.data+"--\x3e"}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(13),i=r(14);e.decode=function(t,e){return(!e||e<=0?n.decodeXML:n.decodeHTML)(t)},e.decodeStrict=function(t,e){return(!e||e<=0?n.decodeXML:n.decodeHTMLStrict)(t)},e.encode=function(t,e){return(!e||e<=0?i.encodeXML:i.encodeHTML)(t)};var s=r(14);e.encodeXML=s.encodeXML,e.encodeHTML=s.encodeHTML,e.escape=s.escape,e.encodeHTML4=s.encodeHTML,e.encodeHTML5=s.encodeHTML;var o=r(13);e.decodeXML=o.decodeXML,e.decodeHTML=o.decodeHTML,e.decodeHTMLStrict=o.decodeHTMLStrict,e.decodeHTML4=o.decodeHTML,e.decodeHTML5=o.decodeHTML,e.decodeHTML4Strict=o.decodeHTMLStrict,e.decodeHTML5Strict=o.decodeHTMLStrict,e.decodeXMLStrict=o.decodeXML},function(t){t.exports=JSON.parse('{"elementNames":{"altglyph":"altGlyph","altglyphdef":"altGlyphDef","altglyphitem":"altGlyphItem","animatecolor":"animateColor","animatemotion":"animateMotion","animatetransform":"animateTransform","clippath":"clipPath","feblend":"feBlend","fecolormatrix":"feColorMatrix","fecomponenttransfer":"feComponentTransfer","fecomposite":"feComposite","feconvolvematrix":"feConvolveMatrix","fediffuselighting":"feDiffuseLighting","fedisplacementmap":"feDisplacementMap","fedistantlight":"feDistantLight","fedropshadow":"feDropShadow","feflood":"feFlood","fefunca":"feFuncA","fefuncb":"feFuncB","fefuncg":"feFuncG","fefuncr":"feFuncR","fegaussianblur":"feGaussianBlur","feimage":"feImage","femerge":"feMerge","femergenode":"feMergeNode","femorphology":"feMorphology","feoffset":"feOffset","fepointlight":"fePointLight","fespecularlighting":"feSpecularLighting","fespotlight":"feSpotLight","fetile":"feTile","feturbulence":"feTurbulence","foreignobject":"foreignObject","glyphref":"glyphRef","lineargradient":"linearGradient","radialgradient":"radialGradient","textpath":"textPath"},"attributeNames":{"definitionurl":"definitionURL","attributename":"attributeName","attributetype":"attributeType","basefrequency":"baseFrequency","baseprofile":"baseProfile","calcmode":"calcMode","clippathunits":"clipPathUnits","diffuseconstant":"diffuseConstant","edgemode":"edgeMode","filterunits":"filterUnits","glyphref":"glyphRef","gradienttransform":"gradientTransform","gradientunits":"gradientUnits","kernelmatrix":"kernelMatrix","kernelunitlength":"kernelUnitLength","keypoints":"keyPoints","keysplines":"keySplines","keytimes":"keyTimes","lengthadjust":"lengthAdjust","limitingconeangle":"limitingConeAngle","markerheight":"markerHeight","markerunits":"markerUnits","markerwidth":"markerWidth","maskcontentunits":"maskContentUnits","maskunits":"maskUnits","numoctaves":"numOctaves","pathlength":"pathLength","patterncontentunits":"patternContentUnits","patterntransform":"patternTransform","patternunits":"patternUnits","pointsatx":"pointsAtX","pointsaty":"pointsAtY","pointsatz":"pointsAtZ","preservealpha":"preserveAlpha","preserveaspectratio":"preserveAspectRatio","primitiveunits":"primitiveUnits","refx":"refX","refy":"refY","repeatcount":"repeatCount","repeatdur":"repeatDur","requiredextensions":"requiredExtensions","requiredfeatures":"requiredFeatures","specularconstant":"specularConstant","specularexponent":"specularExponent","spreadmethod":"spreadMethod","startoffset":"startOffset","stddeviation":"stdDeviation","stitchtiles":"stitchTiles","surfacescale":"surfaceScale","systemlanguage":"systemLanguage","tablevalues":"tableValues","targetx":"targetX","targety":"targetY","textlength":"textLength","viewbox":"viewBox","viewtarget":"viewTarget","xchannelselector":"xChannelSelector","ychannelselector":"yChannelSelector","zoomandpan":"zoomAndPan"}}')},function(t,e,r){"use strict";function n(t){return t.children||null}function i(t){return t.parent||null}Object.defineProperty(e,"__esModule",{value:!0}),e.getChildren=n,e.getParent=i,e.getSiblings=function(t){var e=i(t);return e?n(e):[t]},e.getAttributeValue=function(t,e){var r;return null===(r=t.attribs)||void 0===r?void 0:r[e]},e.hasAttrib=function(t,e){return!!t.attribs&&Object.prototype.hasOwnProperty.call(t.attribs,e)&&null!=t.attribs[e]},e.getName=function(t){return t.name}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.removeElement=function(t){if(t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t.parent){var e=t.parent.children;e.splice(e.lastIndexOf(t),1)}},e.replaceElement=function(t,e){var r=e.prev=t.prev;r&&(r.next=e);var n=e.next=t.next;n&&(n.prev=e);var i=e.parent=t.parent;if(i){var s=i.children;s[s.lastIndexOf(t)]=e}},e.appendChild=function(t,e){if(e.parent=t,1!==t.children.push(e)){var r=t.children[t.children.length-2];r.next=e,e.prev=r,e.next=null}},e.append=function(t,e){var r=t.parent,n=t.next;if(e.next=n,e.prev=t,t.next=e,e.parent=r,n){if(n.prev=e,r){var i=r.children;i.splice(i.lastIndexOf(n),0,e)}}else r&&r.children.push(e)},e.prepend=function(t,e){var r=t.parent;if(r){var n=r.children;n.splice(n.lastIndexOf(t),0,e)}t.prev&&(t.prev.next=e),e.parent=r,e.prev=t.prev,e.next=t,t.prev=e}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(15),i=r(0);function s(t){return"text"===t.type}var o={tag_name:function(t){return"function"==typeof t?function(e){return i.isTag(e)&&t(e.name)}:"*"===t?i.isTag:function(e){return i.isTag(e)&&e.name===t}},tag_type:function(t){return"function"==typeof t?function(e){return t(e.type)}:function(e){return e.type===t}},tag_contains:function(t){return"function"==typeof t?function(e){return s(e)&&t(e.data)}:function(e){return s(e)&&e.data===t}}};function a(t,e){return"function"==typeof e?function(r){return i.isTag(r)&&e(r.attribs[t])}:function(r){return i.isTag(r)&&r.attribs[t]===e}}function c(t,e){return function(r){return t(r)||e(r)}}function u(t){var e=Object.keys(t).map((function(e){var r=t[e];return e in o?o[e](r):a(e,r)}));return 0===e.length?null:e.reduce(c)}e.testElement=function(t,e){var r=u(t);return!r||r(e)},e.getElements=function(t,e,r,i){void 0===i&&(i=1/0);var s=u(t);return s?n.filter(s,e,r,i):[]},e.getElementById=function(t,e,r){return void 0===r&&(r=!0),Array.isArray(e)||(e=[e]),n.findOne(a("id",t),e,r)},e.getElementsByTagName=function(t,e,r,i){return void 0===i&&(i=1/0),n.filter(o.tag_name(t),e,r,i)},e.getElementsByTagType=function(t,e,r,i){return void 0===r&&(r=!0),void 0===i&&(i=1/0),n.filter(o.tag_type(t),e,r,i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0);function i(t,e){var r=[],i=[];if(t===e)return 0;for(var s=n.hasChildren(t)?t:t.parent;s;)r.unshift(s),s=s.parent;for(s=n.hasChildren(e)?e:e.parent;s;)i.unshift(s),s=s.parent;for(var o=0;r[o]===i[o];)o++;if(0===o)return 1;var a=r[o-1],c=a.children,u=r[o],l=i[o];return c.indexOf(u)>c.indexOf(l)?a===e?20:4:a===t?10:2}e.removeSubsets=function(t){for(var e=t.length;--e>=0;){var r=t[e];if(e>0&&t.lastIndexOf(r,e-1)>=0)t.splice(e,1);else for(var n=r.parent;n;n=n.parent)if(t.indexOf(n)>-1){t.splice(e,1);break}}return t},e.compareDocumentPosition=i,e.uniqueSort=function(t){return(t=t.filter((function(t,e,r){return!r.includes(t,e+1)}))).sort((function(t,e){var r=i(t,e);return 2&r?-1:4&r?1:0})),t}},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(3),o=r(31),a=r(32);var c=function(t){function e(e,r){var n=t.call(this,{decodeStrings:!1})||this;return n._decoder=new a.StringDecoder,n._parser=new s.Parser(e,r),n}return i(e,t),e.prototype._write=function(t,e,r){(function(t,e){return"buffer"===e})(0,e)&&(t=this._decoder.write(t)),this._parser.write(t),r()},e.prototype._final=function(t){this._parser.end(this._decoder.end()),t()},e}(o.Writable);e.WritableStream=c},function(t,e){t.exports=__webpack_require__(39)},function(t,e){t.exports=__webpack_require__(24)},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){void 0===e&&(e={});var r=t.call(this,(function(t){for(var e,n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];r.events.push([t].concat(n)),r._cbs[t]&&(e=r._cbs)[t].apply(e,n)}))||this;return r._cbs=e,r.events=[],r}return i(e,t),e.prototype.onreset=function(){this.events=[],this._cbs.onreset&&this._cbs.onreset()},e.prototype.restart=function(){var t;this._cbs.onreset&&this._cbs.onreset();for(var e=0;e<this.events.length;e++){var r=this.events[e],n=r[0],i=r.slice(1);this._cbs[n]&&(t=this._cbs)[n].apply(t,i)}},e}(s(r(34)).default);e.CollectingHandler=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this._func=t}return t.prototype.onattribute=function(t,e){this._func("onattribute",t,e)},t.prototype.oncdatastart=function(){this._func("oncdatastart")},t.prototype.oncdataend=function(){this._func("oncdataend")},t.prototype.ontext=function(t){this._func("ontext",t)},t.prototype.onprocessinginstruction=function(t,e){this._func("onprocessinginstruction",t,e)},t.prototype.oncomment=function(t){this._func("oncomment",t)},t.prototype.oncommentend=function(){this._func("oncommentend")},t.prototype.onclosetag=function(t){this._func("onclosetag",t)},t.prototype.onopentag=function(t,e){this._func("onopentag",t,e)},t.prototype.onopentagname=function(t){this._func("onopentagname",t)},t.prototype.onerror=function(t){this._func("onerror",t)},t.prototype.onend=function(){this._func("onend")},t.prototype.onparserinit=function(t){this._func("onparserinit",t)},t.prototype.onreset=function(){this._func("onreset")},t}();e.default=n},function(t,e,r){const n=r(7),{splitUnique:i}=r(36),s=r(16),{tryResolve:o}=r(37),{XSD__DOUBLE:a,XSD__INTEGER:c,XSD__DATE:u,XSD__TIME:l,XSD__DATE_TIME:p,XSD__G_YEAR_MONTH:h,XSD__G_YEAR:d,XSD__DURATION:f}=r(2);function _(t){const e={};return function t(e,r){for(const i of e){r(i);const e=n.getChildren(i);e&&t(e,r)}}(t,t=>{if(!n.isTag(t))return;const r=n.getAttributeValue(t,"id");r&&!e[r]&&(e[r]=t)}),e}t.exports=function(t,e){let r=e.base||"";const g=n.findOne(t=>"base"===t.name&&n.hasAttrib(t,"href"),t);g&&(r=o(g.attribs.href,r));const m=e.strict,b=_(t);function y(t){return n.isTag(t)&&n.hasAttrib(t,"itemscope")}function v(t){return n.isTag(t)&&n.hasAttrib(t,"itemprop")}function x(t){if(!n.isTag(t))return[];const e=n.getAttributeValue(t,"itemprop");return e?i(e):[]}const w=["audio","embed","iframe","img","source","track","video"],S=["a","area","link"];function T(t,e){if(!n.isTag(t))return!1;const r=n.getName(t);return e.indexOf(r)>=0}function q(t){if(t&&s(t))return{id:t};const e=o(t,r);return e?{id:e}:{value:""}}function D(t){return{value:t||""}}return{getItems:function(){return function t(e,r){let i=[];for(const s of e){let e=r;y(s)&&(!v(s)||!m&&r)&&(e=!1,i.push(s));const o=n.getChildren(s);if(o){const r=t(o,e);i=i.concat(r)}}return i}(t,!0)},getProperties:function(t){const e=[],r=[];let s=[];r.push(t);const o=n.getChildren(t);o&&(s=s.concat(o));const a=i(n.getAttributeValue(t,"itemref"));for(const t of a)b[t]&&s.push(b[t]);let c=s.shift();for(;c;){if(!r.includes(c)){r.push(c);const t=n.getChildren(c);t&&!y(c)&&(s=s.concat(t));x(c).length>0&&e.push(c)}c=s.shift()}return e.sort((t,e)=>{const r=n.compareDocumentPosition(t,e);return 4==(4&r)?1:2==(2&r)?-1:0}),e},getItemValue:function(t){if(!v(t))return null;if(y(t))return t;if(n.isTag(t)){if(n.hasAttrib(t,"content"))return D(n.getAttributeValue(t,"content"));if(T(t,w))return q(n.getAttributeValue(t,"src"));if(T(t,S))return q(n.getAttributeValue(t,"href"));if(T(t,["object"]))return q(n.getAttributeValue(t,"data"));if(T(t,["data","meter"]))return function(t){const e=Number(t);return isNaN(e)?{value:t||""}:{value:e,type:Number.isInteger(e)?c:a}}(n.getAttributeValue(t,"value"));if(T(t,["time"]))return function(t){const e={value:t=t||""};return/^\d{4}-\d{2}-\d{2}$/.test(t)?e.type=u:/^\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?(?:[AZ]|[+-]\d{2}(?::\d{2})?)?$/.test(t)?e.type=l:/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?(?:[AZ]|[+-]\d{2}(?::\d{2})?)?$/.test(t)?e.type=p:/^\d{4}-\d{2}$/.test(t)?e.type=h:/^\d+$/.test(t)?e.type=d:/^-?P(?:(?:\d+Y)?(?:\d+M)?(?:\d+D)?)?(?:T(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$/.test(t)&&(e.type=f),e}(n.getAttributeValue(t,"datetime"))}const e=n.getText(t);return D(e||m?e:"")},getItemId:function(t){let e=n.getAttributeValue(t,"itemid");return e?(e=e.trim(),s(e)?e:o(e,r)):null},getItemType:function(t){const e=n.getAttributeValue(t,"itemtype");return(e?i(e):[]).filter(s)},getPropertyNames:x,isItem:y,isProperty:v}}},function(t,e){e.splitUnique=function(t){return(t=t&&t.trim())?Array.from(new Set(t.split(/\s+/))):[]}},function(t,e,r){const{URL:n}=r(38);e.tryResolve=function(t,e){if("string"!=typeof t)return"";try{return String(new n(t))}catch(r){if(!e)return"";try{return String(new n(t,e))}catch(t){return""}}}},function(t,e){t.exports=__webpack_require__(198)},function(t,e,r){const{RDF__TYPE:n,RDF__NIL:i,RDF__FIRST:s,RDF__REST:o,RDF__LIST:a,XSD__DOUBLE:c,XSD__INTEGER:u,XSD__BOOLEAN:l,XSD__STRING:p}=r(2),{isNamedNode:h}=r(1);function d(t,e){const r=Object.keys(t),n=Object.keys(e);if(r.length!==n.length)return!1;if(!r.every(t=>n.includes(t)))return!1;return r.every((function(r){return t[r]===e[r]}))}function f(t,e){if(h(t))return{"@id":t.id};const r=t.value.toString(),n={};let i=r,s=null;if(e&&t.type===l)/^true|false$/i.test(r)?i=/^true$/i.test(r):s=t.type;else if(!e||t.type!==c&&t.type!==u)t.language?n["@language"]=t.language:t.type!==p&&(s=t.type);else{const e=Number(r);isNaN(e)?s=t.type:i=e}return n["@value"]=i,s&&(n["@type"]=s),n}function _(t){if(!t.usages||1!==t.usages.length)return!1;const e=t[s];if(!e||1!==e.length)return!1;const r=t[o];return!(!r||1!==r.length)&&(!t["@type"]||1===t["@type"].length&&t["@type"][0]===a)}t.exports=function(t,e){const r=e.useRdfType,a=e.useNativeTypes,c=function(t){return t.reduce((function(t,e){const r=e.graph||"";return t[r]=t[r]||[],t[r].push(e),t}),{})}(t),u={},l={"@default":u};for(let[t,e]of Object.entries(c)){""===t?t="@default":u[t]||(u[t]={"@id":t}),l[t]=l[t]||{};const i=l[t];for(const t of e){i[t.subject]||(i[t.subject]={"@id":t.subject});const e=i[t.subject],s=t.object;if(h(s)&&(i[s.id]||(i[s.id]={"@id":s.id})),t.predicate===n&&!r&&h(s)){e["@type"]||(e["@type"]=[s.id]);continue}const o=f(s,a);e[t.predicate]||(e[t.predicate]=[]);const c=e[t.predicate];c.some(t=>d(o,t))||c.push(o),h(s)&&(e.usages||(e.usages=[]),e.usages.push({node:e,property:t.predicate,value:o}))}}for(const t of Object.values(l)){const e=t[i];if(!e)continue;const{usages:r}=e;if(r)for(const e of r){let{node:r,property:n,value:a}=e;const c=[],u=[];for(;n===o&&_(r);){c.push(r[s][0]),u.push(r["@id"]);const t=r.usages[0];if(r=t.node,n=t.property,a=t.value,!/^_:/.test(r["@id"]))break}if(n===s){if(r["@id"]===i)continue;a=t[a["@id"]],a=a[o][0],c.pop(),u.pop()}delete a["@id"],c.reverse(),a["@list"]=c;for(const e of u)delete t[e]}}const p=[];return Object.keys(u).sort().forEach(t=>{const e=u[t];if(l[t]){const r=[];e["@graph"]=r;for(const e of Object.keys(l[t]).sort()){const t=l[e];delete t.usages,1===Object.keys(t).length&&t["@id"]||r.push(t)}}return delete e.usages,1===Object.keys(e).length&&e["@id"]?"continue":(p.push(e),"")}),p}},function(t,e,r){const{RDF__TYPE:n}=r(2),{isNamedNode:i}=r(1);function s(t){return 0===t.indexOf("_:")}t.exports=function(t,e){const r=t.reduce((t,e)=>{const r=e.subject;if(!t[r]){const e={properties:{}};s(r)||(e.id=r),t[r]=e}return t},{});let o=Object.keys(r);t.forEach((function(t){const a=e.base||"",c=r[t.subject];if(t.predicate===n)i(t.object)&&(c.type=c.type||[],c.type.push(t.object.id));else{const e=function(t,e,r){return e.map(t=>t.replace(/[^#/]*$/,"")).concat([r+"#"]).reduce((function(t,e){return 0===t.indexOf(e)?t.slice(e.length):t}),t)}(t.predicate,c.type||[],a),n=c.properties[e]||[],u=t.object;if(i(u))if(s(u.id)){const t=r[u.id];t&&(n.push(t),o=o.filter((function(t){return t!==u.id})))}else n.push(u.id);else n.push(u.value);n.length>0&&(c.properties[e]=n)}}));const a=o.map((function(t){return r[t]}));return function t(e,r=[]){for(const n of e){const e=r.concat([n]);for(const[r,i]of Object.entries(n.properties)){n.properties[r]=i.map(t=>e.indexOf(t)>=0?"ERROR":t);t(i.filter(t=>"object"==typeof t),e)}}}(a,[]),{items:a}}},function(t,e,r){const n=r(42),{isNamedNode:i,isLiteralNode:s}=r(1);function o(t){return/^_:/.test(t)?t:n.format("<%s>",t)}function a(t){return n.format("%s %s %s.",o(t.subject),o(t.predicate),function(t){if(i(t))return o(t.id);if(s(t)){const e=String(t.value).replace(/"/gm,'\\"').replace(/\n/gm,"\\n");return t.type&&"http://www.w3.org/2001/XMLSchema#string"!==t.type?n.format('"%s"^^<%s>',e,t.type):n.format('"%s"',e)}return'""'}(t.object))}t.exports=function(t){return t.map(a).sort().join("\n")}},function(t,e){t.exports=__webpack_require__(31)}])}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(199);
var util = __webpack_require__(201);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(202);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(200)(module), __webpack_require__(3)))

/***/ }),
/* 200 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(203);
exports.encode = exports.stringify = __webpack_require__(204);


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2020 Anastasiia Byvsheva & Dan Brickley
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SHACLValidator = __webpack_require__(206);
const namedNode = __webpack_require__(100).DataFactory.namedNode;

const utils = __webpack_require__(12);

/**
 * Adds shacl base prefix to value
 * @param {string} value
 * @return {string}
 */
function SHACL(value) {
    return 'http://www.w3.org/ns/shacl#' + value;
}

class ShaclValidator {
    /**
     * @param {string} shaclSchema - shacl shapes in string format
     * @param {{
     *     annotations: object|undefined,
     *     subclasses: string
     * }} options
     */
    constructor(shaclSchema, options) {
        if (options.subclasses) {
            this.subclasses = utils.parseTurtle(options.subclasses);
        }
        this.shapes = utils.parseTurtle(shaclSchema);
        this.annotations = options.annotations || {};
        this.validator = new SHACLValidator(this.shapes.getQuads());
    }

    /**
     * Transforms SHACL severity to string
     * @param {string} val
     * @returns {string}
     */
    getSeverity(val) {
        switch (val) {
            case SHACL('Info'):
                return 'info';
            case SHACL('Warning'):
                return 'warning';
            default:
                return 'error';
        }
    }

    /**
     * Gets schema: annotations for some predicate
     * @param {namedNode} property - property, which should have an annotation
     * @param {namedNode} annotation - annotation predicate
     * @returns {string|undefined}
     */
    getAnnotation(property, annotation) {
        let quads = this.shapes.getQuads(property, annotation, undefined);
        if (quads.length > 0) return quads[0].object.value;
    }

    /**
     * Transform standard shacl failure to structured data failure
     * @param {object} shaclFailure
     * @returns {StructuredDataFailure}
     */
    toStructuredDataFailure(shaclFailure) {
        // finds a source shape if property is failing
        let sourceShape = this.shapes.getQuads(undefined, SHACL('property'), shaclFailure.sourceShape)[0];
        // if the whole shape is failing then leave sourceShape
        if (!sourceShape) sourceShape = shaclFailure.sourceShape;
        else sourceShape = sourceShape.subject;
        let failure = {
            property: shaclFailure.path ? shaclFailure.path.value : undefined,
            message: shaclFailure.message.length > 0 ?
                shaclFailure.message.map(x => x.value).join(". ") : undefined,
            shape: sourceShape.id,
            severity: this.getSeverity(shaclFailure.severity.value),
        }
        for (const [key, value] of Object.entries(this.annotations)) {
            let annotation = this.getAnnotation(shaclFailure.sourceShape, namedNode(value));
            if (annotation) failure[key] = annotation;
        }
        return failure;
    }

    /**
     * @param {string} data
     * @param {{baseUrl: string|undefined}} options
     * @returns {Promise<{baseUrl: string, quads: Store, failures: [StructuredDataFailure]}>}
     */
    async validate(data, options={}) {
        let baseUrl = options.baseUrl || utils.randomUrl();
        let quads = await utils.inputToQuads(data, baseUrl);
        let report;
        if (this.subclasses) {
            let quadsWithSubclasses = quads.getQuads();
            quadsWithSubclasses.push(...this.subclasses.getQuads());
            report = this.validator.validate(quadsWithSubclasses).results
                .map(x => this.toStructuredDataFailure(x));
        } else {
            report = this.validator.validate(quads.getQuads()).results
                .map(x => this.toStructuredDataFailure(x));
        }
        return {
            baseUrl: baseUrl,
            quads: quads,
            failures: report,
        };
    }
}

/**
 * @typedef {{
 *     property: string,
 *     message: string,
 *     severity: 'error'|'warning'|'info',
 *     shape: string
 * }} StructuredDataFailure
 */

module.exports = {
    Validator: ShaclValidator,
}

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

const DataFactory = __webpack_require__(91)
const ShapesGraph = __webpack_require__(209)
const ValidationEngine = __webpack_require__(221)
const RDFLibGraph = __webpack_require__(233)
const shaclVocabularyFactory = __webpack_require__(234)

/**
 * Validates RDF data based on a set of RDF shapes.
 *
 * @param {DatasetCore} shapes - Dataset containing the SHACL shapes for validation
 * @param {object} options - Validator options
 * @param {DataFactory} options.factory - Optional RDFJS data factory
 * @param {Number} options.maxErrors - Max number of errors before the engine
 *   stops. Defaults to finding all the errors.
 */
class SHACLValidator {
  constructor (shapes, options) {
    options = options || {}

    this.factory = new DataFactory(options.factory || __webpack_require__(47))
    this.loadShapes(shapes)
    this.validationEngine = new ValidationEngine(this, options)

    this.depth = 0
  }

  /**
   * Validates the provided data graph against the provided shapes graph
   *
   * @param {DatasetCore} data - Dataset containing the data to validate
   * @return {ValidationReport} - Result of the validation
   */
  validate (data) {
    this.$data = new RDFLibGraph(data, this.factory)
    this.validationEngine.validateAll(this.$data)
    return this.validationEngine.getReport()
  }

  /**
   * Load SHACL shapes constraints from dataset.
   *
   * @param {DatasetCore} shapes - Dataset containing the shapes for validation
   */
  loadShapes (shapes) {
    const shaclQuads = shaclVocabularyFactory(this.factory)
    const dataset = this.factory.dataset(shaclQuads.concat([...shapes]))
    this.$shapes = new RDFLibGraph(dataset, this.factory)

    this.shapesGraph = new ShapesGraph(this)
  }

  // Exposed to be available from validation functions as `SHACL.nodeConformsToShape`
  nodeConformsToShape (focusNode, shapeNode) {
    const shape = this.shapesGraph.getShape(shapeNode)
    try {
      this.depth++
      const foundViolations = this.validationEngine.validateNodeAgainstShape(focusNode, shape, this.$data)
      return !foundViolations
    } finally {
      this.depth--
    }
  }
}

module.exports = SHACLValidator


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

const isMatch = __webpack_require__(208)

class DatasetCore {
  constructor (quads) {
    this.quads = new Set()

    if (quads) {
      for (const quad of quads) {
        this.quads.add(quad)
      }
    }
  }

  get size () {
    return this.quads.size
  }

  add (quad) {
    if (!this.has(quad)) {
      this.quads.add(quad)
    }

    return this
  }

  delete (quad) {
    for (const localQuad of this) {
      if (isMatch(quad, localQuad.subject, localQuad.predicate, localQuad.object, localQuad.graph)) {
        this.quads.delete(localQuad)

        return this
      }
    }

    return this
  }

  has (quad) {
    for (const other of this) {
      if (isMatch(other, quad.subject, quad.predicate, quad.object, quad.graph)) {
        return true
      }
    }

    return false
  }

  match (subject, predicate, object, graph) {
    const matches = new Set()

    for (const quad of this) {
      if (isMatch(quad, subject, predicate, object, graph)) {
        matches.add(quad)
      }
    }

    return new this.constructor(matches)
  }

  [Symbol.iterator] () {
    return this.quads[Symbol.iterator]()
  }
}

module.exports = DatasetCore


/***/ }),
/* 208 */
/***/ (function(module, exports) {

function isMatch (quad, subject, predicate, object, graph) {
  if (subject && !quad.subject.equals(subject)) {
    return false
  }

  if (predicate && !quad.predicate.equals(predicate)) {
    return false
  }

  if (object && !quad.object.equals(object)) {
    return false
  }

  if (graph && !quad.graph.equals(graph)) {
    return false
  }

  return true
}

module.exports = isMatch


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

// Design:
//
// First, derive a ShapesGraph object from the definitions in $shapes.
// This manages a map of parameters to ConstraintComponents.
// Each ConstraintComponent manages its list of parameters and a link to the validators.
//
// The ShapesGraph also manages a list of Shapes, each which has a list of Constraints.
// A Constraint is a specific combination of parameters for a constraint component,
// and has functions to access the target nodes.
//
// Each ShapesGraph can be reused between validation calls, and thus often only needs
// to be created once per application.
//
// The validation process is started by creating a ValidationEngine that relies on
// a given ShapesGraph and operates on the current $data().
// It basically walks through all Shapes that have target nodes and runs the validators
// for each Constraint of the shape, producing results along the way.

const NodeSet = __webpack_require__(29)
const ValidationFunction = __webpack_require__(216)
const validatorsRegistry = __webpack_require__(217)
const { extractPropertyPath, getPathObjects } = __webpack_require__(97)
const { rdfs, sh } = __webpack_require__(17)

class ShapesGraph {
  constructor (context) {
    this.context = context

    // Collect all defined constraint components
    const componentNodes = context.$shapes.getInstancesOf(sh.ConstraintComponent)
    this.components = [...componentNodes].map((node) => new ConstraintComponent(node, context))

    // Build map from parameters to constraint components
    this.parametersMap = {}
    for (const component of this.components) {
      for (const parameter of component.parameters) {
        this.parametersMap[parameter.value] = component
      }
    }

    // Collection of shapes is populated on demand - here we remember the instances
    this.shapes = {} // Keys are the URIs/bnode ids of the shape nodes
  }

  getComponentWithParameter (parameter) {
    return this.parametersMap[parameter.value]
  }

  getShape (shapeNode) {
    let shape = this.shapes[shapeNode.value]
    if (!shape) {
      shape = new Shape(this.context, shapeNode)
      this.shapes[shapeNode.value] = shape
    }
    return shape
  }

  getShapeNodesWithConstraints () {
    if (!this.shapeNodesWithConstraints) {
      const set = new NodeSet()
      for (const component of this.components) {
        const params = component.requiredParameters
        for (const param of params) {
          const shapesWithParam = [...this.context.$shapes
            .match(null, param, null)]
            .map(({ subject }) => subject)
          set.addAll(shapesWithParam)
        }
      }
      this.shapeNodesWithConstraints = [...set]
    }
    return this.shapeNodesWithConstraints
  }

  getShapesWithTarget () {
    const $shapes = this.context.$shapes

    if (!this.targetShapes) {
      this.targetShapes = []
      const shapeNodes = this.getShapeNodesWithConstraints()
      for (const shapeNode of shapeNodes) {
        if (
          $shapes.isInstanceOf(shapeNode, rdfs.Class) ||
          $shapes.cf.node(shapeNode).out([
            sh.targetClass,
            sh.targetNode,
            sh.targetSubjectsOf,
            sh.targetObjectsOf,
            sh.target
          ]).terms.length > 0
        ) {
          this.targetShapes.push(this.getShape(shapeNode))
        }
      }
    }

    return this.targetShapes
  }
}

class Constraint {
  constructor (shape, component, paramValue, rdfShapesGraph) {
    this.shape = shape
    this.component = component
    this.paramValue = paramValue
    this.shapeNodeCf = rdfShapesGraph.cf.node(shape.shapeNode)
  }

  getParameterValue (param) {
    return this.paramValue || this.shapeNodeCf.out(param).term
  }

  get componentMessages () {
    return this.component.getMessages(this.shape)
  }
}

class ConstraintComponent {
  constructor (node, context) {
    this.context = context
    this.factory = context.factory
    this.node = node

    this.parameters = []
    this.parameterNodes = []
    this.requiredParameters = []
    this.optionals = {}
    this.context.$shapes.cf
      .node(node)
      .out(sh.parameter)
      .forEach(parameterCf => {
        const parameter = parameterCf.term

        parameterCf.out(sh.path).forEach(({ term: path }) => {
          this.parameters.push(path)
          this.parameterNodes.push(parameter)
          if (this.context.$shapes.match(parameter, sh.optional, this.factory.true).size > 0) {
            this.optionals[path.value] = true
          } else {
            this.requiredParameters.push(path)
          }
        })
      })

    this.nodeValidationFunction = this.findValidationFunction(sh.nodeValidator)
    if (!this.nodeValidationFunction) {
      this.nodeValidationFunction = this.findValidationFunction(sh.validator)
      this.nodeValidationFunctionGeneric = true
    }
    this.propertyValidationFunction = this.findValidationFunction(sh.propertyValidator)
    if (!this.propertyValidationFunction) {
      this.propertyValidationFunction = this.findValidationFunction(sh.validator)
      this.propertyValidationFunctionGeneric = true
    }
  }

  findValidationFunction (predicate) {
    const validatorType = predicate.value.split('#').slice(-1)[0]
    const validator = this.findValidator(validatorType)

    if (!validator) return null

    return new ValidationFunction(this.context, validator.func.name, validator.func)
  }

  getMessages (shape) {
    const generic = shape.isPropertyShape() ? this.propertyValidationFunctionGeneric : this.nodeValidationFunctionGeneric
    const validatorType = generic ? 'validator' : (shape.isPropertyShape() ? 'propertyValidator' : 'nodeValidator')
    const validator = this.findValidator(validatorType)

    if (!validator) return []

    const message = validator.message

    return message ? [message] : []
  }

  findValidator (validatorType) {
    const constraintValidators = validatorsRegistry[this.node.value]

    if (!constraintValidators) return null

    const validator = constraintValidators[validatorType]

    return validator || null
  }

  isComplete (shapeNode) {
    return !this.parameters.some((parameter) => (
      this.isRequired(parameter.value) &&
      this.context.$shapes.match(shapeNode, parameter, null).size === 0
    ))
  }

  isRequired (parameterURI) {
    return !this.optionals[parameterURI]
  }
}

class Shape {
  constructor (context, shapeNode) {
    this.context = context
    this.severity = context.$shapes.cf.node(shapeNode).out(sh.severity).term

    if (!this.severity) {
      this.severity = context.factory.ns.sh.Violation
    }

    this.deactivated = context.$shapes.cf.node(shapeNode).out(sh.deactivated).value === 'true'
    this.path = context.$shapes.cf.node(shapeNode).out(sh.path).term
    this._pathObject = undefined
    this.shapeNode = shapeNode
    this.constraints = []

    const handled = new NodeSet()
    const shapeProperties = [...context.$shapes.match(shapeNode, null, null)]
    shapeProperties.forEach((sol) => {
      const component = this.context.shapesGraph.getComponentWithParameter(sol.predicate)
      if (component && !handled.has(component.node)) {
        const params = component.parameters
        if (params.length === 1) {
          this.constraints.push(new Constraint(this, component, sol.object, context.$shapes))
        } else if (component.isComplete(shapeNode)) {
          this.constraints.push(new Constraint(this, component, undefined, context.$shapes))
          handled.add(component.node)
        }
      }
    })
  }

  /**
   * Property path object
   */
  get pathObject () {
    if (this._pathObject === undefined) {
      this._pathObject = this.path ? extractPropertyPath(this.context.$shapes, this.path) : null
    }

    return this._pathObject
  }

  getTargetNodes (rdfDataGraph) {
    const results = new NodeSet()

    if (this.context.$shapes.isInstanceOf(this.shapeNode, rdfs.Class)) {
      results.addAll(rdfDataGraph.getInstancesOf(this.shapeNode))
    }

    const targetClasses = [...this.context.$shapes.match(this.shapeNode, sh.targetClass, null)]
    targetClasses.forEach(({ object: targetClass }) => {
      results.addAll(rdfDataGraph.getInstancesOf(targetClass))
    })

    results.addAll(this.context.$shapes.cf.node(this.shapeNode).out(sh.targetNode).terms)

    this.context.$shapes.cf
      .node(this.shapeNode)
      .out(sh.targetSubjectsOf)
      .terms
      .forEach((predicate) => {
        const subjects = [...rdfDataGraph.match(null, predicate, null)].map(({ subject }) => subject)
        results.addAll(subjects)
      })

    this.context.$shapes.cf
      .node(this.shapeNode)
      .out(sh.targetObjectsOf)
      .terms
      .forEach((predicate) => {
        const objects = [...rdfDataGraph.match(null, predicate, null)].map(({ object }) => object)
        results.addAll(objects)
      })

    return [...results]
  }

  getValueNodes (focusNode, dataGraph) {
    if (this.path) {
      return getPathObjects(dataGraph, focusNode, this.pathObject)
    } else {
      return [focusNode]
    }
  }

  isPropertyShape () {
    return this.path != null
  }
}

module.exports = ShapesGraph


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

const { termToNTriples } = __webpack_require__(92)

class TermSet {
  constructor (terms) {
    this.index = new Map()

    if (terms) {
      for (const term of terms) {
        this.add(term)
      }
    }
  }

  get size () {
    return this.index.size
  }

  add (term) {
    const key = termToNTriples(term)

    if (this.index.has(key)) {
      return this
    }

    this.index.set(key, term)

    return this
  }

  clear () {
    this.index.clear()
  }

  delete (term) {
    return this.index.delete(termToNTriples(term))
  }

  entries () {
    return this.values().entries()
  }

  forEach (callbackfn, thisArg) {
    return this.values().forEach(callbackfn, thisArg)
  }

  has (term) {
    return this.index.has(termToNTriples(term))
  }

  values () {
    return new Set(this.index.values())
  }

  keys () {
    return this.values()
  }

  [Symbol.iterator] () {
    return this.values()[Symbol.iterator]()
  }
}

module.exports = TermSet


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

const term = __webpack_require__(93)

function quad (quad) {
  const subjectString = term(quad.subject)
  const predicateString = term(quad.predicate)
  const objectString = term(quad.object)
  const graphString = term(quad.graph)

  return `${subjectString} ${predicateString} ${objectString} ${graphString ? graphString + ' ' : ''}.`
}

module.exports = quad


/***/ }),
/* 212 */
/***/ (function(module, exports) {

function blankNode (blankNode) {
  return '_:' + blankNode.value // TODO: escape special chars
}

module.exports = blankNode


/***/ }),
/* 213 */
/***/ (function(module, exports) {

function defaultGraph (defaultGraph) {
  return ''
}

module.exports = defaultGraph


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

const namedNode = __webpack_require__(94)

const echarRegEx = new RegExp('["\\\\\n\r]') // eslint-disable-line no-control-regex
const echarRegExAll = new RegExp('["\\\\\n\r]', 'g') // eslint-disable-line no-control-regex

const echarReplacement = {
  '"': '\\"',
  '\\': '\\\\',
  '\n': '\\n',
  '\r': '\\r'
}

function echarReplacer (char) {
  return echarReplacement[char]
}

function escapeValue (value) {
  if (echarRegEx.test(value)) {
    return value.replace(echarRegExAll, echarReplacer)
  }

  return value
}

function literal (literal) {
  const escapedValue = escapeValue(literal.value)

  if (literal.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {
    return '"' + escapedValue + '"'
  }

  if (literal.datatype.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString') {
    return '"' + escapedValue + '"@' + literal.language
  }

  return '"' + escapedValue + '"^^' + namedNode(literal.datatype)
}

module.exports = literal


/***/ }),
/* 215 */
/***/ (function(module, exports) {

function variable (variable) {
  return '?' + variable.value // TODO: escape special chars
}

module.exports = variable


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const globalObject = typeof window !== 'undefined' ? window : global

class ValidationFunction {
  constructor (context, functionName, func) {
    this.context = context
    this.funcName = functionName
    this.func = func
  }

  execute (focusNode, valueNode, constraint) {
    return this.func.apply(globalObject, [this.context, focusNode, valueNode, constraint])
  }
}

module.exports = ValidationFunction

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {


const validators = __webpack_require__(218)
const { sh } = __webpack_require__(17)

// Constraint to validator registry
module.exports = {
  [sh.AndConstraintComponent.value]: {
    validator: {
      func: validators.validateAnd
    }
  },
  [sh.ClassConstraintComponent.value]: {
    validator: {
      func: validators.validateClass
    }
  },
  [sh.ClosedConstraintComponent.value]: {
    validator: {
      func: validators.validateClosed,
      message: 'Predicate is not allowed (closed shape)'
    }
  },
  [sh.DatatypeConstraintComponent.value]: {
    validator: {
      func: validators.validateDatatype,
      message: 'Value does not have datatype {$datatype}'
    }
  },
  [sh.DisjointConstraintComponent.value]: {
    validator: {
      func: validators.validateDisjoint,
      message: 'Value node must not also be one of the values of {$disjoint}'
    }
  },
  [sh.EqualsConstraintComponent.value]: {
    nodeValidator: {
      func: validators.validateEqualsNode,
      message: 'Must have same values as {$equals}'
    },
    propertyValidator: {
      func: validators.validateEqualsProperty,
      message: 'Must have same values as {$equals}'
    }
  },
  [sh.HasValueConstraintComponent.value]: {
    nodeValidator: {
      func: validators.validateHasValueNode,
      message: 'Value must be {$hasValue}'
    },
    propertyValidator: {
      func: validators.validateHasValueProperty,
      message: 'Missing expected value {$hasValue}'
    }
  },
  [sh.InConstraintComponent.value]: {
    validator: {
      func: validators.validateIn,
      message: 'Value is not in {$in}'
    }
  },
  [sh.LanguageInConstraintComponent.value]: {
    validator: {
      func: validators.validateLanguageIn,
      message: 'Language does not match any of {$languageIn}'
    }
  },
  [sh.LessThanConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateLessThanProperty,
      message: 'Value is not < value of {$lessThan}'
    }
  },
  [sh.LessThanOrEqualsConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateLessThanOrEqualsProperty,
      message: 'Value is not <= value of {$lessThanOrEquals}'
    }
  },
  [sh.MaxCountConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateMaxCountProperty,
      message: 'More than {$maxCount} values'
    }
  },
  [sh.MaxExclusiveConstraintComponent.value]: {
    validator: {
      func: validators.validateMaxExclusive,
      message: 'Value is not < {$maxExclusive}'
    }
  },
  [sh.MaxInclusiveConstraintComponent.value]: {
    validator: {
      func: validators.validateMaxInclusive,
      message: 'Value is not <= {$maxInclusive}'
    }
  },
  [sh.MaxLengthConstraintComponent.value]: {
    validator: {
      func: validators.validateMaxLength,
      message: 'Value has more than {$maxLength} characters'
    }
  },
  [sh.MinCountConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateMinCountProperty,
      message: 'Less than {$minCount} values'
    }
  },
  [sh.MinExclusiveConstraintComponent.value]: {
    validator: {
      func: validators.validateMinExclusive,
      message: 'Value is not > {$minExclusive}'
    }
  },
  [sh.MinInclusiveConstraintComponent.value]: {
    validator: {
      func: validators.validateMinInclusive,
      message: 'Value is not >= {$minInclusive}'
    }
  },
  [sh.MinLengthConstraintComponent.value]: {
    validator: {
      func: validators.validateMinLength,
      message: 'Value has less than {$minLength} characters'
    }
  },
  [sh.NodeConstraintComponent.value]: {
    validator: {
      func: validators.validateNode,
      message: 'Value does not have shape {$node}'
    }
  },
  [sh.NodeKindConstraintComponent.value]: {
    validator: {
      func: validators.validateNodeKind,
      message: 'Value does not have node kind {$nodeKind}'
    }
  },
  [sh.NotConstraintComponent.value]: {
    validator: {
      func: validators.validateNot,
      message: 'Value does have shape {$not}'
    }
  },
  [sh.OrConstraintComponent.value]: {
    validator: {
      func: validators.validateOr
    }
  },
  [sh.PatternConstraintComponent.value]: {
    validator: {
      func: validators.validatePattern,
      message: 'Value does not match pattern "{$pattern}"'
    }
  },
  [sh.QualifiedMaxCountConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateQualifiedMaxCountProperty,
      message: 'More than {$qualifiedMaxCount} values have shape {$qualifiedValueShape}'
    }
  },
  [sh.QualifiedMinCountConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateQualifiedMinCountProperty,
      message: 'Less than {$qualifiedMinCount} values have shape {$qualifiedValueShape}'
    }
  },
  [sh.UniqueLangConstraintComponent.value]: {
    propertyValidator: {
      func: validators.validateUniqueLangProperty,
      message: 'Language "{?lang}" used more than once'
    }
  },
  [sh.XoneConstraintComponent.value]: {
    validator: {
      func: validators.validateXone
    }
  }
}


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

const { validateTerm } = __webpack_require__(219)
const NodeSet = __webpack_require__(29)
const { rdf, sh } = __webpack_require__(17)
const { getPathObjects } = __webpack_require__(97)

function validateAnd (context, focusNode, valueNode, constraint) {
  const andNode = constraint.getParameterValue(sh.and)
  const shapes = context.$shapes.rdfListToArray(andNode)
  return shapes.every((shape) => context.nodeConformsToShape(valueNode, shape))
}

function validateClass (context, focusNode, valueNode, constraint) {
  const classNode = constraint.getParameterValue(sh.class)
  return context.$data.isInstanceOf(valueNode, classNode)
}

function validateClosed (context, focusNode, valueNode, constraint) {
  const closedNode = constraint.getParameterValue(sh.closed)
  const ignoredPropertiesNode = constraint.getParameterValue(sh.ignoredProperties)
  const currentShape = constraint.shape.shapeNode

  if (!context.factory.true.equals(closedNode)) {
    return
  }

  const allowed = new NodeSet(
    context.$shapes.cf
      .node(currentShape)
      .out(sh.property)
      .out(sh.path)
      .terms
      .filter((term) => term.termType === 'NamedNode')
  )

  if (ignoredPropertiesNode) {
    allowed.addAll(context.$shapes.rdfListToArray(ignoredPropertiesNode))
  }

  const results = []
  const valueQuads = [...context.$data.match(valueNode, null, null)]
  valueQuads
    .filter(({ predicate }) => !allowed.has(predicate))
    .forEach(({ predicate, object }) => {
      results.push({ path: predicate, value: object })
    })
  return results
}

function validateDatatype (context, focusNode, valueNode, constraint) {
  const datatypeNode = constraint.getParameterValue(sh.datatype)

  if (valueNode.termType === 'Literal') {
    return datatypeNode.equals(valueNode.datatype) && validateTerm(valueNode)
  } else {
    return false
  }
}

function validateDisjoint (context, focusNode, valueNode, constraint) {
  const disjointNode = constraint.getParameterValue(sh.disjoint)
  return context.$data.match(focusNode, disjointNode, valueNode).size === 0
}

function validateEqualsProperty (context, focusNode, valueNode, constraint) {
  const path = constraint.shape.pathObject
  const equalsNode = constraint.getParameterValue(sh.equals)

  const results = []
  getPathObjects(context.$data, focusNode, path).forEach(value => {
    if (context.$data.match(focusNode, equalsNode, value).size === 0) {
      results.push({ value })
    }
  })

  const equalsQuads = [...context.$data.match(focusNode, equalsNode, null)]
  equalsQuads.forEach(({ object }) => {
    const value = object
    if (!getPathObjects(context.$data, focusNode, path).some(pathValue => pathValue.equals(value))) {
      results.push({ value })
    }
  })

  return results
}

function validateEqualsNode (context, focusNode, valueNode, constraint) {
  const equalsNode = constraint.getParameterValue(sh.equals)
  const results = []

  let solutions = 0
  getPathObjects(context.$data, focusNode, equalsNode).forEach(value => {
    solutions++
    if (compareNodes(focusNode, value) !== 0) {
      results.push({ value })
    }
  })

  if (results.length === 0 && solutions === 0) {
    results.push({ value: focusNode })
  }

  return results
}

function validateHasValueNode (context, focusNode, valueNode, constraint) {
  const hasValueNode = constraint.getParameterValue(sh.hasValue)
  return focusNode.equals(hasValueNode)
}

function validateHasValueProperty (context, focusNode, valueNode, constraint) {
  const path = constraint.shape.pathObject
  const hasValueNode = constraint.getParameterValue(sh.hasValue)

  return getPathObjects(context.$data, focusNode, path)
    .some(value => value.equals(hasValueNode))
}

function validateIn (context, focusNode, valueNode, constraint) {
  const inNode = constraint.getParameterValue(sh.in)
  return new NodeSet(context.$shapes.rdfListToArray(inNode)).has(valueNode)
}

function validateLanguageIn (context, focusNode, valueNode, constraint) {
  if (valueNode.termType !== 'Literal') {
    return false
  }

  const valueLanguage = valueNode.language
  if (!valueLanguage || valueLanguage === '') {
    return false
  }

  const languageInNode = constraint.getParameterValue(sh.languageIn)
  const allowedLanguages = context.$shapes.rdfListToArray(languageInNode)

  return allowedLanguages.some(allowedLanguage => valueLanguage.startsWith(allowedLanguage.value))
}

function validateLessThanProperty (context, focusNode, valueNode, constraint) {
  const valuePath = constraint.shape.pathObject
  const values = getPathObjects(context.$data, focusNode, valuePath)
  const lessThanNode = constraint.getParameterValue(sh.lessThan)
  const referenceValues = context.$data.cf.node(focusNode).out(lessThanNode).terms

  const invalidValues = []
  for (const value of values) {
    for (const referenceValue of referenceValues) {
      const c = compareNodes(value, referenceValue)
      if (c === null || c >= 0) {
        invalidValues.push({ value })
      }
    }
  }
  return invalidValues
}

function validateLessThanOrEqualsProperty (context, focusNode, valueNode, constraint) {
  const valuePath = constraint.shape.pathObject
  const values = getPathObjects(context.$data, focusNode, valuePath)
  const lessThanOrEqualsNode = constraint.getParameterValue(sh.lessThanOrEquals)
  const referenceValues = context.$data.cf.node(focusNode).out(lessThanOrEqualsNode).terms

  const invalidValues = []
  for (const value of values) {
    for (const referenceValue of referenceValues) {
      const c = compareNodes(value, referenceValue)
      if (c === null || c > 0) {
        invalidValues.push({ value })
      }
    }
  }
  return invalidValues
}

function validateMaxCountProperty (context, focusNode, valueNode, constraint) {
  const path = constraint.shape.pathObject
  const count = getPathObjects(context.$data, focusNode, path).length
  const maxCountNode = constraint.getParameterValue(sh.maxCount)

  return count <= Number(maxCountNode.value)
}

function validateMaxExclusive (context, focusNode, valueNode, constraint) {
  const maxExclusiveNode = constraint.getParameterValue(sh.maxExclusive)
  return valueNode.termType === 'Literal' && Number(valueNode.value) < Number(maxExclusiveNode.value)
}

function validateMaxInclusive (context, focusNode, valueNode, constraint) {
  const maxInclusiveNode = constraint.getParameterValue(sh.maxInclusive)
  return valueNode.termType === 'Literal' && Number(valueNode.value) <= Number(maxInclusiveNode.value)
}

function validateMaxLength (context, focusNode, valueNode, constraint) {
  if (valueNode.termType === 'BlankNode') {
    return false
  }

  const maxLengthNode = constraint.getParameterValue(sh.maxLength)
  return valueNode.value.length <= Number(maxLengthNode.value)
}

function validateMinCountProperty (context, focusNode, valueNode, constraint) {
  const path = constraint.shape.pathObject
  const count = getPathObjects(context.$data, focusNode, path).length
  const minCountNode = constraint.getParameterValue(sh.minCount)

  return count >= Number(minCountNode.value)
}

function validateMinExclusive (context, focusNode, valueNode, constraint) {
  const minExclusiveNode = constraint.getParameterValue(sh.minExclusive)
  return valueNode.termType === 'Literal' && Number(valueNode.value) > Number(minExclusiveNode.value)
}

function validateMinInclusive (context, focusNode, valueNode, constraint) {
  const minInclusiveNode = constraint.getParameterValue(sh.minInclusive)
  return valueNode.termType === 'Literal' && Number(valueNode.value) >= Number(minInclusiveNode.value)
}

function validateMinLength (context, focusNode, valueNode, constraint) {
  if (valueNode.termType === 'BlankNode') {
    return false
  }

  const minLengthNode = constraint.getParameterValue(sh.minLength)
  return valueNode.value.length >= Number(minLengthNode.value)
}

function validateNodeKind (context, focusNode, valueNode, constraint) {
  const nodeKindNode = constraint.getParameterValue(sh.nodeKind)

  if (valueNode.termType === 'BlankNode') {
    return sh.BlankNode.equals(nodeKindNode) ||
      sh.BlankNodeOrIRI.equals(nodeKindNode) ||
      sh.BlankNodeOrLiteral.equals(nodeKindNode)
  } else if (valueNode.termType === 'NamedNode') {
    return sh.IRI.equals(nodeKindNode) ||
      sh.BlankNodeOrIRI.equals(nodeKindNode) ||
      sh.IRIOrLiteral.equals(nodeKindNode)
  } else if (valueNode.termType === 'Literal') {
    return sh.Literal.equals(nodeKindNode) ||
      sh.BlankNodeOrLiteral.equals(nodeKindNode) ||
      sh.IRIOrLiteral.equals(nodeKindNode)
  }
}

function validateNode (context, focusNode, valueNode, constraint) {
  const nodeNode = constraint.getParameterValue(sh.node)
  return context.nodeConformsToShape(valueNode, nodeNode)
}

function validateNot (context, focusNode, valueNode, constraint) {
  const notNode = constraint.getParameterValue(sh.not)
  return !context.nodeConformsToShape(valueNode, notNode)
}

function validateOr (context, focusNode, valueNode, constraint) {
  const orNode = constraint.getParameterValue(sh.or)
  const shapes = context.$shapes.rdfListToArray(orNode)
  return shapes.some(shape => context.nodeConformsToShape(valueNode, shape))
}

function validatePattern (context, focusNode, valueNode, constraint) {
  if (valueNode.termType === 'BlankNode') {
    return false
  }

  const flagsNode = constraint.getParameterValue(sh.flags)
  const patternNode = constraint.getParameterValue(sh.pattern)
  const re = flagsNode ? new RegExp(patternNode.value, flagsNode.value) : new RegExp(patternNode.value)
  return re.test(valueNode.value)
}

function validateQualifiedMaxCountProperty (context, focusNode, valueNode, constraint) {
  const count = validateQualifiedHelper(context, focusNode, constraint)
  const qualifiedMaxCountNode = constraint.getParameterValue(sh.qualifiedMaxCount)

  return qualifiedMaxCountNode.termType === 'Literal' && count <= Number(qualifiedMaxCountNode.value)
}

function validateQualifiedMinCountProperty (context, focusNode, valueNode, constraint) {
  const count = validateQualifiedHelper(context, focusNode, constraint)
  const qualifiedMinCountNode = constraint.getParameterValue(sh.qualifiedMinCount)

  return qualifiedMinCountNode.termType === 'Literal' && count >= Number(qualifiedMinCountNode.value)
}

function validateQualifiedHelper (context, focusNode, constraint) {
  const currentShapeNode = constraint.shape.shapeNode
  const qualifiedValueShapesDisjointNode = constraint.getParameterValue(sh.qualifiedValueShapesDisjoint)
  const qualifiedValueShapeNode = constraint.getParameterValue(sh.qualifiedValueShape)

  const siblingShapes = new NodeSet()

  if (context.factory.true.equals(qualifiedValueShapesDisjointNode)) {
    const qualifiedSiblingShapes = context.$shapes.cf
      .node(currentShapeNode)
      // Move up to parent
      .in(sh.property)
      // Move down to all siblings
      .out(sh.property)
      // Select sh:qualifiedValueShape of all siblings
      .out(sh.qualifiedValueShape)
      .filter(({ term }) => !term.equals(qualifiedValueShapeNode))
      .terms

    siblingShapes.addAll(qualifiedSiblingShapes)
  }

  const path = constraint.shape.pathObject
  return getPathObjects(context.$data, focusNode, path)
    .filter(value =>
      context.nodeConformsToShape(value, qualifiedValueShapeNode) &&
      !validateQualifiedConformsToASibling(context, value, [...siblingShapes])
    )
    .length
}

function validateQualifiedConformsToASibling (context, value, siblingShapes) {
  for (let i = 0; i < siblingShapes.length; i++) {
    if (context.nodeConformsToShape(value, siblingShapes[i])) {
      return true
    }
  }
  return false
}

function validateUniqueLangProperty (context, focusNode, valueNode, constraint) {
  const uniqueLangNode = constraint.getParameterValue(sh.uniqueLang)

  if (!context.factory.true.equals(uniqueLangNode)) {
    return
  }

  const path = constraint.shape.pathObject
  const map = {}
  getPathObjects(context.$data, focusNode, path).forEach(value => {
    const lang = value.language
    if (lang && lang !== '') {
      const old = map[lang]
      if (!old) {
        map[lang] = 1
      } else {
        map[lang] = old + 1
      }
    }
  })

  const results = []
  for (const lang in map) {
    if (Object.prototype.hasOwnProperty.call(map, lang)) {
      const count = map[lang]
      if (count > 1) {
        results.push('Language "' + lang + '" has been used by ' + count + ' values')
      }
    }
  }
  return results
}

function validateXone (context, focusNode, valueNode, constraint) {
  const xoneNode = constraint.getParameterValue(sh.xone)
  const shapes = context.$shapes.rdfListToArray(xoneNode)
  const conformsCount = shapes
    .map(shape => context.nodeConformsToShape(valueNode, shape))
    .filter(Boolean)
    .length

  return conformsCount === 1
}

// Private helper functions

function compareNodes (node1, node2) {
  // TODO: Does not handle the case where nodes cannot be compared
  if (node1 && node1.termType === 'Literal' && node2 && node2.termType === 'Literal') {
    if ((node1.datatype != null) !== (node2.datatype != null)) {
      return null
    } else if (node1.datatype && node2.datatype && node1.datatype.value !== node2.datatype.value) {
      return null
    }
  }
  return compareTerms(node1, node2)
}

function compareTerms (t1, t2) {
  if (!t1) {
    return !t2 ? 0 : 1
  } else if (!t2) {
    return -1
  }

  const bt = t1.termType.localeCompare(t2.termType)
  if (bt !== 0) {
    return bt
  } else {
    // TODO: Does not handle numeric or date comparison
    const bv = t1.value.localeCompare(t2.value)
    if (bv !== 0) {
      return bv
    } else {
      if (t1.termType === 'Literal') {
        const bd = t1.datatype.value.localeCompare(t2.datatype.value)
        if (bd !== 0) {
          return bd
        } else if (rdf.langString.equals(t1.datatype)) {
          return t1.language.localeCompare(t2.language)
        } else {
          return 0
        }
      } else {
        return 0
      }
    }
  }
}

module.exports = {
  validateAnd,
  validateClass,
  validateClosed,
  validateDatatype,
  validateDisjoint,
  validateEqualsNode,
  validateEqualsProperty,
  validateHasValueNode,
  validateHasValueProperty,
  validateIn,
  validateLanguageIn,
  validateLessThanProperty,
  validateLessThanOrEqualsProperty,
  validateMaxCountProperty,
  validateMaxExclusive,
  validateMaxInclusive,
  validateMaxLength,
  validateMinCountProperty,
  validateMinExclusive,
  validateMinInclusive,
  validateMinLength,
  validateNode,
  validateNodeKind,
  validateNot,
  validateOr,
  validatePattern,
  validateQualifiedMaxCountProperty,
  validateQualifiedMinCountProperty,
  validateUniqueLangProperty,
  validateXone
}


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

const validators = __webpack_require__(95)
const validateTerm = __webpack_require__(96)
const validateQuad = __webpack_require__(220)

module.exports = {
  validators,
  validateTerm,
  validateQuad
}


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

const validateTerm = __webpack_require__(96)

/**
 * Validate that a quad's object value is valid in regards to its declared
 * datatype.
 *
 * @param {Quad} quad - The quad to validate
 * @returns {boolean} - `true` if valid, `false` otherwise
 */
function validateQuad (quad) {
  return quad.object.termType !== 'Literal' || validateTerm(quad.object)
}

module.exports = validateQuad


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

const ValidationReport = __webpack_require__(222)
const { extractStructure } = __webpack_require__(229)
const error = __webpack_require__(230)('validation-enging::error')

class ValidationEngine {
  constructor (context, options) {
    this.context = context
    this.factory = context.factory
    this.maxErrors = options.maxErrors
    this.results = []
    this.recordErrorsLevel = 0
    this.violationsCount = 0
    this.validationError = null
  }

  addResultProperty (result, predicate, object) {
    this.results.push(this.factory.quad(result, predicate, object))
  }

  /**
   * Creates a new BlankNode holding the SHACL validation result, adding the default
   * properties for the constraint, focused node and value node
   */
  createResult (constraint, focusNode, valueNode) {
    const { rdf, sh } = this.factory.ns
    const result = this.factory.blankNode()
    const severity = constraint.shape.severity
    const sourceConstraintComponent = constraint.component.node
    const sourceShape = constraint.shape.shapeNode
    this.addResultProperty(result, rdf.type, sh.ValidationResult)
    this.addResultProperty(result, sh.resultSeverity, severity)
    this.addResultProperty(result, sh.sourceConstraintComponent, sourceConstraintComponent)
    this.addResultPropertyDeep(result, sh.sourceShape, sourceShape)
    this.addResultPropertyDeep(result, sh.focusNode, focusNode)
    if (valueNode) {
      this.addResultPropertyDeep(result, sh.value, valueNode)
    }
    return result
  }

  addResultPropertyDeep (result, predicate, node) {
    this.addResultProperty(result, predicate, node)

    const structureQuads = extractStructure(this.context.$shapes.dataset, node)
    for (const quad of structureQuads) {
      this.results.push(quad)
    }
  }

  /**
   * Creates all the validation result nodes and messages for the result of applying the validation logic
   * of a constraints against a node.
   * Result passed as the first argument can be false, a resultMessage or a validation result object.
   * If none of these values is passed no error result or error message will be created.
   */
  createResultFromObject (obj, constraint, focusNode, valueNode) {
    const { sh, xsd } = this.factory.ns

    if (obj === false) {
      if (this.recordErrorsLevel > 0) {
        return true
      }

      const result = this.createResult(constraint, focusNode, valueNode)
      if (constraint.shape.isPropertyShape()) {
        this.addResultPropertyDeep(result, sh.resultPath, constraint.shape.path, true)
      }
      this.createResultMessages(result, constraint)
      return true
    } else if (typeof obj === 'string') {
      if (this.recordErrorsLevel > 0) {
        return true
      }
      const result = this.createResult(constraint, focusNode, valueNode)
      if (constraint.shape.isPropertyShape()) {
        this.addResultPropertyDeep(result, sh.resultPath, constraint.shape.path, true)
      }
      this.addResultProperty(result, sh.resultMessage, this.factory.literal(obj, xsd.string))
      this.createResultMessages(result, constraint)
      return true
    } else if (typeof obj === 'object') {
      if (this.recordErrorsLevel > 0) {
        return true
      }
      const result = this.createResult(constraint, focusNode)
      if (obj.path) {
        this.addResultPropertyDeep(result, sh.resultPath, obj.path, true)
      } else if (constraint.shape.isPropertyShape()) {
        this.addResultPropertyDeep(result, sh.resultPath, constraint.shape.path, true)
      }
      if (obj.value) {
        this.addResultPropertyDeep(result, sh.value, obj.value)
      } else if (valueNode) {
        this.addResultPropertyDeep(result, sh.value, valueNode)
      }
      if (obj.message) {
        this.addResultProperty(result, sh.resultMessage, this.factory.literal(obj.message, xsd.string))
      } else {
        this.createResultMessages(result, constraint)
      }
      return true
    }
    return false
  }

  /**
   * Creates a result message from the result and the message pattern in the constraint
   */
  createResultMessages (result, constraint) {
    const $shapes = this.context.$shapes
    const { sh } = this.factory.ns

    // 1. Try to get message from the shape itself
    let messages = $shapes.cf
      .node(constraint.shape.shapeNode)
      .out(sh.message)
      .terms

    // 2. Try to get message from the constraint component validator
    if (messages.length === 0) {
      messages = constraint.componentMessages.map((m) => this.factory.literal(m))
    }

    // 3. Try to get message from the constraint component node
    if (messages.length === 0) {
      messages = $shapes.cf
        .node(constraint.component.node)
        .out(sh.message)
        .terms
    }

    for (const message of messages) {
      const str = this.withSubstitutions(message, constraint)
      this.addResultProperty(result, sh.resultMessage, str)
    }
  }

  /**
   * Validates the data graph against the shapes graph
   */
  validateAll (rdfDataGraph) {
    if (this.maxErrorsReached()) {
      return true
    }

    this.validationError = null
    try {
      this.results = []
      let foundError = false
      const shapes = this.context.shapesGraph.getShapesWithTarget()
      for (const shape of shapes) {
        const focusNodes = shape.getTargetNodes(rdfDataGraph)
        for (const focusNode of focusNodes) {
          if (this.validateNodeAgainstShape(focusNode, shape, rdfDataGraph)) {
            foundError = true
          }
        }
      }
      return foundError
    } catch (e) {
      this.validationError = e
      return true // Really? Why do we even return a boolean here?
    }
  }

  /**
   * Returns true if any violation has been found
   */
  validateNodeAgainstShape (focusNode, shape, rdfDataGraph) {
    if (this.maxErrorsReached()) {
      return true
    }

    if (shape.deactivated) {
      return false
    }

    const valueNodes = shape.getValueNodes(focusNode, rdfDataGraph)
    let errorFound = false
    for (const constraint of shape.constraints) {
      if (this.validateNodeAgainstConstraint(focusNode, valueNodes, constraint, rdfDataGraph)) {
        errorFound = true
      }
    }
    return errorFound
  }

  validateNodeAgainstConstraint (focusNode, valueNodes, constraint, rdfDataGraph) {
    const { sh } = this.factory.ns

    if (this.maxErrorsReached()) {
      return true
    }

    if (sh.PropertyConstraintComponent.equals(constraint.component.node)) {
      let errorFound = false
      for (const valueNode of valueNodes) {
        if (this.validateNodeAgainstShape(valueNode, this.context.shapesGraph.getShape(constraint.paramValue), rdfDataGraph)) {
          errorFound = true
        }
      }
      return errorFound
    }

    const validationFunction = constraint.shape.isPropertyShape()
      ? constraint.component.propertyValidationFunction
      : constraint.component.nodeValidationFunction
    if (validationFunction) {
      const generic = constraint.shape.isPropertyShape()
        ? constraint.component.propertyValidationFunctionGeneric
        : constraint.component.nodeValidationFunctionGeneric
      if (generic) {
        // Generic sh:validator is called for each value node separately
        let errorFound = false
        for (const valueNode of valueNodes) {
          if (this.maxErrorsReached()) {
            break
          }
          let iterationError = false
          // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {
          this.recordErrorsLevel++
          // }
          const obj = validationFunction.execute(focusNode, valueNode, constraint)
          // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {
          this.recordErrorsLevel--
          // }
          if (Array.isArray(obj)) {
            for (const item of obj) {
              if (this.createResultFromObject(item, constraint, focusNode, valueNode)) {
                iterationError = true
              }
            }
          } else {
            if (this.createResultFromObject(obj, constraint, focusNode, valueNode)) {
              iterationError = true
            }
          }
          if (iterationError) {
            this.violationsCount++
          }
          errorFound = errorFound || iterationError
        }
        return errorFound
      } else {
        // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {
        this.recordErrorsLevel++
        // }
        const obj = validationFunction.execute(focusNode, null, constraint)
        // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {
        this.recordErrorsLevel--
        // }
        if (Array.isArray(obj)) {
          let errorFound = false
          for (const item of obj) {
            if (this.createResultFromObject(item, constraint, focusNode)) {
              errorFound = true
            }
          }
          return errorFound
        } else {
          if (this.createResultFromObject(obj, constraint, focusNode)) {
            return true
          }
        }
      }
    } else {
      throw new Error('Cannot find validator for constraint component ' + constraint.component.node.value)
    }
  }

  maxErrorsReached () {
    if (this.maxErrors) {
      return this.violationsCount >= this.maxErrors
    } else {
      return false
    }
  }

  withSubstitutions (messageNode, constraint) {
    const message = constraint.component.parameters.reduce((message, param) => {
      const paramName = localName(param.value)
      const paramValue = nodeLabel(constraint.getParameterValue(param))
      return message
        .replace(`{$${paramName}}`, paramValue)
        .replace(`{?${paramName}}`, paramValue)
    }, messageNode.value)

    return this.factory.literal(message, messageNode.language || messageNode.datatype)
  }

  getReport () {
    if (this.validationError) {
      error('Validation Failure: ' + this.validationError)
      throw (this.validationError)
    } else {
      return new ValidationReport(this.results, { factory: this.factory })
    }
  }
}

// TODO: This is not the 100% correct local name algorithm
function localName (uri) {
  let index = uri.lastIndexOf('#')

  if (index < 0) {
    index = uri.lastIndexOf('/')
  }

  if (index < 0) {
    throw new Error(`Cannot get local name of ${uri}`)
  }

  return uri.substring(index + 1)
}

function nodeLabel (node) {
  if (!node) {
    return 'NULL'
  }

  if (node.termType === 'NamedNode') {
    // TODO: shrink URI if possible
    return '<' + node.value + '>'
  }

  if (node.termType === 'BlankNode') {
    return 'Blank node ' + node.value
  }

  return node.value
}

module.exports = ValidationEngine


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

const clownface = __webpack_require__(98)
const DataFactory = __webpack_require__(91)
const { sh } = __webpack_require__(17)

/**
 * Result of a SHACL validation.
 */
class ValidationReport {
  constructor (resultsQuads, options) {
    options = options || {}
    this.factory = new DataFactory(options.factory || __webpack_require__(47))
    const { rdf, sh, xsd } = this.factory.ns

    this.term = this.factory.blankNode('report')
    this.dataset = this.factory.dataset(resultsQuads)

    // Prepare report dataset
    const cf = clownface({ dataset: this.dataset, factory: this.factory })
    const resultNodes = cf.node(sh.ValidationResult).in(rdf.type).terms
    const conforms = resultNodes.length === 0
    cf.node(this.term)
      .addOut(rdf.type, sh.ValidationReport)
      .addOut(sh.conforms, this.factory.literal(conforms.toString(), xsd.boolean))
      .addOut(sh.result, resultNodes)

    /**
     * `true` if the data conforms to the defined shapes, `false` otherwise.
     */
    this.conforms = conforms

    /**
     * List of `ValidationResult` with details about nodes that don't conform to
     * the given shapes.
     */
    this.results = resultNodes.map(resultNode => new ValidationResult(resultNode, this.dataset))
  }
}

class ValidationResult {
  constructor (term, dataset) {
    this.term = term
    this.dataset = dataset
    this.cf = clownface({ dataset: dataset }).node(term)
  }

  get message () {
    return this.cf.out(sh.resultMessage).terms || []
  }

  get path () {
    return this.cf.out(sh.resultPath).term || null
  }

  get focusNode () {
    return this.cf.out(sh.focusNode).term || null
  }

  get severity () {
    return this.cf.out(sh.resultSeverity).term || null
  }

  get sourceConstraintComponent () {
    return this.cf.out(sh.sourceConstraintComponent).term || null
  }

  get sourceShape () {
    return this.cf.out(sh.sourceShape).term || null
  }
}

module.exports = ValidationReport


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

const rdf = __webpack_require__(20)
const ns = __webpack_require__(48)
const toArray = __webpack_require__(49)
const toTermArray = __webpack_require__(224)
const Context = __webpack_require__(226)

/**
 * A graph pointer object, which points at 0..N nodes within a dataset
 */
class Clownface {
  constructor ({ dataset, graph, term, value, factory = rdf, _context }) {
    this.factory = factory
    this.namespace = ns(factory)

    if (_context) {
      this._context = _context

      return
    }

    const terms = (term && toArray(term)) || (value && toArray(value)) || [null]

    /**
     * The underlying context which references actual node being pointed
     *
     * @type {Context[]}
     * @private
     */
    this._context = terms.map(term => {
      return new Context({ dataset, graph, value: term, factory: this.factory, namespace: this.namespace })
    })
  }

  /**
   * Gets the current RDF/JS term or undefined if pointer has no context
   *
   * @returns {undefined|Term}
   */
  get term () {
    const terms = this.terms

    if (terms.length !== 1) {
      return undefined
    }

    return terms[0]
  }

  /**
   * Gets the current terms or an empty array if the pointer has no context
   *
   * @returns {Term[]}
   */
  get terms () {
    return this._context.map(node => node.term).filter(Boolean)
  }

  /**
   * Gets the string representation of term
   *
   * @returns {undefined|string}
   */
  get value () {
    const term = this.term

    return term && term.value
  }

  /**
   * Gets the string representation of terms
   *
   * @returns {string[]}
   */
  get values () {
    return this.terms.map(term => term.value)
  }

  /**
   * Gets the current context's dataset, or undefined if there are multiple
   *
   * @returns {undefined|DatasetCore}
   */
  get dataset () {
    const datasets = this.datasets

    if (datasets.length !== 1) {
      return undefined
    }

    return datasets[0]
  }

  /**
   * Gets the current context's datasets
   *
   * @returns {DatasetCore[]}
   */
  get datasets () {
    return this._context.map(node => node.dataset).filter(Boolean)
  }

  /**
   * Creates an iterator which iterates and rdf:List of the current term
   *
   * @returns {Iterable | null}
   */
  list () {
    if (this.terms.length > 1) {
      throw new Error('iterator over multiple terms is not supported')
    }

    if (this.term) {
      if (this.term.termType !== 'NamedNode' && this.term.termType !== 'BlankNode') {
        return null
      }

      if (!this.term.equals(this.namespace.nil) && !this.out(this.namespace.first).term) {
        return null
      }
    }

    let item = this

    return {
      [Symbol.iterator]: () => {
        return {
          next: () => {
            if (!item.term || item.term.equals(this.namespace.nil)) {
              return { done: true }
            }

            const value = item.out(this.namespace.first)
            if (value.terms.length > 1) {
              throw new Error(`Invalid list: multiple values for rdf:first on ${item.value}`)
            }

            const rest = item.out(this.namespace.rest)
            if (rest.terms.length > 1) {
              throw new Error(`Invalid list: multiple values for rdf:rest on ${item.value}`)
            }

            item = rest

            return { done: false, value }
          }
        }
      }
    }
  }

  /**
   * Returns an array of graph pointers where each one has a single _context
   *
   * @returns {Clownface[]}
   */
  toArray () {
    return this._context
      .map(context => Clownface.fromContext(context))
      .filter(context => context.terms.some(Boolean))
  }

  /**
   * Returns graph pointers which meet the condition specified in a callback function
   * @param {FilterCallback} callback
   * @returns {Clownface}
   */
  filter (callback) {
    return Clownface.fromContext(this._context.filter(context => callback(Clownface.fromContext(context))))
  }

  /**
   * Performs the specified action on every graph pointer
   * @param {ForEachCallback} callback
   * @returns {Clownface}
   */
  forEach (callback) {
    this.toArray().forEach(callback)
    return this
  }

  /**
   * Calls a defined callback function on each graph pointer, and returns an array that contains the results.
   * @template T
   * @param {MapCallback<T>} callback
   * @returns {T[]}
   */
  map (callback) {
    return this.toArray().map(callback)
  }

  toString () {
    return this.values.join()
  }

  /**
   * Creates graph pointer to one or more node(s)
   *
   * Depending on the value creates pointers to:
   *
   * - blank node context for null `values`
   * - literal for string `values` and no `options` paramter
   * - matching RDF/JS term
   * - term created according to `options.type` parameter
   *
   * @param {null|string|string[]|Term|Term[]|Clownface|Clownface[]} values
   * @param {Object} [options]
   * @param {"NamedNode"|"BlankNode"|"Literal"} [options.type] explicit type for nodes
   * @param {string} [options.language] language tag of literals
   * @param {string} [options.datatype] datatype of literals
   * @returns {Clownface}
   */
  node (values, { type, datatype, language } = {}) {
    values = this._toTermArray(values, type, datatype || language) || [null]

    const context = values.reduce((context, value) => {
      return context.concat(this._context.reduce((all, current) => {
        return all.concat([current.clone({ value })])
      }, []))
    }, [])

    return Clownface.fromContext(context)
  }

  /**
   * Creates graph pointer to one or more blank nodes
   * @param {null|string|string[]|BlankNode|BlankNode[]|Clownface|Clownface[]} [values] blank node identifiers (generates it when falsy) or existing RDF/JS blank node(s)
   * @returns {Clownface}
   */
  blankNode (values) {
    return this.node(values, { type: 'BlankNode' })
  }

  /**
   * Creates graph pointer to one or more literal nodes
   * @param {string|string[]|boolean|boolean[]|number|number[]|Literal|Literal[]|Clownface|Clownface[]} values literal values as JS objects or RDF/JS Literal(s)
   * @param {string|Term} [languageOrDatatype] a language tag string or datatype term
   * @returns {Clownface}
   */
  literal (values, languageOrDatatype) {
    return this.node(values, { type: 'Literal', datatype: languageOrDatatype })
  }

  /**
   * Creates graph pointer to one or more named nodes
   * @param {string|string[]|NamedNode|NamedNode[]|Clownface|Clownface[]} values URI(s) or RDF/JS NamedNode(s)
   * @returns {Clownface}
   */
  namedNode (values) {
    return this.node(values, { type: 'NamedNode' })
  }

  /**
   * Creates a graph pointer to nodes which are linked to the current pointer by `predicates`
   * @param {Term|Term[]|Clownface|Clownface[]} predicates one or more RDF/JS term identifying a property
   * @returns {Clownface}
   */
  in (predicates) {
    predicates = this._toTermArray(predicates)

    const context = this._context.reduce((all, current) => all.concat(current.in(predicates)), [])

    return Clownface.fromContext(context)
  }

  /**
   * Creates a graph pointer to nodes which link the current pointer by `predicates`
   * @param {Term|Term[]|Clownface|Clownface[]} predicates one or more RDF/JS term identifying a property
   * @param {object} [options]
   * @param {string | string[] | undefined} [options.language]
   * @returns {Clownface}
   */
  out (predicates, options = {}) {
    predicates = this._toTermArray(predicates)

    const context = this._context.reduce((all, current) => all.concat(current.out(predicates, options)), [])

    return Clownface.fromContext(context)
  }

  /**
   * Creates a graph pointer to nodes which are subjects of predicates, optionally also with specific objects
   *
   * If the current context is empty, will check all potential subjects
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates RDF property identifiers
   * @param {*} [objects] object values to match
   * @returns {Clownface}
   */
  has (predicates, objects) {
    predicates = this._toTermArray(predicates)
    objects = this._toTermArray(objects)

    const context = this._context.reduce((all, current) => all.concat(current.has(predicates, objects)), [])

    return Clownface.fromContext(context)
  }

  /**
   * Creates a new quad(s) in the dataset where the current context is the object
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates
   * @param {NamedNode|NamedNode[]|Clownface|Clownface[]} subjects one or more nodes to use as subjects
   * @param {GraphPointerCallback} [callback] called for each object, with subject pointer as parameter
   * @returns {Clownface} current graph pointer
   */
  addIn (predicates, subjects, callback) {
    if (!predicates) {
      throw new Error('predicate parameter is required')
    }

    if (typeof subjects === 'function') {
      callback = subjects
      subjects = null
    }

    predicates = this._toTermArray(predicates)
    subjects = this._toTermArray(subjects) || [this.factory.blankNode()]

    const context = this._context.map(context => context.addIn(predicates, subjects))

    if (callback) {
      Clownface.fromContext(context).forEach(callback)
    }

    return this
  }

  /**
   * Creates a new quad(s) in the dataset where the current context is the subject
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates
   * @param {*} objects one or more values to use for objects
   * @param {GraphPointerCallback} [callback] called for each subject, with object pointer as parameter
   * @returns {Clownface} current graph pointer
   */
  addOut (predicates, objects, callback) {
    if (!predicates) {
      throw new Error('predicate parameter is required')
    }

    if (typeof objects === 'function') {
      callback = objects
      objects = null
    }

    predicates = this._toTermArray(predicates)
    objects = this._toTermArray(objects) || [this.factory.blankNode()]

    const context = this._context.map(context => context.addOut(predicates, objects))

    if (callback) {
      Clownface.fromContext(context).forEach(callback)
    }

    return this
  }

  /**
   * Creates a new RDF list or lists containing the given items
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates
   * @param {*} items one or more values to use for subjects
   * @returns {Clownface} current graph pointer
   */
  addList (predicates, items) {
    if (!predicates || !items) {
      throw new Error('predicate and items parameter is required')
    }

    predicates = this._toTermArray(predicates)
    items = this._toTermArray(items)

    this._context.forEach(context => context.addList(predicates, items))

    return this
  }

  /**
   * Deletes all quads where the current graph pointer contexts are the objects
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates
   * @returns {Clownface} current graph pointer
   */
  deleteIn (predicates) {
    predicates = this._toTermArray(predicates)

    this._context.forEach(context => context.deleteIn(predicates))

    return this
  }

  /**
   * Deletes all quads where the current graph pointer contexts are the subjects
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates
   * @returns {Clownface} current graph pointer
   */
  deleteOut (predicates) {
    predicates = this._toTermArray(predicates)

    this._context.forEach(context => context.deleteOut(predicates))

    return this
  }

  /**
   * Deletes entire RDF lists where the current graph pointer is the subject
   *
   * @param {Term|Term[]|Clownface|Clownface[]} predicates
   * @returns {Clownface} current graph pointer
   */
  deleteList (predicates) {
    if (!predicates) {
      throw new Error('predicate parameter is required')
    }

    predicates = this._toTermArray(predicates)

    this._context.forEach(context => context.deleteList(predicates))

    return this
  }

  _toTermArray (predicates, type, languageOrDatatype) {
    return toTermArray(predicates, type, languageOrDatatype, this.factory)
  }

  static fromContext (context) {
    return new Clownface({ _context: toArray(context), factory: context.factory })
  }
}

/**
 * @callback GraphPointerCallback
 * @param {Clownface} pointer graph pointer to the new or existing node
 */

/**
 * @callback FilterCallback
 * @param {Clownface} pointer
 * @return {boolean}
 */

/**
 * @callback ForEachCallback
 * @param {Clownface} pointer
 */

/**
 * @callback MapCallback
 * @template T
 * @param {Clownface} pointer
 * @return {T}
 */

module.exports = Clownface


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

const term = __webpack_require__(99)
const toArray = __webpack_require__(49)

function toTermArray (items, type, languageOrDatatype, factory) {
  if ((typeof items === 'undefined' || items === null) && !type) {
    return items
  }

  return (toArray(items) || [undefined]).reduce((all, item) => {
    if (typeof item === 'object' && item.terms) {
      return all.concat(item.terms)
    }

    all.push(term(item, type, languageOrDatatype, factory))

    return all
  }, [])
}

module.exports = toTermArray


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

const rdf = __webpack_require__(20)
const namespace = __webpack_require__(48)

const { xsd } = namespace(rdf)

function booleanToLiteral (value, factory = rdf) {
  if (typeof value !== 'boolean') {
    return null
  }

  return factory.literal(value.toString(), xsd('boolean'))
}

function numberToLiteral (value, factory = rdf) {
  if (typeof value !== 'number') {
    return null
  }

  if (Number.isInteger(value)) {
    return factory.literal(value.toString(10), xsd('integer'))
  }

  return factory.literal(value.toString(10), xsd('double'))
}

function stringToLiteral (value, factory = rdf) {
  if (typeof value !== 'string') {
    return null
  }

  return factory.literal(value)
}

function toLiteral (value, factory = rdf) {
  return booleanToLiteral(value, factory) ||
    numberToLiteral(value, factory) ||
    stringToLiteral(value, factory)
}

module.exports = {
  booleanToLiteral,
  numberToLiteral,
  stringToLiteral,
  toLiteral
}


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

const inArray = __webpack_require__(227)
const term = __webpack_require__(99)
const toArray = __webpack_require__(49)
const { createLanguageMapper } = __webpack_require__(228)

class Context {
  constructor ({ dataset, graph, value, factory, namespace }) {
    this.dataset = dataset
    this.graph = graph
    this.factory = factory
    this.namespace = namespace
    this.term = term(value, undefined, undefined, factory)
  }

  clone ({ dataset = this.dataset, graph = this.graph, value, factory = this.factory, namespace = this.namespace }) {
    return new Context({ dataset, graph, value, factory, namespace })
  }

  has (predicate, object) {
    return this.matchProperty(toArray(this.term), predicate, object, toArray(this.graph), 'subject').map(subject => {
      return this.clone({ value: subject })
    })
  }

  in (predicate) {
    return this.matchProperty(null, predicate, toArray(this.term), toArray(this.graph), 'subject').map(subject => {
      return this.clone({ value: subject })
    })
  }

  out (predicate, { language }) {
    let objects = this.matchProperty(toArray(this.term), predicate, null, toArray(this.graph), 'object')

    if (typeof language !== 'undefined') {
      const languages = (typeof language === 'string' ? [language] : language)
      const getLiteralsForLanguage = createLanguageMapper(objects)

      objects = languages.map(getLiteralsForLanguage).find(Boolean) || []
    }

    return objects.map(object => {
      return this.clone({ value: object })
    })
  }

  addIn (predicates, subjects) {
    const context = []

    if (this.term) {
      subjects.forEach(subject => {
        predicates.forEach(predicate => {
          this.dataset.add(this.factory.quad(subject, predicate, this.term, this.graph))
        })

        context.push(this.clone({ value: subject }))
      })
    }

    return context
  }

  addOut (predicates, objects) {
    const context = []

    if (this.term) {
      objects.forEach(object => {
        predicates.forEach(predicate => {
          this.dataset.add(this.factory.quad(this.term, predicate, object, this.graph))
        })

        context.push(this.clone({ value: object }))
      })
    }

    return context
  }

  addList (predicates, items) {
    if (!this.term) {
      return
    }

    predicates.forEach(predicate => {
      const nodes = items.map(() => this.factory.blankNode())

      this.dataset.add(this.factory.quad(this.term, predicate, nodes[0] || this.namespace.nil, this.graph))

      for (let index = 0; index < nodes.length; index++) {
        this.dataset.add(this.factory.quad(nodes[index], this.namespace.first, items[index], this.graph))
        this.dataset.add(this.factory.quad(nodes[index], this.namespace.rest, nodes[index + 1] || this.namespace.nil, this.graph))
      }
    })
  }

  deleteIn (predicate) {
    this.deleteMatch(null, predicate, toArray(this.term), toArray(this.graph))
  }

  deleteOut (predicate) {
    this.deleteMatch(toArray(this.term), predicate, null, toArray(this.graph))
  }

  deleteList (predicates) {
    predicates.forEach(predicate => {
      for (const quad of this.dataset.match(this.term, predicate)) {
        this.deleteItems(quad)
      }
    })
  }

  deleteItems (start) {
    let quads = [start]

    while (!quads[quads.length - 1].object.equals(this.namespace.nil)) {
      const node = quads[quads.length - 1].object

      quads = quads.concat([...this.dataset.match(node)])
    }

    quads.forEach(quad => {
      this.dataset.delete(quad)
    })
  }

  match (subject, predicate, object, graph) {
    const matches = []

    for (const quad of this.dataset) {
      if (subject && !inArray(quad.subject, subject)) {
        continue
      }

      if (predicate && !inArray(quad.predicate, predicate)) {
        continue
      }

      if (object && !inArray(quad.object, object)) {
        continue
      }

      if (graph && !inArray(quad.graph, graph)) {
        continue
      }

      matches.push(quad)
    }

    return matches
  }

  matchProperty (subject, predicate, object, graph, property) {
    return this.match(subject, predicate, object, graph).map(quad => quad[property])
  }

  deleteMatch (subject, predicate, object, graph) {
    this.match(subject, predicate, object, graph).forEach(quad => {
      this.dataset.delete(quad)
    })
  }
}

module.exports = Context


/***/ }),
/* 227 */
/***/ (function(module, exports) {

function inArray (node, array) {
  return array.some(function (otherNode) {
    return otherNode.equals(node)
  })
}

module.exports = inArray


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

const RDF = __webpack_require__(20)
const namespace = __webpack_require__(48)

const ns = namespace(RDF)

function mapLiteralsByLanguage (map, current) {
  const notLiteral = current.termType !== 'Literal'
  const notStringLiteral = ns.langString.equals(current.datatype) || ns.xsd.string.equals(current.datatype)

  if (notLiteral || !notStringLiteral) return map

  const language = current.language.toLowerCase()

  if (map.has(language)) {
    map.get(language).push(current)
  } else {
    map.set(language, [current])
  }

  return map
}

function createLanguageMapper (objects) {
  const literalsByLanguage = objects.reduce(mapLiteralsByLanguage, new Map())
  const langMapEntries = [...literalsByLanguage.entries()]

  return language => {
    const languageLowerCase = language.toLowerCase()

    if (languageLowerCase === '*') {
      return langMapEntries[0] && langMapEntries[0][1]
    }

    const exactMatch = literalsByLanguage.get(languageLowerCase)
    if (exactMatch) {
      return exactMatch
    }

    const secondaryMatches = langMapEntries.find(([entryLanguage]) => entryLanguage.startsWith(languageLowerCase))

    return secondaryMatches && secondaryMatches[1]
  }
}

module.exports = {
  createLanguageMapper
}


/***/ }),
/* 229 */
/***/ (function(module, exports) {


/**
 * Extracts all the quads forming the structure under a blank node. Stops at
 * non-blank nodes.
 *
 * @param {DatasetCore} dataset
 * @param {Term} startNode
 */
function extractStructure (dataset, startNode) {
  if (startNode.termType !== 'BlankNode') {
    return []
  }

  const quads = [...dataset.match(startNode, null, null)]

  const children = quads.map((quad) => {
    return extractStructure(dataset, quad.object)
  })

  return quads.concat(...children)
}

module.exports = {
  extractStructure
}


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */
function log(...args) {
	// This hackery is required for IE8/9, where
	// the `console.log` function doesn't have 'apply'
	return typeof console === 'object' &&
		console.log &&
		console.log(...args);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(231)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(232);

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* Active `debug` instances.
	*/
	createDebug.instances = [];

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return match;
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.enabled = createDebug.enabled(namespace);
		debug.useColors = createDebug.useColors();
		debug.color = selectColor(namespace);
		debug.destroy = destroy;
		debug.extend = extend;
		// Debug.formatArgs = formatArgs;
		// debug.rawLog = rawLog;

		// env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		createDebug.instances.push(debug);

		return debug;
	}

	function destroy() {
		const index = createDebug.instances.indexOf(this);
		if (index !== -1) {
			createDebug.instances.splice(index, 1);
			return true;
		}
		return false;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}

		for (i = 0; i < createDebug.instances.length; i++) {
			const instance = createDebug.instances[i];
			instance.enabled = createDebug.enabled(instance.namespace);
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),
/* 232 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

const clownface = __webpack_require__(98)
const NodeSet = __webpack_require__(29)
const { rdf, rdfs } = __webpack_require__(17)

class RDFLibGraph {
  constructor (dataset, factory) {
    this.dataset = dataset
    this.factory = factory
  }

  match (s, p, o) {
    return this.dataset.match(s, p, o)
  }

  get cf () {
    return clownface({ dataset: this.dataset, factory: this.factory })
  }

  getInstancesOf ($class) {
    const classes = this.getSubClassesOf($class)
    classes.add($class)

    return [...classes].reduce((acc, cls) => {
      const classInstances = this.cf
        .node(cls)
        .in(rdf.type)
        .terms

      acc.addAll(classInstances)

      return acc
    }, new NodeSet())
  }

  getSubClassesOf ($class) {
    const subclasses = this.cf
      .node($class)
      .in(rdfs.subClassOf)
      .terms

    return new NodeSet(subclasses)
  }

  isInstanceOf ($instance, $class) {
    const classes = this.getSubClassesOf($class)
    classes.add($class)

    const types = this.cf
      .node($instance)
      .out(rdf.type)
      .terms

    return types.some((type) => classes.has(type))
  }

  rdfListToArray (listNode) {
    const iterator = this.cf.node(listNode).list()
    return [...iterator].map(({ term }) => term)
  }
}

module.exports = RDFLibGraph


/***/ }),
/* 234 */
/***/ (function(module, exports) {

/* This file was automatically generated. Do not edit by hand. */

module.exports = (factory) => {
  const blankNodes = {
    'b0_c14n3': factory.namedNode('urn:rdf-validate-shacl:blank-ICrbDblpRlstcUSwjBAYZ'),
    'b0_c14n6': factory.namedNode('urn:rdf-validate-shacl:blank-pFK9KYtN26DN0NMXyH8Ar'),
    'b0_c14n0': factory.namedNode('urn:rdf-validate-shacl:blank-78BxHlZRiJnXywWTF5cqq'),
    'b0_c14n1': factory.namedNode('urn:rdf-validate-shacl:blank-x54-DFCLtSR8nEZND8Bk3'),
    'b0_c14n5': factory.namedNode('urn:rdf-validate-shacl:blank-31XwBcULxRTIx9l5dbYMx'),
    'b0_c14n2': factory.namedNode('urn:rdf-validate-shacl:blank-JIQGzDSBoYQOBoFXDRJb9'),
    'b0_c14n4': factory.namedNode('urn:rdf-validate-shacl:blank-DzoWy3baN0DSUzrH2JFJ8')
  };

  return [
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`W3C Shapes Constraint Language (SHACL) Vocabulary`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      blankNodes['b0_c14n3'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/ns/shacl-shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The base class of validation results, typically not instantiated directly.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Abstract result`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#and'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to test whether a value node conforms to all members of a provided list of shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`And constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node kind of all blank nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Blank node`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node kind of all blank nodes or IRIs.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Blank node or IRI`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node kind of all blank nodes or literals.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Blank node or literal`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that each value node is an instance of a given type.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Class constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#closed'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'),
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.literal(`true`, factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to indicate that focus nodes must only have values for those properties that have been explicitly enumerated via sh:property/sh:path.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Closed constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of constraint components.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the datatype of all value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Datatype constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#disjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that the set of value nodes is disjoint with the the set of nodes that have the focus node as subject and the value of a given property as predicate.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Disjoint constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#equals'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that the set of value nodes is equal to the set of nodes that have the focus node as subject and the value of a given property as predicate.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Equals constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#expression'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that a given node expression produces true for all value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Expression constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SHACL functions.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Function`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#hasValue'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that one of the value nodes is a given RDF node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Has-value constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node kind of all IRIs.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`IRI`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node kind of all IRIs or literals.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`IRI or literal`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to exclusively enumerate the permitted value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`In constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Info'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Info'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The severity for an informational validation result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Info'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Info'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Info`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#js'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of constraints backed by a JavaScript function.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript-based constraint`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component with the parameter sh:js linking to a sh:JSConstraint containing a sh:script.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Abstract base class of resources that declare an executable JavaScript.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript executable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SHACL functions that execute a JavaScript function when called.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript function`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Represents a JavaScript library, typically identified by one or more URLs of files to include.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript library`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSRule'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SHACL rules expressed using JavaScript.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript rule`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of targets that are based on JavaScript functions.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript target`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (meta) class for parameterizable targets that are based on JavaScript functions.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript target type`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A SHACL validator based on JavaScript. This can be used to declare SHACL constraint components that perform JavaScript-based validation when used.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#languageIn'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to enumerate language tags that all value nodes must have.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Language-in constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#lessThan'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that each value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Less-than constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that every value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`less-than-or-equals constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node kind of all literals.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Literal`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the maximum number of value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Max-count constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the range of value nodes with a maximum exclusive value.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Max-exclusive constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the range of value nodes with a maximum inclusive value.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Max-inclusive constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the maximum string length of value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Max-length constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#minCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the minimum number of value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Min-count constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the range of value nodes with a minimum exclusive value.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Min-exclusive constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the range of value nodes with a minimum inclusive value.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Min-inclusive constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#minLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the minimum string length of value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Min-length constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#node'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that all value nodes conform to the given node shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Node constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of all node kinds, including sh:BlankNode, sh:IRI, sh:Literal or the combinations of these: sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral, sh:IRIOrLiteral.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Node kind`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      blankNodes['b0_c14n6'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the RDF node kind of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Node-kind constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A node shape is a shape that specifies constraint that need to be met with respect to focus nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Node shape`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#not'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that value nodes do not conform to a given shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Not constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#or'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the value nodes so that they conform to at least one out of several provided shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Or constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of parameter declarations, consisting of a path predicate and (possibly) information about allowed value type, cardinality and other characteristics.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Parameter`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Superclass of components that can take parameters, especially functions and constraint components.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Parameterizable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'),
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.literal(`true`, factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#flags'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#pattern'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that every value node matches a given regular expression.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Pattern constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of prefix declarations, consisting of pairs of a prefix with a namespace.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Prefix declaration`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that all value nodes conform to the given property shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Property constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Instances of this class represent groups of property shapes that belong together.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Property group`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A property shape is a shape that specifies constraints on the values of a focus node for a given property or path.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Property shape`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.literal(`true`, factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that a specified maximum number of value nodes conforms to a given shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Qualified-max-count constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.literal(`true`, factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to verify that a specified minimum number of value nodes conforms to a given shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Qualified-min-count constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A class of result annotations, which define the rules to derive the values of a given annotation property as extra values for a validation result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Result annotation`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SHACL rules. Never instantiated directly.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Rule`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SPARQL executables that are based on an ASK query.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL ASK executable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of validators based on SPARQL ASK queries. The queries are evaluated for each value node and are supposed to return true if the given node conforms.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL ASK validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of constraints based on SPARQL SELECT queries.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL constraint`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to define constraints based on SPARQL queries.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SPARQL executables that are based on a CONSTRUCT query.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL CONSTRUCT executable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of resources that encapsulate a SPARQL query.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL executable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A function backed by a SPARQL query - either ASK or SELECT.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL function`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SHACL rules based on SPARQL CONSTRUCT queries.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL CONSTRUCT rule`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SPARQL executables based on a SELECT query.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL SELECT executable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of validators based on SPARQL SELECT queries. The queries are evaluated for each focus node and are supposed to produce bindings for all focus nodes that do not conform.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL SELECT validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of targets that are based on SPARQL queries.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL target`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (meta) class for parameterizable targets that are based on SPARQL queries.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL target type`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SPARQL executables based on a SPARQL UPDATE.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`SPARQL UPDATE executable`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of validation result severity levels, including violation and warning levels.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Severity`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A shape is a collection of constraints that may be targeted for certain nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Shape`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The base class of targets such as those based on SPARQL queries.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Target`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (meta) class for parameterizable targets.	Instances of this are instantiated as values of the sh:target property.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Target type`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TargetType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`A rule based on triple (subject, predicate, object) pattern.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'),
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'),
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.literal(`1`, factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to specify that no pair of value nodes may use the same language tag.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Unique-languages constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of SHACL validation reports.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Validation report`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of validation results.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Validation result`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The class of validators, which provide instructions on how to process a constraint definition. This class serves as base class for the SPARQL-based validators and other possible implementations.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Violation'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Violation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The severity for a violation validation result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Violation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Violation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Violation`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Warning'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Warning'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The severity for a warning validation result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Warning'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#Warning'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Warning`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'),
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/ns/shacl#xone'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A constraint component that can be used to restrict the value nodes so that they conform to exactly one out of several provided shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`Exactly one constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (single) value of this property must be a list of path elements, representing the elements of alternative paths.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`alternative path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#and'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#and'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`RDF list of shapes to validate the value nodes against.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#and'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#and'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`and`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#and'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The annotation property that shall be set.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`annotation property`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (default) values of the annotation property.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`annotation value`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The name of the SPARQL variable from the SELECT clause that shall be used for the values.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`annotation variable name`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ask'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ask'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The SPARQL ASK query to execute.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ask'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ask'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ask'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`ask`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ask'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#class'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#class'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The type that all value nodes must have.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#class'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#class'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`class`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#class'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#closed'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#closed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`If set to true then the shape is closed.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#closed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#closed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`closed`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#closed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#condition'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#condition'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The shapes that the focus nodes need to conform to before a rule is executed on them.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#condition'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#condition'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#condition'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`condition`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#condition'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#conforms'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#conforms'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`True if the validation did not produce any validation results, and false otherwise.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#conforms'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#conforms'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#conforms'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`conforms`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#conforms'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#construct'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#construct'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The SPARQL CONSTRUCT query to execute.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#construct'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#construct'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#construct'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`construct`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#construct'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies an RDF datatype that all value nodes must have.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`datatype`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#datatype'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Datatype'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#deactivated'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#deactivated'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`If set to true then all nodes conform to this.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#deactivated'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#deactivated'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`deactivated`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#deactivated'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a resource with its namespace prefix declarations.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`declare`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#declare'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A default value for a property, for example for user interface tools to pre-populate input fields.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`default value`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#description'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#description'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Human-readable descriptions for the property in the context of the surrounding shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#description'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#description'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#description'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`description`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#detail'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#detail'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a result with other results that provide more details, for example to describe violations against nested shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#detail'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#detail'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#detail'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`detail`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#detail'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#disjoint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#disjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a property where the set of values must be disjoint with the value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#disjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#disjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`disjoint`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#disjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#entailment'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#entailment'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An entailment regime that indicates what kind of inferencing is required by a shapes graph.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#entailment'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#entailment'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#entailment'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`entailment`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#entailment'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#equals'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#equals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a property that must have the same values as the value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#equals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#equals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`equals`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#equals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#expression'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#expression'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node expression that must return true for the value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#expression'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#expression'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`expression`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#filterShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#filterShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The shape that all input nodes of the expression need to conform to.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#filterShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#filterShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`filter shape`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#filterShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#flags'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#flags'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An optional flag to be used with regular expression pattern matching.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#flags'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#flags'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`flags`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#flags'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#focusNode'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#focusNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The focus node that was validated when the result was produced.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#focusNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#focusNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#focusNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`focus node`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#group'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#group'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Can be used to link to a property group to indicate that a property shape belongs to a group of related property shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#group'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#group'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#group'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`group`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#group'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#hasValue'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#hasValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a value that must be among the value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#hasValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#hasValue'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`has value`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An optional RDF list of properties that are also permitted in addition to those explicitly enumerated via sh:property/sh:path.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`ignored properties`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a list of allowed values so that each value node must be among the members of the given list.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`in`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#in'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#intersection'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#intersection'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A list of node expressions that shall be intersected.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#intersection'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#intersection'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`intersection`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#inversePath'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#inversePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (single) value of this property represents an inverse path (object to subject).`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#inversePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#inversePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`inverse path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#inversePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#js'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#js'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Constraints expressed in JavaScript.`, factory.namedNode('http://www.w3.org/2001/XMLSchema#string')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#js'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#js'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript constraint`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#js'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The name of the JavaScript function to execute.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript function name`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Declares which JavaScript libraries are needed to execute this.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript library`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Declares the URLs of a JavaScript library. This should be the absolute URL of a JavaScript file. Implementations may redirect those to local files.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`JavaScript library URL`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#anyURI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Outlines how human-readable labels of instances of the associated Parameterizable shall be produced. The values can contain {?paramName} as placeholders for the actual values of the given parameter.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`label template`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#languageIn'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#languageIn'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a list of language tags that all value nodes must have.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#languageIn'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#languageIn'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`language in`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#languageIn'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThan'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThan'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a property that must have smaller values than the value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThan'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThan'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`less than`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThan'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a property that must have smaller or equal values than the value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`less than or equals`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the maximum number of values in the set of value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`max count`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the maximum exclusive value of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`max exclusive`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the maximum inclusive value of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`max inclusive`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxLength'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the maximum string length of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`max length`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#maxLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#message'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#message'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A human-readable message (possibly with placeholders for variables) explaining the cause of the result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#message'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#message'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`message`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the minimum number of values in the set of value nodes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`min count`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the minimum exclusive value of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`min exclusive`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the minimum inclusive value of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`min inclusive`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minLength'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the minimum string length of each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`min length`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#minLength'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#name'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#name'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Human-readable labels for the property in the context of the surrounding shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#name'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#name'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#name'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`name`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The namespace associated with a prefix in a prefix declaration.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`namespace`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#anyURI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#node'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#node'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the node shape that all value nodes must conform to.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#node'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#node'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`node`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#node'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the node kind (e.g. IRI or literal) each value node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`node kind`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The validator(s) used to evaluate a constraint in the context of a node shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`shape validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodes'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The node expression producing the input nodes of a filter shape expression.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#nodes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`nodes`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#not'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#not'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a shape that the value nodes must not conform to.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#not'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#not'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`not`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#not'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#object'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#object'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An expression producing the nodes that shall be inferred as objects.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#object'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#object'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#object'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`object`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (single) value of this property represents a path that is matched one or more times.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`one or more path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Indicates whether a parameter is optional.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`optional`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#optional'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#or'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#or'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a list of shapes so that the value nodes must conform to at least one of the shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#or'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#or'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`or`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#or'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#order'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#order'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the relative order of this compared to its siblings. For example use 0 for the first, 1 for the second.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#order'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#order'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`order`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The parameters of a function or constraint component.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`parameter`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#parameter'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Parameter'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies the property path of a property shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#path'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#pattern'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#pattern'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a regular expression pattern that the string representations of the value nodes must match.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#pattern'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#pattern'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`pattern`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#pattern'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#predicate'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#predicate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An expression producing the properties that shall be inferred as predicates.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#predicate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#predicate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#predicate'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`predicate`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The prefix of a prefix declaration.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`prefix`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefixes'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefixes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The prefixes that shall be applied before parsing the associated SPARQL query.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefixes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefixes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefixes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`prefixes`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#prefixes'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape to its property shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`property`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#property'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The validator(s) used to evaluate a constraint in the context of a property shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`property validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The maximum number of value nodes that can conform to the shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`qualified max count`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The minimum number of value nodes that must conform to the shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`qualified min count`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The shape that a specified number of values must conform to.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`qualified value shape`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Can be used to mark the qualified value shape to be disjoint with its sibling shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`qualified value shapes disjoint`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#result'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#result'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The validation results contained in a validation report.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#result'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#result'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#result'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`result`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#result'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`result annotation`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Human-readable messages explaining the cause of the result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`result message`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultPath'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultPath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The path of a validation result, based on the path of the validated property shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultPath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultPath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultPath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`result path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultPath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The severity of the result, e.g. warning.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`result severity`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#returnType'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#returnType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The expected type of values returned by the associated function.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#returnType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Function'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#returnType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#returnType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`return type`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#returnType'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#rule'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The rules linked to a shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`rule`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#rule'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Rule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#select'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#select'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The SPARQL SELECT query to execute.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#select'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#select'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#select'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`select`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#select'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#severity'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Defines the severity that validation results produced by a shape must have. Defaults to sh:Violation.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`severity`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#severity'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Severity'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Shapes graphs that should be used when validating this data graph.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`shapes graph`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`If true then the validation engine was certain that the shapes graph has passed all SHACL syntax requirements during the validation process.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`shapes graph well-formed`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The constraint that was validated when the result was produced.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`source constraint`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The constraint component that is the source of the result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`source constraint component`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The shape that is was validated when the result was produced.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`source shape`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape with SPARQL constraints.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`constraint (in SPARQL)`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#sparql'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#subject'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#subject'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An expression producing the resources that shall be inferred as subjects.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#subject'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#subject'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#subject'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`subject`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Suggested shapes graphs for this ontology. The values of this property may be used in the absence of specific sh:shapesGraph statements.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`suggested shapes graph`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#target'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape to a target specified by an extension language, for example instances of sh:SPARQLTarget.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`target`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#target'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Target'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetClass'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetClass'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape to a class, indicating that all instances of the class must conform to the shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetClass'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetClass'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetClass'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`target class`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetClass'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetNode'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape to individual nodes, indicating that these nodes must conform to the shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetNode'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`target node`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape to a property, indicating that all all objects of triples that have the given property as their predicate must conform to the shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`target objects of`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Links a shape to a property, indicating that all subjects of triples that have the given property as their predicate must conform to the shape.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#Shape'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`target subjects of`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#this'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#this'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A node expression that represents the current focus node.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#this'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#this'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`this`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#union'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#union'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`A list of node expressions that shall be used together.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#union'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#union'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`union`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies whether all node values must have a unique (or no) language tag.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`unique languages`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#update'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#update'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The SPARQL UPDATE to execute.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#update'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#update'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#update'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`update`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#update'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2001/XMLSchema#string'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#validator'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The validator(s) used to evaluate constraints of either node or property shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`validator`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#validator'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/ns/shacl#Validator'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#value'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#value'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`An RDF node that has caused the result.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#value'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'),
      factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#value'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#value'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`value`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#xone'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#xone'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`Specifies a list of shapes so that the value nodes must conform to exactly one of the shapes.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#xone'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#xone'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`exactly one`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#xone'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (single) value of this property represents a path that is matched zero or more times.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`zero or more path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'),
      factory.literal(`The (single) value of this property represents a path that is matched zero or one times.`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'),
      factory.namedNode('http://www.w3.org/ns/shacl#'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'),
      factory.literal(`zero or one path`, 'en'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'),
      factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n0'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n0'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
      blankNodes['b0_c14n1'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n1'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n1'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
      blankNodes['b0_c14n5'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n2'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
      factory.namedNode('http://www.w3.org/ns/shacl#Literal'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n2'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
      blankNodes['b0_c14n0'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n3'],
      factory.namedNode('http://www.w3.org/ns/shacl#namespace'),
      factory.literal(`http://www.w3.org/ns/shacl#`, factory.namedNode('http://www.w3.org/2001/XMLSchema#string')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n3'],
      factory.namedNode('http://www.w3.org/ns/shacl#prefix'),
      factory.literal(`sh`, factory.namedNode('http://www.w3.org/2001/XMLSchema#string')),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n4'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRI'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n4'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
      blankNodes['b0_c14n2'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n5'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
      factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n5'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n6'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
      factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'),
      factory.namedNode('http://www.w3.org/ns/shacl#')
    ),
    factory.quad(
      blankNodes['b0_c14n6'],
      factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
      blankNodes['b0_c14n4'],
      factory.namedNode('http://www.w3.org/ns/shacl#')
    )
  ]
}


/***/ }),
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "as", function() { return /* reexport */ as; });
__webpack_require__.d(__webpack_exports__, "cc", function() { return /* reexport */ cc; });
__webpack_require__.d(__webpack_exports__, "cnt", function() { return /* reexport */ cnt; });
__webpack_require__.d(__webpack_exports__, "csvw", function() { return /* reexport */ csvw; });
__webpack_require__.d(__webpack_exports__, "ctag", function() { return /* reexport */ ctag; });
__webpack_require__.d(__webpack_exports__, "dbo", function() { return /* reexport */ dbo; });
__webpack_require__.d(__webpack_exports__, "dc11", function() { return /* reexport */ dc11; });
__webpack_require__.d(__webpack_exports__, "dcat", function() { return /* reexport */ dcat; });
__webpack_require__.d(__webpack_exports__, "dcterms", function() { return /* reexport */ dcterms; });
__webpack_require__.d(__webpack_exports__, "dqv", function() { return /* reexport */ dqv; });
__webpack_require__.d(__webpack_exports__, "dtype", function() { return /* reexport */ dtype; });
__webpack_require__.d(__webpack_exports__, "duv", function() { return /* reexport */ duv; });
__webpack_require__.d(__webpack_exports__, "foaf", function() { return /* reexport */ foaf; });
__webpack_require__.d(__webpack_exports__, "frbr", function() { return /* reexport */ frbr; });
__webpack_require__.d(__webpack_exports__, "geo", function() { return /* reexport */ geo; });
__webpack_require__.d(__webpack_exports__, "geof", function() { return /* reexport */ geof; });
__webpack_require__.d(__webpack_exports__, "geor", function() { return /* reexport */ geor; });
__webpack_require__.d(__webpack_exports__, "gml", function() { return /* reexport */ gml; });
__webpack_require__.d(__webpack_exports__, "gn", function() { return /* reexport */ gn; });
__webpack_require__.d(__webpack_exports__, "gr", function() { return /* reexport */ gr; });
__webpack_require__.d(__webpack_exports__, "grddl", function() { return /* reexport */ grddl; });
__webpack_require__.d(__webpack_exports__, "gtfs", function() { return /* reexport */ gtfs; });
__webpack_require__.d(__webpack_exports__, "http", function() { return /* reexport */ http; });
__webpack_require__.d(__webpack_exports__, "hydra", function() { return /* reexport */ hydra; });
__webpack_require__.d(__webpack_exports__, "ical", function() { return /* reexport */ ical; });
__webpack_require__.d(__webpack_exports__, "ldp", function() { return /* reexport */ ldp; });
__webpack_require__.d(__webpack_exports__, "lvont", function() { return /* reexport */ lvont; });
__webpack_require__.d(__webpack_exports__, "ma", function() { return /* reexport */ ma; });
__webpack_require__.d(__webpack_exports__, "oa", function() { return /* reexport */ oa; });
__webpack_require__.d(__webpack_exports__, "og", function() { return /* reexport */ og; });
__webpack_require__.d(__webpack_exports__, "org", function() { return /* reexport */ org; });
__webpack_require__.d(__webpack_exports__, "owl", function() { return /* reexport */ owl; });
__webpack_require__.d(__webpack_exports__, "prov", function() { return /* reexport */ prov; });
__webpack_require__.d(__webpack_exports__, "qb", function() { return /* reexport */ qb; });
__webpack_require__.d(__webpack_exports__, "qudt", function() { return /* reexport */ qudt; });
__webpack_require__.d(__webpack_exports__, "qudtv", function() { return /* reexport */ qudtv; });
__webpack_require__.d(__webpack_exports__, "rdf", function() { return /* reexport */ rdf; });
__webpack_require__.d(__webpack_exports__, "rdau", function() { return /* reexport */ rdau; });
__webpack_require__.d(__webpack_exports__, "rdfa", function() { return /* reexport */ rdfa; });
__webpack_require__.d(__webpack_exports__, "rdfs", function() { return /* reexport */ rdfs; });
__webpack_require__.d(__webpack_exports__, "rev", function() { return /* reexport */ rev; });
__webpack_require__.d(__webpack_exports__, "rif", function() { return /* reexport */ rif; });
__webpack_require__.d(__webpack_exports__, "rr", function() { return /* reexport */ rr; });
__webpack_require__.d(__webpack_exports__, "rss", function() { return /* reexport */ rss; });
__webpack_require__.d(__webpack_exports__, "sem", function() { return /* reexport */ sem; });
__webpack_require__.d(__webpack_exports__, "schema", function() { return /* reexport */ schema; });
__webpack_require__.d(__webpack_exports__, "sd", function() { return /* reexport */ sd; });
__webpack_require__.d(__webpack_exports__, "sdmx", function() { return /* reexport */ sdmx; });
__webpack_require__.d(__webpack_exports__, "sf", function() { return /* reexport */ sf; });
__webpack_require__.d(__webpack_exports__, "sh", function() { return /* reexport */ sh; });
__webpack_require__.d(__webpack_exports__, "sioc", function() { return /* reexport */ sioc; });
__webpack_require__.d(__webpack_exports__, "skos", function() { return /* reexport */ skos; });
__webpack_require__.d(__webpack_exports__, "skosxl", function() { return /* reexport */ skosxl; });
__webpack_require__.d(__webpack_exports__, "sosa", function() { return /* reexport */ sosa; });
__webpack_require__.d(__webpack_exports__, "ssn", function() { return /* reexport */ ssn; });
__webpack_require__.d(__webpack_exports__, "time", function() { return /* reexport */ time; });
__webpack_require__.d(__webpack_exports__, "v", function() { return /* reexport */ v; });
__webpack_require__.d(__webpack_exports__, "vaem", function() { return /* reexport */ vaem; });
__webpack_require__.d(__webpack_exports__, "vann", function() { return /* reexport */ vann; });
__webpack_require__.d(__webpack_exports__, "vcard", function() { return /* reexport */ vcard; });
__webpack_require__.d(__webpack_exports__, "_void", function() { return /* reexport */ _void; });
__webpack_require__.d(__webpack_exports__, "vs", function() { return /* reexport */ vs; });
__webpack_require__.d(__webpack_exports__, "wdr", function() { return /* reexport */ wdr; });
__webpack_require__.d(__webpack_exports__, "wdrs", function() { return /* reexport */ wdrs; });
__webpack_require__.d(__webpack_exports__, "wgs", function() { return /* reexport */ wgs; });
__webpack_require__.d(__webpack_exports__, "xhv", function() { return /* reexport */ xhv; });
__webpack_require__.d(__webpack_exports__, "xkos", function() { return /* reexport */ xkos; });
__webpack_require__.d(__webpack_exports__, "xml", function() { return /* reexport */ xml; });
__webpack_require__.d(__webpack_exports__, "xsd", function() { return /* reexport */ xsd; });

// EXTERNAL MODULE: ./node_modules/@rdfjs/namespace/index.js
var namespace = __webpack_require__(0);
var namespace_default = /*#__PURE__*/__webpack_require__.n(namespace);

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/as.js

const as = namespace_default()("http://www.w3.org/ns/activitystreams#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/cc.js

const cc = namespace_default()("http://creativecommons.org/ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/cnt.js

const cnt = namespace_default()("http://www.w3.org/2011/content#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/csvw.js

const csvw = namespace_default()("http://www.w3.org/ns/csvw#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ctag.js

const ctag = namespace_default()("http://commontag.org/ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dbo.js

const dbo = namespace_default()("http://dbpedia.org/ontology/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dc11.js

const dc11 = namespace_default()("http://purl.org/dc/elements/1.1/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dcat.js

const dcat = namespace_default()("http://www.w3.org/ns/dcat#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dcterms.js

const dcterms = namespace_default()("http://purl.org/dc/terms/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dqv.js

const dqv = namespace_default()("http://www.w3.org/ns/dqv#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dtype.js

const dtype = namespace_default()("http://www.linkedmodel.org/schema/dtype#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/duv.js

const duv = namespace_default()("http://www.w3.org/ns/duv#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/foaf.js

const foaf = namespace_default()("http://xmlns.com/foaf/0.1/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/frbr.js

const frbr = namespace_default()("http://purl.org/vocab/frbr/core#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/geo.js

const geo = namespace_default()("http://www.opengis.net/ont/geosparql#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/geof.js

const geof = namespace_default()("http://www.opengis.net/def/function/geosparql/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/geor.js

const geor = namespace_default()("http://www.opengis.net/def/rule/geosparql/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gml.js

const gml = namespace_default()("http://www.opengis.net/ont/gml#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gn.js

const gn = namespace_default()("http://www.geonames.org/ontology#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gr.js

const gr = namespace_default()("http://purl.org/goodrelations/v1#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/grddl.js

const grddl = namespace_default()("http://www.w3.org/2003/g/data-view#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gtfs.js

const gtfs = namespace_default()("http://vocab.gtfs.org/terms#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/http.js

const http = namespace_default()("http://www.w3.org/2011/http#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/hydra.js

const hydra = namespace_default()("http://www.w3.org/ns/hydra/core#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ical.js

const ical = namespace_default()("http://www.w3.org/2002/12/cal/icaltzd#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ldp.js

const ldp = namespace_default()("http://www.w3.org/ns/ldp#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/lvont.js

const lvont = namespace_default()("http://lexvo.org/ontology#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ma.js

const ma = namespace_default()("http://www.w3.org/ns/ma-ont#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/oa.js

const oa = namespace_default()("http://www.w3.org/ns/oa#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/og.js

const og = namespace_default()("http://ogp.me/ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/org.js

const org = namespace_default()("http://www.w3.org/ns/org#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/owl.js

const owl = namespace_default()("http://www.w3.org/2002/07/owl#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/prov.js

const prov = namespace_default()("http://www.w3.org/ns/prov#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/qb.js

const qb = namespace_default()("http://purl.org/linked-data/cube#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/qudt.js

const qudt = namespace_default()("http://qudt.org/schema/qudt/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/qudtv.js

const qudtv = namespace_default()("http://qudt.org/vocab/qudt/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdf.js

const rdf = namespace_default()("http://www.w3.org/1999/02/22-rdf-syntax-ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdau.js

const rdau = namespace_default()("http://rdaregistry.info/Elements/u/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdfa.js

const rdfa = namespace_default()("http://www.w3.org/ns/rdfa#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdfs.js

const rdfs = namespace_default()("http://www.w3.org/2000/01/rdf-schema#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rev.js

const rev = namespace_default()("http://purl.org/stuff/rev#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rif.js

const rif = namespace_default()("http://www.w3.org/2007/rif#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rr.js

const rr = namespace_default()("http://www.w3.org/ns/r2rml#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rss.js

const rss = namespace_default()("http://purl.org/rss/1.0/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sem.js

const sem = namespace_default()("http://semanticweb.cs.vu.nl/2009/11/sem/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/schema.js

const schema = namespace_default()("http://schema.org/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sd.js

const sd = namespace_default()("http://www.w3.org/ns/sparql-service-description#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sdmx.js

const sdmx = namespace_default()("http://purl.org/linked-data/sdmx#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sf.js

const sf = namespace_default()("http://www.opengis.net/ont/sf#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sh.js

const sh = namespace_default()("http://www.w3.org/ns/shacl#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sioc.js

const sioc = namespace_default()("http://rdfs.org/sioc/ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/skos.js

const skos = namespace_default()("http://www.w3.org/2004/02/skos/core#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/skosxl.js

const skosxl = namespace_default()("http://www.w3.org/2008/05/skos-xl#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sosa.js

const sosa = namespace_default()("http://www.w3.org/ns/sosa/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ssn.js

const ssn = namespace_default()("http://www.w3.org/ns/ssn/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/time.js

const time = namespace_default()("http://www.w3.org/2006/time#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/v.js

const v = namespace_default()("http://rdf.data-vocabulary.org/#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vaem.js

const vaem = namespace_default()("http://www.linkedmodel.org/schema/vaem#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vann.js

const vann = namespace_default()("http://purl.org/vocab/vann/");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vcard.js

const vcard = namespace_default()("http://www.w3.org/2006/vcard/ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/void.js

const _void = namespace_default()("http://rdfs.org/ns/void#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vs.js

const vs = namespace_default()("http://www.w3.org/2003/06/sw-vocab-status/ns#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/wdr.js

const wdr = namespace_default()("http://www.w3.org/2007/05/powder#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/wdrs.js

const wdrs = namespace_default()("http://www.w3.org/2007/05/powder-s#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/wgs.js

const wgs = namespace_default()("http://www.w3.org/2003/01/geo/wgs84_pos#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xhv.js

const xhv = namespace_default()("http://www.w3.org/1999/xhtml/vocab#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xkos.js

const xkos = namespace_default()("http://rdf-vocabulary.ddialliance.org/xkos#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xml.js

const xml = namespace_default()("http://www.w3.org/XML/1998/namespace");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xsd.js

const xsd = namespace_default()("http://www.w3.org/2001/XMLSchema#");

// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/index.js







































































/***/ })
/******/ ]);
